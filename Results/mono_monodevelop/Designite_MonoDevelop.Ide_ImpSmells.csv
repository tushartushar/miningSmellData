Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ProcessKeyEventCore,The method has 126 lines of code.
Long Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The method has 138 lines of code.
Long Method,MonoDevelop.Components.Commands,CommandMenuItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandMenuItem.cs,Update,The method has 110 lines of code.
Long Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,ParseBody,The method has 120 lines of code.
Long Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetDocumentationMarkup,The method has 136 lines of code.
Long Method,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The method has 192 lines of code.
Long Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddFilesToProject,The method has 181 lines of code.
Long Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,The method has 212 lines of code.
Long Method,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The method has 205 lines of code.
Long Method,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The method has 137 lines of code.
Long Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,BackgroundLoadWorkspace,The method has 112 lines of code.
Long Method,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,Run,The method has 178 lines of code.
Long Method,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,The method has 135 lines of code.
Long Method,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadStyle,The method has 123 lines of code.
Long Method,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The method has 122 lines of code.
Long Method,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The method has 121 lines of code.
Long Method,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,CreateComponents,The method has 133 lines of code.
Long Method,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The method has 230 lines of code.
Long Method,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The method has 202 lines of code.
Long Method,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The method has 145 lines of code.
Long Method,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The method has 111 lines of code.
Long Method,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The method has 340 lines of code.
Long Method,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,FillVariables,The method has 120 lines of code.
Long Method,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The method has 130 lines of code.
Long Method,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The method has 288 lines of code.
Long Method,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,LoadFileTemplate,The method has 104 lines of code.
Long Method,MonoDevelop.Ide.Templates,ProjectTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplate.cs,ProjectTemplate,The method has 111 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,The method has 108 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The method has 103 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The method has 121 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The method has 123 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The method has 191 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The method has 110 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The method has 135 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The method has 108 lines of code.
Long Method,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The method has 120 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The method has 170 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The method has 142 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The method has 183 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The method has 254 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The method has 213 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The method has 117 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The method has 165 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The method has 138 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The method has 218 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The method has 111 lines of code.
Long Method,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The method has 111 lines of code.
Long Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The method has 183 lines of code.
Long Method,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The method has 232 lines of code.
Long Method,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,The method has 116 lines of code.
Long Method,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The method has 124 lines of code.
Long Method,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The method has 202 lines of code.
Long Method,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The method has 110 lines of code.
Long Method,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The method has 117 lines of code.
Long Method,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The method has 154 lines of code.
Long Method,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The method has 126 lines of code.
Long Method,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,RepositionWindow,The method has 107 lines of code.
Long Method,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The method has 124 lines of code.
Long Method,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The method has 137 lines of code.
Long Method,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The method has 113 lines of code.
Long Method,MonoDevelop.Components.Commands.ExtensionNodes,CommandCodon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands.ExtensionNodes\CommandCodon.cs,CreateInstance,The method has 104 lines of code.
Long Method,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The method has 105 lines of code.
Long Method,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The method has 208 lines of code.
Long Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,SizeAllocate,The method has 134 lines of code.
Long Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,The method has 110 lines of code.
Long Method,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The method has 148 lines of code.
Long Method,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The method has 201 lines of code.
Long Method,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The method has 192 lines of code.
Long Method,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The method has 239 lines of code.
Long Method,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The method has 107 lines of code.
Long Method,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The method has 124 lines of code.
Long Method,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The method has 148 lines of code.
Long Method,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The method has 111 lines of code.
Long Method,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The method has 147 lines of code.
Long Method,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The method has 101 lines of code.
Long Method,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The method has 179 lines of code.
Long Method,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The method has 178 lines of code.
Long Method,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The method has 203 lines of code.
Long Method,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The method has 136 lines of code.
Long Method,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The method has 195 lines of code.
Long Method,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The method has 278 lines of code.
Long Method,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The method has 143 lines of code.
Long Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,Update,The method has 120 lines of code.
Long Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The method has 106 lines of code.
Long Method,MonoDevelop.Components.MainToolbar,ConfigurationMerger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ConfigurationMerger.cs,Load,The method has 120 lines of code.
Long Method,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The method has 245 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The method has 108 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting,Highlighter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlighting.cs,GetColoredSegments,The method has 159 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The method has 225 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,CompileRegex,The method has 206 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,Push,The method has 188 lines of code.
Long Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The method has 100 lines of code.
Long Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The method has 164 lines of code.
Long Method,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,SMS,The method has 109 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,RegexBoyerMoore,The method has 189 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The method has 147 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateFindFirstChar,The method has 426 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateOneCode,The method has 1424 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateRegexType,The method has 121 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,CalculateFC,The method has 138 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The method has 698 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanRegex,The method has 207 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanCharClass,The method has 153 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The method has 228 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBasicBackslash,The method has 103 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanDollar,The method has 106 lines of code.
Long Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The method has 242 lines of code.
Long Method,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The method has 112 lines of code.
Long Method,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,RealOpenFile,The method has 121 lines of code.
Complex Method,MonoDevelop.Components.Commands,CommandEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandEntry.cs,CreateToolItem,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,CanUseBinding,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ProcessKeyEventCore,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,LoadConflicts,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,GetCommandInfo,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommandFromAccel,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,GetTypeHandlerInfo,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,GetNextCommandTarget,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,UpdateStatus,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Commands,CommandMenu,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandMenu.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components.Commands,CommandMenuItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandMenuItem.cs,Update,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Components.Commands,CommandToggleToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandToggleToolButton.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Commands,CommandToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandToolButton.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,AccelToKeyPartial,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,ShortcutToBinding,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,SetBinding,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,AppleMapKeyToSymbol,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,CheckKeyBindingConflicts,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,LoadScheme,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Commands,DefaultStringTagProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\CustomStringTagProvider.cs,GetTagValue,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.Ide.Commands,ViewListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Commands,CloseAllHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileTabCommands.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseProjection,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,TryOpenDocumentInWorkspace,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,OnSolutionItemAdded,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,BreakLines,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,EscapeText,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,UnescapeText,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,ParseBody,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetDocumentationMarkup,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,Stock,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\StockIcons.cs,GetAccess,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,Stock,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\StockIcons.cs,GetSource,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.TypeSystem,FoldingUtilities,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\ParsedDocument.cs,ToFolds,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Ide.TypeSystem,MarkupUtilities,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MarkupUtilities.cs,AppendEscapedString,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,SelectOverload,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ReloadProjects,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyMetadataReferenceAdded,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,UpdateFileContent,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,GetReturnType,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,MetadataReferenceHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.MetadataReferenceHandler.cs,AddReferences,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,LoadProject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateProjectInfosFromCache,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateDocuments,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.TypeSystem,WorkspaceFilesCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,LoadCache,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.TypeSystem,ProjectCacheInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,JumpTo,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,JumpToMetadata,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,SaveAsyncInternal,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ShowOptions,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddReferenceToProject,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,RemoveSolutionItem,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ExecuteAsync,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CheckAndBuildForExecute,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,FastCheckNeedsBuild,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,BuildDone,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddFilesToProject,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,Cyclomatic complexity of the method is 41
Complex Method,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide,SolutionItemBuildBatch,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnKeyPressEvent,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,OpenFilesAsync,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,GetProjectContainingFile,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,Close,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,CloseWorkspaceItem,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,BackgroundLoadWorkspace,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,OnCheckWorkspaceItem,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,OnCheckProject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,CheckFileRemoved,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,LoadStockIcon,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,EnsureStockIconIsLoaded,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,GetComposedIcon,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,Run,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui,DisplayBindingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DisplayBindingService.cs,GetFileViewers,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui,ViewCommandHandlers,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ViewCommandHandlers.cs,OnRemoveTrailingWhiteSpaces,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui,ConfigurationComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,RefreshCombo,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,SaveTask,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,SaveAsTask,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,ShowSaveUI,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,Close,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OnStoringWorkspaceUserPreferences,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OnLoadingWorkspaceUserPreferences,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,CreateMonitorPad,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetSearchProgressMonitor,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui,CommandDockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DockItemToolbarLoader.cs,CreateWidget,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui,ToolButtonStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DockItemToolbarLoader.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui,DocumentRegistry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentRegistry.cs,HandleFileServiceChange,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui,DocumentRegistry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentRegistry.cs,CommitViewChange,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,InitializeLayout,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui,WorkbenchStatusBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\WorkbenchStatusBar.cs,Attach,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,PortableRuntimeSelectorDialog,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,GetShortName,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,HandlePolicyContainerPolicyChanged,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,LoadPanelContents,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,SetProjectJsonValues,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,MigrateToProjectJson,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,UpdateCommentTags,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,GetNextLocation,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,GetPreviousLocation,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,FillVariables,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,InsertTemplateContents,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,ConvertToTemplate,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,CaretPositionChanged,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.CodeTemplates,CodeTemplateVariable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateVariable.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,LoadFileTemplate,Cyclomatic complexity of the method is 25
Complex Method,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,CreateFile,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,IsValidForProject,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,CreateProjectDescriptor,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,InitializeItem,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Templates,ProjectTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplate.cs,ProjectTemplate,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,AddFileToProjectAsync,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,AddFileToProject,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,GetFileName,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateFileContent,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateFileContentAsync,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.Templates,SolutionDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SolutionDescriptor.cs,CreateSolutionDescriptor,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Templates,SolutionDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SolutionDescriptor.cs,CreateEntry,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Ide.Templates,CodeTranslationFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeTranslationFileDescriptionTemplate.cs,CreateContent,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Templates,ClrVersionFileTemplateCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ClrVersionFileTemplateCondition.cs,ShouldEnableFor,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Templates,ParentProjectFileTemplateCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ParentProjectFileTemplateCondition.cs,ShouldEnableFor,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Ide.Templates,XmlCodeDomReader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\XmlCodeDomReader.cs,GenerateElement,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.Templates,XmlCodeDomReader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\XmlCodeDomReader.cs,GenerateCollection,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Templates,FileTemplateTagsModifier,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateTagsModifier.cs,ModifyTags,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineProjectTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineProjectTemplatingProvider.cs,ProcessTemplate,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineSolutionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineSolutionTemplate.cs,ParseDescription,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Templates,MicrosoftTemplateEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngine.cs,UpdateCache,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui.Content,DocumentStateTracker<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\DocumentStateTracker.cs,UpdateEngine,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,AddinLoadErrorDialog,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FillViewers,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,RemoveSection,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,ShowPage,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePage,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,FillPolicies,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Dialogs,ConfigurationData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsDialog.cs,Update,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Dialogs,ConfigurationData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsDialog.cs,AddConfiguration,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui.Dialogs,ConfigurationData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsDialog.cs,RenameConfiguration,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Dialogs,GtkAlertDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\GtkAlertDialog.cs,GtkAlertDialog,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,AddInsPanelWidget,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Store,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,CreatePanelWidget,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,OnAccelEntryKeyPress,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,UpdateConflictsWarning,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HandleKeyTreeMotion,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Pads,TaskListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\TaskListPad.cs,OnContentSwitched,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,OnTaskCopied,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,GetFolderContent,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,CanDropNode,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,Cyclomatic complexity of the method is 42
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,AddExistingFolder,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,RenameItem,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,DeleteMultipleItems,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,OnSetBuildActionUpdate,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,DeleteMultipleItems,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,OnExcludeFoldersFromProject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,OnSystemFileCreated,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,RemoveFile,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectReferenceFolderNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectReferenceFolderNodeBuilder.cs,OnNodeDrop,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesBuilderExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,OnSystemFileDeleted,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Pads.ProjectPad,FileOperationsCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FileOperationsBuilderExtension.cs,OnOpenFolder,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetBuilders,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,CheckAndDrop,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,GetNodeAtObject,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,GetDelegatedCommandTarget,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,StartLabelEditInternal,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,RestoreTreeState,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,GetBuilderChain,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,CompareNodes,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,UnregisterNode,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetupLayout,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.Components,NodeState,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\NodeState.cs,WriteTo,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,TransactedTreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TransactedTreeBuilder.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Components,TransactedNodeStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TransactedTreeBuilder.cs,CommitNode,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,AddEntry,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.Components,AnimatedIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Gui.Components,XwtInfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,XwtInfoBar,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.CodeFormatting,FormatBufferHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\CodeFormattingCommands.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,FindInFilesDialog,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,GetScope,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.FindInFiles,WholeProjectScope,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\Scope.cs,GetFiles,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.FindInFiles,DirectoryScope,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\Scope.cs,GetFileNames,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.FindInFiles,PatternMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FilterOptions.cs,Match,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,RegexSearch,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,Search,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,FindPosition,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.FindInFiles,PangoHelper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorMarkupBackground,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GenerateExecutionModeCommands,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetExecutionModeCommands,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetCustomModes,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,LoadEditors,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Execution,ExecutionModeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeSelectorDialog.cs,LoadModes,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Extensions,FileTypeCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Extensions\FileTypeCondition.cs,Evaluate,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.Extensions,StartupInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Extensions\StartupInfo.cs,StartupInfo,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,UpdateAsync,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,UpdateCompleted,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components,FixedWidthWrapLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FixedWidthWrapLabel.cs,breakText,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Components,TooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipWindow.cs,OnSizeAllocated,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components,ConsoleView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ConsoleView.cs,ProcessReturn,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components,ConsoleView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ConsoleView.cs,ProcessKeyPressEvent,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ReplaceWithWidget,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RoundedRectangle,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components,DropDownBoxListWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,ProcessKey,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components,Tabstrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,RemoveTab,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components,HeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HeaderBox.cs,OnExposeEvent,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,Cyclomatic complexity of the method is 32
Complex Method,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetTagForAttributes,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Components,ContextMenuExtensionsGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuExtensionsGtk.cs,CreateMenuItem,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components,Control,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Control.cs,GetNativeWidget,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateGtkTheme,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,RepositionWindow,Cyclomatic complexity of the method is 27
Complex Method,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,Cyclomatic complexity of the method is 32
Complex Method,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,Cyclomatic complexity of the method is 29
Complex Method,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Components.Chart,DateTimeAxis,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Commands.ExtensionNodes,CommandCodon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands.ExtensionNodes\CommandCodon.cs,CreateInstance,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Components.Extensions,SelectFileDialog<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Extensions\ISelectFileDialog.cs,SetGtkFileFilters,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.PropertyGrid,EditorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\EditorManager.cs,GetEditorType,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Populate,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsEditorCell.cs,UpdateFlags,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.PropertyGrid.PropertyEditors,IntRangeEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\IntRange.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.PropertyGrid.PropertyEditors,PropertyTextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\PropertyTextEditor.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Theming,GtkColors,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkColors.cs,RefreshColors,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateShow,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateHide,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.Docking,DockContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,LoadLayout,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Docking,DockContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,LayoutWidgets,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,InRegion,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,AddObject,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,SizeAllocate,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,SizeRequest,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,UpdateNotebook,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,AddRemoveWidgets,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDefaultSize,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetMinSize,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,DrawSeparators,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,IsChildNextToMargin,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,SetBarDocPosition,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,EstimateBarDocPosition,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Docking,DockItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItem.cs,GetToolbar,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.Docking,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\TabStrip.cs,UpdateEllipsize,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Components.Docking,DockVisualStyle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockVisualStyle.cs,CopyValuesFrom,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,UpdateVisualStyle,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,GetNextWidgetToFocus,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionData.cs,Compare,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,FindMatchedEntry,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,Iterate,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.CodeCompletion,TaggedTextUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TaggedTextUtil.cs,GetThemeColor,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Ide.CodeCompletion,SignatureHelpParameterHintingData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\SignatureHelpParameterHintingData.cs,CreateTooltipInformation,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,ShowListWindow,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,DelayedTooltipShowAsync,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKeyEvent,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,Cyclomatic complexity of the method is 52
Complex Method,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PostProcessKey,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Desktop,RecentItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\RecentItem.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Desktop,PlatformService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\PlatformService.cs,GetIconForType,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,AddTemplate,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,OpenEvent,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,InitializeComponents,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,HandleClicked,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,ConfirmProjectDeleteDialog,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,GetFilesToDelete,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.Projects,ProjectReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectReferencePanel.cs,PopulateListView,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.Projects,ProjectReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectReferencePanel.cs,ProjectReferencesProject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects,CategoryTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,GetPoliciesDescription,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Projects,PoliciesListSummaryTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,SetPolicies,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,Reset,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,SelectDefaultTemplate,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,Create,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,CreateProject,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Navigation,HistoryList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Navigation\HistoryList.cs,MoveTo,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.AutoTest,AutoTestClientSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestClientSession.cs,StartApplication,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,CompareObjects,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,WelcomePageFeedItem,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,SummaryHtmlToPango,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,HandleSearchEntryKeyPressed,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,OnDestroyed,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetItemAt,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,SelectItemDown,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,SelectNextCategory,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,ProcessKey,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Components.MainToolbar,SearchResultCollector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,ReportResult,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,Cyclomatic complexity of the method is 20
Complex Method,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.MainToolbar,ConfigurationMerger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ConfigurationMerger.cs,Load,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Components.MainToolbar,ConfigurationMerger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ConfigurationMerger.cs,ResolveConfiguration,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.MainToolbar,ResultsDataSource,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ResultsDataSource.cs,SortUpToN,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,FillRuntimes,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,FillRuntimesForProject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,SelectActiveRuntime,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.MainToolbar,ButtonBarButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetTagKinds,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.MainToolbar,INavigateToSearchResultExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.DeclaredSymbolInfoResult.cs,GetStockIconForNavigableItem,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.MainToolbar,INavigateToSearchResultExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.DeclaredSymbolInfoResult.cs,GetDisplayStringForNavigableItem,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.TextEditing,TextEditorService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TextEditing\TextEditorService.cs,NotifyLineCountChanged,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,UpdateContextOptions,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,SetOrUpdateProjections,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,InitializeProjectionExtensions,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor,TextEditorViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditorViewContent.cs,OnGetContents,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor,EditActions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditActions.cs,TransposeCharacters,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor,SegmentTree<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,GetSegmentsOverlapping,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor,SegmentTree<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,UpdateOnTextReplace,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Ide.Editor,TreeSegment,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,UpdateAugmentedData,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor,DynamicAbbrevHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Commands\DynamicAbbrevHandler.cs,Run,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,Cyclomatic complexity of the method is 23
Complex Method,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,GuessBestMethodOverload,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Extension,KeyDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\KeyDescriptor.cs,ConvertKey,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Editor.Extension,KeyDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\KeyDescriptor.cs,ConvertKey,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Editor.Extension,ErrorHandlerTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\ErrorHandlerTextEditorExtension.cs,UpdateQuickTasks,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Extension,AutoInsertBracketTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\AutoInsertBracketTextEditorExtension.cs,GetEditorExtensions,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Extension,BlockStructureFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BlockStructureFoldingTextEditorExtension.cs,UpdateFoldings,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,TryScanJSonStyle,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,TryScanTextMateSyntax,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,TryScanSublimeSyntax,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,GetSyntaxHighlightingDefinitionByName,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Highlighter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlighting.cs,GetColoredSegments,Cyclomatic complexity of the method is 31
Complex Method,MonoDevelop.Ide.Editor.Highlighting,PObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,MakeObjectRefs,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadArray,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadDict,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting,ReadWriteContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadObject,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,ReadWriteContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,WriteObject,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting,EditorTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorTheme.cs,GetColor,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,GetContext,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting,SyntaxContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,PrepareMatches,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,CreateChunkStyle,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,LoadFrom,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadHighlighting,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadMatch,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReplaceVariables,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,CompileRegex,Cyclomatic complexity of the method is 54
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ConvertCharacterProperty,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadSnippet,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,Push,Cyclomatic complexity of the method is 54
Complex Method,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,Generate,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,AddChar,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ConvertUnicodeCategory,Cyclomatic complexity of the method is 19
Complex Method,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,LoadEditorTheme,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,ReadPatterns,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,ReadMatch,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,Convert,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting,StackMatchExpression,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\StackMatchExpression.cs,Parse,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Components.DockNotebook,DockNotebook,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebook.cs,OnDragDataReceived,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnMotionNotifyEvent,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnButtonPressEvent,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,Cyclomatic complexity of the method is 34
Complex Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnFocused,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,SMS,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,SearchMatchingBracketForward,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,GetLastSourceCodePosition,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,SearchMatchingBracketBackward,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.Editor.Projection,ProjectedSemanticHighlighting,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedSemanticHighlighting.cs,GetColoredSegments,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,Text,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,ParseModifier,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,ParseKeyString,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,Regex,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,RegexBoyerMoore,Cyclomatic complexity of the method is 24
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,Scan,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,AddLowercaseRange,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,CharInCategory,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,CharInCategoryGroup,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,Canonicalize,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateFindFirstChar,Cyclomatic complexity of the method is 33
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateOneCode,Cyclomatic complexity of the method is 95
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,Prefix,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,Anchors,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,AnchorFromType,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,RegexFCFromRegexTree,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,CalculateFC,Cyclomatic complexity of the method is 30
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Stringmatch,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Refmatch,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,FindFirstChar,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,Cyclomatic complexity of the method is 127
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,Tidy,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,ReduceRep,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,ReduceAlternation,Cyclomatic complexity of the method is 15
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,ReduceConcatenation,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanRegex,Cyclomatic complexity of the method is 39
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanCharClass,Cyclomatic complexity of the method is 36
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,Cyclomatic complexity of the method is 46
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBlank,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBackslash,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBasicBackslash,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanDollar,Cyclomatic complexity of the method is 22
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanCharEscape,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,OptionFromCode,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,CountCaptures,Cyclomatic complexity of the method is 18
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,AssignNameSlots,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,IsTrueQuantifier,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,RegexReplacement,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,Replace,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,Replace,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,Split,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,Scan,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,RegexCodeFromRegexTree,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,Cyclomatic complexity of the method is 45
Complex Method,MonoDevelop.Ide.Editor.TextMate,CacheIndentEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\IIndentEngine.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.TextMate,TextMateDocumentIndentEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateDocumentIndentEngine.cs,Push,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Ide.Editor.TextMate,TextMateFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateFoldingTextEditorExtension.cs,GetFoldingsAsync,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.TextMate,TextMateFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateFoldingTextEditorExtension.cs,GenerateFoldingsFromIndentationStack,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Editor.TextMate,TextMateCompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateCompletionTextEditorExtension.cs,HandleCodeCompletionAsync,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleCurrentPagePropertyChanged,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputProcessor.cs,AddNode,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,TreeView_ButtonPressed,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,ProcessMessageEvent,Cyclomatic complexity of the method is 12
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputNode.cs,GetImage,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,FillCellBackground,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnDraw,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnButtonPressed,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,CalculateLayout,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.RoslynServices.Options,MonoDevelopGlobalOptionPersister,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\MonoDevelopGlobalOptionPersister.cs,PrintOptionKey,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.RoslynServices.Options,MonoDevelopGlobalOptionPersister,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\MonoDevelopGlobalOptionPersister.cs,Deserialize,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.Ide.Gui.Documents,DocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentController.cs,RefreshExtensions,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Gui.Documents,DocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentController.cs,InitializeExtensionChain,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,OpenDocument,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,RealOpenFile,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Ide.Gui.Documents,ExportDocumentControllerBaseAttribute,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\ExportDocumentControllerBaseAttribute.cs,CanHandle,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Ide.Gui.Documents,ContentCallbackRegistry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\ContentCallbackRegistry.cs,InvokeCallback,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Shell,GtkShellDocumentViewContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkShellDocumentViewContainer.cs,SetCurrentMode,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Ide.Gui.Shell,GtkShellDocumentViewContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkShellDocumentViewContainer.cs,UpdateAttachedTabstrips,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Gui.Shell,GtkDocumentToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Ide.Projects.FileNesting,NestingRule,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.FileNesting\NestingRule.cs,GetParentFile,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.Ide.Projects.FileNesting,NestingRulesProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.FileNesting\NestingRulesProvider.cs,LoadFromFile,Cyclomatic complexity of the method is 9
Long Parameter List,MonoDevelop.Components.Commands,ActionCommand,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\ActionCommand.cs,ActionCommand,The method has 5 parameters. Parameters: id' text' icon' accelKey' type
Long Parameter List,MonoDevelop.Components.Commands,CommandEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandEntry.cs,CreateMenuItem,The method has 6 parameters. Parameters: manager' cmd' cmdId' isArrayMaster' overrideLabel' disabledVisible
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ShowContextMenu,The method has 5 parameters. Parameters: parent' evt' entrySet' initialCommandTarget' closeHandler
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ShowContextMenu,The method has 5 parameters. Parameters: parent' x' y' entrySet' initialCommandTarget
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ShowContextMenu,The method has 5 parameters. Parameters: parent' x' y' menu' initialCommandTarget
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ShowContextMenu,The method has 5 parameters. Parameters: parent' x' y' entrySet' initialCommandTarget
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The method has 5 parameters. Parameters: commandId' dataItem' initialTarget' source' time
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The method has 5 parameters. Parameters: commandId' dataItem' initialTarget' source' sourceUpdateInfo
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The method has 6 parameters. Parameters: commandId' dataItem' initialTarget' source' time' sourceUpdateInfo
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DefaultDispatchCommand,The method has 5 parameters. Parameters: cmd' info' dataItem' target' source
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,OnCommandActivating,The method has 5 parameters. Parameters: commandId' commandInfo' dataItem' target' source
Long Parameter List,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,OnCommandActivated,The method has 6 parameters. Parameters: commandId' commandInfo' dataItem' target' source' time
Long Parameter List,MonoDevelop.Components.Commands,CommandActivationEventArgs,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,CommandActivationEventArgs,The method has 6 parameters. Parameters: commandId' commandInfo' dataItem' target' source' executionTime
Long Parameter List,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,BindingToKeysPartial,The method has 5 parameters. Parameters: binding' chordKey' chordModifier' key' modifier
Long Parameter List,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,BindingToKeys,The method has 5 parameters. Parameters: binding' chordKey' chordModifier' key' modifier
Long Parameter List,MonoDevelop.Ide.Composition,RoslynWaitIndicator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Composition\RoslynWaitIndicator.cs,Wait,The method has 5 parameters. Parameters: title' message' allowCancel' showProgress' action
Long Parameter List,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseFile,The method has 5 parameters. Parameters: project' fileName' mimeType' content' cancellationToken
Long Parameter List,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseFile,The method has 5 parameters. Parameters: project' fileName' mimeType' content' cancellationToken
Long Parameter List,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseProjection,The method has 5 parameters. Parameters: project' fileName' mimeType' content' cancellationToken
Long Parameter List,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseProjection,The method has 5 parameters. Parameters: project' fileName' mimeType' content' cancellationToken
Long Parameter List,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,DetermineFilePath,The method has 6 parameters. Parameters: id' name' filePath' docFolders' defaultFolder' createDirectory
Long Parameter List,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,TryGetMetadataReferenceMapping,The method has 5 parameters. Parameters: projectId' metadataReference' mdProject' path' systemAssemblyOpt
Long Parameter List,MonoDevelop.Ide.TypeSystem,Error,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Error.cs,Error,The method has 5 parameters. Parameters: errorType' id' message' line' column
Long Parameter List,MonoDevelop.Ide.TypeSystem,MetadataReferenceCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopMetadataReferenceManager.MetadataReferenceCache.cs,GetOrCreate,The method has 5 parameters. Parameters: cache' key' provider' path' properties
Long Parameter List,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,LoadProject,The method has 5 parameters. Parameters: p' token' oldProject' cacheInfo' framework
Long Parameter List,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateDocuments,The method has 5 parameters. Parameters: projectData' p' token' cacheInfo' oldProjectData
Long Parameter List,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,GenerateProjections,The method has 6 parameters. Parameters: f' documentMap' p' token' oldProjectData' duplicates
Long Parameter List,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateDocumentInfo,The method has 6 parameters. Parameters: data' projectName' id' filePath' projectVirtualPath' sourceCodeKind
Long Parameter List,MonoDevelop.Ide.TypeSystem,MonoDevelopAnalyzer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopAnalyzer.cs,MonoDevelopAnalyzer,The method has 6 parameters. Parameters: fullPath' hostDiagnosticUpdateSource' projectId' workspace' loader' language
Long Parameter List,MonoDevelop.Ide.TypeSystem,WorkspaceFilesCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,Update,The method has 5 parameters. Parameters: projConfig' framework' proj' projectMap' info
Long Parameter List,MonoDevelop.Ide.TypeSystem,WorkspaceFilesCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,TryGetCachedItems,The method has 5 parameters. Parameters: p' provider' projectMap' framework' info
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Execute,The method has 5 parameters. Parameters: entry' handler' configuration' runConfiguration' buildBeforeExecuting
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Execute,The method has 5 parameters. Parameters: entry' context' configuration' runConfiguration' buildBeforeExecuting
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ExecuteAsync,The method has 6 parameters. Parameters: entry' context' cs' configuration' runConfiguration' buildBeforeExecuting
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ExecuteSolutionItemAsync,The method has 5 parameters. Parameters: monitor' entry' context' configuration' runConfiguration
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CleanAsync,The method has 5 parameters. Parameters: entry' monitor' tt' isRebuilding' operationContext
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CheckAndBuildForExecute,The method has 6 parameters. Parameters: executionTargets' configuration' buildWithoutPrompting' cancelOnWarning' createPrepareExecutionTask' token
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,BuildSolutionItemAsync,The method has 5 parameters. Parameters: entry' monitor' tt' skipPrebuildCheck' operationContext
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddFileToFolder,The method has 5 parameters. Parameters: newFileList' vpathsInProject' filesInProject' file' fileBuildAction
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFiles,The method has 7 parameters. Parameters: monitor' sourceProject' sourcePath' targetProject' targetPath' removeFromSource' copyOnlyProjectFiles
Long Parameter List,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,The method has 7 parameters. Parameters: monitor' sourceProject' sourcePath' targetProject' targetPath' removeFromSource' copyOnlyProjectFiles
Long Parameter List,MonoDevelop.Ide,DesktopService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DesktopService.cs,PlaceWindow,The method has 5 parameters. Parameters: window' x' y' width' height
Long Parameter List,MonoDevelop.Ide,GtkSynchronizationContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,g_timeout_add_full,The method has 5 parameters. Parameters: priority' interval' d' data' notify
Long Parameter List,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,OpenWorkspaceItemInternal,The method has 5 parameters. Parameters: file' closeCurrent' loadPreferences' metadata' loadMonitor
Long Parameter List,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,BackgroundLoadWorkspace,The method has 6 parameters. Parameters: monitor' file' loadPreferences' reloading' timer' loadTimer
Long Parameter List,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,LoadStockIcon,The method has 8 parameters. Parameters: addin' stockId' resource' imageFile' iconId' iconSize' animation' forceWildcard
Long Parameter List,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,LoadIcon,The method has 5 parameters. Parameters: treeStore' iter' column' iconId' size
Long Parameter List,MonoDevelop.Ide,AnimatedTreeStoreIconInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,AnimatedTreeStoreIconInfo,The method has 5 parameters. Parameters: treeStore' iter' column' anim' iconId
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,ShowError,The method has 6 parameters. Parameters: parent' primaryText' secondaryText' ex' logError' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,AskQuestion,The method has 5 parameters. Parameters: parent' primaryText' secondaryText' defaultButton' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GenericAlert,The method has 5 parameters. Parameters: parent' icon' primaryText' secondaryText' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GenericAlert,The method has 5 parameters. Parameters: icon' primaryText' secondaryText' defaultButton' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GenericAlert,The method has 6 parameters. Parameters: parent' icon' primaryText' secondaryText' defaultButton' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GenericAlert,The method has 6 parameters. Parameters: icon' primaryText' secondaryText' defaultButton' cancellationToken' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GenericAlert,The method has 7 parameters. Parameters: parent' icon' primaryText' secondaryText' defaultButton' cancellationToken' buttons
Long Parameter List,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GetTextResponse,The method has 5 parameters. Parameters: parent' question' caption' initialValue' isPassword
Long Parameter List,MonoDevelop.Ide,InternalMessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,GetTextResponse,The method has 5 parameters. Parameters: parent' question' caption' initialValue' isPassword
Long Parameter List,MonoDevelop.Ide.Gui,StatusProgressMonitor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\StatusProgressMonitor.cs,StatusProgressMonitor,The method has 7 parameters. Parameters: title' iconName' showErrorDialogs' showTaskTitles' lockGui' statusSourcePad' showCancelButton
Long Parameter List,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,Document,The method has 5 parameters. Parameters: documentManager' shell' controller' controllerDescription' window
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,AddPad,The method has 5 parameters. Parameters: padContent' id' label' defaultPlacement' icon
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,AddPad,The method has 6 parameters. Parameters: padContent' id' label' defaultPlacement' defaultStatus' icon
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,ShowPad,The method has 5 parameters. Parameters: padContent' id' label' defaultPlacement' icon
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,ShowPad,The method has 6 parameters. Parameters: padContent' id' label' defaultPlacement' defaultStatus' icon
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The method has 5 parameters. Parameters: fileName' line' column' encoding' options
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The method has 6 parameters. Parameters: fileName' line' column' options' encoding' binding
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The method has 5 parameters. Parameters: fileName' project' line' column' options
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The method has 6 parameters. Parameters: fileName' project' line' column' encoding' options
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The method has 7 parameters. Parameters: fileName' project' line' column' options' encoding' binding
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The method has 8 parameters. Parameters: fileName' project' line' column' options' Encoding' binding' dockNotebook
Long Parameter List,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocumentsInContainer,The method has 5 parameters. Parameters: pm' baseDir' docViews' list' container
Long Parameter List,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetStatusProgressMonitor,The method has 7 parameters. Parameters: title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad' showCancelButton
Long Parameter List,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetOutputProgressMonitor,The method has 7 parameters. Parameters: id' title' icon' bringToFront' allowMonitorReuse' titleSuffix' visible
Long Parameter List,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,CreateMonitorPad,The method has 6 parameters. Parameters: id' title' icon' bringToFront' allowMonitorReuse' show
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetStatusProgressMonitor,The method has 7 parameters. Parameters: title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad' showCancelButton
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetStatusProgressMonitor,The method has 6 parameters. Parameters: title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetOutputProgressMonitor,The method has 5 parameters. Parameters: title' icon' bringToFront' allowMonitorReuse' visible
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetOutputProgressMonitor,The method has 6 parameters. Parameters: id' title' icon' bringToFront' allowMonitorReuse' visible
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetOutputProgressMonitor,The method has 7 parameters. Parameters: id' title' icon' bringToFront' allowMonitorReuse' titleSuffix' visible
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,OnGetStatusProgressMonitor,The method has 7 parameters. Parameters: title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad' showCancelButton
Long Parameter List,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,OnGetOutputProgressMonitor,The method has 7 parameters. Parameters: id' title' icon' bringToFront' allowMonitorReuse' titleSuffix' visible
Long Parameter List,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,OnDragDataReceived,The method has 6 parameters. Parameters: context' x' y' selection_data' info' time_
Long Parameter List,MonoDevelop.Ide.Gui,FileOpenInformation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\FileOpenInformation.cs,FileOpenInformation,The method has 5 parameters. Parameters: filePath' project' line' column' options
Long Parameter List,MonoDevelop.Ide.Tasks,TaskListEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskListEntry.cs,TaskListEntry,The method has 5 parameters. Parameters: file' description' column' line' severity
Long Parameter List,MonoDevelop.Ide.Tasks,TaskListEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskListEntry.cs,TaskListEntry,The method has 6 parameters. Parameters: file' description' column' line' severity' priority
Long Parameter List,MonoDevelop.Ide.Tasks,TaskListEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskListEntry.cs,TaskListEntry,The method has 7 parameters. Parameters: file' description' column' line' severity' priority' parent
Long Parameter List,MonoDevelop.Ide.Tasks,TaskListEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskListEntry.cs,TaskListEntry,The method has 8 parameters. Parameters: file' description' column' line' severity' priority' parent' owner
Long Parameter List,MonoDevelop.Ide.Tasks,TaskListEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskListEntry.cs,TaskListEntry,The method has 9 parameters. Parameters: file' description' column' line' severity' priority' parent' owner' category
Long Parameter List,MonoDevelop.Ide.Codons,PadCodon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Codons\PadCodon.cs,PadCodon,The method has 5 parameters. Parameters: content' id' label' defaultPlacement' icon
Long Parameter List,MonoDevelop.Ide.Codons,PadCodon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Codons\PadCodon.cs,PadCodon,The method has 6 parameters. Parameters: content' id' label' defaultPlacement' defaultStatus' icon
Long Parameter List,MonoDevelop.Ide.Templates,FileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileDescriptionTemplate.cs,AddToProject,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,FileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileDescriptionTemplate.cs,AddToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,Create,The method has 6 parameters. Parameters: policyParent' project' solutionFolder' directory' language' name
Long Parameter List,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,CanCreateUnsavedFiles,The method has 6 parameters. Parameters: newfile' policyParent' project' directory' language' name
Long Parameter List,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,CreateFile,The method has 7 parameters. Parameters: newfile' policyParent' project' solutionFolder' directory' language' name
Long Parameter List,MonoDevelop.Ide.Templates,INewFileCreator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\INewFileCreator.cs,CreateItem,The method has 5 parameters. Parameters: template' project' directory' language' name
Long Parameter List,MonoDevelop.Ide.Templates,RawFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\TextFileDescriptionTemplate.cs,CreateFileContentAsync,The method has 5 parameters. Parameters: policyParent' project' language' fileName' identifier
Long Parameter List,MonoDevelop.Ide.Templates,RawFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\TextFileDescriptionTemplate.cs,CreateFileContent,The method has 5 parameters. Parameters: policyParent' project' language' fileName' identifier
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,AddToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,AddFileToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,AddToProject,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,AddFileToProject,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFileAsync,The method has 5 parameters. Parameters: policyParent' project' language' baseDirectory' entryName
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateFileContentFromDerivedClass,The method has 5 parameters. Parameters: policyParent' project' language' fileName' identifier
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFile,The method has 5 parameters. Parameters: policyParent' project' language' baseDirectory' entryName
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,GetFileName,The method has 5 parameters. Parameters: policyParent' project' language' baseDirectory' entryName
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateFileContent,The method has 5 parameters. Parameters: policyParent' project' language' fileName' identifier
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateFileContentAsync,The method has 5 parameters. Parameters: policyParent' project' language' fileName' identifier
Long Parameter List,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,ModifyTags,The method has 6 parameters. Parameters: policyParent' project' language' identifier' fileName' tags
Long Parameter List,MonoDevelop.Ide.Templates,ResourceFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ResourceFileDescriptionTemplate.cs,AddToProject,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,ResourceFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ResourceFileDescriptionTemplate.cs,AddToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,CodeTranslationFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeTranslationFileDescriptionTemplate.cs,ModifyTags,The method has 6 parameters. Parameters: policyParent' project' language' identifier' fileName' tags
Long Parameter List,MonoDevelop.Ide.Templates,FileTemplateReference,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateReference.cs,AddToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' entryName
Long Parameter List,MonoDevelop.Ide.Templates,FileTemplateReference,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateReference.cs,AddToProject,The method has 5 parameters. Parameters: policyParent' project' language' directory' entryName
Long Parameter List,MonoDevelop.Ide.Templates,DirectoryTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\DirectoryTemplate.cs,AddToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,DirectoryTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\DirectoryTemplate.cs,AddToProject,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,PropertyDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\PropertyDescriptionTemplate.cs,AddToProjectAsync,The method has 5 parameters. Parameters: policyParent' project' language' directory' name
Long Parameter List,MonoDevelop.Ide.Templates,FileTemplateTagsModifier,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateTagsModifier.cs,ModifyTags,The method has 6 parameters. Parameters: policyParent' project' language' identifier' fileName' tags
Long Parameter List,MonoDevelop.Ide.Templates,CombinedTagModel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CombinedTagModel.cs,GetTagModel,The method has 6 parameters. Parameters: projectTagModel' policyParent' project' language' identifier' fileName
Long Parameter List,MonoDevelop.Ide.Gui.Content,TextStylePolicy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\TextStylePolicy.cs,TextStylePolicy,The method has 7 parameters. Parameters: fileWidth' tabWidth' indentWidth' tabsToSpaces' noTabsAfterNonTabs' removeTrailingWhitespace' eolMarker
Long Parameter List,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,GetCellPosition,The method has 6 parameters. Parameters: mx' my' cellx' celly' iter' path
Long Parameter List,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Gui.Pads,DefaultMonitorPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\DefaultMonitorPad.cs,DefaultMonitorPad,The method has 5 parameters. Parameters: typeTag' icon' instanceNum' title' titleInstanceNum
Long Parameter List,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,SetText,The method has 5 parameters. Parameters: textRenderer' model' iter' task' text
Long Parameter List,MonoDevelop.Ide.Gui.Pads,DescriptionCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.StandardHeader,StandardHeaderService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderService.cs,GetHeader,The method has 5 parameters. Parameters: authorInfo' policy' textPolicy' fileName' newFile
Long Parameter List,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,CheckAndDrop,The method has 5 parameters. Parameters: x' y' drop' ctx' obj
Long Parameter List,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,TryHandlePaste,The method has 5 parameters. Parameters: node' copyObjects' currentTransferOperation' simulatePaste' parentDrop
Long Parameter List,MonoDevelop.Ide.Gui.Components,ExtensibleTreeViewTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnDragDataReceived,The method has 6 parameters. Parameters: context' x' y' selection_data' info' time
Long Parameter List,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Gui.Components,ZoomableCellRendererPixbuf,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Gui.Components,ZoomableCellRendererPixbuf,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Gui.Components,TreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TreeBuilder.cs,GetNodeInfo,The method has 5 parameters. Parameters: nodeInfo' tree' tb' chain' dataObject
Long Parameter List,MonoDevelop.Ide.CodeFormatting,DefaultCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\DefaultCodeFormatter.cs,FormatImplementation,The method has 5 parameters. Parameters: policyParent' mimeType' input' startOffset' length
Long Parameter List,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,FormatImplementation,The method has 5 parameters. Parameters: policyParent' mimeType' input' startOffset' length
Long Parameter List,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,Format,The method has 5 parameters. Parameters: policyParent' mimeType' input' startOffset' length
Long Parameter List,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,FormatText,The method has 5 parameters. Parameters: policyParent' mimeType' input' fromOffset' toOffset
Long Parameter List,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,CorrectIndentingImplementationAsync,The method has 5 parameters. Parameters: editor' context' startLine' endLine' cancellationToken
Long Parameter List,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,CorrectIndentingAsync,The method has 5 parameters. Parameters: editor' context' startLine' endLine' cancellationToken
Long Parameter List,MonoDevelop.Ide.CodeFormatting,CodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\CodeFormatter.cs,CorrectIndentingAsync,The method has 5 parameters. Parameters: editor' context' startLine' endLine' cancellationToken
Long Parameter List,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,TableRemoveRow,The method has 5 parameters. Parameters: table' row' column1' column2' destroy
Long Parameter List,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SearchReplace,The method has 6 parameters. Parameters: findPattern' replacePattern' scope' options' UpdateStopButton' UpdateResultPad
Long Parameter List,MonoDevelop.Ide.FindInFiles,OpenFileProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FileProvider.cs,OpenFileProvider,The method has 5 parameters. Parameters: textBuffer' project' fileName' selectionStartPostion' selectionEndPosition
Long Parameter List,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,The method has 6 parameters. Parameters: scope' monitor' pattern' replacePattern' filter' token
Long Parameter List,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,The method has 6 parameters. Parameters: monitor' provider' content' pattern' replacePattern' filter
Long Parameter List,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,RegexSearch,The method has 5 parameters. Parameters: monitor' provider' reader' replacePattern' filter
Long Parameter List,MonoDevelop.Ide.Extensions,MimeTypeNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Extensions\MimeTypeNode.cs,MimeTypeNode,The method has 6 parameters. Parameters: id' baseType' description' icon' isText' contentType
Long Parameter List,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,ShouldRunGenerator,The method has 5 parameters. Parameters: file' project' force' tool' genFile
Long Parameter List,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,Update,The method has 6 parameters. Parameters: monitor' fileEnumerator' force' succeeded' warnings' errors
Long Parameter List,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,UpdateCompleted,The method has 5 parameters. Parameters: monitor' file' genFile' result' runMultipleFiles
Long Parameter List,MonoDevelop.Components,CellRendererComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererComboBox.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Components,CellRendererComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererComboBox.cs,StartEditing,The method has 6 parameters. Parameters: ev' widget' path' background_area' cell_area' flags
Long Parameter List,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,DrawImage,The method has 5 parameters. Parameters: s' widget' image' x' y
Long Parameter List,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,CreateKeyEventFromKeyCode,The method has 5 parameters. Parameters: keyCode' state' eventType' win' time
Long Parameter List,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,CreateKeyEvent,The method has 6 parameters. Parameters: keyval' keyCode' state' eventType' win' time
Long Parameter List,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,RoundBorder,The method has 5 parameters. Parameters: ctx' x' y' w' h
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RoundedRectangle,The method has 6 parameters. Parameters: cr' x' y' w' h' r
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RoundedRectangle,The method has 7 parameters. Parameters: cr' x' y' w' h' r' corners
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RoundedRectangle,The method has 8 parameters. Parameters: cr' x' y' w' h' r' corners' topBottomFallsThrough
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderOuterShadow,The method has 5 parameters. Parameters: self' area' size' rounding' strength
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderTiled,The method has 6 parameters. Parameters: self' target' source' area' clip' opacity
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CachedDraw,The method has 8 parameters. Parameters: self' surface' position' size' parameters' opacity' draw' forceScale
Long Parameter List,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CachedDraw,The method has 7 parameters. Parameters: self' surface' region' parameters' opacity' draw' forceScale
Long Parameter List,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetPageScrollPixelDeltas,The method has 5 parameters. Parameters: evt' pageSizeX' pageSizeY' deltaX' deltaY
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,ShowContextMenuInternal,The method has 8 parameters. Parameters: menu' parent' ix' iy' caret' window' time' button
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,ShowContextMenu,The method has 5 parameters. Parameters: menu' parent' ix' iy' caret
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,TranslateKeyboardState,The method has 7 parameters. Parameters: evt' state' group' keyval' effective_group' level' consumed_modifiers
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,gtk_tree_view_get_tooltip_context,The method has 7 parameters. Parameters: raw' x' y' keyboard_tip' model' path' iter
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetTooltipContext,The method has 7 parameters. Parameters: tree' x' y' keyboardTip' model' path' iter
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,gtk_icon_set_render_icon_scaled,The method has 8 parameters. Parameters: handle' style' direction' state' size' widget' intPtr' scale
Long Parameter List,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,RenderIcon,The method has 8 parameters. Parameters: iconset' style' direction' state' size' widget' detail' scale
Long Parameter List,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,DrawLine,The method has 6 parameters. Parameters: cr' color' x1' y1' x2' y2
Long Parameter List,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,Line,The method has 5 parameters. Parameters: cr' x1' y1' x2' y2
Long Parameter List,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,SharpLineX,The method has 5 parameters. Parameters: cr' x1' y1' x2' y2
Long Parameter List,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,SharpLineY,The method has 5 parameters. Parameters: cr' x1' y1' x2' y2
Long Parameter List,MonoDevelop.Components,ContextMenu,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenu.cs,Show,The method has 5 parameters. Parameters: parent' x' y' closeHandler' selectFirstItem
Long Parameter List,MonoDevelop.Components,ContextMenu,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenu.cs,Show,The method has 5 parameters. Parameters: parent' x' y' closeHandler' selectFirstItem
Long Parameter List,MonoDevelop.Components,ContextMenuExtensionsGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuExtensionsGtk.cs,ShowContextMenu,The method has 6 parameters. Parameters: parent' x' y' menu' closeHandler' selectFirstItem
Long Parameter List,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The method has 7 parameters. Parameters: win' gc' e' pos' ad' tickSize' showLabels
Long Parameter List,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The method has 5 parameters. Parameters: ctx' rowList' dividerX' x' y
Long Parameter List,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,EndTransaction,The method has 5 parameters. Parameters: obj' tran' oldValue' newValue' commit
Long Parameter List,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowCursor,The method has 7 parameters. Parameters: cr' x' y' width' height' color' corners
Long Parameter List,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The method has 9 parameters. Parameters: cr' x' y' width' height' filled' stroked' color' corners
Long Parameter List,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowRule,The method has 5 parameters. Parameters: cr' x' y' width' height
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowSelection,The method has 5 parameters. Parameters: cr' x' y' width' height
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowSelection,The method has 6 parameters. Parameters: cr' x' y' width' height' filled
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowSelection,The method has 8 parameters. Parameters: cr' x' y' width' height' filled' stroked' color
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowCursor,The method has 5 parameters. Parameters: cr' x' y' width' height
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowCursor,The method has 6 parameters. Parameters: cr' x' y' width' height' color
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowCursor,The method has 7 parameters. Parameters: cr' x' y' width' height' color' corners
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowSelection,The method has 9 parameters. Parameters: cr' x' y' width' height' filled' stroked' color' corners
Long Parameter List,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowRule,The method has 5 parameters. Parameters: cr' x' y' width' height
Long Parameter List,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,InRegion,The method has 6 parameters. Parameters: grp' pos' refObject' objToFindParent' objToFindIndex' insertingPosition
Long Parameter List,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,AddItemAtLocation,The method has 5 parameters. Parameters: grp' it' location' visible' status
Long Parameter List,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,AddTopLevel,The method has 5 parameters. Parameters: w' x' y' width' height
Long Parameter List,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,DrawSeparators,The method has 5 parameters. Parameters: exposedArea' currentHandleGrp' currentHandleIndex' oper' areasList
Long Parameter List,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,DrawSeparators,The method has 6 parameters. Parameters: exposedArea' currentHandleGrp' currentHandleIndex' oper' drawChildrenSep' areasList
Long Parameter List,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,The method has 5 parameters. Parameters: item' px' py' dockDelegate' rect
Long Parameter List,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,The method has 5 parameters. Parameters: item' px' py' dockDelegate' rect
Long Parameter List,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,The method has 6 parameters. Parameters: item' px' py' rect' dockDelegate' outrect
Long Parameter List,MonoDevelop.Components.Docking,DockObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockObject.cs,GetDockTarget,The method has 5 parameters. Parameters: item' px' py' dockDelegate' rect
Long Parameter List,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The method has 5 parameters. Parameters: x' y' w' h' animate
Long Parameter List,MonoDevelop.Ide.ProgressMonitoring,MessageDialogProgressMonitor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ProgressMonitoring\MessageDialogProgressMonitor.cs,MessageDialogProgressMonitor,The method has 5 parameters. Parameters: showProgress' allowCancel' showDetails' hideWhenDone' parent
Long Parameter List,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The method has 6 parameters. Parameters: dataList' currentFilteredItems' oldCompletionString' completionString' trace' matcher
Long Parameter List,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,FilterItems,The method has 6 parameters. Parameters: dataList' completionString' items' matcher' start' end
Long Parameter List,MonoDevelop.Ide.CodeCompletion,CompletionWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionWindowManager.cs,ShowWindow,The method has 5 parameters. Parameters: ext' firstChar' list' completionWidget' completionContext
Long Parameter List,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,IterateItems,The method has 5 parameters. Parameters: category' startAtPage' ypos' curItem' action
Long Parameter List,MonoDevelop.Ide.CodeCompletion,CodeCompletionContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CodeCompletionContext.cs,CodeCompletionContext,The method has 7 parameters. Parameters: x' y' textHeight' offset' line' lineOffset' wordLength
Long Parameter List,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,CreateCategory,The method has 5 parameters. Parameters: categoryName' categoryContentMarkup' foreColor' font' labelMaxWidth
Long Parameter List,MonoDevelop.Ide.CodeCompletion,ParameterHintingData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterHintingData.cs,CreateTooltipInformation,The method has 5 parameters. Parameters: editor' ctx' currentParameter' smartWrap' cancelToken
Long Parameter List,MonoDevelop.Ide.CodeCompletion,CompletionTriggerInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionTriggerInfo.cs,CompletionTriggerInfo,The method has 5 parameters. Parameters: completionTriggerReason' triggerCharacter' isAugment' isDebugger' isImmediateWindow
Long Parameter List,MonoDevelop.Ide.CodeCompletion,TaggedTextUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TaggedTextUtil.cs,AppendTaggedText,The method has 5 parameters. Parameters: markup' theme' text' col' maxColumn
Long Parameter List,MonoDevelop.Ide.CodeCompletion,SignatureHelpParameterHintingData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\SignatureHelpParameterHintingData.cs,CreateTooltipInformation,The method has 5 parameters. Parameters: editor' ctx' currentParameter' smartWrap' cancelToken
Long Parameter List,MonoDevelop.Ide.Desktop,PlatformService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\PlatformService.cs,StartConsoleProcess,The method has 6 parameters. Parameters: command' arguments' workingDirectory' environmentVariables' title' pauseWhenFinished
Long Parameter List,MonoDevelop.Ide.Desktop,PlatformService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\PlatformService.cs,PlaceWindow,The method has 5 parameters. Parameters: window' x' y' width' height
Long Parameter List,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,The method has 6 parameters. Parameters: iter' item' itemFiles' knownPaths' dir' forceSet
Long Parameter List,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,DrawTemplateCategoryText,The method has 7 parameters. Parameters: window' widget' cell_area' iconRect' iconTextPadding' textYOffset' flags
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawTemplateNameText,The method has 5 parameters. Parameters: window' widget' cell_area' iconRect' flags
Long Parameter List,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawCategoryText,The method has 5 parameters. Parameters: ctx' widget' cell_area' iconRect' flags
Long Parameter List,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,GetSize,The method has 6 parameters. Parameters: widget' cell_area' x_offset' y_offset' width' height
Long Parameter List,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,Render,The method has 6 parameters. Parameters: window' widget' background_area' cell_area' expose_area' flags
Long Parameter List,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,GetLanguageButtonRectangle,The method has 5 parameters. Parameters: window' widget' cell_area' textHeight' textWidth
Long Parameter List,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,RoundBorder,The method has 5 parameters. Parameters: ctx' x' y' w' h
Long Parameter List,MonoDevelop.Ide.WelcomePage,WelcomePageLinkButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageLinkButton.cs,WelcomePageLinkButton,The method has 6 parameters. Parameters: title' href' iconSize' icon' desc' tooltip
Long Parameter List,MonoDevelop.Ide.WelcomePage,WelcomePageNewsFeed,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageNewsFeed.cs,WelcomePageNewsFeed,The method has 5 parameters. Parameters: title' newsUrl' id' limit' spacing
Long Parameter List,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,FormatText,The method has 5 parameters. Parameters: fontFace' fontSize' weight' color' text
Long Parameter List,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawLayout,The method has 8 parameters. Parameters: ctx' layout' fontFace' fontSize' weight' color' tx' ty
Long Parameter List,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,SearchPopupSearchPattern,The method has 5 parameters. Parameters: tag' pattern' lineNumber' column' unparsedPattern
Long Parameter List,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,LayoutRoundedRectangle,The method has 5 parameters. Parameters: context' region' inflateX' inflateY' rounding
Long Parameter List,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawString,The method has 9 parameters. Parameters: text' isMarkup' context' x' y' width' opacity' pango' arg
Long Parameter List,MonoDevelop.Components.MainToolbar,CommandResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchResult.cs,CommandResult,The method has 6 parameters. Parameters: cmd' ci' route' match' matchedString' rank
Long Parameter List,MonoDevelop.Components.MainToolbar,ShimNavigateToSearchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.ShimNavigateToSearchService.cs,SearchProjectAsync,The method has 5 parameters. Parameters: project' priorityDocuments' searchPattern' kinds' cancellationToken
Long Parameter List,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,CreateTooltipWindow,The method has 5 parameters. Parameters: editor' ctx' item' offset' modifierState
Long Parameter List,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,ShowTipInfoWindow,The method has 6 parameters. Parameters: editor' tipWindow' item' modifierState' mouseX' mouseY
Long Parameter List,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,ShowTooltipWindow,The method has 6 parameters. Parameters: editor' tipWindow' item' modifierState' mouseX' mouseY
Long Parameter List,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,CalculateWindowLocation,The method has 6 parameters. Parameters: editor' item' xwtWindow' mouseX' mouseY' origin
Long Parameter List,MonoDevelop.Ide.Editor,TextMarkerFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextMarkerFactory.cs,CreateUrlTextMarker,The method has 6 parameters. Parameters: editor' value' url' syntax' startCol' endCol
Long Parameter List,MonoDevelop.Ide.Editor,TextMarkerFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextMarkerFactory.cs,CreateGenericTextSegmentMarker,The method has 5 parameters. Parameters: editor' effect' color' offset' length
Long Parameter List,MonoDevelop.Ide.Editor,ITextMarkerFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\InternalExtensionAPI\ITextMarkerFactory.cs,CreateUrlTextMarker,The method has 6 parameters. Parameters: editor' value' url' syntax' startCol' endCol
Long Parameter List,MonoDevelop.Ide.Editor,ITextMarkerFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\InternalExtensionAPI\ITextMarkerFactory.cs,CreateGenericTextSegmentMarker,The method has 5 parameters. Parameters: editor' effect' color' offset' length
Long Parameter List,MonoDevelop.Ide.Editor,FoldSegmentFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\FoldSegmentFactory.cs,CreateFoldSegment,The method has 6 parameters. Parameters: editor' offset' length' isCollapsed' collapsedText' foldingType
Long Parameter List,MonoDevelop.Ide.Editor,FoldSegmentFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\FoldSegmentFactory.cs,CreateFoldSegment,The method has 5 parameters. Parameters: editor' segment' isCollapsed' collapsedText' foldingType
Long Parameter List,MonoDevelop.Ide.Editor,FoldSegmentFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\FoldSegmentFactory.cs,CreateFoldSegment,The method has 5 parameters. Parameters: editor' offset' length' collapsedText' foldingType
Long Parameter List,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetTextBetween,The method has 5 parameters. Parameters: document' startLine' startColumn' endLine' endColumn
Long Parameter List,MonoDevelop.Ide.Editor,Selection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Selection.cs,Selection,The method has 5 parameters. Parameters: anchorLine' anchorColumn' leadLine' leadColumn' mode
Long Parameter List,MonoDevelop.Ide.Editor.Extension,FoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\FoldingTextEditorExtension.cs,UpdateFoldings,The method has 5 parameters. Parameters: Editor' parsedDocument' caretLocation' firstTime' token
Long Parameter List,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,StartsWith,The method has 5 parameters. Parameters: text' offset' length' commentTag' startOffset
Long Parameter List,MonoDevelop.Ide.Editor.Extension,HighlightUrlExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\HighlightUrlExtension.cs,RunUpdateTask,The method has 5 parameters. Parameters: input' startLine' endOffset' textSourceVersion' token
Long Parameter List,MonoDevelop.Ide.Editor.Extension,BlockStructureFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BlockStructureFoldingTextEditorExtension.cs,UpdateFoldings,The method has 5 parameters. Parameters: document' spans' caretOffset' createFoldSegment' token
Long Parameter List,MonoDevelop.Ide.Editor.Extension,EditorFormattingServiceTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\EditorFormattingServiceTextEditorExtension.cs,TryFormat,The method has 5 parameters. Parameters: formattingService' typedChar' position' formatOnReturn' cancellationToken
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,TryScanJSonStyle,The method has 5 parameters. Parameters: stream' name' format' fileTypes' scopeName
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingDefinition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,SyntaxHighlightingDefinition,The method has 6 parameters. Parameters: name' scope' firstLineMatch' hidden' fileTypes' contexts
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting,SyntaxContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,SyntaxContext,The method has 5 parameters. Parameters: name' includesAndMatches' metaScope' metaContentScope' metaIncludePrototype
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting,SyntaxMatch,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,SyntaxMatch,The method has 7 parameters. Parameters: match' scope' captures' push' pop' set' withPrototype
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting,AbstractSyntaxHighlightingDefinitionProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\ISyntaxHighlightingDefinitionProvider.cs,CreateProvider,The method has 5 parameters. Parameters: format' name' scope' fileTypes' getStreamProvider
Long Parameter List,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The method has 5 parameters. Parameters: x' y' w' h' animate
Long Parameter List,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,PlaceInFloatingFrame,The method has 5 parameters. Parameters: notebook' tab' allocation' ox' oy
Long Parameter List,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,PlaceInHoverNotebook,The method has 5 parameters. Parameters: notebook' tab' allocation' ox' oy
Long Parameter List,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The method has 9 parameters. Parameters: ctx' tab' allocation' tabBounds' highlight' active' dragging' la' focused
Long Parameter List,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTabBackground,The method has 7 parameters. Parameters: widget' ctx' allocation' contentWidth' px' active' isPinned
Long Parameter List,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,MoveToFloatingWindow,The method has 5 parameters. Parameters: workspaceWindow' x' y' width' height
Long Parameter List,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,SMS,The method has 8 parameters. Parameters: dataA' lowerA' upperA' dataB' lowerB' upperB' downVector' upVector
Long Parameter List,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,LCS,The method has 8 parameters. Parameters: dataA' lowerA' upperA' dataB' lowerB' upperB' downVector' upVector
Long Parameter List,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiffString,The method has 5 parameters. Parameters: diff' baseDocument' changedDocument' baseFileName' changedFileName
Long Parameter List,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,SearchMatchingBracketForward,The method has 5 parameters. Parameters: document' offset' openBracket' closingBracket' cancellationToken
Long Parameter List,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,SearchMatchingBracketBackward,The method has 5 parameters. Parameters: document' offset' openBracket' closingBracket' cancellationToken
Long Parameter List,MonoDevelop.Ide.Editor.Util,SimpleLineSegment,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleReadonlyDocument.cs,SimpleLineSegment,The method has 5 parameters. Parameters: splitter' lineNumber' offset' length' newLine
Long Parameter List,MonoDevelop.Ide.Editor.Projection,ProjectedTooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedTooltipProvider.cs,ShowTooltipWindow,The method has 6 parameters. Parameters: editor' tipWindow' item' modifierState' mouseX' mouseY
Long Parameter List,MonoDevelop.Ide.Editor.Projection,ProjectedTooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedTooltipProvider.cs,CreateTooltipWindow,The method has 5 parameters. Parameters: editor' ctx' item' offset' modifierState
Long Parameter List,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,SendButtonEvent,The method has 6 parameters. Parameters: target' eventType' x' y' state' button
Long Parameter List,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,SendKeyEvent,The method has 5 parameters. Parameters: target' keyval' state' eventType' subWindow
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,Replace,The method has 5 parameters. Parameters: input' pattern' replacement' options' matchTimeout
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,Replace,The method has 5 parameters. Parameters: input' pattern' evaluator' options' matchTimeout
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,Run,The method has 7 parameters. Parameters: quick' prevlen' input' beginning' length' startat' matchTimeout
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,CachedCodeEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,CachedCodeEntry,The method has 8 parameters. Parameters: key' capnames' capslist' code' caps' capsize' runner' repl
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,CharInClassInternal,The method has 5 parameters. Parameters: ch' set' start' mySetLength' myCategoryLength
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,CharInCategory,The method has 5 parameters. Parameters: ch' set' start' mySetLength' myCategoryLength
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCode.cs,RegexCode,The method has 9 parameters. Parameters: codes' stringlist' trackcount' caps' capsize' bmPrefix' fcPrefix' anchors' rightToLeft
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompilationInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompilationInfo.cs,RegexCompilationInfo,The method has 5 parameters. Parameters: pattern' options' name' fullnamespace' ispublic
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompilationInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompilationInfo.cs,RegexCompilationInfo,The method has 6 parameters. Parameters: pattern' options' name' fullnamespace' ispublic' matchTimeout
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateRegexType,The method has 8 parameters. Parameters: pattern' opts' name' ispublic' code' tree' factory' matchTimeout
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,Match,The method has 6 parameters. Parameters: regex' capcount' text' begpos' len' startpos
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,Reset,The method has 5 parameters. Parameters: regex' text' textbeg' textend' textstart
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,MatchSparse,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,MatchSparse,The method has 7 parameters. Parameters: regex' caps' capcount' text' begpos' len' startpos
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,MatchCollection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatchCollection.cs,MatchCollection,The method has 5 parameters. Parameters: regex' input' beginning' length' startat
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ParseReplacement,The method has 5 parameters. Parameters: rep' caps' capsize' capnames' op
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,Replace,The method has 5 parameters. Parameters: evaluator' regex' input' count' startat
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,Scan,The method has 7 parameters. Parameters: regex' text' textbeg' textend' textstart' prevlen' quick
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,Scan,The method has 8 parameters. Parameters: regex' text' textbeg' textend' textstart' prevlen' quick' timeout
Long Parameter List,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexTree.cs,RegexTree,The method has 7 parameters. Parameters: root' caps' capnumlist' captop' capnames' capslist' opts
Long Parameter List,MonoDevelop.Ide.Editor.TextMate,TextMateDocumentIndentEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateDocumentIndentEngine.cs,TextMateDocumentIndentEngine,The method has 5 parameters. Parameters: editor' increaseIndentPattern' decreaseIndentPattern' indentNextLinePattern' unIndentedLinePattern
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputProcessor.cs,AddNode,The method has 8 parameters. Parameters: nodeType' message' fullMessage' isStart' startTime' file' project' lineNumber
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,ExpandChildrenWithErrorsOrWarnings,The method has 5 parameters. Parameters: tree' dataSource' parent' expandWarnings' firstNode
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeDuration,The method has 5 parameters. Parameters: ctx' cellArea' duration' textStartX' padding
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The method has 8 parameters. Parameters: ctx' cellArea' buildOutputNode' padding' isSelected' imageSize' imagePadding' status
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,CreateTextLayout,The method has 6 parameters. Parameters: cellArea' text' font' trimming' underline' width
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawText,The method has 9 parameters. Parameters: ctx' cellArea' x' text' padding' font' width' trimming' underline
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawText,The method has 5 parameters. Parameters: ctx' textLayout' cellArea' x' padding
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawImage,The method has 6 parameters. Parameters: ctx' cellArea' image' x' imageSize' isSelected
Long Parameter List,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawImage,The method has 7 parameters. Parameters: ctx' cellArea' image' x' imageSize' isSelected' topPadding
Long Parameter List,MonoDevelop.Ide.RoslynServices,MonoDevelopDocumentNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopDocumentNavigationService.cs,TryNavigateToLineAndOffset,The method has 5 parameters. Parameters: workspace' documentId' lineNumber' offset' options
Long Parameter List,MonoDevelop.Ide.RoslynServices,MonoDevelopDocumentNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopDocumentNavigationService.cs,TryNavigateToPosition,The method has 5 parameters. Parameters: workspace' documentId' position' virtualSpace' options
Long Parameter List,MonoDevelop.Ide.RoslynServices,MonoDevelopSymbolNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopSymbolNavigationService.cs,WouldNavigateToSymbol,The method has 6 parameters. Parameters: definitionItem' solution' cancellationToken' filePath' lineNumber' charOffset
Long Parameter List,MonoDevelop.Ide.RoslynServices,RoslynLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynLogger.cs,LogBlockEnd,The method has 5 parameters. Parameters: functionId' logMessage' uniquePairId' delta' cancellationToken
Long Parameter List,MonoDevelop.Ide.RoslynServices,RoslynFileLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynFileLogger.cs,LogBlockEnd,The method has 5 parameters. Parameters: functionId' logMessage' uniquePairId' delta' cancellationToken
Long Parameter List,MonoDevelop.Ide.RoslynServices.Options,WrappedConfigurationProperty<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\RoslynPreferences.Properties.cs,WrappedConfigurationProperty,The method has 5 parameters. Parameters: name' monodevelopPropertyName' defaultValue' serializer' deserializer
Long Parameter List,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,BatchOpenDocument,The method has 6 parameters. Parameters: monitor' fileName' project' line' column' dockNotebook
Long Parameter List,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,LoadFile,The method has 6 parameters. Parameters: fileName' monitor' binding' project' fileInfo' timer
Long Identifier,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,,The length of the parameter tryApplyState_documentTextChangedTasks is 38.
Long Identifier,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,,The length of the parameter tryApplyState_documentTextChangedContents is 41.
Long Identifier,MonoDevelop.Ide.TypeSystem,WorkspaceExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceExtensions.cs,RegisterSolutionCrawler,The length of the parameter solutionCrawlerRegistrationService is 34.
Long Identifier,MonoDevelop.Ide.TypeSystem,WorkspaceExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceExtensions.cs,UnregisterSolutionCrawler,The length of the parameter solutionCrawlerRegistrationService is 34.
Long Identifier,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,,The length of the parameter persistentStorageLocationServiceRegistration is 44.
Long Identifier,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,,The length of the parameter OpenWorkspaceWithIntellisenseItemTimer is 38.
Long Identifier,MonoDevelop.Ide,FeatureSwitches,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,,The length of the parameter IdeBuildOutputViewFeatureSwitchName is 35.
Long Identifier,MonoDevelop.Ide,FeatureSwitches,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,,The length of the parameter RuntimeSelectorFeatureSwitchName is 32.
Long Identifier,MonoDevelop.Ide,IdePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdePreferences.cs,,The length of the parameter AddImportedItemsToCompletionList is 32.
Long Identifier,MonoDevelop.Ide,IdePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdePreferences.cs,,The length of the parameter IncludeKeywordsInCompletionList is 31.
Long Identifier,MonoDevelop.Ide,IdePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdePreferences.cs,,The length of the parameter IncludeCodeSnippetsInCompletionList is 35.
Long Identifier,MonoDevelop.Ide,IdePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdePreferences.cs,,The length of the parameter CompletionOptionsHideAdvancedMembers is 36.
Long Identifier,MonoDevelop.Ide,IdePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdePreferences.cs,,The length of the parameter EnableUnitTestEditorIntegration is 31.
Long Identifier,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,ExecuteTaskAndShowWaitDialog,The length of the parameter dontExitMethodUntilDialogClosed is 31.
Long Identifier,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,,The length of the parameter contentActiveViewCallbackRegistry is 33.
Long Identifier,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,,The length of the parameter checkAssociateNamespacesDirectories is 35.
Long Identifier,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,,The length of the parameter NetStandardPclCompatPackageName is 31.
Long Identifier,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,,The length of the parameter NetStandardPclCompatPackageVersion is 34.
Long Identifier,MonoDevelop.Ide.Templates,ProjectTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplate.cs,,The length of the parameter packageReferencesForCreatedProjects is 35.
Long Identifier,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,,The length of the parameter createFileContentFromDerivedClass is 33.
Long Identifier,MonoDevelop.Ide.Templates,WorkspaceItemCreatedInformation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\WorkspaceItemCreatedInformation.cs,,The length of the parameter packageReferencesForCreatedProjects is 35.
Long Identifier,MonoDevelop.Ide.Templates,ProjectTemplatePackageInstaller,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplatePackageInstaller.cs,Run,The length of the parameter packageReferencesForCreatedProjects is 35.
Long Identifier,MonoDevelop.Ide.Gui.Dialogs,MultiConfigItemOptionsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsPanel.cs,,The length of the parameter configListStoreConfigNameColumn is 31.
Long Identifier,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,,The length of the parameter skipBuildingUnmodifiedProjectsCheckbox is 38.
Long Identifier,MonoDevelop.Ide.Gui.OptionPanels,SdkLocationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\SdkLocationPanel.cs,CleanPath,The length of the parameter overridesHigherPriorityDefault is 30.
Long Identifier,MonoDevelop.Ide.CodeFormatting,FormatBufferHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\CodeFormattingCommands.cs,Run,The length of the parameter currentOffsetWithoutWhitepspaces is 32.
Long Identifier,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,,The length of the parameter cairo_pop_group_to_source_call is 30.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter configureYourWorkspaceBannerText is 32.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter configureYourSolutionBannerText is 31.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter CreateGitIgnoreFilePropertyName is 31.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter CreateProjectSubDirectoryPropertyName is 37.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter NewSolutionLastSelectedCategoryPropertyName is 43.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter NewSolutionLastSelectedTemplatePropertyName is 43.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter NewProjectLastSelectedCategoryPropertyName is 42.
Long Identifier,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,,The length of the parameter NewProjectLastSelectedTemplatePropertyName is 42.
Long Identifier,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,UpdateStyles,The length of the parameter templateListBackgroundColorHex is 30.
Long Identifier,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The length of the parameter topBannerBottomEdgeLineEventBox is 31.
Long Identifier,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The length of the parameter templateCategoriesScrolledWindow is 32.
Long Identifier,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The length of the parameter templateSectionSeparatorEventBox is 32.
Long Identifier,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,,The length of the parameter TemplateA11yLanguageNameColumn is 30.
Long Identifier,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,,The length of the parameter projectConfigurationTableEventBox is 33.
Long Identifier,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,,The length of the parameter projectConfigurationTopEventBox is 31.
Long Identifier,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,,The length of the parameter createProjectWithinSolutionDirectoryCheckBox is 44.
Long Identifier,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,,The length of the parameter projectConfigurationBottomEventBox is 34.
Long Identifier,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,,The length of the parameter projectConfigurationRightBorderEventBox is 39.
Long Identifier,MonoDevelop.Ide.Projects,FinalProjectConfigurationPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\FinalProjectConfigurationPage.cs,,The length of the parameter createProjectDirectoryInsideSolutionDirectory is 45.
Long Identifier,MonoDevelop.Ide.Projects,FinalProjectConfigurationPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\FinalProjectConfigurationPage.cs,,The length of the parameter createProjectDirectoryInsideSolutionDirectoryEnabled is 52.
Long Identifier,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,,The length of the parameter topLevelTemplateHeadingTotalYPadding is 36.
Long Identifier,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,,The length of the parameter topLevelTemplateHeadingYOffset is 30.
Long Identifier,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,,The length of the parameter groupTemplateHeadingTotalYPadding is 33.
Long Identifier,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,,The length of the parameter recentTemplateHeadingTotalYPadding is 34.
Long Identifier,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,,The length of the parameter dropdownTriangleRightHandPadding is 32.
Long Identifier,MonoDevelop.Ide.Navigation,HistoryList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Navigation\HistoryList.cs,,The length of the parameter FORWARD_HISTORY_TIMEOUT_SECONDS is 31.
Long Identifier,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,,The length of the parameter selectedResultDescriptionTextColor is 34.
Long Identifier,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,,The length of the parameter ignoreConfigurationChangedCount is 31.
Long Identifier,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,,The length of the parameter removeTrailingWhitespacesFromContext is 36.
Long Identifier,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,,The length of the parameter overriddenRemoveTrailingWhitespacesFromContext is 46.
Long Identifier,MonoDevelop.Ide.Editor,TextEditorViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditorViewContent.cs,,The length of the parameter editorOptionsUpdateCancellationSource is 37.
Long Identifier,MonoDevelop.Ide.Editor,EditorPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorPreferences.cs,,The length of the parameter EnableCompletionSuggestionMode is 30.
Long Identifier,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,,The length of the parameter parameterHingtingCursorPositionChanged is 38.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,EditorThemeColors,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorThemeColors.cs,,The length of the parameter MessageBubbleErrorIconMarginBorder is 34.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,EditorThemeColors,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorThemeColors.cs,,The length of the parameter MessageBubbleWarningBorderLine is 30.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,EditorThemeColors,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorThemeColors.cs,,The length of the parameter MessageBubbleWarningIconMargin is 30.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,EditorThemeColors,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorThemeColors.cs,,The length of the parameter MessageBubbleWarningIconMarginBorder is 36.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter CommentsForDocumentationTagsKey is 31.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter CompletionMatchingSubstringKey is 30.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter CompletionSelectedMatchingSubstringKey is 38.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter CompletionSelectedInactiveTextKey is 33.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter CompletionSelectedInactiveMatchingSubstringKey is 46.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter XAMLMarkupExtensionParameterNameKey is 35.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,,The length of the parameter XAMLMarkupExtensionParameterValueKey is 36.
Long Identifier,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,,The length of the parameter DefaultMatchTimeout_ConfigKeyName is 33.
Long Identifier,MonoDevelop.Ide.GettingStarted,GettingStarted,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.GettingStarted\GettingStarted.cs,,The length of the parameter GettingStartedProvidersExtensionPoint is 37.
Long Identifier,MonoDevelop.Ide.BuildOutputView,BuildOutputNodeExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputNode.cs,,The length of the parameter DiagnosticRoundPrecisionFormat is 30.
Long Identifier,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,,The length of the parameter BuildConfigurationInformationLeftPadding is 40.
Long Identifier,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,,The length of the parameter DefaultInformationContainerWidth is 32.
Long Identifier,MonoDevelop.Ide.RoslynServices,MonoDevelopInfoBarService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopInfoBarService.cs,,The length of the parameter _foregroundNotificationService is 30.
Long Identifier,MonoDevelop.Ide.RoslynServices,MonoDevelopDocumentNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopDocumentNavigationService.cs,MonoDevelopDocumentNavigationService,The length of the parameter visualStudioDocumentNavigationServiceFactory is 44.
Long Identifier,MonoDevelop.Ide.RoslynServices.Options,PerLanguagePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\RoslynPreferences.cs,,The length of the parameter ShowItemsFromUnimportedNamespaces is 33.
Long Identifier,MonoDevelop.Ide.RoslynServices.Options,PerLanguagePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\RoslynPreferences.cs,,The length of the parameter SuggestForTypesInNuGetPackages is 30.
Long Identifier,MonoDevelop.Ide.RoslynServices.Options,PerLanguagePreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\RoslynPreferences.cs,,The length of the parameter SolutionCrawlerClosedFileDiagnostic is 35.
Long Identifier,MonoDevelop.Ide.Gui.Documents,DocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentController.cs,,The length of the parameter DocumentControllerExtensionsPath is 32.
Long Identifier,MonoDevelop.Ide.Gui.Documents,DocumentControllerService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentControllerService.cs,,The length of the parameter DocumentControllerFactoriesPath is 31.
Long Identifier,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,,The length of the parameter editorOperationsFactoryService is 30.
Long Statement,MonoDevelop.Components.Commands,CommandCheckMenuItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandCheckMenuItem.cs,OnActivated,The length of the statement  "			commandManager.DispatchCommand (commandId' arrayDataItem' initialTarget' CommandMenuItem.GetMenuCommandSource (this)' lastCmdInfo);" is 131.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ProcessKeyEventCore,The length of the statement  "					KeyBindingFailed (this' new KeyBindingFailedEventArgs (GettextCatalog.GetString ("The key combination ({0}' {1}) is not a command."' chord' accel)));" is 149.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ProcessKeyEventCore,The length of the statement  "						KeyBindingFailed?.Invoke (this' new KeyBindingFailedEventArgs (GettextCatalog.GetString ("Initializing '{0}' ({1}) command failed."' commands [i].DisplayName' KeyBindingManager.BindingToDisplayLabel (binding.ToString ()' false))));" is 231.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ProcessKeyEventCore,The length of the statement  "					KeyBindingFailed (this' new KeyBindingFailedEventArgs (GettextCatalog.GetString ("The key combination ({0}) has conflicts."' KeyBindingManager.BindingToDisplayLabel (binding.ToString ()' false))));" is 197.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// (*) Before executing the command' DispatchCommand executes the command update handler to make sure the command is enabled in the given" is 137.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// context. This is necessary because the status of the command may have changed since it was last checked (for example' since the menu" is 135.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// was shown). In general this is not a problem because command update handlers are fast and cheap. However' it may be a problem" is 128.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// for async command update handlers. The sourceUpdateInfo argument can be used in this case to provide the update info that was obtained" is 137.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// (**) The above special case works when the command is being executed from a menu' because the command update info has already been" is 133.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// obtained to build the menu. However in other cases' such as execution through keyboard shortcuts or direct executions of" is 123.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// the DispatchCommand method from code' sourceUpdateInfo may not be available. In those cases' if the command update handler is asynchronous'" is 142.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "			// DispatchCommand will *not* wait for the update handler to end' it will use whatever value the handler sets before starting the" is 129.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "						if (sourceUpdateInfo != null && cmdTarget == sourceUpdateInfo.SourceTarget && sourceUpdateInfo.IsUpdatingAsynchronously) {" is 122.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,DispatchCommand,The length of the statement  "							// running the asynchronous update again. In other cases' the command update should be fast' so the check will be run again." is 124.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,GetTypeHandlerInfo,The length of the statement  "			while (curType != null && curType.Assembly != typeof(Gtk.Widget).Assembly && curType.Assembly != typeof(object).Assembly) {" is 123.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,GetTypeHandlerInfo,The length of the statement  "				MethodInfo[] methods = curType.GetMethods (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly);" is 141.
Long Statement,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,GetActiveWidget,The length of the statement  "				cmdManager.ActiveWidgetChanged?.Invoke (cmdManager' new ActiveWidgetEventArgs () { OldActiveWidget = cmdManager.lastActiveWidget' NewActiveWidget = newWidget });" is 161.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,ReportInvalidSignature,The length of the statement  "			throw new InvalidOperationException ("Invalid signature for command update handler: " + method.DeclaringType + "." + method.Name + "()");" is 137.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					LoggingService.LogWarning ("Slow command update ({0}ms): Command:{1}' CustomUpdater:{2}' CommandTargetType:{3}"' (int)sw.ElapsedMilliseconds' CommandId' customHandlerChain' cmdTarget.GetType ());" is 195.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					throw new InvalidOperationException ("Invalid custom update handler. An implementation of ICommandUpdateHandler was expected.");" is 128.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					throw new InvalidOperationException ("Invalid signature for command update handler: " + Method.DeclaringType + "." + Method.Name + "()");" is 137.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					LoggingService.LogWarning ("Slow command update ({0}ms): Command:{1}' Method:{2}' CommandTargetType:{3}"' (int)sw.ElapsedMilliseconds' CommandId' Method.DeclaringType + "." + Method.Name' cmdTarget.GetType ());" is 210.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					LoggingService.LogWarning ("Slow command update ({0}ms): Command:{1}' Method:{2}' CommandTargetType:{3}"' (int)sw.ElapsedMilliseconds' CommandId' Method.DeclaringType + "." + Method.Name' cmdTarget.GetType ());" is 210.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					throw new InvalidOperationException ("Invalid custom update handler. An implementation of ICommandArrayUpdateHandler was expected.");" is 133.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					throw new InvalidOperationException ("Invalid signature for command update handler: " + Method.DeclaringType + "." + Method.Name + "()");" is 137.
Long Statement,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Run,The length of the statement  "					LoggingService.LogWarning ("Slow command update ({0}ms): Command:{1}' Method:{2}' CommandTargetType:{3}"' (int)sw.ElapsedMilliseconds' CommandId' Method.DeclaringType + "." + Method.Name' cmdTarget.GetType ());" is 210.
Long Statement,MonoDevelop.Components.Commands,CommandToggleToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandToggleToolButton.cs,Update,The length of the statement  "				iconWidget.Image = iconWidget.Image.WithStyles (cmdInfo.Enabled ? "" : "disabled").WithAlpha (cmdInfo.Enabled ? 1.0 : 0.4);" is 123.
Long Statement,MonoDevelop.Components.Commands,CommandToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandToolButton.cs,Update,The length of the statement  "				iconWidget.Image = iconWidget.Image.WithStyles (cmdInfo.Enabled ? "" : "disabled").WithAlpha (cmdInfo.Enabled ? 1.0 : 0.4);" is 123.
Long Statement,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,BindingToDisplayLabel,The length of the statement  "				label = ModifierToDisplayLabel (binding.Chord.Modifier' concise) + KeyToDisplayLabel (binding.Chord.Key) + (isMac ? " " : "|");" is 127.
Long Statement,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,OnAlternateKeyBindingChanged,The length of the statement  "			var upperBound = Math.Max (args.NewKeyBinding != null ? args.NewKeyBinding.Length : 0' args.OldKeyBinding != null ? args.OldKeyBinding.Length : 0);" is 147.
Long Statement,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,CheckKeyBindingConflicts,The length of the statement  "				foreach (var key in GetBindings (cmd).Where (key => key.Contains ('|')).Select (key => key.Substring (0' key.IndexOf ('|')))) {" is 127.
Long Statement,MonoDevelop.Ide.Commands,DefaultStringTagProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\CustomStringTagProvider.cs,GetTags,The length of the statement  "			yield return new StringTagDescription ("StartupPath"' GettextCatalog.GetString ("MonoDevelop Startup Directory")' false);" is 121.
Long Statement,MonoDevelop.Ide.Commands,DefaultStringTagProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\CustomStringTagProvider.cs,GetTags,The length of the statement  "			yield return new StringTagDescription ("ConfigDir"' GettextCatalog.GetString ("MonoDevelop Configuration Directory")' false);" is 125.
Long Statement,MonoDevelop.Ide.Commands,InsertStandardHeaderHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\EditCommands.cs,Run,The length of the statement  "			string header = MonoDevelop.Ide.StandardHeader.StandardHeaderService.GetHeader (doc.Owner as SolutionFolderItem' doc.Name' false);" is 130.
Long Statement,MonoDevelop.Ide.Commands,DefaultSelectAllHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\EditCommands.cs,Update,The length of the statement  "			info.Enabled |= macfocus is AppKit.NSText || (macfocus?.Class?.Name != "GdkQuartzView" && macfocus?.RespondsToSelector (selectAllSelector) == true);" is 148.
Long Statement,MonoDevelop.Ide.Commands,OpenFileHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileCommands.cs,Run,The length of the statement  "			var dlg = new OpenFileDialog (GettextCatalog.GetString ("File to Open")' MonoDevelop.Components.FileChooserAction.Open) {" is 121.
Long Statement,MonoDevelop.Ide.Commands,NewFileHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileCommands.cs,Run,The length of the statement  "			using (var dlg = new NewFileDialog (null' null)) // new file seems to fail if I pass the project IdeApp.ProjectOperations.CurrentSelectedProject" is 144.
Long Statement,MonoDevelop.Ide.Commands,ProjectOptionsHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			info.Text = project != null ? GettextCatalog.GetString ("{0} _Options"' project.Name) : GettextCatalog.GetString ("Project _Options");" is 134.
Long Statement,MonoDevelop.Ide.Commands,BuildSolutionHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			info.Enabled = ((IdeApp.ProjectOperations.CurrentSelectedSolution != null) && (IdeApp.ProjectOperations.CurrentBuildOperation.IsCompleted));" is 140.
Long Statement,MonoDevelop.Ide.Commands,BuildHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "				info.Enabled = (buildTarget != null) && (IdeApp.ProjectOperations.CurrentBuildOperation.IsCompleted) && buildTarget.CanBuild (IdeApp.Workspace.ActiveConfiguration);" is 164.
Long Statement,MonoDevelop.Ide.Commands,RebuildSolutionHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			info.Enabled = ((IdeApp.ProjectOperations.CurrentSelectedSolution != null) && (IdeApp.ProjectOperations.CurrentBuildOperation.IsCompleted));" is 140.
Long Statement,MonoDevelop.Ide.Commands,RebuildHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "				info.Enabled = (buildTarget != null) && (IdeApp.ProjectOperations.CurrentBuildOperation.IsCompleted) && buildTarget.CanBuild (IdeApp.Workspace.ActiveConfiguration);" is 164.
Long Statement,MonoDevelop.Ide.Commands,RebuildHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "					info.Text = GettextCatalog.GetString ("R_ebuild {0}"' IdeApp.ProjectOperations.CurrentSelectedBuildTarget.Name.Replace ("_"'"__"));" is 131.
Long Statement,MonoDevelop.Ide.Commands,RunHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,RunMethod,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("An application is already running. Do you want to stop it?")' AlertButton.Stop))" is 136.
Long Statement,MonoDevelop.Ide.Commands,RunEntryHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			info.Enabled = ((buildTarget != null) && (!(buildTarget is Workspace)) && IdeApp.ProjectOperations.CanExecute (buildTarget));" is 125.
Long Statement,MonoDevelop.Ide.Commands,CleanHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "				info.Text = GettextCatalog.GetString ("C_lean {0}"' IdeApp.ProjectOperations.CurrentSelectedBuildTarget.Name.Replace ("_"'"__"));" is 129.
Long Statement,MonoDevelop.Ide.Commands,StopHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			if ((IdeApp.ProjectOperations.CurrentBuildOperation.IsCompleted) && (IdeApp.ProjectOperations.CurrentRunOperation.IsCompleted))" is 127.
Long Statement,MonoDevelop.Ide.Commands,ExportSolutionHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			// FIXME: Once we fix Workspaces to offer Visual Studio formats (instead of the deprecated MonoDevelop 1.0 format)' we can allow exporting of Workspaces as well." is 161.
Long Statement,MonoDevelop.Ide.Commands,ExportSolutionHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			if (!(IdeApp.ProjectOperations.CurrentSelectedItem is Solution) && !(IdeApp.ProjectOperations.CurrentSelectedItem is SolutionItem))" is 131.
Long Statement,MonoDevelop.Ide.Commands,SelectActiveRuntimeHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			if (enabled.GetValueOrDefault () && IdeApp.Workspace.IsOpen && Runtime.SystemAssemblyService.GetTargetRuntimes ().Count () > 1) {" is 129.
Long Statement,MonoDevelop.Ide.Commands,ApplyPolicyHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			info.Enabled = IdeApp.ProjectOperations.CurrentSelectedSolutionItem != null || IdeApp.ProjectOperations.CurrentSelectedSolution != null;" is 136.
Long Statement,MonoDevelop.Ide.Commands,ApplyPolicyHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Run,The length of the statement  "			using (var dlg = new ApplyPolicyDialog ((IPolicyProvider)IdeApp.ProjectOperations.CurrentSelectedSolutionItem ?? (IPolicyProvider)solution)) {" is 142.
Long Statement,MonoDevelop.Ide.Commands,ExportPolicyHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Update,The length of the statement  "			info.Enabled = IdeApp.ProjectOperations.CurrentSelectedSolutionItem != null || IdeApp.ProjectOperations.CurrentSelectedSolution != null;" is 136.
Long Statement,MonoDevelop.Ide.Commands,ExportPolicyHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ProjectCommands.cs,Run,The length of the statement  "			using (ExportProjectPolicyDialog dlg = new ExportProjectPolicyDialog ((IPolicyProvider)IdeApp.ProjectOperations.CurrentSelectedSolutionItem ?? (IPolicyProvider)IdeApp.ProjectOperations.CurrentSelectedSolution))" is 210.
Long Statement,MonoDevelop.Ide.Commands,ToolListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ToolsCommands.cs,Update,The length of the statement  "				commandInfo.Description = GettextCatalog.GetString ("Start tool {0}"' string.Join (string.Empty' externalTool.MenuCommand.Split('&')));" is 135.
Long Statement,MonoDevelop.Ide.Commands,EditCustomToolsHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ToolsCommands.cs,Update,The length of the statement  "			info.Text = ExternalTools.ExternalToolService.Tools.Count > 0 ? GettextCatalog.GetString ("Edit Custom Tools...") : GettextCatalog.GetString ("Add Custom Tool...");" is 164.
Long Statement,MonoDevelop.Ide.Commands,DeleteCurrentLayoutHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Run,The length of the statement  "			if (MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to delete the \u201C{0}\u201D layout?"' itemName)' AlertButton.Delete)) {" is 150.
Long Statement,MonoDevelop.Ide.Commands,SideBySideModeHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Update,The length of the statement  "			                DockNotebook.ActiveNotebook?.Container?.AllowRightInsert == true) || DockNotebook.ActiveNotebook?.Container?.SplitCount > 0;" is 124.
Long Statement,MonoDevelop.Ide.Commands,SingleModeHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Update,The length of the statement  "			                DockNotebook.ActiveNotebook?.Container?.AllowRightInsert == true) || DockNotebook.ActiveNotebook?.Container?.SplitCount > 0;" is 124.
Long Statement,MonoDevelop.Ide.Commands,FocusCurrentDocumentHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Update,The length of the statement  "			info.Enabled = IdeApp.Workbench.ActiveDocument != null && IdeApp.Workbench.ActiveDocument.GetContent<ITextView> () != null;" is 123.
Long Statement,MonoDevelop.Ide.Commands,CenterAndFocusCurrentDocumentHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Update,The length of the statement  "			info.Enabled = IdeApp.Workbench.ActiveDocument != null && IdeApp.Workbench.ActiveDocument.GetContent<ITextView> () != null;" is 123.
Long Statement,MonoDevelop.Ide.Commands,CenterAndFocusCurrentDocumentHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\ViewCommands.cs,Run,The length of the statement  "				textView.ViewScroller.EnsureSpanVisible (new SnapshotSpan (textView.Caret.Position.BufferPosition' 0)' EnsureSpanVisibleOptions.AlwaysCenter);" is 142.
Long Statement,MonoDevelop.Ide.Commands,OpenWindowListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The length of the statement  "				commandInfo.Text = window.Title.Replace ("_"' "__").Replace ("-"' "\u2013").Replace (" \u2013 " + BrandingService.ApplicationName' "");" is 135.
Long Statement,MonoDevelop.Ide.Commands,CloseAllExceptPinnedHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileTabCommands.cs,GetDocumentExceptions,The length of the statement  "					doc => ((SdiWorkspaceWindow)doc.Window).TabControl == activeNotebook && (((SdiWorkspaceWindow)doc.Window).DockNotebookTab?.IsPinned ?? false)" is 141.
Long Statement,MonoDevelop.Ide.Composition,IdeRuntimeCompositionExceptionHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Composition\CompositionManager.cs,HandleException,The length of the statement  "				var text = GettextCatalog.GetString ("There was a problem loading one or more extensions and {0} needs to be restarted."' BrandingService.ApplicationName);" is 155.
Long Statement,MonoDevelop.Ide.Composition,Caching,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Composition\CompositionManager.Caching.cs,CanUse,The length of the statement  "					if (!ValidateAssemblyCacheListIntegrity (loadedAssemblies' controlCache.AdditionalInputAssemblyInfos' cachingFaultInjector)) " is 124.
Long Statement,Microsoft.VisualStudio.Platform,NewTextSnapshotToTextReader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Composition\PlatformCatalog.cs,ReadLine,The length of the statement  "            //Handle the case where the current position is between a \r\n without crashing (but returning an empty string instead). " is 120.
Long Statement,Microsoft.VisualStudio.Platform,PlatformExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Composition\PlatformExtensions.cs,GetTextEditor,The length of the statement  "            return textBuffer.Properties.GetProperty<MonoDevelop.Ide.Editor.ITextDocument>(typeof(MonoDevelop.Ide.Editor.ITextDocument)); " is 125.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectDynamicFileContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\DynamicFileManager.cs,UpdateDynamicFiles,The length of the statement  "						bool alreadyAdded = projectInfo.Documents.Any (d => string.Equals (d.FilePath' document' StringComparison.OrdinalIgnoreCase));" is 126.
Long Statement,MonoDevelop.Ide.TypeSystem,MiscellaneousFilesWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MiscellaneousFilesWorkspace.cs,SetText,The length of the statement  "			using (var edit = textBuffer.CreateEdit (EditOptions.DefaultMinimalChange' reiteratedVersionNumber: null' editTag: 1)) { " is 120.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,OnInitialize,The length of the statement  "			AddinManager.AddExtensionNodeHandler ("/MonoDevelop/TypeSystem/Parser"' delegate (object sender' ExtensionNodeEventArgs args) {" is 127.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseFile,The length of the statement  "			return ParseFile (new ParseOptions { FileName = fileName' Project = project' Content = content }' mimeType' cancellationToken);" is 127.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseProjection,The length of the statement  "			if (parser == null || !parser.CanGenerateProjection (mimeType' options.BuildAction' options.Project?.SupportedLanguages))" is 121.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,ParseProjection,The length of the statement  "			return ParseProjection (new ParseOptions { FileName = fileName' Project = project' Content = content }' mimeType' cancellationToken);" is 133.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,CreateCacheDirectory,The length of the statement  "					string.Format ("<DerivedData><File name=\"{0}\" version =\"{1}\"/></DerivedData>"' EscapeToXml (fileName)' CurrentVersion)" is 122.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,DeserializeObject,The length of the statement  "				using (var fs = new FileStream (path' System.IO.FileMode.Open' FileAccess.Read' FileShare.Read' 4096' FileOptions.SequentialScan)) {" is 132.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,DeserializeObject,The length of the statement  "				LoggingService.LogError ("Error while trying to deserialize " + typeof(T).FullName + ". stack trace:" + Environment.StackTrace' e);" is 131.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,GetWorkspaceAsync,The length of the statement  "					solution.ExtendedProperties [typeof (WorkspaceRequestRegistration)] = registration = new WorkspaceRequestRegistration ();" is 121.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,IsOutputTrackedProject,The length of the statement  "			return outputTrackedProjects.Any (otp => string.Equals (otp.LanguageName' project.LanguageName' StringComparison.OrdinalIgnoreCase)) ||" is 135.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,IsOutputTrackedProject,The length of the statement  "				project.GetTypeTags().Any (tag => outputTrackedProjects.Any (otp => string.Equals (otp.ProjectType' tag' StringComparison.OrdinalIgnoreCase)));" is 143.
Long Statement,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,IsEmptyDocumentation,The length of the statement  "			return string.IsNullOrWhiteSpace (documentation) || documentation.StartsWith ("To be added") || documentation == "we have not entered docs yet";" is 144.
Long Statement,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetCref,The length of the statement  "				var entity = new ICSharpCode.NRefactory.Documentation.DocumentationComment (""' ctx).ResolveCref (cref.Replace("<"' "{").Replace(">"' "}"));" is 140.
Long Statement,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetCref,The length of the statement  "					ambience.ConversionFlags = ICSharpCode.NRefactory.TypeSystem.ConversionFlags.ShowParameterList | ICSharpCode.NRefactory.TypeSystem.ConversionFlags.ShowParameterNames | ICSharpCode.NRefactory.TypeSystem.ConversionFlags.ShowTypeParameterList;" is 240.
Long Statement,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,ParseBody,The length of the statement  "						result.Append ("<i>").Append (ParseBody (member' new XmlTextReader (new StringReader (inner))' "root"' options)).Append (" </i>");" is 130.
Long Statement,MonoDevelop.Ide.TypeSystem,FoldingRegion,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\FoldingRegion.cs,ToString,The length of the statement  "			return string.Format ("[FoldingRegion: Name={0}' IsFoldedByDefault={1}' Region={2}' Type={3}]"' Name' IsFoldedByDefault' Region' Type);" is 135.
Long Statement,MonoDevelop.Ide.TypeSystem,FoldingUtilities,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\ParsedDocument.cs,IsInsideMember,The length of the statement  "				if (member.BodyRegion.IsInside (region.Begin.Line' region.Begin.Column) && member.BodyRegion.IsInside (region.End.Line' region.End.Column)) " is 139.
Long Statement,MonoDevelop.Ide.TypeSystem,Comment,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Comment.cs,ToString,The length of the statement  "			return $"[Comment: OpenTag={OpenTag}' ClosingTag={ClosingTag}' Region={Region}' Text={Text}' IsDocumentation={IsDocumentation}' CommentStartsLine={CommentStartsLine}' CommentType={CommentType}]";" is 195.
Long Statement,MonoDevelop.Ide.TypeSystem,TypeSystemParserNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemParserNode.cs,CanParse,The length of the statement  "				mimeTypes  = this.mimeType != null ? new HashSet<string> (this.mimeType.Split (''').Select (s => s.Trim ())' StringComparer.Ordinal) : new HashSet<string> (StringComparer.Ordinal);" is 180.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopTextLoader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopTextLoader.cs,LoadTextAndVersionAsync,The length of the statement  "			if (IdeServices.DocumentManager?.Documents.Any (doc => doc.IsFile && doc.FileName != null && FilePath.PathComparer.Compare (Path.GetFullPath (doc.FileName)' fileName) == 0 && doc.Editor != null) == true) {" is 205.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopTextLoader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopTextLoader.cs,LoadTextAndVersionAsync,The length of the statement  "				var document = IdeServices.DocumentManager?.Documents.FirstOrDefault (doc => doc.IsFile && doc.FileName != null && FilePath.PathComparer.Compare (Path.GetFullPath (doc.FileName)' fileName) == 0 && doc.Editor != null);" is 217.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,Initialize,The length of the statement  "			    .WithChangedOption (Microsoft.CodeAnalysis.Storage.StorageOptions.SolutionSizeThreshold' MonoDevelop.Core.Platform.IsLinux ? int.MaxValue : 0); " is 143.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,Initialize,The length of the statement  "			foreach (var factory in AddinManager.GetExtensionObjects<Microsoft.CodeAnalysis.Options.IDocumentOptionsProviderFactory>("/MonoDevelop/Ide/TypeService/OptionProviders")) " is 169.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,Initialize,The length of the statement  "				Services.GetRequiredService<Microsoft.CodeAnalysis.Options.IOptionService> ().RegisterDocumentOptionsProvider (factory.TryCreate (this)); " is 137.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OnMemoryStatusChanged,The length of the statement  "					GettextCatalog.GetString ("{0} has suspended some advanced features to improve performance"' BrandingService.ApplicationName)' " is 126.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OnMemoryStatusChanged,The length of the statement  "					new InfoBarUI ("Learn more"' InfoBarUI.UIKind.HyperLink' () => desktopService.ShowUrl (LowVMMoreInfoLink)' closeAfterAction: false)' " is 132.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OnMemoryStatusChanged,The length of the statement  "					new InfoBarUI ("Restore"' InfoBarUI.UIKind.Button' () => Options = Options.WithChangedOption (RuntimeOptions.FullSolutionAnalysis' true)) " is 137.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ShouldTurnOffFullSolutionAnalysis,The length of the statement  "			return Options.GetOption (RuntimeOptions.FullSolutionAnalysis) && !Options.GetOption (RuntimeOptions.FullSolutionAnalysisInfoBarShown); " is 135.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OnEnableSourceAnalysisChanged,The length of the statement  "			var diagnosticAnalyzer = compositionManager.GetExportedValue<Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService> ();" is 127.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ReloadProjects,The length of the statement  "						var projectInfo = await ProjectHandler.LoadProjectIfCacheOutOfDate (project' framework' cts.Token).ConfigureAwait (false); " is 122.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OpenDocumentWithTextViewAsync,The length of the statement  "			var shellDoc = await IdeServices.DocumentManager.OpenDocument (new FileOpenInformation (doc.FilePath' mdProject' activate));" is 124.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The length of the statement  "			if (document.GetLinkedDocumentIds ().Length > 0 && isOpen && !(text.GetType ().FullName == "Microsoft.CodeAnalysis.Text.ChangedText")) { " is 136.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The length of the statement  "							str = formatter.FormatText (mp.Policies' currentText' TextSegment.FromBounds (Math.Max (0' startOffset - 1)' Math.Min (data.Length' startOffset + 1))); " is 151.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The length of the statement  "				var documentContext = documentManager.Documents.FirstOrDefault (d => FilePath.PathComparer.Compare (d.FileName' filePath) == 0)?.DocumentContext; " is 145.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The length of the statement  "				var annotatedNode = root.DescendantNodesAndSelf ().FirstOrDefault (n => n.HasAnnotation (typeSystemService.InsertionModeAnnotation)); " is 133.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The length of the statement  "				SyntaxToken? renameTokenOpt = root.GetAnnotatedNodesAndTokens (Microsoft.CodeAnalysis.CodeActions.RenameAnnotation.Kind) " is 120.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentTextChangedCore,The length of the statement  "										formatter.OnTheFlyFormat (editor' documentContext' TextSegment.FromBounds (Math.Max (0' startOffset - 1)' Math.Min (data.Length' startOffset + 1))); " is 148.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,UpdateProjectionsDocuments,The length of the statement  "					OnDocumentTextChanged (projectdata.DocumentData.Get (projected.Document.FileName)' new MonoDevelopSourceText (projected.Document)' PreservationMode.PreserveValue);" is 163.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,TryApplyChanges,The length of the statement  "						ProjectSaveTask = IdeApp.IsInitialized ? IdeApp.ProjectOperations.SaveAsync (tryApplyState_changedProjects) : Task.WhenAll (tryApplyState_changedProjects.Select (p => p.SaveAsync (new ProgressMonitor ()))); " is 206.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentAdded,The length of the statement  "					LoggingService.LogWarning ("Couldn't find project for newly generated file {0} (Project {1})."' info.Name' info.Id.ProjectId); " is 126.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyDocumentAdded,The length of the statement  "			var path = DetermineFilePath (info.Id' info.Name' info.FilePath' info.Folders' mdProject?.FileName.ParentDirectory' true); " is 122.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,DetermineFilePath,The length of the statement  "					string baseDirectory = Path.Combine (monoProject?.BaseDirectory ?? MonoDevelopSolution.BaseDirectory' Path.Combine (folders.ToArray ())); " is 137.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyMetadataReferenceAdded,The length of the statement  "			if (!TryGetMetadataReferenceMapping (projectId' metadataReference' out var mdProject' out string path' out var systemAssemblyOpt)) " is 130.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyMetadataReferenceRemoved,The length of the statement  "			if (!TryGetMetadataReferenceMapping (projectId' metadataReference' out var mdProject' out string path' out var systemAssemblyOpt)) " is 130.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,ApplyMetadataReferenceRemoved,The length of the statement  "				item = mdProject.References.FirstOrDefault (r => r.ReferenceType == MonoDevelop.Projects.ReferenceType.Assembly && r.Reference == path);" is 136.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,UpdateFileContent,The length of the statement  "								var parseOptions = new ParseOptions { Project = monoProject' FileName = fileName' Content = new StringTextSource (text)' BuildAction = pf.BuildAction };" is 152.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OnProjectModified,The length of the statement  "					if (!args.Any (x => x.Hint == "TargetFramework" || x.Hint == "References" || x.Hint == "CompilerParameters" || x.Hint == "CoreCompileFiles")) " is 141.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopMetadataReferenceManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopMetadataReferenceManager.cs,GetMetadata,The length of the statement  "			if (!_metadataCache.TryGetOrAddMetadata (key' new RecoverableMetadataValueSource (newMetadata' storages' lifetimeMap)' out metadata)) {" is 135.
Long Statement,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,GetComponentCategory,The length of the statement  "			var browsableState = symbol.GetAttributes ().FirstOrDefault (attr => attr.AttributeClass.Name == "CategoryAttribute" && attr.AttributeClass.ContainingNamespace.MetadataName == "System.ComponentModel");" is 201.
Long Statement,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,IsToolboxItem,The length of the statement  "			var toolboxItemAttr = symbol.GetAttributes ().FirstOrDefault (attr => attr.AttributeClass.Name == "ToolboxItemAttribute" && attr.AttributeClass.ContainingNamespace.MetadataName == "System.ComponentModel");" is 205.
Long Statement,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,IsDesignerBrowsable,The length of the statement  "			var browsableState = symbol.GetAttributes ().FirstOrDefault (attr => attr.AttributeClass.Name == "BrowsableAttribute" && attr.AttributeClass.ContainingNamespace.MetadataName == "System.ComponentModel");" is 202.
Long Statement,MonoDevelop.Ide.TypeSystem,AddMetadataReferenceOperation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopAddMetadataReferenceCodeActionOperationFactoryWorkspaceService.cs,Apply,The length of the statement  "					LoggingService.LogWarning ("Can't find project  " + projectId + " to add reference " + assemblyIdentity.GetDisplayName ());" is 123.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectionData.cs,TryGetOriginalFileFromProjection,The length of the statement  "					var projection = projectionEntry.Projections.FirstOrDefault (p => FilePath.PathComparer.Equals (p.Document.FileName' fileName));" is 128.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectionData.cs,Get,The length of the statement  "					var p = entry.Projections.FirstOrDefault (proj => proj?.Document?.FileName != null && FilePath.PathComparer.Equals (proj.Document.FileName' filePath));" is 151.
Long Statement,MonoDevelop.Ide.TypeSystem,MetadataReferenceHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.MetadataReferenceHandler.cs,CreateReferences,The length of the statement  "				var config = IdeApp.IsInitialized ? IdeApp.Workspace.ActiveConfiguration : MonoDevelop.Projects.ConfigurationSelector.Default;" is 126.
Long Statement,MonoDevelop.Ide.TypeSystem,MetadataReferenceHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.MetadataReferenceHandler.cs,AddReferences,The length of the statement  "					var referencedAssemblies = await data.Project.GetReferencedAssemblies (data.ConfigurationSelector' true).ConfigureAwait (false);" is 128.
Long Statement,MonoDevelop.Ide.TypeSystem,MetadataReferenceHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.MetadataReferenceHandler.cs,AddReferences,The length of the statement  "						var metadataReference = manager.GetOrCreateMetadataReference (file.FilePath' new MetadataReferenceProperties (aliases: aliases));" is 129.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,LoadProject,The length of the statement  "						var analyzer = new MonoDevelopAnalyzer (x' hostDiagnosticUpdateSource.Value' projectId' workspace' loader' LanguageNames.CSharp);" is 129.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,GetDotNetProjectConfiguration,The length of the statement  "				var config = workspace != null ? p.GetConfiguration (workspace.ActiveConfiguration) as DotNetProjectConfiguration : p.DefaultConfiguration as DotNetProjectConfiguration;" is 169.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,LoadProjectCacheInfo,The length of the statement  "				var (references' projectReferences) = await metadataHandler.Value.CreateReferences (p' framework' token).ConfigureAwait (false);" is 128.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateProjectInfosFromCache,The length of the statement  "						if (!workspaceCache.TryGetCachedItems (proj' workspace.MetadataReferenceManager' projectMap' framework' out var cacheInfo))" is 123.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,LoadProjectIfCacheOutOfDate,The length of the statement  "				if (!workspaceCache.TryGetCachedItems (p' workspace.MetadataReferenceManager' projectMap' framework' out var cacheInfo)) {" is 122.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateSolutionInfo,The length of the statement  "				async Task<(MonoDevelop.Projects.Solution' SolutionInfo)> CreateSolutionInfoInternal (MonoDevelop.Projects.Solution solution' CancellationToken token)" is 150.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateSolutionInfoFromCache,The length of the statement  "				async Task<(MonoDevelop.Projects.Solution' SolutionInfo)> CreateSolutionInfoFromCacheInternal (MonoDevelop.Projects.Solution solution' CancellationToken token)" is 159.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,OnSolutionOpened,The length of the statement  "				var service = (MonoDevelopPersistentStorageLocationService)workspace.Services.GetService<IPersistentStorageLocationService> ();" is 127.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateDocuments,The length of the statement  "						foreach (var projectedDocument in await GenerateProjections (f' projectData.DocumentData' p' token' oldProjectData' null)) {" is 124.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,CreateDocuments,The length of the statement  "						projectDocuments.EditorConfigDocuments.Add (CreateDocumentInfo (solutionData' p.Name' projectData' filePath' filePath));" is 120.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,GenerateProjections,The length of the statement  "					if (duplicates != null && !duplicates.Add (documentMap.GetOrCreate (projection.Document.FileName' oldProjectData?.DocumentData)))" is 129.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,GenerateProjections,The length of the statement  "						TextLoader.From (TextAndVersion.Create (new MonoDevelopSourceText (projection.Document)' VersionStamp.Create ()' projection.Document.FileName))'" is 144.
Long Statement,MonoDevelop.Ide.TypeSystem,ProjectSystemHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.ProjectSystemHandler.cs,GetFolders,The length of the statement  "				return new [] { projectName }.Concat (filePath.ParentDirectory.ToString ().Split (Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar));" is 144.
Long Statement,MonoDevelop.Ide.TypeSystem,VisualStudioUnresolvedAnalyzerReference,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopAnalyzer.cs,GetAnalyzers,The length of the statement  "				FileWatcherService.WatchDirectories (_visualStudioAnalyzer' new [] { _visualStudioAnalyzer.FullPath.ParentDirectory }).Ignore ();" is 129.
Long Statement,MonoDevelop.Ide.TypeSystem,MonoDevelopFrameworkAssemblyPathResolver,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopFrameworkAssemblyPathResolver.cs,ResolveAssemblyPath,The length of the statement  "					//if (string.IsNullOrEmpty(fullyQualifiedName) || CanResolveType(ResolveAssembly (projectId' assemblyName)' fullyQualifiedName))" is 128.
Long Statement,MonoDevelop.Ide.TypeSystem,WorkspaceFilesCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,TryGetCachedItems,The length of the statement  "				var reference = provider.GetOrCreateMetadataReference (item.FilePath' new Microsoft.CodeAnalysis.MetadataReferenceProperties(aliases: aliases));" is 144.
Long Statement,MonoDevelop.Ide.TypeSystem,WorkspaceFilesCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,TryGetCachedItems,The length of the statement  "			var prBuilder = ImmutableArray.CreateBuilder<Microsoft.CodeAnalysis.ProjectReference> (cachedData.ProjectReferences.Length);" is 124.
Long Statement,MonoDevelop.Ide.TypeSystem,WorkspaceFilesCache,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,TryGetCachedItems,The length of the statement  "				var pr = new Microsoft.CodeAnalysis.ProjectReference (projectMap.GetOrCreateId (mdProject' null' item.Framework)' aliases.ToImmutableArray ());" is 143.
Long Statement,MonoDevelop.Ide,MimeTypeCatalog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MimeTypeCatalog.cs,GetContentTypeForMimeType,The length of the statement  "				var contentType = Ide.Composition.CompositionManager.Instance.GetExportedValue<IFileToContentTypeService> ().GetContentTypeForFilePath (filePath);" is 146.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddRunOperation,The length of the statement  "			if (currentRunOperation.IsCompleted) {//if MultipleAsyncOperations is complete' we can't just restart Task.. start new one" is 122.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,JumpTo,The length of the statement  "				if (IdeServices.TypeSystemService.GetWorkspace (item.ParentSolution).TryGetOriginalFileFromProjection (filePath' offset' out projectedName' out projectedOffset)) {" is 163.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetDependentFilesToRename,The length of the statement  "				} else if (oldChildName.StartsWith (Path.GetFileNameWithoutExtension (oldName)' StringComparison.CurrentCultureIgnoreCase)) {" is 125.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetDependentFilesToRename,The length of the statement  "					childNewName = Path.GetFileNameWithoutExtension (newName) + oldChildName.Substring (Path.GetFileNameWithoutExtension (oldName).Length);" is 135.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddWorkspaceItem,The length of the statement  "						MessageService.ShowMessage (GettextCatalog.GetString ("The workspace already contains '{0}'."' Path.GetFileNameWithoutExtension (dlg.SelectedFile)));" is 149.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddSolutionItem,The length of the statement  "					MessageService.ShowMessage (GettextCatalog.GetString ("The file '{0}' is not a known project file format."' dlg.SelectedFile));" is 127.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddSolutionItem,The length of the statement  "					MessageService.ShowMessage (GettextCatalog.GetString ("The project '{0}' has already been added."' Path.GetFileNameWithoutExtension (dlg.SelectedFile)));" is 153.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,RemoveSolutionItem,The length of the statement  "			string question = GettextCatalog.GetString ("Do you really want to remove project '{0}' from '{1}'?"' item.Name' item.ParentFolder.Name);" is 137.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,RemoveSolutionItem,The length of the statement  "			string secondaryText = GettextCatalog.GetString ("The Remove option will remove the project from the solution' but it will not physically delete any file from disk.");" is 167.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,RemoveSolutionItem,The length of the statement  "			AlertButton result = MessageService.GenericAlert (MessageService.RootWindow' Gui.Stock.Question' question' secondaryText'" is 121.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ConfirmExecutionOperation,The length of the statement  "				if (MessageService.Confirm (GettextCatalog.GetString ("An application is already running and will have to be stopped. Do you want to continue?")' AlertButton.Yes)) {" is 165.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CanExecute,The length of the statement  "			ExecutionContext context = new ExecutionContext (Runtime.ProcessService.DefaultExecutionHandler' IdeServices.ProgressMonitorManager.ConsoleFactory' workspace.ActiveExecutionTarget);" is 181.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CanExecute,The length of the statement  "			ExecutionContext context = new ExecutionContext (handler' IdeServices.ProgressMonitorManager.ConsoleFactory' workspace.ActiveExecutionTarget);" is 142.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Execute,The length of the statement  "			ExecutionContext context = new ExecutionContext (handler' IdeServices.ProgressMonitorManager.ConsoleFactory' workspace.ActiveExecutionTarget);" is 142.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Execute,The length of the statement  "			ExecutionContext context = new ExecutionContext (handler' IdeServices.ProgressMonitorManager.ConsoleFactory' workspace.ActiveExecutionTarget);" is 142.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Execute,The length of the statement  "			return new AsyncOperation (ExecuteAsync (entry' context' cs' workspace.ActiveConfiguration' null' buildBeforeExecuting)' cs);" is 125.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,Execute,The length of the statement  "			return new AsyncOperation (ExecuteAsync (entry' context' cs' configuration' runConfiguration' buildBeforeExecuting)' cs);" is 121.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CanExecuteFile,The length of the statement  "			ExecutionContext context = new ExecutionContext (handler' IdeServices.ProgressMonitorManager.ConsoleFactory' workspace.ActiveExecutionTarget);" is 142.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ExecuteFile,The length of the statement  "			ExecutionContext context = new ExecutionContext (handler' IdeServices.ProgressMonitorManager.ConsoleFactory' workspace.ActiveExecutionTarget);" is 142.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CleanDone,The length of the statement  "					string warningString = GettextCatalog.GetPluralString ("{0} warning"' "{0} warnings"' result.WarningCount' result.WarningCount);" is 128.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ShowErrorsPadIfNecessary,The length of the statement  "					if (IdeServices.TaskService.Errors.Any (task => task.Severity == TaskSeverity.Error || task.Severity == TaskSeverity.Warning))" is 126.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,PromptToBuild,The length of the statement  "				GettextCatalog.GetString ("The project you are executing has changed since the last time it was compiled. Do you want to continue or rebuild it?")' " is 147.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,BuildSolutionItemAsync,The length of the statement  "					result = await entry.Build (monitor' workspace.ActiveConfiguration' true' InitOperationContext (entry' operationContext));" is 122.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,BuildDone,The length of the statement  "					string warningString = GettextCatalog.GetPluralString("{0} warning"' "{0} warnings"' result.WarningCount' result.WarningCount);" is 127.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,BuildDone,The length of the statement  "						jumpTask = tasks.FirstOrDefault (t => (t.Severity == TaskSeverity.Error || t.Severity == TaskSeverity.Warning) && TaskStore.IsProjectTaskFileInternal (t));" is 155.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddFilesToSolutionFolder,The length of the statement  "					msg.Text = GettextCatalog.GetString ("The file {0} is outside the folder directory. What do you want to do?"' fp.FileName);" is 123.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFiles,The length of the statement  "			TransferFilesInternal (monitor' sourceProject' sourcePath' targetProject' targetPath' removeFromSource' copyOnlyProjectFiles);" is 126.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,The length of the statement  "						var names = new HashSet<string> (filesToRemove.Select (f => sourceProject.BaseDirectory.Combine (f.ProjectVirtualPath).ToString ()));" is 133.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,The length of the statement  "			if (removeFromSource && sourceProject != null && pfolder.CanonicalPath != sourceProject.BaseDirectory.CanonicalPath && pfolder.IsChildPathOf (sourceProject.BaseDirectory)) {" is 173.
Long Statement,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,The length of the statement  "				if (!sourceProject.Files.GetFilesInVirtualPath (pfolder).Any () && sourceProject.Files.GetFileWithVirtualPath (pfolder) == null) {" is 130.
Long Statement,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,MoveItem,The length of the statement  "				TreeIter newiter = targetStore.AppendValues (sourceStore.GetValue (iter' 0)' sourceStore.GetValue (iter' 1)' sourceStore.GetValue (iter' 2));" is 141.
Long Statement,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The length of the statement  "			this.GdkWindow.DrawRectangle (this.Style.ForegroundGC (StateType.Insensitive)' false' 0' 0' winWidth - 1' winHeight - 1);" is 121.
Long Statement,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,OnExtensionChanged,The length of the statement  "							LoggingService.LogError ("Type " + args.ExtensionObject.GetType () + " must be a subclass of MonoDevelop.Components.Commands.CommandHandler");" is 142.
Long Statement,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,OnExtensionChanged,The length of the statement  "							commandService.OnCommandActivated (node.TypeName' reusableCommandInfo' null' null' CommandSource.Startup' startupCommandsStopwatch.Elapsed);" is 140.
Long Statement,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,UpdateInstrumentationIcon,The length of the statement  "					instrumentationStatusIcon = IdeApp.Workbench.StatusBar.ShowStatusIcon (ImageService.GetIcon (MonoDevelop.Ide.Gui.Stock.StatusInstrumentation));" is 143.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,GetStoredActiveConfiguration,The length of the statement  "			WorkspaceUserData data = loadPreferences ? item.UserProperties.GetValue<WorkspaceUserData> ("MonoDevelop.Ide.Workspace") : null;" is 128.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,The length of the statement  "						msg = GettextCatalog.GetString ("WARNING: Some documents may need to be closed' and unsaved data will be lost. You will be asked to save the unsaved documents.");" is 162.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,The length of the statement  "						msg = GettextCatalog.GetString ("WARNING: Some documents may need to be reloaded or closed' and unsaved data will be lost. You will be asked to save the unsaved documents.");" is 174.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,The length of the statement  "						msg = GettextCatalog.GetString ("WARNING: Some files may need to be reloaded' and unsaved data will be lost. You will be asked to save the unsaved files.");" is 156.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,The length of the statement  "					msg = GettextCatalog.GetString ("Some files may need to be reloaded' and editing status for those files (such as the undo queue) will be lost.");" is 145.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("The project '{0}' has been modified by an external application. Do you want to reload it?"' docs[0].Owner.Name)' msg' AlertButton.Reload))" is 194.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,CloseWorkspaceItems,The length of the statement  "						monitor.ReportWarning (GettextCatalog.GetString ("Solution was deleted and will be closed. {0}"' workspaceItem.FileName));" is 122.
Long Statement,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,CloseWorkspaceItems,The length of the statement  "						monitor.ReportWarning (GettextCatalog.GetString ("Workspace item was deleted and will be closed. {0}"' workspaceItem.FileName));" is 128.
Long Statement,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,LoadStockIcon,The length of the statement  "			return LoadStockIcon (iconCodon.Addin' iconCodon.StockId' iconCodon.Resource' iconCodon.File' iconCodon.IconId' iconCodon.IconSize' iconCodon.Animation' forceWildcard);" is 168.
Long Statement,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,GetMissingIcon,The length of the statement  "			LoggingService.LogError ("Loading gtk-missing-image icon failed. Stack Trace: " + Environment.NewLine + Environment.StackTrace);" is 128.
Long Statement,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,LoadIcon,The length of the statement  "			AnimatedImageInfo ainfo = animatedImages.Select (a => (AnimatedImageInfo) a.Target).FirstOrDefault (a => a != null && a.Image == image);" is 136.
Long Statement,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,LoadIcon,The length of the statement  "			var ainfo = animatedTreeStoreIconImages.Select (a => (AnimatedTreeStoreIconInfo)a.Target).FirstOrDefault (a => a != null && a.TreeStore == treeStore && a.Iter.Equals (iter) && a.Column == column);" is 196.
Long Statement,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,Confirm,The length of the statement  "			return GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' primaryText' secondaryText' AlertButton.Cancel' button) == button;" is 123.
Long Statement,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,Confirm,The length of the statement  "			return GenericAlert (MonoDevelop.Ide.Gui.Stock.Question' primaryText' secondaryText' confirmIsDefault ? 0 : 1' AlertButton.Cancel' button) == button;" is 149.
Long Statement,MonoDevelop.Ide,WebBrowserService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\WebBrowserService.cs,GetWebBrowser,The length of the statement  "			throw new InvalidOperationException ("Was not able to create web browser; either the consumer did not check for browser availability' or the extension tree has changed since this check.");" is 188.
Long Statement,MonoDevelop.Ide,TextFileProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.cs,IsSearchedDocument,The length of the statement  "			return doc.IsFile && doc.Editor != null && doc.FileName != null && FilePath.PathComparer.Compare (Path.GetFullPath (doc.FileName)' filePath) == 0;" is 146.
Long Statement,MonoDevelop.Ide,HelpOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\HelpOperations.cs,GetStartPlatformSpecificMonoDoc,The length of the statement  "				var mdapp = new FilePath (typeof (HelpOperations).Assembly.Location).ParentDirectory.Combine (".."' ".."' ".."' ".."' "MacOS"' "MonoDoc.app").FullPath;" is 151.
Long Statement,MonoDevelop.Ide,HelpOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\HelpOperations.cs,GetStartPlatformSpecificMonoDoc,The length of the statement  "				string mdapp = new FilePath (typeof (HelpOperations).Assembly.Location).ParentDirectory.Combine ("windoc"' "WinDoc.exe").FullPath;" is 130.
Long Statement,MonoDevelop.Ide,HelpOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\HelpOperations.cs,CheckExternalMonodoc,The length of the statement  "					BrandingService.BrandApplicationName (GettextCatalog.GetString ("You need a newer monodoc to use it externally from MonoDevelop. Using the integrated help viewer now.")));" is 171.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,The length of the statement  "				hideWelcomePage = options.NoStartWindow || startupInfo.HasFiles || IdeApp.Preferences.StartupBehaviour.Value != OnStartupBehaviour.ShowStartWindow;" is 147.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,The length of the statement  "				if (IdeApp.Preferences.StartupBehaviour.Value == OnStartupBehaviour.LoadPreviousSolution && !startupInfo.HasSolutionFile && !IdeApp.Workspace.WorkspaceItemIsOpening && !IdeApp.Workspace.IsOpen) {" is 195.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,The length of the statement  "						IdeApp.Workspace.OpenWorkspaceItem (openedProject.FileName' true' true' metadata).ContinueWith (t => IdeApp.OpenFilesAsync (startupInfo.RequestedFileList' metadata)' TaskScheduler.FromCurrentSynchronizationContext ()).Ignore();" is 227.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MSBuildAssemblyResolve,The length of the statement  "			if (!msbuildAssemblies.Any (msbuildAssembly => StringComparer.OrdinalIgnoreCase.Equals (msbuildAssembly' asmName.Name)))" is 120.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,StartLockupTracker,The length of the statement  "			if (!string.Equals (Environment.GetEnvironmentVariable ("MD_LOCKUP_TRACKER")' "ON"' StringComparison.OrdinalIgnoreCase))" is 120.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckWindowsGtk,The length of the statement  "			if (version == null || version < minVersion || location == null || !File.Exists (Path.Combine (location' "bin"' "libgtk-win32-2.0-0.dll"))) {" is 141.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,OnExtensionChanged,The length of the statement  "							LoggingService.LogError ("Type " + args.ExtensionObject.GetType () + " must be a subclass of MonoDevelop.Components.Commands.CommandHandler");" is 142.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckSCPlugin,The length of the statement  "					var res = MessageService.GenericAlert (Gtk.Stock.DialogWarning' message' BrandingService.BrandApplicationName (detail)' info' cont' close);" is 139.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckSCPlugin,The length of the statement  "						LoggingService.LogInternalError ("SCPlugin detected"' new Exception ("SCPlugin detected. Continuing " + (exists ? "Installed." : "Uninstalled.")));" is 147.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,HandleException,The length of the statement  "			var msg = String.Format ("An unhandled exception has occurred. Terminating {0}? {1}"' BrandingService.ApplicationName' willShutdown);" is 133.
Long Statement,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,LoadBrandingCustomizer,The length of the statement  "							throw new InvalidOperationException ("Customizer class specific in the branding file is not an IdeCustomizer subclass");" is 120.
Long Statement,MonoDevelop.Ide,DefaultWebCertificateProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DefaultWebCertificateProvider.cs,GetIsCertificateTrusted,The length of the statement  "							GettextCatalog.GetString ("Do you want to temporarily trust this certificate in order to connect to the server at {0}?"' uri)'" is 126.
Long Statement,MonoDevelop.Ide,RuntimeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RuntimeVersionInfo.cs,GetMonoUpdateInfo,The length of the statement  "				var s = System.IO.File.ReadAllText (MonoUpdateInfoFile).Split (new char [] { ' ' }' StringSplitOptions.RemoveEmptyEntries);" is 123.
Long Statement,MonoDevelop.Ide.Gui,ViewCommandHandlers,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ViewCommandHandlers.cs,OnReloadFile,The length of the statement  "			                                GettextCatalog.GetString ("All changes made to the document will be permanently lost.")' 0' AlertButton.Cancel' AlertButton.Revert) == AlertButton.Revert)" is 154.
Long Statement,MonoDevelop.Ide.Gui,ViewCommandHandlers,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ViewCommandHandlers.cs,UpdateEnableDisableFolding,The length of the statement  "			info.Text = IsFoldMarkerMarginEnabled ? GettextCatalog.GetString ("Disable _Folding") : GettextCatalog.GetString ("Enable _Folding");" is 133.
Long Statement,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,GetContentIncludingAllViews,The length of the statement  "			return GetControllersForContentCheck ().Select (controller => controller.GetContent (type)).FirstOrDefault (content => content != null);" is 136.
Long Statement,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,GetContentForActiveView,The length of the statement  "			return view.GetActiveControllerHierarchy ().Select (controller => controller.GetContent (type)).FirstOrDefault (content => content != null);" is 140.
Long Statement,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,SaveTask,The length of the statement  "					FileAttributes attr = FileAttributes.ReadOnly | FileAttributes.Directory | FileAttributes.Offline | FileAttributes.System;" is 122.
Long Statement,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,SaveAsTask,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("File {0} already exists. Overwrite?"' filename)' AlertButton.OverwriteFile))" is 132.
Long Statement,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,SaveAsTask,The length of the statement  "			if (fileController.Owner == null || fileController.Owner is Project project && project.GetProjectFile (filename) == null) {" is 123.
Long Statement,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,GetDocumentReaders,The length of the statement  "				var doc = documentManager.Documents.Find (d => d.GetContent<ITextBuffer> () != null && FilePath.PathComparer.Equals (f' d.FileName));" is 133.
Long Statement,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,GetDocumentReaders,The length of the statement  "					results [idx] = new Microsoft.VisualStudio.Platform.NewTextSnapshotToTextReader (doc.GetContent<ITextBuffer> ().CurrentSnapshot);" is 129.
Long Statement,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The length of the statement  "			return OpenDocument (fileName' bringToFront ? OpenDocumentOptions.Default : OpenDocumentOptions.Default & ~OpenDocumentOptions.BringToFront);" is 141.
Long Statement,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OpenDocument,The length of the statement  "			return OpenDocument (fileName' project' bringToFront ? OpenDocumentOptions.Default : OpenDocumentOptions.Default & ~OpenDocumentOptions.BringToFront);" is 150.
Long Statement,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,GetStringTagModel,The length of the statement  "				source.Add (IdeApp.ProjectOperations.CurrentSelectedSolutionItem.GetStringTagModel (IdeApp.Workspace.ActiveConfiguration));" is 123.
Long Statement,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,OnLoadingWorkspaceUserPreferences,The length of the statement  "				using (ProgressMonitor pm = ProgressMonitors.GetStatusProgressMonitor (GettextCatalog.GetString ("Loading workspace documents")' Stock.StatusSolutionOperation' true)) {" is 168.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetRunProgressMonitor,The length of the statement  "			return GetOutputProgressMonitor ("MonoDevelop.Ide.ApplicationOutput"' GettextCatalog.GetString ("Application Output")' Stock.PadExecute' false' true' titleSuffix);" is 163.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetToolOutputProgressMonitor,The length of the statement  "			return GetOutputProgressMonitor ("MonoDevelop.Ide.ToolOutput"' GettextCatalog.GetString ("Tool Output")' Stock.PadExecute' bringToFront' true);" is 143.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetLoadProgressMonitor,The length of the statement  "			return GetStatusProgressMonitor (GettextCatalog.GetString ("Loading...")' Stock.StatusSolutionOperation' true' false' lockGui);" is 127.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetSaveProgressMonitor,The length of the statement  "			return GetStatusProgressMonitor (GettextCatalog.GetString ("Saving...")' Stock.StatusSolutionOperation' true' false' lockGui);" is 126.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnCreateConsole,The length of the statement  "			return ((OutputProgressMonitor)GetOutputProgressMonitor ("MonoDevelop.Ide.ApplicationOutput"' GettextCatalog.GetString ("Application Output")' Stock.MessageLog' false' true)).Console;" is 183.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetStatusProgressMonitor,The length of the statement  "				return new StatusProgressMonitor (title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad' showCancelButton);" is 124.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,CreateMonitorPad,The length of the statement  "				pad = IdeApp.Workbench.ShowPad (monitorPad' newPadId' title' basePadId + "/Center Bottom"' DockItemStatus.AutoHide' icon);" is 122.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,CreateMonitorPad,The length of the statement  "				pad = IdeApp.Workbench.AddPad (monitorPad' newPadId' title' basePadId + "/Center Bottom"' DockItemStatus.AutoHide' icon);" is 121.
Long Statement,MonoDevelop.Ide.Gui,IdeProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnGetSearchProgressMonitor,The length of the statement  "				return Runtime.RunInMainThread (() => GetSearchProgressMonitor (bringToFront' focusPad' cancellationTokenSource)).Result;" is 121.
Long Statement,MonoDevelop.Ide.Gui,CustomConsoleFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitors.cs,OnCreateConsole,The length of the statement  "				return ((OutputProgressMonitor)IdeApp.Workbench.ProgressMonitors.GetOutputProgressMonitor ("MonoDevelop.Ide.ApplicationOutput"' GettextCatalog.GetString ("Application Output")' Stock.MessageLog' options.BringToFront' true' titleSuffix: options.Title)).Console;" is 260.
Long Statement,MonoDevelop.Ide.Gui,FileViewer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\FileViewer.cs,OpenFile,The length of the statement  "				return IdeApp.Workbench.OpenDocument (filePath' null' -1' -1' OpenDocumentOptions.Default & ~OpenDocumentOptions.TryToReuseViewer' encoding' binding);" is 150.
Long Statement,MonoDevelop.Ide.Gui,SyncContextDispatchSink,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\SyncContextAttribute.cs,SyncProcessMessage,The length of the statement  "			if ((mm.MethodBase.Name == "FieldGetter" || mm.MethodBase.Name == "FieldSetter") && mm.MethodBase.DeclaringType == typeof(object)) {" is 132.
Long Statement,MonoDevelop.Ide.Gui,SyncContextDispatchSink,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\SyncContextAttribute.cs,GetRealMethod,The length of the statement  "						MethodBase met = t.GetMethod (mm.MethodName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance' null' (Type[])mm.MethodSignature' null); " is 155.
Long Statement,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadStyle,The length of the statement  "			BaseForegroundColor = defaultStyle.Foreground (Gtk.StateType.Normal).ToXwtColor ();	// must be the text color from Gtkrc" is 120.
Long Statement,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The length of the statement  "			// WidgetBorderColor = Color.FromName ("#ff00ff"); // TODO: 8c8c8c - UNUSED (used for custom drawn `SearchEntry` but it isn’t used anymore' so its deprecated)" is 158.
Long Statement,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The length of the statement  "			PopoverWindow.ShadowColor = Color.FromName ("#000000").WithAlpha (0); // transparent since dark theme doesn't need shadows" is 122.
Long Statement,MonoDevelop.Ide.Gui,DocumentInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentRegistry.cs,GetLastWriteTime,The length of the statement  "					LastSaveTimeUtc = (Document.IsFile && !Document.IsNewDocument) ? File.GetLastWriteTimeUtc (Document.FileName) : DateTime.MinValue;" is 130.
Long Statement,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetStatusProgressMonitor,The length of the statement  "			return OnGetStatusProgressMonitor (title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad' showCancelButton);" is 125.
Long Statement,MonoDevelop.Ide.Gui,ProgressMonitorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ProgressMonitorManager.cs,GetStatusProgressMonitor,The length of the statement  "			return GetStatusProgressMonitor (title' icon' showErrorDialogs' showTaskTitle' lockGui' statusSourcePad' showCancelButton: false);" is 130.
Long Statement,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,GetTitle,The length of the statement  "					return project.Name + " – " + fileController.FilePath.ToRelative (project.BaseDirectory) + post + " – " + BrandingService.ApplicationLongName;" is 142.
Long Statement,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,InitializeLayout,The length of the statement  "				if (!visible.Contains (node.Id) && node.DefaultLayouts != null && (node.DefaultLayouts.Contains (stockLayout.Id) || node.DefaultLayouts.Contains ("*"))) {" is 154.
Long Statement,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,OnTabsReordered,The length of the statement  "			WindowReordered?.Invoke (this' new WindowReorderedEventArgs { OldPosition = oldPlacement' NewPosition = newPlacement });" is 120.
Long Statement,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The length of the statement  "			Gdk.ModifierType winSwitchModifier = Platform.IsMac ? KeyBindingManager.SelectionModifierControl : KeyBindingManager.SelectionModifierAlt;" is 138.
Long Statement,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The length of the statement  "			if ((evnt.State & winSwitchModifier) != 0 && (evnt.State & (Gdk.ModifierType.ControlMask | Gdk.ModifierType.Mod1Mask)) != (Gdk.ModifierType.ControlMask | Gdk.ModifierType.Mod1Mask)) {" is 183.
Long Statement,MonoDevelop.Ide.Gui,RoslynDocumentContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\RoslynDocumentExtension.cs,HandleRoslynProjectChange,The length of the statement  "			if (e.Kind == Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectReloaded && analysisDocument?.ProjectId == e.ProjectId) {" is 121.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,SelectFrameworks,The length of the statement  "				AddWarning (GettextCatalog.GetString ("Found multiple applicable frameworks' you need to select additional check boxes."));" is 123.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Initialize,The length of the statement  "			foreach (MimeTypeOptionsPanelNode node in AddinManager.GetExtensionNodes ("/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels"))" is 128.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,AddPanel,The length of the statement  "			var chain = new List<string> (IdeServices.DesktopService.GetMimeTypeInheritanceChain (mt).Where (mimeTypesWithPolicies.Contains));" is 130.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,LoadPolicyTypeData,The length of the statement  "			foreach (MimeTypeOptionsPanelNode node in AddinManager.GetExtensionNodes ("/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels")) {" is 130.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,LoadPolicyTypeData,The length of the statement  "				IMimeTypePolicyOptionsPanel panel = (IMimeTypePolicyOptionsPanel) node.CreateInstance (typeof(IMimeTypePolicyOptionsPanel));" is 124.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,GetItemMimeTypes,The length of the statement  "				foreach (MimeTypeOptionsPanelNode node in AddinManager.GetExtensionNodes ("/MonoDevelop/ProjectModel/Gui/MimeTypePolicyPanels")) {" is 130.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Fill,The length of the statement  "				store.AppendValues (mt' IdeServices.DesktopService.GetIconForType (mt.MimeType' Gtk.IconSize.Menu)' mt.TypeDescription);" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,OnButtonAddClicked,The length of the statement  "					store.AppendValues (mt' IdeServices.DesktopService.GetIconForType (mt.MimeType' Gtk.IconSize.Menu)' mt.TypeDescription);" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,OnButtonRemoveClicked,The length of the statement  "				if (MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to remove the formatting policy for the type '{0}'?"' mt.TypeDescription)' AlertButton.Delete)) {" is 174.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Build,The length of the statement  "			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("This is a summary of all file types used in the project or solution:");" is 133.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CombineConfigurationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineConfigurationPanel.cs,GetSelectedConfiguration,The length of the statement  "			return entry != null ? entry.ItemConfiguration : (item.DefaultConfiguration != null ? item.DefaultConfiguration.Id : "");" is 121.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CombineConfigurationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineConfigurationPanel.cs,Build,The length of the statement  "			this.label104.LabelProp = global::Mono.Unix.Catalog.GetString ("Select a target configuration for each solution item:");" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,LoadPanelContents,The length of the statement  "			delaySignCheckbutton.Sensitive = this.strongNameFileLabel.Sensitive = this.strongNameFileEntry.Sensitive = signAsm != 0;" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,SignAssemblyCheckbuttonActivated,The length of the statement  "			this.delaySignCheckbutton.Sensitive = this.strongNameFileLabel.Sensitive = this.strongNameFileEntry.Sensitive = this.signAssemblyCheckbutton.Active;" is 148.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanel.cs,LoadConfigData,The length of the statement  "			widget.Load (ConfiguredSolutionItem' CurrentConfiguration.CustomCommands' CurrentConfiguration.Selector' supportedTypes);" is 121.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanelWidget.cs,Build,The length of the statement  "			this.label3.LabelProp = global::Mono.Unix.Catalog.GetString ("MonoDevelop can execute user specified commands or scripts before' after or as a replacement of common project operations. It is also possible to enter custom commands which will be available in the project or solution menu.");" is 289.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,SetupAccessibility,The length of the statement  "			buttonRemove.SetCommonAccessibilityAttributes ("CustomCommands.Remove"' ""' GettextCatalog.GetString ("Click to remove this custom command"));" is 142.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,SetupAccessibility,The length of the statement  "			buttonBrowse.SetCommonAccessibilityAttributes ("CustomCommand.CommandBrowse"' ""' GettextCatalog.GetString ("Use a file selector to select a custom command"));" is 159.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,SetupAccessibility,The length of the statement  "			checkExternalCons.SetCommonAccessibilityAttributes ("CustomCommands.RunOnExtConsole"' ""' GettextCatalog.GetString ("Check for the command to run on an external console"));" is 172.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,SetupAccessibility,The length of the statement  "			checkPauseCons.SetCommonAccessibilityAttributes ("CustomCommands.Pause"' ""' GettextCatalog.GetString ("Check to pause the console output"));" is 141.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,ValidateChanges,The length of the statement  "				string detail = GettextCatalog.GetString ("Changing the resource naming policy may cause run-time errors if the code using resources is not properly updated. There are two options:\n\nUpdate all resource identifiers to match the new policy. This will require changes in the source code that references resources using the old policy. Identifiers explicitly set using the file properties pad won't be changed.\n\nKeep curent resource identifiers. It doesn't require source code changes. Resources added from now on will use the new policy.");" is 541.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,LoadFrom,The length of the statement  "			checkAssociateNamespacesDirectories.Active = (policy.DirectoryNamespaceAssociation != DirectoryNamespaceAssociation.None);" is 122.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The length of the statement  "			// Container child MonoDevelop.Ide.Projects.OptionPanels.NamespaceSynchronisationPanelWidget.Gtk.Container+ContainerChild" is 121.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The length of the statement  "			this.checkAssociateNamespacesDirectories.Label = global::Mono.Unix.Catalog.GetString ("_Associate namespaces with directory names");" is 132.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The length of the statement  "			this.checkVSStyleResourceNames.Label = global::Mono.Unix.Catalog.GetString ("<b>Use _Visual Studio-style resource names</b>\nVisual Studio generates a default ID for embedded resources'\ninstead of simply using the resource's filename.");" is 238.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The length of the statement  "			this.label2.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Use _Visual Studio-style resource names</b>\nVisual Studio generates a default ID for embedded resources' instead of simply using the resource's filename.");" is 222.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,DotNetProjectConfigurationExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,ResolveOutDirectoryTemplate,The length of the statement  "			// if outputDirectory does not contain the targetFramework.Id' AppendTargetFrameworkToOutputPath is false for that config" is 121.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,DotNetProjectConfigurationExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,ResolveOutDirectoryTemplate,The length of the statement  "			conf.AppendTargetFrameworkToOutputPath = dir.EndsWithTargetFramework (conf.TargetFrameworkShortName) || dir.EndsWithTargetFramework ();" is 135.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,DotNetProjectConfigurationExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,ResolveOutDirectoryTemplate,The length of the statement  "				// if so' we have to remove $(TargetFramework) at the end since msbuild will add it due to AppendTargetFrameworkToOutputPath == true" is 132.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,DotNetProjectConfigurationExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,EndsWithTargetFramework,The length of the statement  "			return directory.TrimEnd (IO.Path.DirectorySeparatorChar).EndsWith (targetFramework' StringComparison.InvariantCulture);" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CombineEntryConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionItemConfigurationsPanel.cs,Build,The length of the statement  "			// Container child MonoDevelop.Ide.Projects.OptionPanels.CombineEntryConfigurationsPanelWidget.Gtk.Container+ContainerChild" is 123.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The length of the statement  "			PackStart (new Label { Markup = string.Format ("<b>{0}</b>"' GettextCatalog.GetString ("Target Framework"))' Xalign = 0f });" is 124.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The length of the statement  "			var netstandardDesc = new Label { Markup = GettextCatalog.GetString ("Your library will be compatible with all frameworks that support the selected <a href='{0}'>.NET Standard</a> version."' netstandardDocsUrl)' Xalign = 0f };" is 226.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The length of the statement  "			pclPickerHbox.PackStart (targetFrameworkEntry = new Entry { IsEditable = false' WidthChars = 20' Name = "targetFrameworkEntry" }' false' false' 0);" is 147.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The length of the statement  "			var pclDesc = new Label { Markup = GettextCatalog.GetString ("Your library will be compatible with the frameworks supported by the selected <a href='{0}'>PCL profile</a>."' pcldDocsUrl)' Xalign = 0f };" is 201.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,CodeAnalysisPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeAnalysisPanel.cs,GetCommonData,The length of the statement  "				var runCodeAnalysisEnabled = conf.Properties.HasProperty ("RunCodeAnalysis") ? conf.Properties.GetValue<bool> ("RunCodeAnalysis") : false;" is 138.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,ApplyChanges,The length of the statement  "			foreach (var c in Project.RunConfigurations.Where (co => !configs.Any (mc => mc.EditedConfig.Name == co.Name)).ToArray ())" is 122.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,OnAddConfiguration,The length of the statement  "			using (var dlg = new RunConfigurationNameDialog (ParentWindow' ""' okCommand' panel.Configurations.Select (c => c.EditedConfig.Name))) {" is 136.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,OnCopyConfiguration,The length of the statement  "			using (var dlg = new RunConfigurationNameDialog (ParentWindow' config.Name' okCommand' panel.Configurations.Select (c => c.EditedConfig.Name))) {" is 145.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,OnRenameConfiguration,The length of the statement  "			using (var dlg = new RunConfigurationNameDialog (ParentWindow' config.Name' okCommand' panel.Configurations.Select (c => c.EditedConfig.Name))) {" is 145.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,OnRemoveConfiguration,The length of the statement  "			if (MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to remove the configuration '{0}'?"' config.Name)' AlertButton.Remove)) {" is 150.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsList.cs,Fill,The length of the statement  "				var icon = !string.IsNullOrEmpty (c.IconId) ? ImageService.GetIcon (c.IconId) : ImageService.GetIcon ("md-prefs-play"' Gtk.IconSize.Dnd);" is 137.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsList.cs,Fill,The length of the statement  "				listStore.SetValues (r' configCol' c' configNameCol' txt' configIconCol' icon' accessibleCol' c.Name + " " + c.Summary);" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,ApplyChanges,The length of the statement  "			foreach (var c in Solution.MultiStartupRunConfigurations.Where (co => !configs.Any (mc => mc.EditedConfig.Name == co.Name)).ToArray ())" is 135.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,OnAddConfiguration,The length of the statement  "			using (var dlg = new RunConfigurationNameDialog (ParentWindow' ""' okCommand' panel.Configurations.Select (c => c.EditedConfig.Name))) {" is 136.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,OnCopyConfiguration,The length of the statement  "			using (var dlg = new RunConfigurationNameDialog (ParentWindow' config.Name' okCommand' panel.Configurations.Select (c => c.EditedConfig.Name))) {" is 145.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,OnRenameConfiguration,The length of the statement  "			using (var dlg = new RunConfigurationNameDialog (ParentWindow' config.Name' okCommand' panel.Configurations.Select (c => c.EditedConfig.Name))) {" is 145.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,OnRemoveConfiguration,The length of the statement  "			if (MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to remove the configuration '{0}'?"' config.Name)' AlertButton.Remove)) {" is 150.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationPanel.cs,Initialize,The length of the statement  "			foreach (var it in config.Solution.GetAllSolutionItems ().Where (si => si.SupportsExecute ()).OrderBy (si => si.Name)) {" is 120.
Long Statement,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationPanel.cs,Initialize,The length of the statement  "				store.SetValues (row' selectedField' si != null' projectNameField' it.Name' projectField' it' runConfigField' sc' projectRunConfigsField' configs);" is 147.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,CreateView,The length of the statement  "			col = view.AppendColumn (GettextCatalog.GetString ("Line")' view.TextRenderer' "text"' Columns.Line' "foreground-gdk"' Columns.Foreground' "weight"' Columns.Bold);" is 163.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,CreateView,The length of the statement  "			col = view.AppendColumn (GettextCatalog.GetString ("Description")' view.TextRenderer' "text"' Columns.Description' "foreground-gdk"' Columns.Foreground' "weight"' Columns.Bold);" is 177.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,CreateView,The length of the statement  "			col = view.AppendColumn (GettextCatalog.GetString ("File")' view.TextRenderer' "text"' Columns.File' "foreground-gdk"' Columns.Foreground' "weight"' Columns.Bold);" is 163.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,CreateView,The length of the statement  "			col = view.AppendColumn (GettextCatalog.GetString ("Path")' view.TextRenderer' "text"' Columns.Path' "foreground-gdk"' Columns.Foreground' "weight"' Columns.Bold);" is 163.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,AddGeneratedTask,The length of the statement  "			store.AppendValues (t.Line' t.Description' tmpPath.FileName' tmpPath.ParentDirectory.FileName' t' GetColorByPriority (t.Priority)' (int)Pango.Weight.Bold);" is 155.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,OnGenTaskDelete,The length of the statement  "				var doc = await IdeApp.Workbench.OpenDocument (task.FileName' null' Math.Max (1' task.Line)' Math.Max (1' task.Column));" is 120.
Long Statement,MonoDevelop.Ide.Tasks,UserTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\UserTasksView.cs,UserTasksChanged,The length of the statement  "				store.AppendValues (text' task.Completed' task.Description' task' GetColorByPriority (task.Priority)' task.Completed ? (int)Pango.Weight.Light : (int)Pango.Weight.Bold);" is 169.
Long Statement,MonoDevelop.Ide.Tasks,UserTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\UserTasksView.cs,NewUserTaskClicked,The length of the statement  "			TreeIter iter = store.AppendValues (text' task.Completed' task.Description' task' GetColorByPriority (task.Priority)' task.Completed ? (int)Pango.Weight.Light : (int)Pango.Weight.Bold);" is 185.
Long Statement,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,GetPreviousLocation,The length of the statement  "			while (n != -1 && n < tasks.Count && (iteratingSeverity != tasks [n].Severity || string.IsNullOrEmpty (tasks [n].FileName)))" is 124.
Long Statement,MonoDevelop.Ide.Tasks,TaskListEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskListEntry.cs,HasDocumentationLink,The length of the statement  "			foreach (Extensions.ErrorDocumentationProvider ext in Mono.Addins.AddinManager.GetExtensionNodes ("/MonoDevelop/Ide/ErrorDocumentationProvider")) {" is 147.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksProvider.cs,OnWorkspaceItemClosed,The length of the statement  "					cachedUntilViewCreated = cachedUntilViewCreated.Where (x => x.Value.Workspace != ws).ToDictionary (x => x.Key' x => x.Value);" is 125.
Long Statement,MonoDevelop.Ide.Tasks,CommentTasksProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksProvider.cs,UpdateWorkspaceOptions,The length of the statement  "			ws.Options = ws.Options.WithChangedOption (TodoCommentOptions.TokenList' CommentTag.ToString (CommentTag.SpecialCommentTags' "|"));" is 131.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalTool,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalTool.cs,Run,The length of the statement  "				string customerArguments = MessageService.GetTextResponse (GettextCatalog.GetString ("Enter any arguments you want to use while launching tool' {0}:"' MenuCommand)' GettextCatalog.GetString ("Command Arguments for {0}"' MenuCommand)' "");" is 238.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalTool,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalTool.cs,RunExternalTool,The length of the statement  "					processWrapper = Runtime.ProcessService.StartProcess (commandTool' argumentsTool' initialDirectoryTool' progressMonitor.Log' progressMonitor.Log' null);" is 152.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalTool,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalTool.cs,RunExternalTool,The length of the statement  "					progressMonitor.Log.WriteLine (GettextCatalog.GetString ("Process '{0}' has exited with error code {1}"' processName' processWrapper.ExitCode));" is 144.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalTool,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalTool.cs,RunExternalTool,The length of the statement  "				progressMonitor.ReportError (GettextCatalog.GetString ("External program execution failed.\nError while starting:\n '{0} {1}'"' commandTool' argumentsTool)' ex);" is 161.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolService.cs,RegisterCommands,The length of the statement  "				cmd.Description = GettextCatalog.GetString ("Start tool {0}"' string.Join (string.Empty' tool.MenuCommand.Split ('&')));" is 120.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,SetupAccessibility,The length of the statement  "			tagSelectorArgs.Accessible.SetCommonAttributes ("ExternalTools.tagSelectorArgs"' GettextCatalog.GetString ("Argument Tags")'" is 124.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,SetupAccessibility,The length of the statement  "			tagSelectorPath.Accessible.SetCommonAttributes ("ExternalTools.tagSelectorPath"' GettextCatalog.GetString ("Working Directory Tags")'" is 133.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,GetSelectedIndex,The length of the statement  "				((ListStore) toolListBox.Model).GetIter(out selectedIter' (TreePath) toolListBox.Selection.GetSelectedRows (out lv)[0]);" is 120.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Validate,The length of the statement  "						MessageService.ShowError (String.Format (GettextCatalog.GetString ("The command of tool \"{0}\" is not set.")' tool.MenuCommand));" is 130.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Validate,The length of the statement  "						MessageService.ShowError (String.Format (GettextCatalog.GetString ("The command of tool \"{0}\" is invalid.")' tool.MenuCommand));" is 130.
Long Statement,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Validate,The length of the statement  "						MessageService.ShowError (String.Format (GettextCatalog.GetString ("The working directory of tool \"{0}\" is invalid.") 'tool.MenuCommand));" is 140.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,ToString,The length of the statement  "			return string.Format("[CodeTemplate: Group={0}' Shortcut={1}' CodeTemplateType={2}' MimeType={3}' Description={4}' Code={5}]"' Group' Shortcut' CodeTemplateType' MimeType' Description' Code);" is 191.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,DeleteTemplateShortcutBeforeCaret,The length of the statement  "			if (start > 0 && '<' == editor.GetCharAt(start - 1) && IdeServices.DesktopService.GetMimeTypeIsSubtype(editor.MimeType' "text/x-html")) " is 135.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,InsertTemplateContents,The length of the statement  "									translatedOffset += GetDeltaInsideChange (change.InsertedText' change.RemovedText' template.InsertPosition + segment.Offset - change.Offset);" is 141.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,Read,The length of the statement  "							result.CodeTemplateContext = (CodeTemplateContext)Enum.Parse (typeof (CodeTemplateContext)' reader.ReadElementContentAsString ());" is 130.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,Read,The length of the statement  "							result.CodeTemplateType = (CodeTemplateType)Enum.Parse (typeof (CodeTemplateType)' reader.ReadElementContentAsString ());" is 121.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,ConvertToTemplate,The length of the statement  "							result.AddVariable (new CodeTemplateVariable (nameBuilder.ToString ()) { Default = nameBuilder.ToString ()' IsEditable = true });" is 129.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,AddCompletionDataForMime,The length of the statement  "				list.Add (new CompletionData (ct.Shortcut' ct.Icon ' ct.Shortcut + Environment.NewLine + GettextCatalog.GetString (ct.Description)));" is 133.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,LoadTemplates,The length of the statement  "			var builtinTemplates = LoadTemplates (XmlReader.Create (typeof (CodeTemplateService).Assembly.GetManifestResourceStream (ManifestResourceName)));" is 145.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,RenderIcon,The length of the statement  "				cri.Image = ImageService.GetIcon (((TreeView)column.TreeView).GetRowExpanded (model.GetPath (iter)) ? MonoDevelop.Ide.Gui.Stock.OpenFolder : MonoDevelop.Ide.Gui.Stock.ClosedFolder' IconSize.Menu);" is 196.
Long Statement,MonoDevelop.Ide.CodeTemplates,CodeTemplateVariable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateVariable.cs,ToString,The length of the statement  "			return string.Format("[CodeTemplateVariable: Name={0}' Default={1}' ToolTip={2}' Function={3}]"' Name' Default' ToolTip' Function);" is 131.
Long Statement,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,GetCollections,The length of the statement  "						//CurrentContext.DocumentContext.GetContent <MonoDevelop.Ide.CodeCompletion.ICompletionWidget> ().CurrentCodeCompletionContext'" is 127.
Long Statement,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,RunFunction,The length of the statement  "				return new CodeTemplateListDataProvider (GetLengthProperty (callback' match.Groups == null || match.Groups.Count < 3 ? null : match.Groups[2].Value.Trim ('"')));" is 161.
Long Statement,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,LoadFileTemplate,The length of the statement  "					throw new InvalidOperationException (string.Format ("The file template class '{0}' must be a subclass of MonoDevelop.Ide.Templates.FileTemplate"' xmlNodeConfig ["Type"].InnerText));" is 181.
Long Statement,MonoDevelop.Ide.Templates,FileTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplate.cs,CanCreateUnsavedFiles,The length of the statement  "					return IdeServices.DocumentControllerService.GetSupportedControllers (fileDescriptor).Result.Any (c => c.CanUseAsDefault);" is 122.
Long Statement,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,CreateItem,The length of the statement  "			var splitType = !string.IsNullOrEmpty (type) ? type.Split (new char [] {'''}' StringSplitOptions.RemoveEmptyEntries).Select (t => t.Trim()).ToArray() : null;" is 157.
Long Statement,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,CreateItem,The length of the statement  "			if (!Services.ProjectService.CanCreateSolutionItem (projectType' projectCreateInformation' projectOptions) && projectType != lang && !string.IsNullOrEmpty (lang)) {" is 164.
Long Statement,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,CreateItem,The length of the statement  "				LoggingService.LogError ("Could not create project of type '" + string.Join ("'"' projectTypes) + "'. Project skipped");" is 120.
Long Statement,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,CreateItem,The length of the statement  "			Project project = Services.ProjectService.CreateProject (projectType' projectCreateInformation' projectOptions' flavors);" is 121.
Long Statement,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,InitializeItem,The length of the statement  "				if (policyParent.ParentSolution != null && !policyParent.ParentSolution.FileFormat.SupportsFramework (dnp.TargetFramework)) {" is 125.
Long Statement,MonoDevelop.Ide.Templates,ProjectDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,InitializeItem,The length of the statement  "					var projectFile = new ProjectFile (await resourceTemplate.SaveFileAsync (policyParent' project' defaultLanguage' project.BaseDirectory' null));" is 143.
Long Statement,MonoDevelop.Ide.Templates,ProjectReferenceDescription,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectDescriptor.cs,Create,The length of the statement  "				var projectReference = ProjectReference.CreateCustomReference ((ReferenceType)Enum.Parse (typeof(ReferenceType)' refType)' elem.GetAttribute ("refto"));" is 152.
Long Statement,MonoDevelop.Ide.Templates,ProjectTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplate.cs,CreateProjects,The length of the statement  "				throw new InvalidOperationException (GettextCatalog.GetString ("Solution template doesn't have any project templates"));" is 120.
Long Statement,MonoDevelop.Ide.Templates,ProjectTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplate.cs,SavePackageReferences,The length of the statement  "				var projectPackageReferences = new PackageReferencesForCreatedProject (((Project)solutionEntryItem).Name' ((ProjectDescriptor)descriptor).GetPackageReferences (cInfo));" is 168.
Long Statement,MonoDevelop.Ide.Templates,CodeDomFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeDomFileDescriptionTemplate.cs,CreateContent,The length of the statement  "				throw new InvalidOperationException (GettextCatalog.GetString ("The language '{0}' does not have support for CodeDom."' language));" is 131.
Long Statement,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFileAsync,The length of the statement  "				                                             GettextCatalog.GetString ("File {0} already exists.\nDo you want to overwrite the existing file or add it to the project?"' file)'" is 130.
Long Statement,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFileAsync,The length of the statement  "				Stream stream = CreateFileContentFromDerivedClass (policyParent' project' language' file' entryName) ?? await CreateFileContentAsync (policyParent' project' language' file' entryName);" is 184.
Long Statement,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFile,The length of the statement  "				                                             GettextCatalog.GetString ("File {0} already exists.\nDo you want to overwrite the existing file or add it to the project?"' file)'" is 130.
Long Statement,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateFileContentAsync,The length of the statement  "				if (ctx.CurrentConventions.UniversalConventions.TryGetIndentStyle (out Microsoft.VisualStudio.CodingConventions.IndentStyle result))" is 132.
Long Statement,MonoDevelop.Ide.Templates,SolutionDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SolutionDescriptor.cs,CreateEntry,The length of the statement  "						workspaceItemCreatedInfo.AddPackageReferenceForCreatedProject ((Project)info' (ProjectDescriptor)solutionItemDesc' projectCreateInformation);" is 141.
Long Statement,MonoDevelop.Ide.Templates,CodeTranslationFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeTranslationFileDescriptionTemplate.cs,CreateContent,The length of the statement  "					throw new InvalidOperationException (GettextCatalog.GetString ("Invalid Code Translation template: the CodeDomProvider of the source language '{0}' has not implemented the Parse method."' language));" is 199.
Long Statement,MonoDevelop.Ide.Templates,CodeTranslationFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeTranslationFileDescriptionTemplate.cs,ModifyTags,The length of the statement  "			//	throw new InvalidOperationException ("CodeTranslationFileDescriptionTemplate can only be used with a DotNetProject");" is 120.
Long Statement,MonoDevelop.Ide.Templates,CodeTranslationFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeTranslationFileDescriptionTemplate.cs,GetCodeDomProvider,The length of the statement  "				throw new InvalidOperationException (GettextCatalog.GetString ("No LanguageBinding was found for the language '{0}'."' language));" is 130.
Long Statement,MonoDevelop.Ide.Templates,CodeTranslationFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeTranslationFileDescriptionTemplate.cs,GetCodeDomProvider,The length of the statement  "				throw new InvalidOperationException (GettextCatalog.GetString ("No CodeDomProvider was found for the language '{0}'."' language));" is 130.
Long Statement,MonoDevelop.Ide.Templates,PartialTypeFileTemplateCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\PartialTypeFileTemplateCondition.cs,Load,The length of the statement  "				filter = (PartialTypeRequirement) Enum.Parse (typeof (PartialTypeRequirement)' element.GetAttribute ("Requirement")' true);" is 123.
Long Statement,MonoDevelop.Ide.Templates,XmlCodeDomReader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\XmlCodeDomReader.cs,GenerateElement,The length of the statement  "					throw new InvalidOperationException (GettextCatalog.GetString ("Property '{0}' not found in type '{1}'."' att.Name' type));" is 123.
Long Statement,MonoDevelop.Ide.Templates,XmlCodeDomReader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\XmlCodeDomReader.cs,GenerateElement,The length of the statement  "					throw new InvalidOperationException (GettextCatalog.GetString ("Property '{0}' not found in type '{1}'."' celem.Name' type));" is 125.
Long Statement,MonoDevelop.Ide.Templates,WorkspaceItemCreatedInformation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\WorkspaceItemCreatedInformation.cs,AddPackageReferenceForCreatedProject,The length of the statement  "			var packageReference = new PackageReferencesForCreatedProject (project.Name' projectDescriptor.GetPackageReferences (createInfo)); " is 130.
Long Statement,MonoDevelop.Ide.Templates,TemplateWizard,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\TemplateWizard.cs,CreateMultiProjectStartUp,The length of the statement  "			if (Parameters.GetBoolValue ("CreateBackEndProject") != true || Parameters.GetBoolValue ("IncludeBackEndProject") != true)" is 122.
Long Statement,MonoDevelop.Ide.Templates,RecentTemplates,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\TemplatingService.cs,FromRecentItem,The length of the statement  "			var templatePath = item.Uri.StartsWith (templateUriScheme' StringComparison.Ordinal) ? item.Uri.Substring (templateUriScheme.Length) : item.Uri; " is 144.
Long Statement,MonoDevelop.Ide.Templates,ProjectTemplateCategorizer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ProjectTemplateCategorizer.cs,AddMappedCategory,The length of the statement  "			foreach (string mappedCategory in category.MappedCategories.Split (new [] { ';' }' StringSplitOptions.RemoveEmptyEntries)) { " is 124.
Long Statement,MonoDevelop.Ide.Templates,PropertyDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\PropertyDescriptionTemplate.cs,AddToProjectAsync,The length of the statement  "			project.ProjectProperties.SetValue (typeAtt.Value' string.IsNullOrEmpty (fileName) ? propertyInnerText : string.Concat (fileName' extension));" is 142.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineProjectTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineProjectTemplatingProvider.cs,ProcessTemplate,The length of the statement  "				string message = string.Format ("Could not create template. Id='{0}' {1} {2}"' template.Id' result.Status' result.Message);" is 123.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineProjectTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineProjectTemplatingProvider.cs,ProcessTemplate,The length of the statement  "					workspaceItems.Add (await MonoDevelop.Projects.Services.ProjectService.ReadSolutionItem (new Core.ProgressMonitor ()' fullPath));" is 129.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineProjectTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineProjectTemplatingProvider.cs,ProcessTemplate,The length of the statement  "				processResult = new MicrosoftTemplateEngineProcessedTemplateResult (new [] { solution }' solution.FileName' config.ProjectLocation);" is 132.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineProjectTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineProjectTemplatingProvider.cs,ProcessTemplate,The length of the statement  "				processResult = new MicrosoftTemplateEngineProcessedTemplateResult (workspaceItems.ToArray ()' parentFolder.ParentSolution.FileName' config.ProjectLocation);" is 157.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineItemTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineItemTemplatingProvider.cs,ProcessTemplate,The length of the statement  "				string message = string.Format ("Could not create template. Id='{0}' {1} {2}"' template.Id' result.Status' result.Message);" is 123.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineItemTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineItemTemplatingProvider.cs,InstallNuGetPackages,The length of the statement  "			foreach (ItemTemplatePackageInstaller installer in AddinManager.GetExtensionObjects ("/MonoDevelop/Ide/ItemTemplatePackageInstallers")) {" is 137.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngine.cs,UpdateCache,The length of the statement  "			//TODO: Uncomment this IF' but also add logic to invalidate/check if new templates were added from newly installed AddOns..." is 124.
Long Statement,MonoDevelop.Ide.Templates,MicrosoftTemplateEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngine.cs,UpdateCache,The length of the statement  "			var templateInfos = settingsLoader.UserTemplateCache.List (false' t => new MatchInfo ()).ToDictionary (m => m.Info.Identity' m => m.Info);" is 138.
Long Statement,MonoDevelop.Ide.Gui.Content,DocumentStateTracker<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\DocumentStateTracker.cs,ConsoleWrite,The length of the statement  "				System.Console.WriteLine("\nError: Exception while formatting '{0}' for an array with {1} elements"' message' args == null ? 0 : args.Length);" is 142.
Long Statement,MonoDevelop.Ide.Gui.Content,TextStylePolicy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\TextStylePolicy.cs,Equals,The length of the statement  "				&& other.RemoveTrailingWhitespace == RemoveTrailingWhitespace && other.EolMarker == EolMarker && other.IndentWidth == IndentWidth;" is 130.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,CreateAssembliesTable,The length of the statement  "			foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies ().Where (a => !a.IsDynamic).OrderBy (a => a.FullName)) {" is 120.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The length of the statement  "			global::Gtk.ButtonBox.ButtonBoxChild w9 = ((global::Gtk.ButtonBox.ButtonBoxChild)(this.hbuttonbox1 [this.closeButton]));" is 120.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FillViewers,The length of the statement  "			if (IdeServices.ProjectService.IsWorkspaceItemFile (Filename) || IdeServices.ProjectService.IsSolutionItemFile (Filename)) {" is 124.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FillViewers,The length of the statement  "				if (!(Filename.EndsWith (".exe"' StringComparison.OrdinalIgnoreCase) || Filename.EndsWith (".dll"' StringComparison.OrdinalIgnoreCase)))" is 136.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,UpdateExtraWidgets,The length of the statement  "			if (IdeServices.ProjectService.IsWorkspaceItemFile (Filename) || IdeServices.ProjectService.IsSolutionItemFile (Filename)) {" is 124.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The length of the statement  "			this.labelMessage.LabelProp = global::Mono.Unix.Catalog.GetString ("The current file format for project {0} is not compatible with some settings of the project.");" is 163.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,ShowPage,The length of the statement  "			if (!IdeServices.DesktopService.AccessibilityInUse && !IdeServices.DesktopService.AccessibilityKeyboardFocusInUse || forceExpand) {" is 131.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,MultiConfigItemOptionsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsPanel.cs,Initialize,The length of the statement  "				throw new System.InvalidOperationException ("MultiConfigItemOptionsPanel can only be used in options dialogs of type MultiConfigItemOptionsDialog. Panel type: " + GetType ());" is 175.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,MultiConfigItemOptionsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsPanel.cs,CreatePanelWidget,The length of the statement  "			SemanticModelAttribute modelAttr = new SemanticModelAttribute ("configListStore__DisplayName"' "configListStore__ConfigName");" is 126.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,MultiConfigItemOptionsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsPanel.cs,UpdateSelection,The length of the statement  "			if (allowMixedConfigurations && ConfigurationsAreEqual (FilterConfigurations (dialog.ConfigurationData.Configurations))) {" is 122.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,NewFolderDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewFolderDialog.cs,FolderNameTextEntryChanged,The length of the statement  "				ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 129.
Long Statement,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The length of the statement  "			createChildrenCheck = new CheckBox { Label = GettextCatalog.GetString ("Create configurations for all solution items") };" is 121.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The length of the statement  "			this.runWithWarningsCheckBox.Label = global::Mono.Unix.Catalog.GetString("Run project if build completed with warnings");" is 121.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The length of the statement  "			this.skipBuildingUnmodifiedProjectsCheckbox.Label = global::Mono.Unix.Catalog.GetString("Skip building unmodified projects");" is 125.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The length of the statement  "			this.buildAndRunOptionsLabel.LabelProp = global::Mono.Unix.Catalog.GetString("<b>File Save Options Before Building</b>");" is 121.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The length of the statement  "			this.saveChangesRadioButton = new global::Gtk.RadioButton(global::Mono.Unix.Catalog.GetString("_Save changes to open documents"));" is 130.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The length of the statement  "			this.promptChangesRadioButton = new global::Gtk.RadioButton(global::Mono.Unix.Catalog.GetString("_Prompt to save changes to open documents"));" is 142.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The length of the statement  "			this.noSaveRadioButton = new global::Gtk.RadioButton(global::Mono.Unix.Catalog.GetString("_Don\'t save changes to open documents "));" is 133.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The length of the statement  "			this.loadUserDataCheckButton.Label = global::Mono.Unix.Catalog.GetString ("Load user-specific settings with the document"); " is 123.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The length of the statement  "			this.radioAlpha = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("Alpha updates (very often' very unstable)"));" is 130.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The length of the statement  "			global::Gtk.ButtonBox.ButtonBoxChild w9 = ((global::Gtk.ButtonBox.ButtonBoxChild)(this.hbuttonbox2 [this.buttonChange]));" is 121.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The length of the statement  "			global::Gtk.ButtonBox.ButtonBoxChild w10 = ((global::Gtk.ButtonBox.ButtonBoxChild)(this.hbuttonbox2 [this.buttonRemove]));" is 122.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The length of the statement  "			this.label.LabelProp = global::Mono.Unix.Catalog.GetString ("<i><b>Note:</b> Only Letters' Digits and Underscore are allowed.</i>");" is 132.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,SetupAccessibility,The length of the statement  "			searchEntry.Entry.SetCommonAccessibilityAttributes ("KeyBindingsPanel.searchEntry"' GettextCatalog.GetString ("Search")'" is 120.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,CreatePanelWidget,The length of the statement  "				keyStore.AppendValues (icat' cmd' label' accels' cmd.Description' (int) Pango.Weight.Normal' (string)cmd.Icon' true' true);" is 123.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,OnKeysTreeViewSelectionChange,The length of the statement  "				CurrentSelectedBinding = new KeyBindingSelectedEventArgs (binding.Split (new char [] { ' ' }' StringSplitOptions.RemoveEmptyEntries)' 0' selCommand' iter);" is 155.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,UpdateWarningLabel,The length of the statement  "							var conflName = "<span foreground='" + Styles.ErrorForegroundColor.ToHexString (false) + "'>" + confl.DisplayName + "</span>";" is 126.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,UpdateWarningLabel,The length of the statement  "							labelMessage.Markup = "<b>" + GettextCatalog.GetString ("This key combination is already bound to command '{0}' in the same context"' conflName) + "</b>";" is 154.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,UpdateWarningLabel,The length of the statement  "				var cmdname = "<span foreground='" + Styles.WarningForegroundColor.ToHexString (false) + "'>" + bindings [0].DisplayName + "</span>";" is 133.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,UpdateWarningLabel,The length of the statement  "				labelMessage.Markup = "<b>" + GettextCatalog.GetString ("This key combination is already bound to command '{0}'"' cmdname) + "</b>";" is 132.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HandleKeyTreeMotion,The length of the statement  "					if (keyBindingsPanel.conflicts != null && keyBindingsPanel.conflicts.TryGetValue (hit.AllKeys [hit.SelectedKey]' out cmdConflicts))" is 131.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HandleKeyTreeMotion,The length of the statement  "							"This shortcut is assigned to another command that is available\nin the same context. Please set a different shortcut."'" is 120.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HandleKeyTreeMotion,The length of the statement  "							"This shortcut is assigned to other commands that are available\nin the same context. Please set a different shortcut."'" is 120.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Load,The length of the statement  "			labelRestart.LabelProp = GettextCatalog.GetString ("These preferences will take effect next time you start {0}"' BrandingService.ApplicationName);" is 146.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The length of the statement  "			this.labelRestart.LabelProp = global::Mono.Unix.Catalog.GetString ("These preferences will take effect next time you start {0}");" is 129.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Get,The length of the statement  "			return checkCustom.Active? new AuthorInformation (nameEntry.Text' emailEntry.Text' copyrightEntry.Text' companyEntry.Text' trademarkEntry.Text) : null;" is 151.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,UseDefaultToggled,The length of the statement  "				info = new AuthorInformation (nameEntry.Text' emailEntry.Text' copyrightEntry.Text' companyEntry.Text' trademarkEntry.Text);" is 124.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,OnButtonAddClicked,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("Mono runtime not found")' GettextCatalog.GetString ("Please provide a valid directory prefix where mono is installed (for example' /usr)"));" is 193.
Long Statement,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The length of the statement  "			this.textview1.Buffer.Text = global::Mono.Unix.Catalog.GetString ("If you have a parallel installation of Mono you can register it here' so you can use it for building and running projects. The <b>default runtime</b> is the .NET runtime to be used for building and running applications when none is specifically selected.");" is 324.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,CreateControl,The length of the statement  "			SemanticModelAttribute modelAttr = new SemanticModelAttribute ("store__Type"' "store__Read"' "store__Task"' "store__Description");" is 130.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,FilterTasks,The length of the statement  "					canShow = (task.Description != null && task.Description.IndexOf (currentSearchPattern' StringComparison.OrdinalIgnoreCase) != -1) ||" is 132.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,FilterTasks,The length of the statement  "						(task.FileName != null && task.FileName.FileName.IndexOf (currentSearchPattern' StringComparison.OrdinalIgnoreCase) != -1) ||" is 125.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,FilterTasks,The length of the statement  "						(task.WorkspaceObject != null && task.WorkspaceObject.Name != null && task.WorkspaceObject.Name.IndexOf (currentSearchPattern' StringComparison.OrdinalIgnoreCase) != -1) ||" is 172.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,UpdateErrorsNum,The length of the statement  "			errorBtnLbl.Text = " " + string.Format(GettextCatalog.GetPluralString("{0} Error"' "{0} Errors"' errorCount)' errorCount);" is 122.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,UpdateWarningsNum,The length of the statement  "			warnBtnLbl.Text = " " + string.Format(GettextCatalog.GetPluralString("{0} Warning"' "{0} Warnings"' warningCount)' warningCount);" is 129.
Long Statement,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,UpdateMessagesNum,The length of the statement  "			msgBtnLbl.Text = " " + string.Format(GettextCatalog.GetPluralString("{0} Message"' "{0} Messages"' infoCount)' infoCount);" is 122.
Long Statement,MonoDevelop.Ide.Gui.Pads,TaskListEntryExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,GetProjectWithExtension,The length of the statement  "			return (task != null && task.WorkspaceObject is SolutionItem) ? Path.GetFileName (((SolutionItem)task.WorkspaceObject).FileName) : string.Empty;" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderNodeBuilder.cs,RenameItem,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("Solution name may not contain any of the following characters: {0}"' "'' (' )' \"' {' }' |"));" is 147.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderNodeBuilder.cs,OnNodeDrop,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to move the item '{0}' to the solution folder '{1}'?"' it.Name' folder.Name)' AlertButton.Move))" is 174.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderNodeBuilder.cs,DeleteItem,The length of the statement  "			bool yes = MessageService.Confirm (GettextCatalog.GetString ("Do you really want to remove the folder '{0}' from '{1}'?"' folder.Name' parent.Name)' AlertButton.Remove);" is 169.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,GetFolderContent,The length of the statement  "					if ((file.DependsOnFile != null && file.DependsOnFile.Subtype != Subtype.Directory) || FileNestingService.HasParent (file))" is 123.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						q = GettextCatalog.GetString ("Do you really want to move the folder '{0}' to the root folder of project '{1}'?"' what' targetProject.Name);" is 140.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						q = GettextCatalog.GetString ("Do you really want to move the folder '{0}' to the folder '{1}'?"' what' targetDirectory.FileName);" is 130.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						q = GettextCatalog.GetString ("Do you really want to copy the folder '{0}' to the root folder of project '{1}'?"' what' targetProject.Name);" is 140.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						q = GettextCatalog.GetString ("Do you really want to copy the folder '{0}' to the folder '{1}'?"' what' targetDirectory.FileName);" is 130.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						if (!MessageService.Confirm (GettextCatalog.GetString ("The file '{0}' already exists. Do you want to overwrite it?"' file.FileName)' AlertButton.OverwriteFile))" is 161.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						question = GettextCatalog.GetString ("Do you want to save the following files before the move operation?\n\n{0}"' sb.ToString ());" is 130.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "						question = GettextCatalog.GetString ("Do you want to save the following files before the copy operation?\n\n{0}"' sb.ToString ());" is 130.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "			using (var monitor = IdeApp.Workbench.ProgressMonitors.GetStatusProgressMonitor (opText' Stock.StatusSolutionOperation' true)) {" is 128.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,DropNode,The length of the statement  "				IdeApp.ProjectOperations.TransferFiles (monitor' sourceProject' source' targetProject' targetPath' move' sourceProject != null);" is 128.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,AddFilesToProject,The length of the statement  "			fdiag.CurrentFolder = !PreviousFolderPath.IsNullOrEmpty && !PreviousFolderPath.IsChildPathOf (project.ParentSolution.BaseDirectory) ? PreviousFolderPath : targetRoot;" is 166.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,UpdateAddEmptyClass,The length of the statement  "				info.Visible = IdeApp.ProjectOperations.CanCreateProjectFile (project' GetFolderPath (CurrentNode.DataItem)' "EmptyClass");" is 123.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,AddFilesFromFolder,The length of the statement  "			using (var impdlg = new IncludeNewFilesDialog (GettextCatalog.GetString ("Select files to add from {0}"' srcRoot.FileName)' srcRoot)) {" is 135.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,AddFilesFromFolder,The length of the statement  "				var added = IdeApp.ProjectOperations.AddFilesToProject (project' srcFiles.ToArray ()' targetFiles.ToArray ()' null).Any ();" is 123.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,AddExistingFolder,The length of the statement  "			using (var impdlg = new IncludeNewFilesDialog (GettextCatalog.GetString ("Select files to add from {0}"' srcRoot.FileName)' srcRoot.ParentDirectory)) {" is 151.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,BuildNode,The length of the statement  "				nodeInfo.Label = "<span foreground='" + Styles.ErrorForegroundColor.ToHexString (false) + "'>" + nodeInfo.Label + "</span>";" is 124.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,GetParentObject,The length of the statement  "			var dir = !file.IsLink ? file.FilePath.ParentDirectory : file.Project.BaseDirectory.Combine (file.ProjectVirtualPath).ParentDirectory;" is 134.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,RenameItem,The length of the statement  "				MessageService.ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,CanRenameFile,The length of the statement  "				MessageService.ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,CanRenameFile,The length of the statement  "			} else if ((newProjectFile != null && newProjectFile != file) || FileExistsCaseSensitive (file.FilePath.ParentDirectory' newName)) {" is 132.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,CanRenameFile,The length of the statement  "				MessageService.ShowWarning (GettextCatalog.GetString ("File or directory name is already in use. Please choose a different one."));" is 131.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFileNodeBuilder.cs,RemoveFilesFromProject,The length of the statement  "				if (inFolder.Count == 1 && inFolder [0] == file && project.Files.GetFileWithVirtualPath (file.ProjectVirtualPath.ParentDirectory) == null) {" is 140.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,RenameItem,The length of the statement  "						MessageService.ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,RenameItem,The length of the statement  "						MessageService.ShowWarning (GettextCatalog.GetString ("File or directory name is already in use. Please choose a different one."));" is 131.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,RenameItem,The length of the statement  "					var di = Directory.EnumerateDirectories (Path.GetDirectoryName (newFoldername)' Path.GetFileName (newFoldername)).FirstOrDefault ();" is 132.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,RenameItem,The length of the statement  "						MessageService.ShowWarning (GettextCatalog.GetString ("File or directory name is already in use. Please choose a different one."));" is 131.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,RenameItem,The length of the statement  "					MessageService.ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,DeleteFolder,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("The folder {0} could not be deleted from disk: {1}"' folder.Path' ex.Message));" is 132.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,BuildNode,The length of the statement  "			if (p.SupportsBuild () && (noMapping || !ce.Build || (missingConfig = p.Configurations [ce.ItemConfiguration] == null))) {" is 122.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,RemoveFile,The length of the statement  "						? project.BaseDirectory.Combine (file.Link.IsNullOrEmpty? file.FilePath.FileName : file.Link.ToString ()).ParentDirectory" is 121.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,RemoveFile,The length of the statement  "				if (!Directory.Exists (f.Path) && !project.Files.GetFilesInVirtualPath (f.Path.ToRelative (project.BaseDirectory)).Any ())" is 122.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,OnFilePropertyChanged,The length of the statement  "			foreach (var project in e.Where (x => propertiesThatAffectDisplay.Contains (x.Property)).Select (x => x.Project).Distinct ()) {" is 127.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesBuilderExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,BuildChildNodes,The length of the statement  "									 .Where (file => (project == null || project.Files.GetFile (file) == null) && (folderFiles == null || !folderFiles.Contains (file))) " is 131.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesBuilderExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,OnSystemFileDeleted,The length of the statement  "							if (tb.Options ["ShowAllFiles"] && (project == null || !ProjectFolderCommandHandler.PathExistsInProject (project' e.FileName))) {" is 129.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesBuilderExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,OnSystemFileDeleted,The length of the statement  "					LoggingService.LogInternalError ($"Error while updating project tree in OnSystemFileDeleted : {string.Join ("' "' args.Select (x => x.FileName))}."' ex);" is 153.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,OnNodeDrop,The length of the statement  "			using (ProgressMonitor monitor = IdeApp.Workbench.ProgressMonitors.GetStatusProgressMonitor (GettextCatalog.GetString("Copying files...")' Stock.StatusWorking' true))" is 166.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SystemFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SystemFileNodeBuilder.cs,RenameFileWithConflictCheck,The length of the statement  "					MessageService.ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SystemFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SystemFileNodeBuilder.cs,RenameFileWithConflictCheck,The length of the statement  "					MessageService.ShowWarning (GettextCatalog.GetString ("File or directory name is already in use. Please choose a different one."));" is 131.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SystemFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SystemFileNodeBuilder.cs,RenameFileWithConflictCheck,The length of the statement  "				MessageService.ShowWarning (GettextCatalog.GetString ("The name you have chosen contains illegal characters. Please choose a different name."));" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SystemFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SystemFileNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to permanently delete the file {0}?"' file.Path)' AlertButton.Delete))" is 148.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SystemFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SystemFileNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to permanently delete all selected files?")' AlertButton.Delete))" is 143.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,UnknownEntryNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\UnknownEntryNodeBuilder.cs,BuildNode,The length of the statement  "				nodeInfo.Label = GettextCatalog.GetString ("{0} <span size='small'>(Unavailable)</span>"' GLib.Markup.EscapeText (entry.Name));" is 127.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionNodeBuilder.cs,OnNodeDrop,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to move the item '{0}' to the root node of the solution?"' it.Name)' AlertButton.Move))" is 165.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "				if (MessageService.Confirm (GettextCatalog.GetString ("Do you really want to remove solution {0} from workspace {1}?"' solution.Name' parent.Name)' AlertButton.Remove)) {" is 170.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,WorkspaceNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\WorkspaceNodeBuilder.cs,OnMultipleNodeDrop,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to move the item '{0}' to the workspace '{1}'?"' it.Name' ws.Name)' AlertButton.Move))" is 164.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,WorkspaceNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\WorkspaceNodeBuilder.cs,RemoveItem,The length of the statement  "				if (MessageService.Confirm (GettextCatalog.GetString ("Do you really want to remove the item '{0}' from workspace '{1}'?"' ws.Name' parent.Name)' AlertButton.Remove)) {" is 168.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderFileNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderFileNodeBuilder.cs,BuildNode,The length of the statement  "				nodeInfo.Label = "<span foreground='" + Styles.ErrorForegroundColor.ToHexString (false) + "'>" + nodeInfo.Label + "</span>";" is 124.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderFileNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "			msg.SecondaryText = GettextCatalog.GetString ("The Delete option permanently removes the file from your hard disk. Click Remove from Solution if you only want to remove it from your current solution.");" is 202.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderFileNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "			AlertButton removeFromSolution = new AlertButton (GettextCatalog.GetString ("_Remove from Solution")' Gtk.Stock.Remove);" is 120.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderFileNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "					msg.Text = GettextCatalog.GetString ("Are you sure you want to remove the file {0} from the solution folder {1}?"' file.Name' file.Parent.Name);" is 144.
Long Statement,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderFileNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderFileNodeBuilder.cs,DeleteMultipleItems,The length of the statement  "					msg.Text = GettextCatalog.GetString ("Are you sure you want to remove the file {0} from the solution {1}?"' file.Name' file.Parent.ParentSolution.Name);" is 152.
Long Statement,MonoDevelop.Ide.StandardHeader,StandardHeaderService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderService.cs,GetHeader,The length of the statement  "			StandardHeaderPolicy headerPolicy = policyParent != null ? policyParent.Policies.Get<StandardHeaderPolicy> () : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<StandardHeaderPolicy> ();" is 198.
Long Statement,MonoDevelop.Ide.StandardHeader,StandardHeaderService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderService.cs,GetHeader,The length of the statement  "			TextStylePolicy textPolicy = policyParent != null ? policyParent.Policies.Get<TextStylePolicy> ("text/plain") : MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<TextStylePolicy> ("text/plain");" is 205.
Long Statement,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnInitialize,The length of the statement  "				Gtk.Rc.ParseString ("style \"MonoDevelop.ExtensibleTreeView_" + n + "\" {\n GtkTreeView::expander-size = " + n + "\n }\n");" is 123.
Long Statement,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnInitialize,The length of the statement  "				Gtk.Rc.ParseString ("widget \"*.MonoDevelop.ExtensibleTreeView_" + n + "\" style  \"MonoDevelop.ExtensibleTreeView_" + n + "\"\n");" is 131.
Long Statement,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetIconCellData,The length of the statement  "			var img = info.Icon != null && info.Icon != CellRendererImage.NullImage && info.DisabledStyle ? info.Icon.WithAlpha (0.5) : info.Icon;" is 134.
Long Statement,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetIconCellData,The length of the statement  "			cell.ImageExpanderClosed = info.ClosedIcon != null && info.ClosedIcon != CellRendererImage.NullImage && info.DisabledStyle ? info.ClosedIcon.WithAlpha (0.5) : info.ClosedIcon;" is 175.
Long Statement,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetBuilders,The length of the statement  "						throw new ApplicationException (string.Format ("The type node builder {0} can't be used in this context because the type {1} is already handled by {2}"' nb.GetType()' tnb.NodeDataType' other.GetType()));" is 203.
Long Statement,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetBuilders,The length of the statement  "					throw new InvalidOperationException (string.Format ("Invalid NodeBuilder type: {0}. NodeBuilders must inherit either from TypeNodeBuilder or NodeBuilderExtension"' nb.GetType()));" is 179.
Long Statement,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetupLayout,The length of the statement  "						fgColor = widget.Style.Text (IdeTheme.UserInterfaceTheme == Theme.Light ? Gtk.StateType.Selected : Gtk.StateType.Normal);" is 121.
Long Statement,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetupLayout,The length of the statement  "						newmarkup += " <span foreground='" + Styles.SecondarySelectionTextColor.ToHexString (false) + "'>" + SecondaryTextMarkup + "</span>";" is 133.
Long Statement,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetupLayout,The length of the statement  "						newmarkup += " <span foreground='" + Styles.SecondaryTextColor.ToHexString (false) + "'>" + SecondaryTextMarkup + "</span>";" is 124.
Long Statement,MonoDevelop.Ide.Gui.Components,ZoomableCellRendererPixbuf,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,Render,The length of the statement  "						ctx.DrawImage (widget' img' x + image.Width - img.Width + overlayOverflow' y + image.Height - img.Height + overlayOverflow);" is 124.
Long Statement,MonoDevelop.Ide.Gui.Components,TreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TreeBuilder.cs,GetNodeInfo,The length of the statement  "				if (tree.CopyObjects != null && ((IList)tree.CopyObjects).Contains (dataObject) && tree.CurrentTransferOperation == DragOperation.Move) {" is 137.
Long Statement,MonoDevelop.Ide.Gui.Components,TransactedTreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TransactedTreeBuilder.cs,MoveToChild,The length of the statement  "					if ((name == null || NodeName == name) && (dataType == null || (DataItem != null && dataType.IsInstanceOfType (DataItem))))" is 123.
Long Statement,MonoDevelop.Ide.Gui.Components,ExecutionModeComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExecutionModeComboBox.cs,Load,The length of the statement  "			foreach (List<IExecutionMode> modeList in ExecutionModeCommandService.GetExecutionModeCommands (ctx' includeDefault' includeDefaultCustomizer)) {" is 145.
Long Statement,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,InitSearchWidget,The length of the statement  "			buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious));" is 125.
Long Statement,MonoDevelop.Ide.CodeFormatting,CodeFormatterService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\CodeFormatterService.cs,GetFormatter,The length of the statement  "			//find the most specific formatter that can handle the document 			var chain = IdeServices.DesktopService.GetMimeTypeInheritanceChain (mimeType);" is 145.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,Format,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (startOffset)' "should be >= 0 && < " + input.Length + " was:" + startOffset);" is 124.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,Format,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (length)' "should be >= 0 && < " + (input.Length - startOffset) + " was:" + length);" is 130.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,FormatText,The length of the statement  "			return FormatImplementation (policyParent ?? PolicyService.DefaultPolicies' mimeType' new StringTextSource (input)' fromOffset' toOffset - fromOffset).Text;" is 156.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,OnTheFlyFormat,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (startOffset)' "should be >= 0 && < " + editor.Length + " was:" + startOffset);" is 125.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,OnTheFlyFormat,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (length)' "should be >= 0 && < " + (editor.Length - startOffset) + " was:" + length);" is 131.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,CorrectIndentingAsync,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (startLine)' "should be >= 1 && <= " + editor.LineCount + " was:" + startLine);" is 125.
Long Statement,MonoDevelop.Ide.CodeFormatting,AbstractCodeFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\AbstractCodeFormatter.cs,CorrectIndentingAsync,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (endLine)' "should be >= 1 && <= " + editor.LineCount + " was:" + endLine);" is 121.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The length of the statement  "					LoggingService.LogError ("Exception while translating index to utf8 (column was:" + col + " search result length:" + Length + " line text:" + lineText + ")"' e);" is 161.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The length of the statement  "			double b2 = HslColor.Brightness (SearchResultWidget.AdjustColor (widget.Style.Base (Gtk.StateType.Normal)' SyntaxHighlightingService.GetColor (widget.HighlightStyle' EditorThemeColors.Foreground)));" is 198.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The length of the statement  "			markup = FormatMarkup (PangoHelper.ColorMarkupBackground (selectedMarkup' (int)startIndex' (int)endIndex' searchColor)' trimStart' trimEnd' tabSize);" is 149.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The length of the statement  "			selectedMarkup = FormatMarkup (PangoHelper.ColorMarkupBackground (selectedMarkup' (int)startIndex' (int)endIndex' selectedSearchColor)' trimStart' trimEnd' tabSize);" is 165.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The length of the statement  "				newMarkup = await doc.GetMarkupAsync (line.Offset + markupStartOffset + indent' length' new MarkupOptions (MarkupFormat.Pango)' markupTimeoutSource.Token).ConfigureAwait (false);" is 178.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,GetDocument,The length of the statement  "			if (cachedEditor == null || cachedEditor.IsDisposed || cachedEditor.FileName != FileName || cachedEditorFileProvider != fileProvider) {" is 135.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,GetDocument,The length of the statement  "				cachedEditor = TextEditorFactory.CreateNewEditor (TextEditorFactory.CreateNewReadonlyDocument (new Core.Text.StringTextSource (content.ReadToEnd ())' FileName' IdeServices.DesktopService.GetMimeTypeForUri (FileName)));" is 218.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,GetFilterOptions,The length of the statement  "				FileMask = searchentryFileMask != null && !string.IsNullOrEmpty (searchentryFileMask.Query) ? searchentryFileMask.Query : "*"'" is 126.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,HandleReplaceClicked,The length of the statement  "			SearchReplace (comboboxentryFind.Entry.Text' comboboxentryReplace.Entry.Text ?? ""' GetScope ()' GetFilterOptions ()' () => UpdateStopButton ()' UpdateResultPad);" is 162.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,HandleSearchClicked,The length of the statement  "			SearchReplace (comboboxentryFind.Entry.Text' null' GetScope ()' GetFilterOptions ()' () => UpdateStopButton ()' UpdateResultPad);" is 129.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SearchReplace,The length of the statement  "				if (!MessageService.Confirm (GettextCatalog.GetString ("There is a search already in progress. Do you want to stop it?")' AlertButton.Stop))" is 140.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SearchReplace,The length of the statement  "						string matches = string.Format (GettextCatalog.GetPluralString ("{0} match found"' "{0} matches found"' find.FoundMatchesCount)' find.FoundMatchesCount);" is 153.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SearchReplace,The length of the statement  "						string files = string.Format (GettextCatalog.GetPluralString ("in {0} file."' "in {0} files."' find.SearchedFilesCount)' find.SearchedFilesCount);" is 146.
Long Statement,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SearchReplace,The length of the statement  "					searchMonitor.Log.WriteLine (GettextCatalog.GetString ("Search time: {0} seconds.")' (DateTime.Now - timer).TotalSeconds);" is 122.
Long Statement,MonoDevelop.Ide.FindInFiles,SelectionScope,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\Scope.cs,GetFiles,The length of the statement  "				yield return new OpenFileProvider (textView.TextBuffer' doc.Owner as Project' doc.FileName' selection.Start' selection.End);" is 124.
Long Statement,MonoDevelop.Ide.FindInFiles,FileProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FileProvider.cs,SearchDocument,The length of the statement  "			return IdeServices.DocumentManager.Documents.FirstOrDefault (d => !string.IsNullOrEmpty (d.FileName) && Path.GetFullPath (d.FileName) == fullPath);" is 147.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColors,The length of the statement  "			Color baseColor = Platform.IsMac ?treeviewSearchResults.Style.Light (treeviewSearchResults.State) : treeviewSearchResults.Style.Base (treeviewSearchResults.State);" is 163.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,FileNameDataFunc,The length of the statement  "			fileNameRenderer.Markup = MarkupText (System.IO.Path.GetFileName (searchResult.FileName) + ":" + searchResult.GetLineNumber (this)' didRead);" is 141.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,CompareFileNames,The length of the statement  "			var strCompare = string.Compare (System.IO.Path.GetFileName (searchResult1.FileName)' System.IO.Path.GetFileName (searchResult2.FileName)' StringComparison.Ordinal);" is 165.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,CompareProjectFileNames,The length of the statement  "			return string.Compare (System.IO.Path.GetFileName (searchResult1.Projects [0].FileName)' System.IO.Path.GetFileName (searchResult2.Projects [0].FileName)' StringComparison.Ordinal);" is 181.
Long Statement,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,CompareFilePaths,The length of the statement  "			return System.IO.Path.GetDirectoryName (searchResult1.FileName).CompareTo (System.IO.Path.GetDirectoryName (searchResult2.FileName));" is 133.
Long Statement,MonoDevelop.Ide.Execution,ParameterizedExecutionHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ParameterizedExecutionHandler.cs,Execute,The length of the statement  "			return InternalExecute (new CommandExecutionContext (null' command)' new ExecutionMode (""' ""' this)' command' console);" is 121.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetExecutionCommandCustomizers,The length of the statement  "			foreach (ExecutionCommandCustomizer customizer in AddinManager.GetExtensionNodes ("/MonoDevelop/Ide/ExecutionCommandEditors"' typeof(ExecutionCommandCustomizer))) {" is 164.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetExecutionCommandCustomizer,The length of the statement  "			foreach (ExecutionCommandCustomizer customizer in AddinManager.GetExtensionNodes ("/MonoDevelop/Ide/ExecutionCommandEditors"' typeof(ExecutionCommandCustomizer))) {" is 164.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GenerateExecutionModeCommands,The length of the statement  "					if ((mode.ExecutionHandler is ParameterizedExecutionHandler) || ((mode is CustomExecutionMode) && ((CustomExecutionMode)mode).PromptForParameters)) {" is 149.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetCustomModes,The length of the statement  "				CustomExecutionModes modes = ctx.Project.UserProperties.GetValue<CustomExecutionModes> ("MonoDevelop.Ide.CustomExecutionModes"' GetDataContext ());" is 147.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetCustomModes,The length of the statement  "				modes = ctx.Project.ParentSolution.UserProperties.GetValue<CustomExecutionModes> ("MonoDevelop.Ide.CustomExecutionModes"' GetDataContext ());" is 141.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetDataContext,The length of the statement  "			foreach (ExecutionCommandCustomizer customizer in AddinManager.GetExtensionNodes ("/MonoDevelop/Ide/ExecutionCommandEditors"' typeof(ExecutionCommandCustomizer))) {" is 164.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,ExecuteCommand,The length of the statement  "							var ec = new ExecutionConfiguration (dlg.SelectedConfiguration' dlg.SelectedExecutionModeSet' dlg.SelectedExecutionMode);" is 121.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,ExecuteCommand,The length of the statement  "							IdeApp.ProjectOperations.Execute (item' dlg.SelectedExecutionMode.ExecutionHandler' IdeApp.Workspace.ActiveConfiguration' dlg.SelectedConfiguration);" is 149.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,ExecuteCommand,The length of the statement  "							IdeApp.ProjectOperations.Execute (item' dlg.SelectedExecutionMode.ExecutionHandler' IdeApp.Workspace.ActiveConfiguration' dlg.SelectedConfiguration);" is 149.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,ExecuteCommand,The length of the statement  "			IdeApp.ProjectOperations.Execute (item' c.Mode.ExecutionHandler' IdeApp.Workspace.ActiveConfiguration' c.RunConfiguration);" is 123.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,GetExecutionConfigurations,The length of the statement  "			var res = item.UserProperties.GetValue<ExecutionConfiguration []> ("ExecutionConfigurations") ?? new ExecutionConfiguration [0];" is 128.
Long Statement,MonoDevelop.Ide.Execution,ExecutionConfiguration,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,Resolve,The length of the statement  "			var ctx = new CommandExecutionContext (item' h => item.CanExecute (new MonoDevelop.Projects.ExecutionContext (h' null' IdeApp.Workspace.ActiveExecutionTarget)' IdeApp.Workspace.ActiveConfiguration' RunConfiguration));" is 217.
Long Statement,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The length of the statement  "			this.checkPrompt.Label = global::Mono.Unix.Catalog.GetString ("Always show the parameters window before running this custom mode");" is 131.
Long Statement,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,OnButtonRemoveClicked,The length of the statement  "			if (mode != null && MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to delete the custom execution mode '{0}'?"' mode.Name)' AlertButton.Delete)) {" is 172.
Long Statement,MonoDevelop.Ide.Execution,MonoExecutionParametersWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersWidget.cs,OnButtonResetClicked,The length of the statement  "			if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to clear all specified options?")' AlertButton.Clear))" is 132.
Long Statement,MonoDevelop.Ide.Execution,RunConfigurationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunConfigurationService.cs,CreateEditorForConfiguration,The length of the statement  "			var node = AddinManager.GetExtensionNodes<RunConfigurationEditorExtensionNode> (EditorsExtension).FirstOrDefault (n => n.RunConfigurationType == name);" is 151.
Long Statement,MonoDevelop.Ide.Execution,ExecutionModeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeSelectorDialog.cs,LoadModes,The length of the statement  "			var ctx = new CommandExecutionContext (item' h => item.CanExecute (new ExecutionContext (h' null' IdeApp.Workspace.ActiveExecutionTarget)' IdeApp.Workspace.ActiveConfiguration' SelectedConfiguration));" is 201.
Long Statement,MonoDevelop.Ide.Execution,RunWithCustomParametersDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunWithCustomParametersDialog.cs,LoadModes,The length of the statement  "				string label = /*modes.Count (m => m.ModeSet == mode.ModeSet) == 1 ? mode.ModeSet.Name :*/ mode.ModeSet.Name + " – " + mode.Mode.Name;" is 134.
Long Statement,MonoDevelop.Ide.Execution,RunWithCustomParametersDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunWithCustomParametersDialog.cs,GetExecutionConfigurations,The length of the statement  "			var ctx = new CommandExecutionContext (project' h => project.CanExecute (new ExecutionContext (h' null' IdeApp.Workspace.ActiveExecutionTarget)' IdeApp.Workspace.ActiveConfiguration' runConfig));" is 195.
Long Statement,MonoDevelop.Ide.Extensions,FileTypeCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Extensions\FileTypeCondition.cs,Evaluate,The length of the statement  "			string [] allowedExtensions = conditionNode.GetAttribute ("fileExtensions").Split (new char[] {'''}' StringSplitOptions.RemoveEmptyEntries);" is 140.
Long Statement,MonoDevelop.Ide.Extensions,FileTypeCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Extensions\FileTypeCondition.cs,Evaluate,The length of the statement  "			string[] allowedMimes = conditionNode.GetAttribute ("mimeTypes").Split (new char[] {'''}' StringSplitOptions.RemoveEmptyEntries);" is 129.
Long Statement,MonoDevelop.Ide.Extensions,FileTypeCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Extensions\FileTypeCondition.cs,Evaluate,The length of the statement  "			string[] allowedNames = conditionNode.GetAttribute ("name").Split (new char[] {'''}' StringSplitOptions.RemoveEmptyEntries);" is 124.
Long Statement,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,Update,The length of the statement  "			while (!(shouldRun = ShouldRunGenerator (file' file.Project' force' out tool' out genFile)) && fileEnumerator.MoveNext ())" is 122.
Long Statement,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,Update,The length of the statement  "			monitor.BeginTask (GettextCatalog.GetString ("Running generator '{0}' on file '{1}'..."' file.Generator' file.Name)' 1);" is 120.
Long Statement,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,Update,The length of the statement  "				//check that we can process further. If UpdateCompleted returns `true` this means no errors or non-fatal errors occurred" is 120.
Long Statement,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,UpdateAsync,The length of the statement  "				pad = IdeApp.Workbench.ProgressMonitors.CreateMonitorPad ("MonoDevelop.Ide.ToolOutput"' GettextCatalog.GetString ("Tool Output")'" is 129.
Long Statement,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,UpdateAsync,The length of the statement  "				monitor.BeginTask (GettextCatalog.GetString ("Running generator '{0}' on file '{1}'..."' file.Generator' file.Name)' 1);" is 120.
Long Statement,MonoDevelop.Ide.CustomTools,ResXFileCodeGenerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\ResXFileCodeGenerator.cs,GenerateFile,The length of the statement  "				var ccu = StronglyTypedResourceBuilder.Create (rd' name' codeNamespace' resourcesNamespace' provider' internalClass' out unmatchable);" is 134.
Long Statement,MonoDevelop.Components,TooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipWindow.cs,OnExposeEvent,The length of the statement  "			Gtk.Style.PaintFlatBox (Style' this.GdkWindow' StateType.Normal' ShadowType.Out' evnt.Area' this' "tooltip"' 0' 0' winWidth' winHeight);" is 136.
Long Statement,MonoDevelop.Components,TooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipWindow.cs,OnSizeAllocated,The length of the statement  "				Xwt.Rectangle geometry = IdeServices.DesktopService.GetUsableMonitorGeometry (Screen.Number' Screen.GetMonitorAtPoint (x' y));" is 126.
Long Statement,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToScreenCoordinates,The length of the statement  "			return new Gdk.Rectangle (ToScreenCoordinates (widget' rect.Location)' new Gdk.Size ((int)rect.Width' (int)rect.Height));" is 121.
Long Statement,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,CreateKeyEvent,The length of the statement  "				Gdk.Keymap.Default.TranslateKeyboardState ((uint)keyCode' state' 0' out keyval' out effectiveGroup' out level' out cmods);" is 122.
Long Statement,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The length of the statement  "			var alloc = new Gdk.Rectangle (alignment.Allocation.X' box.Allocation.Y' alignment.Allocation.Width' box.Allocation.Height);" is 124.
Long Statement,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The length of the statement  "					if (hoverIndex >= 0 && hoverIndex < Path.Length && leftPath [i] == Path [hoverIndex] && (menuVisible || pressed || hovering))" is 125.
Long Statement,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The length of the statement  "					if (hoverIndex >= 0 && hoverIndex < Path.Length && rightPath [i] == Path [hoverIndex] && (menuVisible || pressed || hovering))" is 126.
Long Statement,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The length of the statement  "					Gtk.Style.PaintFocus (Style' GdkWindow' State' Allocation' this' "label"' focusRect.X' focusY' focusRect.Width' focusHeight);" is 125.
Long Statement,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,PositionWidget,The length of the statement  "			Xwt.Rectangle geometry = IdeServices.DesktopService.GetUsableMonitorGeometry (Screen.Number' Screen.GetMonitorAtPoint (dx' dy));" is 128.
Long Statement,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderOuterShadow,The length of the statement  "			using (var rg = new RadialGradient (area.X + rounding' area.Y + rounding' rounding' area.X + rounding' area.Y + rounding' size + rounding)) {" is 141.
Long Statement,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderOuterShadow,The length of the statement  "			using (var rg = new RadialGradient (area.Right - rounding' area.Y + rounding' rounding' area.Right - rounding' area.Y + rounding' size + rounding)) {" is 149.
Long Statement,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderOuterShadow,The length of the statement  "			using (var rg = new RadialGradient (area.X + rounding' area.Bottom - rounding' rounding' area.X + rounding' area.Bottom - rounding' size + rounding)) {" is 151.
Long Statement,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderOuterShadow,The length of the statement  "			using (var rg = new RadialGradient (area.Right - rounding' area.Bottom - rounding' rounding' area.Right - rounding' area.Bottom - rounding' size + rounding)) {" is 159.
Long Statement,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CachedDraw,The length of the statement  "			} else if ((surface.Data == null && parameters != null) || (surface.Data != null && !surface.Data.Equals (parameters))) {" is 121.
Long Statement,MonoDevelop.Components,Tabstrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,GetBounds,The length of the statement  "			return new Cairo.Rectangle (tab.TabPosition == TabPosition.Left ? distance : Allocation.Width - distance - tabSizes[idx].X'" is 123.
Long Statement,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,ShowPopup,The length of the statement  "			this.currentCaret = new Rectangle ((int)onScreenArea.X' (int)onScreenArea.Y' (int)onScreenArea.Width' (int)onScreenArea.Height);" is 128.
Long Statement,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,OnShown,The length of the statement  "			if (Core.Platform.IsMac && (Type == Gtk.WindowType.Popup || TypeHint == WindowTypeHint.PopupMenu || TypeHint == WindowTypeHint.Tooltip)) {" is 138.
Long Statement,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnParentSizeAllocated,The length of the statement  "			if (ParentPaned.Child1 != null && ParentPaned.Child1.Visible && ParentPaned.Child2 != null && ParentPaned.Child2.Visible) {" is 123.
Long Statement,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnParentSizeAllocated,The length of the statement  "					SizeAllocate (new Gdk.Rectangle (ParentPaned.Child1.Allocation.X + ParentPaned.Child1.Allocation.Width - centerSize' args.Allocation.Y' GrabAreaSize' args.Allocation.Height));" is 175.
Long Statement,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnParentSizeAllocated,The length of the statement  "					SizeAllocate (new Gdk.Rectangle (args.Allocation.X' ParentPaned.Child1.Allocation.Y + ParentPaned.Child1.Allocation.Height - centerSize' args.Allocation.Width' GrabAreaSize));" is 175.
Long Statement,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,HitTestPagerRightArrow,The length of the statement  "				Gdk.Rectangle arrowActiveRect = new Gdk.Rectangle (boundingBox.X + boundingBox.Width - (pagerArrowPadding * 2 + Styles.PopoverWindow.PagerTriangleSize)' " is 152.
Long Statement,MonoDevelop.Components,ImageButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ImageButton.cs,OnButtonReleaseEvent,The length of the statement  "			if (pressed && evnt.Button == 1 && new Gdk.Rectangle (0' 0' Allocation.Width' Allocation.Height).Contains ((int)evnt.X' (int)evnt.Y)) {" is 135.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,PositionListWindow,The length of the statement  "			Xwt.Rectangle geometry = IdeServices.DesktopService.GetUsableMonitorGeometry (Screen.Number' Screen.GetMonitorAtPoint (dx' dy));" is 128.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The length of the statement  "			// (default-border' inner-border' default-outside-border' etc - see http://git.gnome.org/browse/gtk+/tree/gtk/gtkbutton.c)" is 122.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The length of the statement  "			Style.PaintLayout (Style' win' state' true' textArea' this' ""' textArea.X' textArea.Y + Math.Max (0' (textArea.Height - height) / 2)' layout);" is 143.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The length of the statement  "			Gtk.Style.PaintArrow (this.Style' win' state' ShadowType.None' args.Area' this' ""' ArrowType.Up' true' arrowXPos' Allocation.Y + (Allocation.Height) / 2 - arrowHeight' arrowWidth' arrowHeight);" is 194.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The length of the statement  "			Gtk.Style.PaintArrow (this.Style' win' state' ShadowType.None' args.Area' this' ""' ArrowType.Down' true' arrowXPos' Allocation.Y + (Allocation.Height) / 2' arrowWidth' arrowHeight);" is 182.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The length of the statement  "					win.DrawLine (this.Style.DarkGC (StateType.Normal)' Allocation.X + Allocation.Width - 1' Allocation.Y' Allocation.X + Allocation.Width - 1' Allocation.Y + Allocation.Height);			" is 174.
Long Statement,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The length of the statement  "					win.DrawLine (this.Style.DarkGC (StateType.Normal)' Allocation.X' Allocation.Y' Allocation.X' Allocation.Y + Allocation.Height);			" is 128.
Long Statement,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,CreateForallCallback,The length of the statement  "			il.Emit (OpCodes.Call' typeof(GLib.ObjectManager).GetMethod ("gtksharp_get_type_id"' BindingFlags.Static | BindingFlags.NonPublic));" is 132.
Long Statement,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,CreateForallCallback,The length of the statement  "			il.Emit (OpCodes.Call' typeof (Gtk.Container).GetMethod ("gtksharp_container_base_forall"' BindingFlags.Static | BindingFlags.NonPublic));" is 138.
Long Statement,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetTooltipContext,The length of the statement  "			bool result = gtk_tree_view_get_tooltip_context (tree.Handle' ref x' ref y' keyboardTip' out handle' out intPtr2' intPtr);" is 122.
Long Statement,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,RenderIcon,The length of the statement  "				IntPtr o = gtk_icon_set_render_icon_scaled (iconset.Handle' (style != null) ? style.Handle : IntPtr.Zero' (int)direction' (int)state' (int)size' (widget != null) ? widget.Handle : IntPtr.Zero' intPtr' ref scale);" is 212.
Long Statement,MonoDevelop.Components,PoupHandlerWrapper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuExtensionsGtk.cs,HandleExposeEvent,The length of the statement  "				menu.Items [0].FireSelectedEvent (new Xwt.Rectangle (ox - rx' oy - ry' gtkMenu.Allocation.Width' gtkMenu.Allocation.Height));" is 125.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,InitializeGtk,The length of the statement  "			if (Platform.IsMac && (NSUserDefaults.StandardUserDefaults.BoolForKey ("com.monodevelop.AccessibilityEnabled") && string.IsNullOrEmpty (disableA11y))) {" is 152.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,SetupGtkTheme,The length of the statement  "				LoggingService.LogInfo ("GTK: Using Gtk theme from {0}"' Path.Combine (Gtk.Rc.ThemeDir' Gtk.Settings.Default.ThemeName));" is 121.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateGtkTheme,The length of the statement  "			if (File.Exists (Path.Combine (Gtk.Rc.ModuleDir' "libxamarin.so")) || File.Exists (Path.Combine (Gtk.Rc.ModuleDir' "libxamarin.dll")))" is 134.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "			Xwt.Toolkit.CurrentEngine.Defaults.MessageDialog.InformationIcon = ImageService.GetIcon ("gtk-dialog-info"' Gtk.IconSize.Dialog);" is 129.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "			Xwt.Toolkit.CurrentEngine.Defaults.MessageDialog.WarningIcon = ImageService.GetIcon ("gtk-dialog-warning"' Gtk.IconSize.Dialog);" is 128.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "			Xwt.Toolkit.CurrentEngine.Defaults.MessageDialog.ErrorIcon = ImageService.GetIcon ("gtk-dialog-error"' Gtk.IconSize.Dialog);" is 124.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "			Xwt.Toolkit.CurrentEngine.Defaults.MessageDialog.QuestionIcon = ImageService.GetIcon ("gtk-dialog-question"' Gtk.IconSize.Dialog);" is 130.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "			Xwt.Toolkit.CurrentEngine.Defaults.MessageDialog.ConfirmationIcon = ImageService.GetIcon ("gtk-dialog-question"' Gtk.IconSize.Dialog);" is 134.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.InformationIcon = ImageService.GetIcon ("gtk-dialog-info"' Gtk.IconSize.Dialog).ToBitmap (GtkWorkarounds.GetScaleFactor ());" is 172.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.WarningIcon = ImageService.GetIcon ("gtk-dialog-warning"' Gtk.IconSize.Dialog).ToBitmap (GtkWorkarounds.GetScaleFactor ());" is 171.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.ErrorIcon = ImageService.GetIcon ("gtk-dialog-error"' Gtk.IconSize.Dialog).ToBitmap (GtkWorkarounds.GetScaleFactor ());" is 167.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.QuestionIcon = ImageService.GetIcon ("gtk-dialog-question"' Gtk.IconSize.Dialog).ToBitmap (GtkWorkarounds.GetScaleFactor ());" is 173.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.ConfirmationIcon = ImageService.GetIcon ("gtk-dialog-question"' Gtk.IconSize.Dialog).ToBitmap (GtkWorkarounds.GetScaleFactor ());" is 177.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.InformationIcon = ImageService.GetIcon ("gtk-dialog-info"' Gtk.IconSize.Dialog);" is 128.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.WarningIcon = ImageService.GetIcon ("gtk-dialog-warning"' Gtk.IconSize.Dialog);" is 127.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.ErrorIcon = ImageService.GetIcon ("gtk-dialog-error"' Gtk.IconSize.Dialog);" is 123.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.QuestionIcon = ImageService.GetIcon ("gtk-dialog-question"' Gtk.IconSize.Dialog);" is 129.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateXwtDefaults,The length of the statement  "				Xwt.Toolkit.NativeEngine.Defaults.MessageDialog.ConfirmationIcon = ImageService.GetIcon ("gtk-dialog-question"' Gtk.IconSize.Dialog);" is 133.
Long Statement,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,ValidateGtkTheme,The length of the statement  "			MessageService.GenericAlert (Gtk.Stock.DialogWarning' message' BrandingService.BrandApplicationName (detail)' AlertButton.Ok);" is 126.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,OnGetPreferredSize,The length of the statement  "				var s = new Size (Math.Max (parent.Padding.HorizontalSpacing' Math.Max (parent.BorderSpacing.HorizontalSpacing' parent.CornerRadius.Spacing.HorizontalSpacing))'" is 160.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,OnGetPreferredSize,The length of the statement  "				                  Math.Max (parent.Padding.VerticalSpacing' Math.Max (parent.BorderSpacing.VerticalSpacing' parent.CornerRadius.Spacing.VerticalSpacing)));" is 137.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,OnReallocate,The length of the statement  "					rect.Width -= Math.Max (parent.Padding.HorizontalSpacing' Math.Max (border.HorizontalSpacing' parent.CornerRadius.Spacing.HorizontalSpacing));" is 142.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,OnReallocate,The length of the statement  "					rect.Height -= Math.Max (parent.Padding.VerticalSpacing' Math.Max (border.VerticalSpacing' parent.CornerRadius.Spacing.VerticalSpacing));" is 137.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The length of the statement  "						ctx.Arc (rect.Left + radius.TopLeft + border.Left / 2' rect.Top + radius.TopLeft + border.Top / 2' radius.TopLeft' 180' 270);" is 125.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The length of the statement  "						ctx.Arc (rect.Right - (radius.TopRight + border.Right / 2)' rect.Top + radius.TopRight + border.Top / 2' radius.TopRight' 270' 0);" is 130.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The length of the statement  "						ctx.Arc (rect.Right - (radius.BottomRight + border.Right / 2)' rect.Bottom - (radius.BottomRight + border.Bottom / 2)' radius.BottomRight' 0' 90);" is 146.
Long Statement,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The length of the statement  "						ctx.Arc (rect.Left + radius.BottomLeft + border.Left / 2' rect.Bottom - (radius.BottomLeft + border.Bottom / 2)' radius.BottomLeft' 90' 180);" is 141.
Long Statement,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,GetToolkitForWidget,The length of the statement  "			throw new NotSupportedException (string.Format ("Widget of type '{0}' does not belong to a supported Toolkit."' nativeWidget.GetType ()));" is 138.
Long Statement,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,HitTestPagerRightArrow,The length of the statement  "				Rectangle arrowActiveRect = new Rectangle (boundingBox.X + boundingBox.Width - (pagerArrowPadding * 2 + Styles.PopoverWindow.PagerTriangleSize)'" is 144.
Long Statement,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The length of the statement  "			var request = container.Surface.GetPreferredSize (true) + new Size (Padding.HorizontalSpacing' Padding.VerticalSpacing);" is 120.
Long Statement,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The length of the statement  "			win.DrawRectangle (Style.BlackGC' false' left - AreaBorderWidth' top - AreaBorderWidth' width + AreaBorderWidth*2' height + AreaBorderWidth*2);" is 143.
Long Statement,MonoDevelop.Components.PropertyGrid,EditorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\EditorManager.cs,GetEditor,The length of the statement  "				throw new Exception ("The property editor '" + editorType + "' must be a subclass of Stetic.PropertyEditorCell or implement Stetic.IPropertyEditor"); " is 149.
Long Statement,MonoDevelop.Components.PropertyGrid,EditorManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\EditorManager.cs,GetEditorType,The length of the statement  "			UITypeEditor UITypeEd = (UITypeEditor) pd.GetEditor(typeof (System.Drawing.Design.UITypeEditor));//first' does it have custom editors? " is 134.
Long Statement,MonoDevelop.Components.PropertyGrid,PropertyGrid,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,UpdateTabs,The length of the statement  "			bool visible = currentObject != null && toolbar.Children.OfType<TabRadioToolButton> ().Count (but => but.Tab.CanExtend (currentObject)) > 1;" is 140.
Long Statement,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,MeasureHeight,The length of the statement  "					r.EditorBounds = new Gdk.Rectangle (dividerX + PropertyContentLeftPadding' y' Allocation.Width - dividerX - PropertyContentLeftPadding' eh);" is 140.
Long Statement,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The length of the statement  "					ctx.DrawImage (this' img' Allocation.Width - img.Width - CategoryTopBottomPadding' y + Math.Round ((rh - img.Height) / 2));" is 123.
Long Statement,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,ShowTooltipWindow,The length of the statement  "						var multiLineValue = string.Join (Environment.NewLine' Enumerable.Range (0' (int)Math.Ceiling ((double)value.Length / chunkLength)).Select (n => string.Concat (value.Skip (n * chunkLength).Take (chunkLength))));" is 211.
Long Statement,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,ShowTooltipWindow,The length of the statement  "				tooltipWindow.ShowPopup (this' new Gdk.Rectangle (0' row.EditorBounds.Y' Allocation.Width' row.EditorBounds.Height)' PopupPosition.Right);" is 138.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,CharPropertyEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CharPropertyEditor.cs,Initialize,The length of the statement  "				throw new ApplicationException ("Char editor does not support editing values of type " + session.Property.PropertyType);" is 120.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,ColorEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\ColorEditorCell.cs,Render,The length of the statement  "				window.DrawRectangle (Container.GetNativeWidget<Gtk.Widget> ().Style.BlackGC' false' bounds.X' bounds.Y + yd' ColorBoxSize - 1' ColorBoxSize - 1); " is 146.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,ColorEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\ColorEditorCell.cs,Initialize,The length of the statement  "				throw new ApplicationException ("Color editor does not support editing values of type " + session.Property.PropertyType);" is 121.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsEditorCell.cs,Render,The length of the statement  "						Gtk.Style.PaintCheck (style' window' state' sh' bounds' Container' "checkbutton"' bounds.X + indicatorSpacing - 1' bounds.Y + dy' s' s); " is 136.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,IntRangeEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\IntRange.cs,Initialize,The length of the statement  "					throw new ApplicationException ("IntRange editor does not support editing values of type " + session.Property.PropertyType);" is 124.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,BooleanEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\BooleanEditorCell.cs,Render,The length of the statement  "			Gtk.Style.PaintCheck (style' window' state' sh' bounds' Container' "checkbutton"' bounds.X + indicatorSpacing - 1' bounds.Y + (bounds.Height - s)/2' s' s);" is 155.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,BooleanEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\BooleanEditorCell.cs,Initialize,The length of the statement  "				throw new ApplicationException ("Boolean editor does not support editing values of type " + session.Property.PropertyType);" is 123.
Long Statement,MonoDevelop.Components.PropertyGrid.PropertyEditors,PropertyTextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\PropertyTextEditor.cs,Initialize,The length of the statement  "				if (session.Property.Converter.GetStandardValuesExclusive (session) || !session.Property.Converter.CanConvertFrom (session' typeof(string))) {" is 142.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawPie,The length of the statement  "			using (RadialGradient fill = new RadialGradient (Context.X' Context.Y' 0' Context.X' Context.Y' 2.0 * Context.Radius)) {" is 120.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawFrameBorder,The length of the statement  "			CairoExtensions.RoundedRectangle (cr' alloc.X + offset' alloc.Y + offset' alloc.Width - cr.LineWidth' alloc.Height - cr.LineWidth' Context.Radius' CairoCorners.All);" is 165.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawFrameBorderFocused,The length of the statement  "			CairoExtensions.RoundedRectangle (cr' alloc.X + offset' alloc.Y + offset' alloc.Width - cr.LineWidth' alloc.Height - cr.LineWidth' Context.Radius' CairoCorners.All);" is 165.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The length of the statement  "			Cairo.Color stroke_color = CairoExtensions.ColorShade (Colors.GetWidgetColor (GtkColorClass.Background' StateType.Selected)' 0.8);" is 130.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The length of the statement  "			CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (margin + line_width) * 2.0 - right_offset' alloc.Height - (margin + line_width) * 2.0 - top_offset' Context.Radius / 2.0' CairoCorners.None);" is 284.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The length of the statement  "			CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (line_width + margin) * 2.0 - right_offset' alloc.Height - (line_width + margin) * 2.0 - right_offset' Context.Radius / 2.0' CairoCorners.All);" is 285.
Long Statement,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowCursor,The length of the statement  "			CairoExtensions.RoundedRectangle (cr' x + cr.LineWidth / 2.0' y + cr.LineWidth / 2.0' width - cr.LineWidth' height - cr.LineWidth' Context.Radius' corners' true);" is 162.
Long Statement,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawFrameBackground,The length of the statement  "			DrawFrameBackground (cr' alloc' baseColor ? colors.GetWidgetColor (GtkColorClass.Base' StateType.Normal) : colors.GetWidgetColor (GtkColorClass.Background' StateType.Normal));" is 175.
Long Statement,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawListBackground,The length of the statement  "			DrawListBackground (cr' alloc' baseColor ? colors.GetWidgetColor (GtkColorClass.Base' StateType.Normal) : colors.GetWidgetColor (GtkColorClass.Background' StateType.Normal));" is 174.
Long Statement,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,DrawRowSelection,The length of the statement  "			DrawRowSelection (cr' x' y' width' height' filled' true' colors.GetWidgetColor (GtkColorClass.Background' StateType.Selected)' CairoCorners.All);" is 145.
Long Statement,MonoDevelop.Components.Theming,ThemeEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\ThemeEngine.cs,CreateTheme,The length of the statement  "			return theme_type == null ? new GtkTheme (widget) : (Theme)Activator.CreateInstance (theme_type' new object[] { widget });" is 122.
Long Statement,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,Present,The length of the statement  "					if (autoShowFrame != null && autoShowFrame.ContainerWindow != null && autoShowFrame.ContainerWindow != (Gtk.Window)Toplevel)" is 124.
Long Statement,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,ScheduleAutoShow,The length of the statement  "					// Check is mouse over - it may be that the LeaveEvent wasn't fired becaues of a gtk bug. So we double check as a work around." is 126.
Long Statement,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,ScheduleAutoHide,The length of the statement  "						ideWindow.HasToplevelFocus || Mac.GtkMacInterop.GetGtkWindow (AppKit.NSApplication.SharedApplication.KeyWindow) == ideWindow);" is 126.
Long Statement,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,ScheduleAutoHide,The length of the statement  "						if (it.Widget.Visible && it.Widget.IsRealized && it.Widget.Allocation.Contains (px + it.Widget.Allocation.X' py + it.Widget.Allocation.Y))" is 138.
Long Statement,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The length of the statement  "				Gtk.Style.PaintFocus (Style' GdkWindow' State' Allocation' this' "button"' Allocation.X + 2' Allocation.Y + 2' Allocation.Width - 4' Allocation.Height - 4);" is 156.
Long Statement,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,AddTopLevel,The length of the statement  "				var toplevels = Gtk.Window.ListToplevels ().Where (t => t.IsRealized && t.Visible && t.TypeHint == WindowTypeHint.Dialog); // && t.TransientFor != null);" is 153.
Long Statement,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,ToCairoColor,The length of the statement  "			return new Cairo.Color (color.Red / (double) ushort.MaxValue' color.Green / (double) ushort.MaxValue' color.Blue / (double) ushort.MaxValue); " is 141.
Long Statement,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,IsSelectedPage,The length of the statement  "			if (type != DockGroupType.Tabbed || boundTabStrip == null || boundTabStrip.CurrentTab == -1 || VisibleObjects == null || boundTabStrip.CurrentTab >= VisibleObjects.Count)" is 170.
Long Statement,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,The length of the statement  "					rect = new Gdk.Rectangle (Allocation.Right - DockFrame.GroupDockSeparatorSize' Allocation.Y' DockFrame.GroupDockSeparatorSize' Allocation.Height);" is 146.
Long Statement,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,The length of the statement  "						rect = new Gdk.Rectangle (ob.Allocation.Right - DockFrame.GroupDockSeparatorSize/2' Allocation.Y' DockFrame.GroupDockSeparatorSize' Allocation.Height);" is 151.
Long Statement,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,The length of the statement  "					rect = new Gdk.Rectangle (Allocation.X' Allocation.Bottom - DockFrame.GroupDockSeparatorSize' Allocation.Width' DockFrame.GroupDockSeparatorSize);" is 146.
Long Statement,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,GetDockTarget,The length of the statement  "						rect = new Gdk.Rectangle (Allocation.X' ob.Allocation.Bottom - DockFrame.GroupDockSeparatorSize/2' Allocation.Width' DockFrame.GroupDockSeparatorSize);" is 151.
Long Statement,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,Dump,The length of the statement  "			Console.WriteLine (new string (' '' ind) + "Group (" + type + ") size:" + Size + " DefaultSize:" + DefaultSize + " alloc:" + Allocation);" is 137.
Long Statement,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,SizeAllocate,The length of the statement  "			if ((ParentGroup.Type != DockGroupType.Tabbed || ParentGroup.VisibleObjects.Count == 1) && (item.Behavior & DockItemBehavior.NoGrip) == 0) {" is 140.
Long Statement,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,The length of the statement  "					rect = new Gdk.Rectangle (rect.X + xdockMargin' rect.Y + ydockMargin' rect.Width - xdockMargin*2' rect.Height - ydockMargin*2);" is 127.
Long Statement,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,The length of the statement  "					outrect = new Gdk.Rectangle (rect.X + xdockMargin' rect.Y + ydockMargin' rect.Width - xdockMargin*2' rect.Height - ydockMargin*2);" is 130.
Long Statement,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,UpdateVisualStyle,The length of the statement  "				labelWidget.ModifyText (StateType.Normal' (active ? visualStyle.PadTitleLabelColor.Value : visualStyle.InactivePadTitleLabelColor.Value).ToGdkColor ());" is 152.
Long Statement,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,OnMotionNotifyEvent,The length of the statement  "			if (tabPressed && !item.Behavior.HasFlag (DockItemBehavior.NoGrip) && Math.Abs (evnt.X - pressX) > 3 && Math.Abs (evnt.Y - pressY) > 3) {" is 137.
Long Statement,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,DrawNormal,The length of the statement  "					var cg = new Cairo.RadialGradient (rect.X + rect.Width / 2' rect.Y + rect.Height / 2' 0' rect.X' rect.Y + rect.Height / 2' rect.Height / 2);" is 140.
Long Statement,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,DrawNormal,The length of the statement  "					cg = new Cairo.RadialGradient (rect.X + rect.Width / 2' rect.Y + rect.Height / 2' 0' rect.X' rect.Y + rect.Height / 2' rect.Height / 2);" is 136.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindow.cs,RepositionWindow,The length of the statement  "			var r = newCaret != null ? new Xwt.Rectangle ((int)newCaret.Value.X' (int)newCaret.Value.Y' (int)newCaret.Value.Width' (int)newCaret.Value.Height) : (Xwt.Rectangle?)null;" is 170.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindowManager.cs,UpdateCursorPosition,The length of the statement  "			if (actualMethodGroup.MethodProvider != null && (currentMethodGroup == null || !actualMethodGroup.MethodProvider.Equals (currentMethodGroup.MethodProvider)))" is 157.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindowManager.cs,UpdateOverload,The length of the statement  "			int bestOverload = await ext.GuessBestMethodOverload (currentMethodGroup.MethodProvider' currentMethodGroup.CurrentOverload' token);" is 132.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindowManager.cs,WindowBoundsChanged,The length of the statement  "			if (window.Size.Width == lastW && window.Size.Height == lastH && wasCompletionWindowVisible == (CompletionWindowManager.Wnd?.Visible ?? false))" is 143.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindowManager.cs,PositionParameterInfoWindow,The length of the statement  "			int cparam = window.Ext != null ? await window.Ext.GetCurrentParameterIndex (currentMethodGroup.MethodProvider.ParameterListStart) : 0;" is 135.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindowManager.cs,PositionParameterInfoWindow,The length of the statement  "			window.ShowParameterInfo (currentMethodGroup.MethodProvider' currentMethodGroup.CurrentOverload' cparam - 1' (int)geometry.Width);" is 130.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,The length of the statement  "				var completionWindow = new Xwt.Rectangle (CompletionWindowManager.X' CompletionWindowManager.Y - lineHeight' CompletionWindowManager.Wnd.Allocation.Width' CompletionWindowManager.Wnd.Allocation.Height + lineHeight * 2);" is 219.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowParameterInfo,The length of the statement  "				currentTooltipInformation = await parameterHintingData.CreateTooltipInformation (ext.Editor' ext.DocumentContext' currentParam' false' ct.Token);" is 145.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowTooltipInfo,The length of the statement  "				descriptionBox.PackStart (CreateCategory (TooltipInformationWindow.GetHeaderMarkup (cat.Item1)' cat.Item2)' true' true' 4);" is 123.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowTooltipInfo,The length of the statement  "				descriptionBox.PackStart (CreateCategory (TooltipInformationWindow.GetHeaderMarkup (GettextCatalog.GetString ("Summary"))' currentTooltipInformation.SummaryMarkup)' true' true' 4);" is 180.
Long Statement,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,CreateCategory,The length of the statement  "			return TooltipInformationWindow.CreateCategory (categoryName' categoryContentMarkup' foreColor' Theme.Font.ToPangoFont ());" is 123.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionData.cs,ToString,The length of the statement  "			return string.Format ("[CompletionData: Icon={0}' DisplayText={1}' Description={2}' CompletionText={3}' DisplayFlags={4}]"' Icon' DisplayText' Description' CompletionText' DisplayFlags);" is 186.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionData.cs,ApplyDiplayFlagsFormatting,The length of the statement  "			if (!HasOverloads && (DisplayFlags & DisplayFlags.Obsolete) != 0 || HasOverloads && OverloadedData.All (data => (data.DisplayFlags & DisplayFlags.Obsolete) != 0))" is 162.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,FilterCompletionList,The length of the statement  "			return DefaultFilterItems (this' input.FilteredItems' input.OldCompletionString' input.CompletionString' input.Tracer ?? (text => { })' GetCompletionDataMatcher (input.CompletionString));" is 187.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,FindMatchedEntry,The length of the statement  "					if (currentData == null || matcher != null && matcher.CalcMatchRank (mruData' out r1) && matcher.CalcMatchRank (currentData' out r2)) {" is 135.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The length of the statement  "			matcher = matcher ?? new CompletionDataMatcher { StringMatcher = CompletionMatcher.CreateCompletionMatcher (completionString)' MatcherId = -1' MatchString = completionString };" is 176.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,CompareTo,The length of the statement  "			return (defaultComparer ?? (defaultComparer = GetComparerForCompletionList (completionDataList))).Compare (item1' item2);" is 121.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>");" is 182.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>");" is 161.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized"));" is 125.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>");" is 165.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor;" is 136.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue));" is 176.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor;" is 138.
Long Statement,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The length of the statement  "				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ());" is 139.
Long Statement,MonoDevelop.Ide.CodeCompletion,CodeCompletionContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CodeCompletionContext.cs,ToString,The length of the statement  "			return string.Format ("[CodeCompletionContext: TriggerOffset={0}' TriggerLine={1}' TriggerLineOffset={2}' TriggerXCoord={3}' TriggerYCoord={4}' TriggerTextHeight={5}' TriggerWordLength={6}]"' TriggerOffset' TriggerLine' TriggerLineOffset' triggerXCoord' triggerYCoord' triggerTextHeight' TriggerWordLength);" is 307.
Long Statement,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The length of the statement  "					descriptionBox.PackStart (CreateCategory (GetHeaderMarkup (cat.Item1)' cat.Item2' foreColor' Theme.Font.ToPangoFont ()' LabelMaxWidth - 80)' true' true' 4);" is 156.
Long Statement,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The length of the statement  "					descriptionBox.PackStart (CreateCategory (GetHeaderMarkup (GettextCatalog.GetString ("Summary"))' o.SummaryMarkup' foreColor' Theme.Font.ToPangoFont ()' LabelMaxWidth - 80)' true' true' 4);" is 189.
Long Statement,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The length of the statement  "				// Setting the opicity delayed to 1 is a hack to ensure smooth animation popup see "Bug 32046 - Janky animations on tooltips"" is 125.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionCharacters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionCharacters.cs,Get,The length of the statement  "			return GetCompletionCharacters ().FirstOrDefault (c => c.Language == completionLanguage) ?? FallbackCompletionCharacters;" is 121.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionCharacters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionCharacters.cs,ToString,The length of the statement  "			return string.Format ("[CompletionCharacters: Language={0}' CompleteOnSpace={1}' CompleteOnChars={2}]"' Language' CompleteOnSpace' CompleteOnChars);" is 148.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionTriggerInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionTriggerInfo.cs,WithIsAugment,The length of the statement  "				: new CompletionTriggerInfo(this.CompletionTriggerReason' this.TriggerCharacter' isAugment' this.IsDebugger' this.IsImmediateWindow);" is 133.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionTriggerInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionTriggerInfo.cs,WithIsDebugger,The length of the statement  "				: new CompletionTriggerInfo(this.CompletionTriggerReason' this.TriggerCharacter' this.IsAugment' isDebugger' this.IsImmediateWindow);" is 133.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionTriggerInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionTriggerInfo.cs,WithIsImmediateWindow,The length of the statement  "					       : new CompletionTriggerInfo(this.CompletionTriggerReason' this.TriggerCharacter' this.IsAugment' this.IsDebugger' isImmediateWIndow);" is 133.
Long Statement,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,GetIcon,The length of the statement  "				var template = CodeTemplateService.GetCodeTemplates (mimeType).FirstOrDefault (t => t.Shortcut == completionItem.DisplayText);" is 126.
Long Statement,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,GetItemType,The length of the statement  "			LoggingService.LogWarning ("RoslynCompletionData: Can't find item type '" + string.Join ("'"' completionItem.Tags) + "'");" is 122.
Long Statement,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,InsertCompletionText,The length of the statement  "				completionChange = Provider.GetChangeAsync (doc' CompletionItem' null' default (CancellationToken)).WaitAndGetResult (default (CancellationToken));" is 147.
Long Statement,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,InsertCompletionText,The length of the statement  "						var changes = formattingService.GetFormattingChangesAsync (context.AnalysisDocument' spanToFormat.Span.ToTextSpan ()' CancellationToken.None).WaitAndGetResult (CancellationToken.None);" is 184.
Long Statement,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,CreateTooltipInformation,The length of the statement  "			var completionService = doc.Project.Solution.Workspace.Services.GetLanguageServices (doc.Project.Language).GetService<CompletionService> ();" is 140.
Long Statement,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,CreateTooltipInformation,The length of the statement  "				description = await Task.Run (() => completionService.GetDescriptionAsync (doc' CompletionItem)).ConfigureAwait (false);" is 120.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,FilterItems,The length of the statement  "			var filterResult = dataList.FilterCompletionList (new CompletionListFilterInput (dataList' filteredItems' oldCompletionString' completionString) {" is 146.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,FilterItems,The length of the statement  "				filterResult = MonoDevelop.Ide.CodeCompletion.CompletionDataList.DefaultFilterItems (dataList' filteredItems' oldCompletionString' completionString' text => CodeCompletionContext.Trace (text));" is 193.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKeyEvent,The length of the statement  "					//					if ((modifier & ~(Gdk.ModifierType.LockMask | (Gdk.ModifierType.ModifierMask & ~(Gdk.ModifierType.ShiftMask | Gdk.ModifierType.Mod1Mask | Gdk.ModifierType.ControlMask | Gdk.ModifierType.MetaMask | Gdk.ModifierType.SuperMask)))) != 0) {" is 242.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKeyEvent,The length of the statement  "					if ((descriptor.ModifierKeys & (ModifierKeys.Shift | ModifierKeys.Alt | ModifierKeys.Control | ModifierKeys.Command)) != 0) {" is 125.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The length of the statement  "			// Special case end with punctuation like 'param:' -> don't input double punctuation' otherwise we would end up with 'param::'" is 126.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The length of the statement  "					if ((displayText == "\" \"" || displayText == "{ }" || displayText == "[ ]") && (descriptor.KeyChar == '"' || descriptor.KeyChar == '{' || descriptor.KeyChar == '[')) {" is 168.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The length of the statement  "			if ((char.IsWhiteSpace (descriptor.KeyChar) || char.IsPunctuation (descriptor.KeyChar) || descriptor.KeyChar == '(' || descriptor.KeyChar == '<' || descriptor.KeyChar == '[')  && SelectedItem == null)" is 200.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,CompleteWord,The length of the statement  "				if (item.HasOverloads && declarationViewWindow != null && declarationViewWindow.CurrentOverload >= 0 && declarationViewWindow.CurrentOverload < item.OverloadedData.Count) {" is 172.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ResetSizes,The length of the statement  "			int height = Math.Max (Allocation.Height' list.HeightRequest + 2 + (footer != null ? footer.Allocation.Height : 0) + Theme.CornerRadius * 2);" is 141.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,Reposition,The length of the statement  "			Xwt.Rectangle geometry = IdeServices.DesktopService.GetUsableMonitorGeometry (Screen.Number' Screen.GetMonitorAtPoint (X + TextOffset' Y));" is 139.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,PageDown,The length of the statement  "			scrollbar.Vadjustment.Value = Math.Max (0' Math.Min (scrollbar.Vadjustment.Upper - scrollbar.Vadjustment.PageSize' scrollbar.Vadjustment.Value + scrollbar.Vadjustment.PageSize));" is 178.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ShowPreviewCompletionEntry,The length of the statement  "				args.RetVal = !eventSink.OnPreProcessPreviewCompletionEntryKey (KeyDescriptor.FromGtk (args.Event.Key' (char)args.Event.KeyValue' args.Event.State));" is 149.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,RepositionDeclarationViewWindow,The length of the statement  "			if (rect.IsEmpty || rect.Bottom < (int)list.VAdjustment.Value || rect.Y > list.Allocation.Height + (int)list.VAdjustment.Value)" is 127.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,RepositionDeclarationViewWindow,The length of the statement  "			declarationviewwindow.ShowPopup (this' new Gdk.Rectangle (0' Math.Min (Allocation.Height' Math.Max (0' y))' Allocation.Width' rect.Height)' PopupPosition.Left);" is 160.
Long Statement,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,RepositionWindow,The length of the statement  "			Gdk.Rectangle? rect = r != null ? (Gdk.Rectangle?)new Gdk.Rectangle ((int)r.Value.Left' (int)r.Value.Top' (int)r.Value.Width' (int)r.Value.Height) : null;" is 154.
Long Statement,MonoDevelop.Ide.Desktop,PlatformService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\PlatformService.cs,RestartIde,The length of the statement  "			var recentWorkspace = reopen ? IdeServices.DesktopService.RecentFiles.GetProjects ().FirstOrDefault ()?.FileName : string.Empty;" is 128.
Long Statement,MonoDevelop.Ide.Projects,ProjectOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectOptionsDialog.cs,RenameItem,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("Illegal project name.\nOnly use letters' digits' space' '.' or '_'."));" is 124.
Long Statement,MonoDevelop.Ide.Projects,ProjectOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectOptionsDialog.cs,RenameItem,The length of the statement  "					LoggingService.LogError ("File {0} was renamed to {1} instead of {2}."' item.FileName' item.FileName.FileName' newFile.FileName);" is 129.
Long Statement,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,OnButtonOkClicked,The length of the statement  "				MessageService.ShowWarning (GettextCatalog.GetString ("A configuration with the name '{0}' already exists."' ConfigName));" is 122.
Long Statement,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,InsertCategories,The length of the statement  "					InsertCategories (catStore.AppendValues (node' category.Name' category.Categories' category.Templates)' category.Categories);" is 125.
Long Statement,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,GetCategoryForProject,The length of the statement  "			return categories.ContainsKey (FileTemplate.DefaultCategoryKey) ? categories [FileTemplate.DefaultCategoryKey] : "Misc";" is 120.
Long Statement,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,CheckedChange,The length of the statement  "			//((ListView)ControlDictionary["templateListView"]).View = ((RadioButton)ControlDictionary["smallIconsRadioButton"]).Checked ? View.List : View.LargeIcon;" is 154.
Long Statement,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,OpenEvent,The length of the statement  "			//PropertyService.Set("Dialogs.NewProjectDialog.LargeImages"' ((RadioButton)ControlDictionary["largeIconsRadioButton"]).Checked);" is 129.
Long Statement,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,AddToProjectComboChanged,The length of the statement  "				if (basePath == null || basePath == String.Empty || (parentProject != null && basePath == parentProject.BaseDirectory)) {" is 121.
Long Statement,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,Sort,The length of the statement  "			result = String.Compare ((string)model.GetValue (left' 0)' (string)model.GetValue (right' 0)' StringComparison.InvariantCultureIgnoreCase);" is 139.
Long Statement,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,Sort,The length of the statement  "			return String.Compare ((string)model.GetValue (left' ColVersion)' (string)model.GetValue (right' ColVersion)' StringComparison.InvariantCultureIgnoreCase);" is 155.
Long Statement,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,HandleClicked,The length of the statement  "			var dlg = new OpenFileDialog (GettextCatalog.GetString ("Select Assembly")' MonoDevelop.Components.FileChooserAction.Open);" is 123.
Long Statement,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,SetProject,The length of the statement  "			foreach (var pr in configureProject.ParentSolution.GetAllItems<DotNetProject> ().SelectMany (p => p.References).Where (r => r.ReferenceType == ReferenceType.Assembly && !string.IsNullOrEmpty (r.HintPath))) {" is 207.
Long Statement,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,IsExternalAssembly,The length of the statement  "			return !p.IsChildPathOf (project.ParentSolution.BaseDirectory) && !p.IsChildPathOf (project.ParentSolution.ItemDirectory);" is 122.
Long Statement,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,The length of the statement  "				dit = store.AppendValues (iter' false' IdeServices.DesktopService.GetIconForFile (dir' IconSize.Menu)' dir.FileName.ToString ()' dir.ToString ());" is 146.
Long Statement,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,The length of the statement  "				dit = store.AppendValues (false' IdeServices.DesktopService.GetIconForFile (dir' IconSize.Menu)' dir.FileName.ToString ()' dir.ToString ());" is 140.
Long Statement,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The length of the statement  "			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString ("Please select which files and folders you want to delete:");" is 122.
Long Statement,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The length of the statement  "			this.radioDeleteAll = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("Delete the project file and the whole project directory:"));" is 149.
Long Statement,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The length of the statement  "			this.radioDeleteSel = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("Delete the following files and folders:"));" is 132.
Long Statement,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,HandleDeleteButtonClicked,The length of the statement  "			if (!MessageService.Confirm (GettextCatalog.GetString ("Are you sure you want to delete the policy '{0}'?"' currentSet.Name)' AlertButton.Delete))" is 146.
Long Statement,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,HandleFromFile,The length of the statement  "			dlg.AddFilter (BrandingService.BrandApplicationName (GettextCatalog.GetString ("MonoDevelop policy files"))' "*.mdpolicy");" is 123.
Long Statement,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,HandleToFile,The length of the statement  "			dlg.AddFilter (BrandingService.BrandApplicationName (GettextCatalog.GetString ("MonoDevelop policy files"))' "*.mdpolicy");" is 123.
Long Statement,MonoDevelop.Ide.Projects,ProjectReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectReferencePanel.cs,PopulateListView,The length of the statement  "				Gtk.TreeIter it = store.AppendValues (txt' projectEntry.BaseDirectory.ToString ()' projectEntry' selected' icon' allowSelecting);" is 129.
Long Statement,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,AddAssemplyReference,The length of the statement  "			return refTreeStore.AppendValues (txt' secondaryTxt' GetTypeText (refInfo)' System.IO.Path.GetFullPath (refInfo.Reference)' refInfo' ImageService.GetIcon ("md-empty-file-icon"' IconSize.Dnd));" is 192.
Long Statement,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,AddProjectReference,The length of the statement  "			return refTreeStore.AppendValues (txt' secondaryTxt' GetTypeText (refInfo)' p.BaseDirectory.ToString ()' refInfo' ImageService.GetIcon ("md-project"' IconSize.Dnd));" is 165.
Long Statement,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,AddPackageReference,The length of the statement  "			return refTreeStore.AppendValues (txt' secondaryTxt' GetTypeText (refInfo)' refInfo.Reference' refInfo' ImageService.GetIcon ("md-package"' IconSize.Dnd));" is 155.
Long Statement,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The length of the statement  "			this.ReferencesTreeView.KeyReleaseEvent += new global::Gtk.KeyReleaseEventHandler (this.OnReferencesTreeViewKeyReleaseEvent);" is 125.
Long Statement,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SetupLayout,The length of the statement  "					newmarkup += "\n<span foreground='" + Gui.Styles.SecondarySelectionTextColor.ToHexString (false) + "'><small>" + SecondaryTextMarkup + "</small></span>";" is 153.
Long Statement,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SetupLayout,The length of the statement  "					newmarkup += "\n<span foreground='" + Gui.Styles.SecondaryTextColor.ToHexString (false) + "'><small>" + SecondaryTextMarkup + "</small></span>";" is 144.
Long Statement,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,GetValidDir,The length of the statement  "				if (c == System.IO.Path.DirectorySeparatorChar || c == System.IO.Path.AltDirectorySeparatorChar || c == System.IO.Path.VolumeSeparatorChar)" is 139.
Long Statement,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,OnButtonOkClicked,The length of the statement  "				if (System.IO.File.Exists (file) && !MessageService.Confirm (GettextCatalog.GetString ("The file {0} already exists. Do you want to replace it?"' file)' AlertButton.Replace))" is 174.
Long Statement,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The length of the statement  "			this.radioCustom = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("Save project policies as a new custom policy set"));" is 138.
Long Statement,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,CombPolicies_Changed,The length of the statement  "			combPolicies.Accessible.Description = GettextCatalog.GetString ("Select policy' current: {0}"' combPolicies.ActiveText);" is 120.
Long Statement,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The length of the statement  "			this.radioCustom = new global::Gtk.RadioButton (global::Mono.Unix.Catalog.GetString ("Apply stock or custom policy set"));" is 122.
Long Statement,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The length of the statement  "			this.label8.LabelProp = global::Mono.Unix.Catalog.GetString ("Select the project or solution from which to import the policies:");" is 130.
Long Statement,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The length of the statement  "			this.labelTitle.LabelProp = global::Mono.Unix.Catalog.GetString ("The file {0} is outside the target directory. What would you like to do?");" is 141.
Long Statement,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The length of the statement  "			this.labelKeep.LabelProp = global::Mono.Unix.Catalog.GetString ("<b>Keep</b> the file in its the current subdirectory ({0})");" is 126.
Long Statement,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,Reset,The length of the statement  "						store.InsertWithValues (-1' name' ""' null' selected' projectEntry.FileName.ToString ()' ""' projectEntry.StockIcon' matchRank' projectEntry.Name' ReferenceType.Project); " is 170.
Long Statement,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,Reset,The length of the statement  "						store.InsertWithValues (-1' name' version' null' selected' (string)file' GLib.Markup.EscapeText (file)' MonoDevelop.Ide.Gui.Stock.OpenFolder' matchRank' null' ReferenceType.Assembly); " is 183.
Long Statement,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,Sort,The length of the statement  "            result = String.Compare ((string)model.GetValue (left' 0)' (string)model.GetValue (right' 0)' StringComparison.InvariantCultureIgnoreCase);" is 139.
Long Statement,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,Sort,The length of the statement  "            return String.Compare ((string)model.GetValue (left' ColVersion)' (string)model.GetValue (right' ColVersion)' StringComparison.InvariantCultureIgnoreCase);" is 155.
Long Statement,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,AddReference,The length of the statement  "					selectDialog.AddReference (ProjectReference.CreateAssemblyReference ((SystemAssembly)store.GetValue (iter' ColAssembly)));" is 122.
Long Statement,MonoDevelop.Ide.Projects,IdeFileSystemExtensionExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IdeFileSystemExtensionExtension.cs,RequestFileEdit,The length of the statement  "			var res = MessageService.AskQuestion (error' GettextCatalog.GetString ("Would you like {0} to attempt to make the file writable and try again?"' BrandingService.ApplicationName)' AlertButton.MakeWriteable' AlertButton.Cancel);" is 226.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,GetVersionControlHandler,The length of the statement  "			versionControlHandler = AddinManager.GetExtensionObjects ("/MonoDevelop/Ide/VersionControlProjectTemplateHandler"' typeof(IVersionControlProjectTemplateHandler)' true) " is 167.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,SetDefaultSettings,The length of the statement  "				projectConfiguration.CreateProjectDirectoryInsideSolutionDirectory = PropertyService.Get (CreateProjectSubDirectoryPropertyName' true); " is 135.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,UpdateDefaultSettings,The length of the statement  "				PropertyService.Set (CreateProjectSubDirectoryPropertyName' projectConfiguration.CreateProjectDirectoryInsideSolutionDirectory); " is 128.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,LoadTemplateCategories,The length of the statement  "				recentTemplates = TemplatingService.RecentTemplates.GetTemplates (templateCategories).Where (t => t.IsMatch (SolutionTemplateVisibility.NewSolution)).ToList (); " is 160.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,GetTemplateForProcessing,The length of the statement  "				throw new ApplicationException (GettextCatalog.GetString ("No template found matching condition '{0}'."' SelectedTemplate.Condition)); " is 134.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,Create,The length of the statement  "				string solutionFileName = Path.Combine (projectConfiguration.SolutionLocation' finalConfigurationPage.SolutionFileName); " is 120.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,Create,The length of the statement  "					if (!MessageService.Confirm (GettextCatalog.GetString ("File {0} already exists. Overwrite?"' solutionFileName)' AlertButton.OverwriteFile)) { " is 142.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,CreateProject,The length of the statement  "					var question = GettextCatalog.GetString ("Directory {0} already exists.\nDo you want to continue creating the project?"' projectConfiguration.ProjectLocation); " is 159.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,CreateProject,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("Could not create directory {0}. File already exists."' projectConfiguration.ProjectLocation)); " is 147.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,CreateProject,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("You do not have permission to create to {0}"' projectConfiguration.ProjectLocation)); " is 138.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,SolutionAlreadyExistsInParentWorkspace,The length of the statement  "			string solutionFileName = Path.Combine (projectConfiguration.SolutionLocation' finalConfigurationPage.SolutionFileName); " is 120.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,SanitisePotentialNamespace,The length of the statement  "				if (char.IsLetter (c) || c == '_' || (sb.Length > 0 && (char.IsLetterOrDigit (sb[sb.Length - 1]) || sb[sb.Length - 1] == '_') && (c == '.' || char.IsNumber (c)))) { " is 164.
Long Statement,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,InstallProjectTemplatePackages,The length of the statement  "			foreach (ProjectTemplatePackageInstaller installer in AddinManager.GetExtensionObjects ("/MonoDevelop/Ide/ProjectTemplatePackageInstallers")) { " is 143.
Long Statement,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,SelectRecentTemplatesCategory,The length of the statement  "			if (templateCategoriesTreeStore.GetIterFirst (out iter) && templateCategoriesTreeStore.GetValue (iter' TemplateCategoryColumn) == null) { " is 137.
Long Statement,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The length of the statement  "			templateCategoriesTreeView.Accessible.Description = GettextCatalog.GetString ("Select the project category to see all possible project templates"); " is 147.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,CreateFolderTreeViewColumns,The length of the statement  "			SemanticModelAttribute modelAttr = new SemanticModelAttribute ("folderTreeStore__IconId"' "folderTreeStore__NodeName"' "folderTreeStore__Image"); " is 145.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithSolutionDirectoryToTree,The length of the statement  "			solutionFolderNode = folderTreeStore.AppendValues (locationNode' FolderIconId' projectConfiguration.DefaultPreviewSolutionName); " is 128.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithSolutionDirectoryToTree,The length of the statement  "			solutionNode = folderTreeStore.AppendValues (solutionFolderNode' FileIconId' projectConfiguration.DefaultPreviewSolutionFileName); " is 130.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithSolutionDirectoryToTree,The length of the statement  "			projectFolderNode = folderTreeStore.AppendValues (solutionFolderNode' FolderIconId' projectConfiguration.DefaultPreviewProjectName); " is 132.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithSolutionDirectoryToTree,The length of the statement  "			projectNode = folderTreeStore.AppendValues (projectFolderNode' FileIconId' projectConfiguration.DefaultPreviewProjectFileName); " is 127.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithNoSolutionDirectoryToTree,The length of the statement  "			projectFolderNode = folderTreeStore.AppendValues (locationNode' FolderIconId' projectConfiguration.DefaultPreviewProjectName); " is 126.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithNoSolutionDirectoryToTree,The length of the statement  "			projectNode = folderTreeStore.AppendValues (projectFolderNode' FileIconId' projectConfiguration.DefaultPreviewProjectFileName); " is 127.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithNoSolutionDirectoryToTree,The length of the statement  "				solutionNode = folderTreeStore.AppendValues (projectFolderNode' FileIconId' projectConfiguration.DefaultPreviewSolutionFileName); " is 129.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddProjectWithNoProjectDirectoryToTree,The length of the statement  "			projectNode = folderTreeStore.AppendValues (locationNode' FileIconId' projectConfiguration.DefaultPreviewProjectFileName); " is 122.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddSolutionToTree,The length of the statement  "			solutionFolderNode = folderTreeStore.AppendValues (locationNode' FolderIconId' projectConfiguration.DefaultPreviewSolutionName); " is 128.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddSolutionToTree,The length of the statement  "			solutionNode = folderTreeStore.AppendValues (solutionFolderNode' FileIconId' projectConfiguration.DefaultPreviewSolutionFileName); " is 130.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddGitFolderToTree,The length of the statement  "			return folderTreeStore.InsertWithValues (parent' 0' null' GetLightTextMarkup (".git")' GetTransparentIcon (FolderIconId)); " is 122.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,AddGitIgnoreToTree,The length of the statement  "			return folderTreeStore.InsertWithValues (parent' 1' null' GetLightTextMarkup (".gitignore")' GetTransparentIcon (FileIconId)); " is 126.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,ShowGitIgnoreFile,The length of the statement  "			if (projectConfiguration.IsGitIgnoreEnabled && projectConfiguration.CreateGitIgnoreFile && projectConfiguration.IsNewSolution) { " is 128.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,Build,The length of the statement  "			this.previewLabel.LabelProp = string.Format ("<span weight='bold' foreground='#555555'>{0}</span>"' global::Mono.Unix.Catalog.GetString ("PREVIEW")); " is 149.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,RegisterEvents,The length of the statement  "			createProjectWithinSolutionDirectoryCheckBox.Clicked += (sender' e) => OnCreateProjectWithinSolutionDirectoryCheckBoxClicked (); " is 128.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,OnCreateProjectWithinSolutionDirectoryCheckBoxClicked,The length of the statement  "			projectConfiguration.CreateProjectDirectoryInsideSolutionDirectory = createProjectWithinSolutionDirectoryCheckBox.Active; " is 121.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,LoadWidget,The length of the statement  "			createProjectWithinSolutionDirectoryCheckBox.Sensitive = projectConfiguration.IsCreateProjectDirectoryInsideSolutionDirectoryEnabled; " is 133.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,LoadWidget,The length of the statement  "			createProjectWithinSolutionDirectoryCheckBox.Active = projectConfiguration.CreateProjectDirectoryInsideSolutionDirectory; " is 121.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(this.projectConfigurationVBox [this.projectConfigurationTopEventBox])); " is 129.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			this.createGitIgnoreFileCheckBox.Label = global::Mono.Unix.Catalog.GetString ("Create a .gitignore file to ignore inessential files."); " is 135.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w4 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.createGitIgnoreFileCheckBox])); " is 134.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			this.createProjectWithinSolutionDirectoryCheckBox.Label = global::Mono.Unix.Catalog.GetString ("Create a project directory within the solution directory."); " is 156.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.createProjectWithinSolutionDirectoryCheckBox])); " is 151.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w6 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.locationLabel])); " is 120.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w7 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.locationSeparator])); " is 124.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w8 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.locationTextBox])); " is 122.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w9 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.projectNameLabel])); " is 123.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w10 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.projectNameTextBox])); " is 126.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w11 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.solutionNameLabel])); " is 125.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w12 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.solutionNameSeparator])); " is 129.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w13 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.solutionNameTextBox])); " is 127.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w14 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.useGitCheckBox])); " is 122.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Box.BoxChild w15 = ((global::Gtk.Box.BoxChild)(this.versionControlLabelHBox [this.versionControlSpacerLabel])); " is 123.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Table.TableChild w17 = ((global::Gtk.Table.TableChild)(this.projectConfigurationTable [this.versionControlLabelHBox])); " is 131.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Box.BoxChild w18 = ((global::Gtk.Box.BoxChild)(this.projectConfigurationVBox [this.projectConfigurationTable])); " is 124.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Box.BoxChild w19 = ((global::Gtk.Box.BoxChild)(this.projectConfigurationVBox [this.projectConfigurationBottomEventBox])); " is 133.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Box.BoxChild w22 = ((global::Gtk.Box.BoxChild)(this.mainHBox [this.projectConfigurationRightBorderEventBox])); " is 122.
Long Statement,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The length of the statement  "			global::Gtk.Box.BoxChild w23 = ((global::Gtk.Box.BoxChild)(this.previewProjectFolderVBox [this.projectFolderPreviewWidget])); " is 125.
Long Statement,MonoDevelop.Ide.Projects,FinalProjectConfigurationPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\FinalProjectConfigurationPage.cs,UpdateFromParameters,The length of the statement  "			createProjectDirectoryInsideSolutionDirectoryEnabled = Parameters. GetBoolValue ("IsCreateProjectDirectoryInsideSolutionDirectoryEnabled"' true); " is 145.
Long Statement,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,GetIconRect,The length of the statement  "			return new Rectangle (cell_area.X + (int)Xpad' cell_area.Y + (int)Ypad + iconYOffset' CategoryIconWidth' CategoryIconWidth); " is 124.
Long Statement,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,DrawIcon,The length of the statement  "			int iconY = cell_area.Y + ((cell_area.Height - (int)CategoryIcon.Height) / 2) + (Category == null ? 0 : topLevelTemplateHeadingYOffset); " is 136.
Long Statement,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawIcon,The length of the statement  "			var iconRect = new Rectangle (cell_area.X + (int)Xpad' cell_area.Y + (int)Ypad' (int)TemplateIcon.Width' (int)TemplateIcon.Height); " is 131.
Long Statement,MonoDevelop.Ide.Navigation,HistoryList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Navigation\HistoryList.cs,AddPoint,The length of the statement  "			if (forward.First != null && (DateTime.Now - forward.First.Value.Visited).TotalSeconds > FORWARD_HISTORY_TIMEOUT_SECONDS) {" is 123.
Long Statement,MonoDevelop.Components.AutoTest,AutoTestSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestSession.cs,ThrowOperationTimeoutException,The length of the statement  "			throw new TimeoutException (string.Format ("Timeout while executing {0}: {1}\n\ton Element: {2}"' operation' query' result)' innerException);" is 141.
Long Statement,MonoDevelop.Components.AutoTest,AppResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AppResult.cs,GetProperties,The length of the statement  "						MonoDevelop.Core.LoggingService.LogInfo ("Failed to fetch property '{0}' on '{1}' with Exception: {2}"' property' resultObject' e.Message);" is 139.
Long Statement,MonoDevelop.Ide.Gui.Pads.ClassPad,ClassNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\ClassNodeBuilder.cs,BuildChildNodes,The length of the statement  "			builder.AddChildren (classData.Class.GetMembers ().OfType<IMethodSymbol> ().Where (m => m.MethodKind != MethodKind.PropertyGet && m.MethodKind != MethodKind.PropertySet) " is 169.
Long Statement,MonoDevelop.Ide.Gui.Pads.ClassPad,NamespaceNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\NamespaceNodeBuilder.cs,Initialize,The length of the statement  "/*			changeClassInformationHandler = (ClassInformationEventHandler) DispatchService.GuiDispatch (new ClassInformationEventHandler (OnClassInformationChanged));" is 159.
Long Statement,MonoDevelop.Ide.Gui.Pads.ClassPad,SolutionNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\SolutionNodeBuilder.cs,RenameItem,The length of the statement  "				MessageService.ShowError (GettextCatalog.GetString ("Solution name may not contain any of the following characters: {0}"' "'' (' )' \"' {' }' |"));" is 147.
Long Statement,MonoDevelop.Ide.Gui.Pads.ClassPad,SolutionNodeCommandHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\SolutionNodeBuilder.cs,RemoveItem,The length of the statement  "			AlertButton res = MessageService.AskQuestion (GettextCatalog.GetString ("Do you really want to remove solution {0} from workspace {1}?"' solution.Name' parent.Name)' AlertButton.Remove);" is 186.
Long Statement,MonoDevelop.Ide.Updater,UpdateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Updater\UpdateService.cs,CheckForUpdates,The length of the statement  "			ProgressMonitor mon = IdeApp.Workbench.ProgressMonitors.GetBackgroundProgressMonitor ("Looking for updates"' "md-updates");" is 123.
Long Statement,MonoDevelop.Ide.Updater,UpdateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Updater\UpdateService.cs,CheckUpdates,The length of the statement  "					LoggingService.LogError ("Updates check failed for handler of type '" + handlers [handlers.Length - 1].GetType () + "'"' ex);" is 125.
Long Statement,MonoDevelop.Ide.Updater,AddinsUpdateHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Updater\AddinsUpdateHandler.cs,OpenAddinManagerWindow,The length of the statement  "			if (!IdeApp.Workbench.RootWindow.Visible && WelcomePage.WelcomePageService.WelcomeWindow.nativeWidget is AppKit.NSWindow parentNsWindow) {" is 138.
Long Statement,MonoDevelop.Ide.WelcomePage,ShowWelcomePageHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageCommands.cs,Update,The length of the statement  "				info.Text = WelcomePageService.HasWindowImplementation ? GettextCatalog.GetString ("Show Start Window") : GettextCatalog.GetString ("Show Welcome Page");" is 153.
Long Statement,MonoDevelop.Ide.WelcomePage,ShowWelcomePageHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageCommands.cs,Update,The length of the statement  "				info.Text = WelcomePageService.HasWindowImplementation ? GettextCatalog.GetString ("Start Window") : GettextCatalog.GetString ("Welcome Page");" is 143.
Long Statement,MonoDevelop.Ide.WelcomePage,ShowWelcomePageHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageCommands.cs,Update,The length of the statement  "			info.Enabled = WelcomePageService.HasWindowImplementation || (!WelcomePageService.HasWindowImplementation && !WelcomePageService.WelcomePageVisible);" is 149.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageWidgetBackground,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageWidget.cs,UpdateTeme,The length of the statement  "				if (!Gdk.Color.Parse (Owner.BackgroundColor' ref backgroundColor) || !Gdk.Color.Parse (Styles.WelcomeScreen.BackgroundColor' ref backgroundColor))" is 146.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageWidgetBackground,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageWidget.cs,DrawOverdraw,The length of the statement  "				context.RenderTiled (this' Owner.BackgroundImage' Allocation' new Gdk.Rectangle (Allocation.X' Allocation.Y + OverdrawOffset' Allocation.Width' Allocation.Height - OverdrawOffset)' opacity);" is 190.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageWidgetBackground,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageWidget.cs,OnExposeEvent,The length of the statement  "						var bgRect = new Rectangle (Allocation.X + (int)Owner.LogoImage.Width' Allocation.Y' Allocation.Width - (int)Owner.LogoImage.Width' (int)Owner.TopBorderImage.Height);" is 166.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The length of the statement  "			var btn = new WelcomePageListButton (GettextCatalog.GetString ("New...")' null' newProjectIcon' "monodevelop://MonoDevelop.Ide.Commands.FileCommands.NewProject"); " is 162.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The length of the statement  "			btn = new WelcomePageListButton (GettextCatalog.GetString ("Open...")' null' openProjectIcon' "monodevelop://MonoDevelop.Ide.Commands.FileCommands.OpenFile"); " is 158.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The length of the statement  "				var button = new WelcomePageListButton (recent.DisplayName' System.IO.Path.GetDirectoryName (filename)' pixbuf' "project://" + filename); " is 137.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,TimeSinceEdited,The length of the statement  "				return GettextCatalog.GetPluralString ("Last opened {0} day ago"' "Last opened {0} days ago"' sincelast.Days' sincelast.Days); " is 126.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,TimeSinceEdited,The length of the statement  "				return GettextCatalog.GetPluralString ("Last opened {0} hour ago"' "Last opened {0} hours ago"' sincelast.Hours' sincelast.Hours); " is 130.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,TimeSinceEdited,The length of the statement  "				return GettextCatalog.GetPluralString ("Last opened {0} minute ago"' "Last opened {0} minutes ago"' sincelast.Minutes' sincelast.Minutes); " is 138.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,UpdateStyle,The length of the statement  "			var face = Platform.IsMac ? Styles.WelcomeScreen.Pad.TitleFontFamilyMac : Styles.WelcomeScreen.Pad.TitleFontFamilyWindows;" is 122.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,UpdateStyle,The length of the statement  "			headerFormat = Styles.GetFormatString (face' Styles.WelcomeScreen.Pad.LargeTitleFontSize' Styles.WelcomeScreen.Pad.LargeTitleFontColor);" is 136.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The length of the statement  "				var sr = new Cairo.Rectangle (r.X + inset' r.Y + inset + Styles.WelcomeScreen.Pad.ShadowVerticalOffset' r.Width - inset * 2' r.Height - inset * 2);" is 147.
Long Statement,MonoDevelop.Ide.WelcomePage,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\Style.cs,GetFormatString,The length of the statement  "			return "<span font=\"" + fontFace + " " + fontSize + "px\" foreground=\"" + color + "\" font_weight=\"" + weight + "\">{0}</span>";" is 131.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomeScreen,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\Style.cs,LoadStyles,The length of the statement  "					Pad.BackgroundColor = "#222222"; // TODO: VV: We can't use the padColor here because of the BackgroundColor bug' so override" is 124.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,UpdateStyle,The length of the statement  "			var face = Platform.IsMac ? Styles.WelcomeScreen.Pad.TitleFontFamilyMac : Styles.WelcomeScreen.Pad.TitleFontFamilyWindows; " is 122.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,UpdateStyle,The length of the statement  "			linkUnderlinedFormat = Styles.GetFormatString (face' Styles.WelcomeScreen.Pad.MediumTitleFontSize' Styles.WelcomeScreen.Pad.News.Item.TitleHoverColor' Pango.Weight.Bold); " is 170.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,UpdateStyle,The length of the statement  "			linkFormat = Styles.GetFormatString (face' Styles.WelcomeScreen.Pad.MediumTitleFontSize' Styles.WelcomeScreen.Pad.MediumTitleColor' Pango.Weight.Bold); " is 151.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,UpdateStyle,The length of the statement  "			descFormat = Styles.GetFormatString (Styles.WelcomeScreen.Pad.SummaryFontFamily' Styles.WelcomeScreen.Pad.SummaryFontSize' Styles.WelcomeScreen.Pad.TextColor); " is 159.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,UpdateStyle,The length of the statement  "			subtitleFormat = Styles.GetFormatString (face' Styles.WelcomeScreen.Pad.SmallTitleFontSize' Styles.WelcomeScreen.Pad.SmallTitleColor); " is 134.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,OnButtonReleaseEvent,The length of the statement  "			if (evnt.Button == 1 && new Gdk.Rectangle (0' 0' Allocation.Width' Allocation.Height).Contains ((int)evnt.X' (int)evnt.Y)) { " is 124.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,OnUpdateStyle,The length of the statement  "			TitleFontFace = Platform.IsMac ? Styles.WelcomeScreen.Pad.TitleFontFamilyMac : Styles.WelcomeScreen.Pad.TitleFontFamilyWindows;" is 127.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,OnUpdateStyle,The length of the statement  "			SmallTitleFontFace = Platform.IsMac ? Styles.WelcomeScreen.Pad.TitleFontFamilyMac : Styles.WelcomeScreen.Pad.TitleFontFamilyWindows;" is 132.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,OnExposeEvent,The length of the statement  "					titleLayout.SetMarkup (WelcomePageSection.FormatText (TitleFontFace' TitleFontSize' Pango.Weight.Bold' MediumTitleColor' title)); " is 129.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,OnExposeEvent,The length of the statement  "						subtitleLayout.SetMarkup (WelcomePageSection.FormatText (SmallTitleFontFace' SmallTitleFontSize' Pango.Weight.Normal' SmallTitleColor' subtitle)); " is 146.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageBarButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageBarButton.cs,OnButtonReleaseEvent,The length of the statement  "			if (evnt.Button == 1 && new Gdk.Rectangle (0' 0' Allocation.Width' Allocation.Height).Contains ((int)evnt.X' (int)evnt.Y)) {" is 124.
Long Statement,MonoDevelop.Ide.WelcomePage,DefaultWelcomePage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\DefaultWelcomePage.cs,BuildContent,The length of the statement  "				new WelcomePageBarButton (GettextCatalog.GetString ("Documentation")' "http://www.go-mono.com/docs"' "welcome-link-info-16.png")'" is 129.
Long Statement,MonoDevelop.Ide.WelcomePage,DefaultWelcomePage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\DefaultWelcomePage.cs,BuildContent,The length of the statement  "				new WelcomePageBarButton (GettextCatalog.GetString ("Support")' "http://monodevelop.com/index.php?title=Help_%26_Contact"' "welcome-link-support-16.png")'" is 154.
Long Statement,MonoDevelop.Ide.WelcomePage,DefaultWelcomePage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\DefaultWelcomePage.cs,BuildContent,The length of the statement  "				new WelcomePageBarButton (GettextCatalog.GetString ("Q&A")' "http://stackoverflow.com/questions/tagged/monodevelop"' "welcome-link-chat-16.png")" is 144.
Long Statement,MonoDevelop.Ide.WelcomePage,DefaultWelcomePage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\DefaultWelcomePage.cs,BuildContent,The length of the statement  "					new WelcomePageNewsFeed (GettextCatalog.GetString ("Xamarin News")' "http://software.xamarin.com/Service/News"' "NewsLinks")" is 124.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageService.cs,Initialize,The length of the statement  "					if (!IdeApp.IsExiting && IdeApp.Workbench.Documents.Count == 0 && !IdeApp.Workspace.IsOpen && !HasWindowImplementation) {" is 121.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageProjectBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFrame.cs,UpdateContent,The length of the statement  "					messageLabel.Text = GettextCatalog.GetString ("The file '{0}' and other are currently open"' files[0].FileName.FileName);" is 121.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The length of the statement  "					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f)" is 124.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The length of the statement  "					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f)" is 127.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The length of the statement  "			context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);" is 133.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The length of the statement  "				RenderShadowedText (context' new Gdk.Point (corner.X + ButtonSize.Width / 2 - w / 2' corner.Y + ButtonSize.Height / 2 - h / 2 - 1)' opacity' layout);" is 149.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnExposeEvent,The length of the statement  "				context.CachedDraw (ref titleSurface' RenderTitlePosition' TitleSize' new { Surface = backgroundSurface }' (float) TitleOpacity' (ctx' alpha) => {" is 146.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnExposeEvent,The length of the statement  "				context.CachedDraw (ref textSurface' RenderTextPosition' TextSize' new { Surface = backgroundSurface } ' (float) TextOpacity' (ctx' alpha) => {" is 143.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnExposeEvent,The length of the statement  "				context.CachedDraw (ref buttonSurface' ButtonPosistion' ButtonSize' new { Hovered = ButtonHovered }' (float)ButtonOpacity' (ctx' alpha) => RenderButton (ctx' new Gdk.Point ()' alpha' ButtonHovered));" is 199.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,ButtonLayout,The length of the statement  "			layout.FontDescription = Pango.FontDescription.FromString (Platform.IsMac ? Styles.WelcomeScreen.FontFamilyMac : Styles.WelcomeScreen.FontFamilyWindows);" is 153.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,TitleLayout,The length of the statement  "			layout.FontDescription = Pango.FontDescription.FromString (Platform.IsMac ? Styles.WelcomeScreen.FontFamilyMac : Styles.WelcomeScreen.FontFamilyWindows);" is 153.
Long Statement,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,TextLayout,The length of the statement  "			layout.FontDescription = Pango.FontDescription.FromString (Platform.IsMac ? Styles.WelcomeScreen.FontFamilyMac : Styles.WelcomeScreen.FontFamilyWindows);" is 153.
Long Statement,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,OnSizeAllocated,The length of the statement  "				allocation = new Gdk.Rectangle (allocation.X + (allocation.Width - MaxWidth) / 2' allocation.Y' MaxWidth' allocation.Height);" is 125.
Long Statement,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,OnExposeEvent,The length of the statement  "				context.DrawImage (this' icon' Allocation.X + Math.Max (0' (Allocation.Width - icon.Width) / 2)' Allocation.Y + Math.Max (0' (Allocation.Height - icon.Height) / 2));" is 165.
Long Statement,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnButtonPressEvent,The length of the statement  "				pushedButton = VisibleButtons.FirstOrDefault (b => allocations [b].Contains (Allocation.X + (int)evnt.X' Allocation.Y + (int)evnt.Y));" is 134.
Long Statement,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnQueryTooltip,The length of the statement  "			var button = VisibleButtons.FirstOrDefault (b => allocations [b].Contains (Allocation.X + (int)x' Allocation.Y + (int)y));" is 122.
Long Statement,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnSizeRequested,The length of the statement  "			requisition.Width = VisibleButtons.Sum (b => b.Visible ? (!b.IsSeparator ? (int)btnNormalOriginal[0].Width : SeparatorSpacing) : 0);" is 132.
Long Statement,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnExposeEvent,The length of the statement  "					bool nextIsSeparator = (i < VisibleButtons.Length - 1 && VisibleButtons[i + 1].IsSeparator) || i == VisibleButtons.Length - 1;" is 126.
Long Statement,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnExposeEvent,The length of the statement  "					context.DrawImage (this' icon' Math.Truncate (x + (img.Width - icon.Width) / 2)' Math.Truncate (y + (img.Height - icon.Height) / 2));" is 133.
Long Statement,MonoDevelop.Components.MainToolbar,FileSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\FileSearchCategory.cs,GenerateAllFiles,The length of the statement  "					list.Add (new Tuple<string' string' ProjectFile> (System.IO.Path.GetFileName (pf.FilePath)' FileSearchResult.GetRelProjectPath (pf)' pf));" is 138.
Long Statement,MonoDevelop.Components.MainToolbar,FileSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\FileSearchCategory.cs,GenerateAllFiles,The length of the statement  "						list.Add (new Tuple<string' string' ProjectFile> (System.IO.Path.GetFileName (pf.FilePath)' FileSearchResult.GetRelProjectPath (pf)' pf));" is 138.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OpenFile,The length of the statement  "						await IdeApp.Workbench.OpenDocument (SelectedItemFileName' null' Pattern.LineNumber' Pattern.HasColumn ? Pattern.Column : 1);" is 125.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,Update,The length of the statement  "			if (!string.IsNullOrEmpty (pattern.Tag) && string.IsNullOrEmpty (pattern.Pattern) && !categories.Any (c => c.IsValidTag (pattern.Tag))) {" is 137.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,Update,The length of the statement  "				pattern = new SearchPopupSearchPattern (null' pattern.Tag' pattern.LineNumber' pattern.Column' pattern.UnparsedPattern);" is 120.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,Update,The length of the statement  "			var activeCategories = string.IsNullOrEmpty (pattern.Tag) ? categories : categories.Where (cat => cat.IsValidTag (pattern.Tag));" is 128.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,Update,The length of the statement  "			var newResults = ImmutableArray.Create (new Tuple<SearchCategory' IReadOnlyList<SearchResult>> (searchProvidersCategory' loadingCatResults));" is 141.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,Update,The length of the statement  "								builder.Insert (indexToInsert' new Tuple<SearchCategory' IReadOnlyList<SearchResult>> (searchProvidersCategory' searchProvidersCategory.Values.ToArray ()));" is 156.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,ShowTooltip,The length of the statement  "			declarationviewwindow.ShowPopup (this' new Rectangle (0' (int)rect.Y - 5' Bounds.Width' (int)rect.Height)' PopupPosition.Right);" is 128.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The length of the statement  "					context.Rectangle (alloc.X + headerMarginSize + 1' y' Bounds.Width - adjustedMarginSize - 1' ls.Height + itemPadding * 2);" is 122.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The length of the statement  "						context.Rectangle (alloc.X + headerMarginSize + 1' y' Bounds.Width - adjustedMarginSize - 1' ls.Height + itemPadding * 2);" is 122.
Long Statement,MonoDevelop.Components.MainToolbar,ItemIdentifier,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetHashCode,The length of the statement  "					return (Category != null ? Category.GetHashCode () : 0) ^ (DataSource != null ? DataSource.GetHashCode () : 0) ^ Item.GetHashCode ();" is 133.
Long Statement,MonoDevelop.Components.MainToolbar,ItemIdentifier,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,ToString,The length of the statement  "				return string.Format ("[ItemIdentifier: Category={0}' DataSource=#{1}' Item={2}]"' Category.Name' DataSource.Count' Item);" is 122.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,GetHashCode,The length of the statement  "			return (Tag != null ? Tag.GetHashCode () : 0) ^ (Pattern != null ? Pattern.GetHashCode () : 0) ^ LineNumber.GetHashCode () ^ Column.GetHashCode ();" is 147.
Long Statement,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ToString,The length of the statement  "			return string.Format ("[SearchPopupSearchPattern: Tag={0}' Pattern={1}' LineNumber={2}' Column={3}]"' FormatString(Tag)' FormatString(Pattern)' LineNumber' Column);" is 164.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The length of the statement  "			Gdk.Rectangle progressArea = new Gdk.Rectangle (progress_bar_x' center - Styles.ProgressBarHeight / 2' progress_bar_width' Styles.ProgressBarHeight);" is 149.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The length of the statement  "				            center + (int)((1.0f - textTweenValue) * arg.Allocation.Height * 0.3)' text_width' Math.Min (textTweenValue' 1.0)' arg.Pango' arg);" is 131.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,LayoutRoundedRectangle,The length of the statement  "			CairoExtensions.RoundedRectangle (context' region.X + .5' region.Y + .5' region.Width - 1' region.Height - 1' rounding);" is 120.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawProgressBar,The length of the statement  "			LayoutRoundedRectangle (context' new Gdk.Rectangle (bounding.X' bounding.Y' (int) (bounding.Width * progress)' bounding.Height)' 0' 0' 1);" is 138.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawProgressBar,The length of the statement  "			context.SetSourceColor (Styles.StatusBarProgressBackgroundColor.WithAlpha (Styles.StatusBarProgressBackgroundColor.Alpha * arg.ProgressBarAlpha).ToCairoColor ());" is 162.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawProgressBar,The length of the statement  "			context.SetSourceColor (Styles.StatusBarProgressOutlineColor.WithAlpha (Styles.StatusBarProgressOutlineColor.Alpha * arg.ProgressBarAlpha).ToCairoColor ());" is 156.
Long Statement,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawString,The length of the statement  "			// use widget height instead of message box height as message box does not have a true height when no widgets are packed in it" is 126.
Long Statement,MonoDevelop.Components.MainToolbar,ConfigurationMerger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ConfigurationMerger.cs,ResolveConfiguration,The length of the statement  "				var part = currentTargetPartitions.FirstOrDefault (p => ExecutionTargetsContains (p.Targets' currentTarget ?? dummyExecutionTarget));" is 133.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,UpdateCombos,The length of the statement  "					ToolbarView.RunConfigurationModel = currentSolution.GetRunConfigurations ().Select (rc => new RunConfigurationModel (rc)).ToArray ();" is 133.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,FillRuntimesForProject,The length of the statement  "			foreach (var target in configurationMergers [project].GetTargetsForConfiguration (IdeApp.Workspace.ActiveConfigurationId' configurationMergers.Count < 2)) {" is 156.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,UpdateBuildConfiguration,The length of the statement  "			configurationMergers.Values.First ().ResolveConfiguration (config.OriginalId' runtime != null ? runtime.ExecutionTarget : null' out fullConfig' out newTarget);" is 159.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,SelectActiveConfiguration,The length of the statement  "			var allNames = configurationMergers.Values.Select (cm => cm.GetUnresolvedConfiguration (IdeApp.Workspace.ActiveConfigurationId)).Distinct ();" is 141.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,SelectActiveConfiguration,The length of the statement  "					string defaultConfig = ToolbarView.ActiveConfiguration != null ? ToolbarView.ActiveConfiguration.OriginalId : confs[0].OriginalId;" is 130.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,SelectActiveRuntime,The length of the statement  "			string lastRuntimeForProject = project.UserProperties.GetValue<string> ("PreferredExecutionTarget"' defaultValue: null); " is 120.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,TrackStartupProject,The length of the statement  "				projects = new Tuple<SolutionItem' SolutionItemRunConfiguration> []{ new Tuple<SolutionItem' SolutionItemRunConfiguration> (" is 124.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,UpdateSearchEntryLabel,The length of the statement  "				GettextCatalog.GetString ("Press \u2018{0}\u2019 to search"' KeyBindingManager.BindingToDisplayLabel (info.AccelKey' false)) :" is 126.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,HandleSearchEntryActivated,The length of the statement  "						view.Caret.MoveTo (new SnapshotPoint (snapshot' line.Start + Math.Max (0' Math.Min (pattern.Column - 1' line.Length))));" is 120.
Long Statement,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,GetStartButtonCommandInfo,The length of the statement  "			if (!IdeApp.ProjectOperations.CurrentRunOperation.IsCompleted || !IdeApp.ProjectOperations.CurrentBuildOperation.IsCompleted) {" is 127.
Long Statement,MonoDevelop.Components.MainToolbar,ButtonBarButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,NotifyPushed,The length of the statement  "				IdeApp.CommandService.DispatchCommand (CommandId' null' Controller.lastCommandTarget' CommandSource.MainToolbar' lastCmdInfo);" is 126.
Long Statement,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,TryGetNavigateToSearchService,The length of the statement  "			// TODO: remove this once INavigateToSearchService_RemoveInterfaceAboveAndRenameThisAfterInternalsVisibleToUsersUpdate is removed and just use INavigateToSearchService" is 167.
Long Statement,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,TryGetNavigateToSearchService,The length of the statement  "			var searchService = languageServices.GetService<INavigateToSearchService_RemoveInterfaceAboveAndRenameThisAfterInternalsVisibleToUsersUpdate> (); " is 145.
Long Statement,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetResults,The length of the statement  "												return await searchService.SearchProjectAsync (proj' priorityDocuments' searchPattern.Pattern' kinds ?? searchService.KindsProvided' token).ConfigureAwait (false); " is 163.
Long Statement,MonoDevelop.Components.MainToolbar,DeclaredSymbolInfoResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.DeclaredSymbolInfoResult.cs,Activate,The length of the statement  "					if (IdeApp.TypeSystemService.GetWorkspace (proj.ParentSolution).TryGetOriginalFileFromProjection (filePath' offset' out projectedName' out projectedOffset)) { " is 158.
Long Statement,MonoDevelop.Ide.TextEditing,TextEditorService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TextEditing\TextEditorService.cs,GetFileLineExtensions,The length of the statement  "			return fileExtensions.Values.SelectMany (e => e).OfType<FileLineExtension> ().Where (e => e.File.CanonicalPath == file);" is 120.
Long Statement,MonoDevelop.Ide.TextEditing,LineCountEventArgs,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TextEditing\LineCountEventArgs.cs,ToString,The length of the statement  "			return String.Format ("[LineCountEventArgs: LineNumber={0}' LineCount={1}' Column={2}]"' lineNumber' lineCount' column);" is 120.
Long Statement,MonoDevelop.Ide.Editor,InsertionPoint,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\InsertionPoint.cs,ToString,The length of the statement  "			return string.Format ("[InsertionPoint: Location={0}' LineBefore={1}' LineAfter={2}]"' Location' LineBefore' LineAfter);" is 120.
Long Statement,MonoDevelop.Ide.Editor,Settings,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\FileSettingsStore.cs,ToString,The length of the statement  "				return string.Format ("[Settings: CaretOffset={0}' vAdjustment={1}' hAdjustment={2}]"' CaretOffset' vAdjustment' hAdjustment);" is 126.
Long Statement,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,UpdateContextOptions,The length of the statement  "			if (followCodingConventions && context.CurrentConventions.UniversalConventions.TryGetIndentStyle (out Microsoft.VisualStudio.CodingConventions.IndentStyle result))" is 163.
Long Statement,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,UpdateContextOptions,The length of the statement  "			if (followCodingConventions && context.CurrentConventions.UniversalConventions.TryGetAllowTrailingWhitespace (out bool allowTrailing))" is 134.
Long Statement,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,UpdateContextOptions,The length of the statement  "			if (followCodingConventions && context.CurrentConventions.TryGetConventionValue<string> (EditorConfigService.MaxLineLengthConvention' out string maxLineLength)) {" is 162.
Long Statement,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,GetTextSegmentMarkersAt,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (length)' "needs to be 0 <= offset + length (" + length + ") < Length=" + this.Length);" is 133.
Long Statement,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,GetTextAt,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (offset)' "offset needs to be >= 0 && <= " + Length + "' was :" + offset);" is 120.
Long Statement,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,GetTextAt,The length of the statement  "				throw new ArgumentOutOfRangeException (nameof (Length)' "Length needs to <= " + (Length - offset) + "' was :" + length);" is 120.
Long Statement,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,InitializeExtensionChain,The length of the statement  "			var extensions = ExtensionContext.GetExtensionNodes ("/MonoDevelop/Ide/TextEditorExtensions"' typeof(TextEditorExtensionNode));" is 127.
Long Statement,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,SetOrUpdateProjections,The length of the statement  "			if ((disabledFeatures & DisabledProjectionFeatures.SemanticHighlighting) != DisabledProjectionFeatures.SemanticHighlighting) {" is 126.
Long Statement,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,InitializeProjectionExtensions,The length of the statement  "						var projectedFilterExtension = new ProjectedFilterCompletionTextEditorExtension (completionTextEditorExtension' projections) { Next = completionTextEditorExtension.Next };" is 171.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetLinesBetween,The length of the statement  "				throw new ArgumentOutOfRangeException ("startLine"' startLine' string.Format ("value should be between 1 and {0}"' document.LineCount));" is 136.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetLinesBetween,The length of the statement  "				throw new ArgumentOutOfRangeException ("endLine"' endLine' string.Format ("value should be between 1 and {0}"' document.LineCount));" is 132.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetLinesStartingAt,The length of the statement  "				throw new ArgumentOutOfRangeException ("startLine"' startLine' string.Format ("value should be between 1 and {0}"' document.LineCount));" is 136.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetLinesReverseStartingAt,The length of the statement  "				throw new ArgumentOutOfRangeException ("startLine"' startLine' string.Format ("value should be between 1 and {0}"' document.LineCount));" is 136.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetTextBetween,The length of the statement  "			return document.GetTextBetween (new DocumentLocation (startLine' startColumn)' new DocumentLocation (endLine' endColumn));" is 122.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,GetDiffAsString,The length of the statement  "			return Diff.GetDiffString (GetDiff (document' changedDocument' includeEol)' document' changedDocument' document.FileName' changedDocument.FileName);" is 148.
Long Statement,MonoDevelop.Ide.Editor,ReadonlyTextDocumentExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\IReadonlyTextDocument.cs,OffsetToLineNumber,The length of the statement  "				throw new ArgumentOutOfRangeException ("offset"' string.Format ("offset should be between 0 and <={0} but was {1}."' document.Length' offset));" is 143.
Long Statement,MonoDevelop.Ide.Editor,SegmentTree<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,UpdateOnTextReplace,The length of the statement  "					foreach (var segment in GetSegmentsAt (change.Offset).Where (s => s.Offset < change.Offset && change.Offset < s.EndOffset)) {" is 125.
Long Statement,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The length of the statement  "				if (parent.Color == Black && sibling.Color == Black && GetColorSafe (sibling.Left) == Black && GetColorSafe (sibling.Right) == Black) {" is 135.
Long Statement,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The length of the statement  "				if (parent.Color == Red && sibling.Color == Black && GetColorSafe (sibling.Left) == Black && GetColorSafe (sibling.Right) == Black) {" is 133.
Long Statement,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The length of the statement  "				if (node == parent.Left && sibling.Color == Black && GetColorSafe (sibling.Left) == Red && GetColorSafe (sibling.Right) == Black) {" is 131.
Long Statement,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The length of the statement  "				} else if (node == parent.Right && sibling.Color == Black && GetColorSafe (sibling.Right) == Red && GetColorSafe (sibling.Left) == Black) {" is 139.
Long Statement,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,AppendNode,The length of the statement  "				builder.Append (GetIndent (indent)).Append ("Node (").Append ((node.Color == Red ? "r" : "b")).Append ("):").AppendLine (node.ToString ());" is 139.
Long Statement,MonoDevelop.Ide.Editor,ToggleIssuesHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\MessageBubbles\MessageBubbleCommands.cs,Update,The length of the statement  "			info.Checked = !IdeApp.Preferences.DefaultHideMessageBubbles && IdeApp.Preferences.ShowMessageBubbles.Value == ShowMessageBubbles.ForErrors;" is 140.
Long Statement,MonoDevelop.Ide.Editor,ToggleIssuesHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\MessageBubbles\MessageBubbleCommands.cs,Update,The length of the statement  "			info.Checked = !IdeApp.Preferences.DefaultHideMessageBubbles && IdeApp.Preferences.ShowMessageBubbles == ShowMessageBubbles.ForErrorsAndWarnings;" is 145.
Long Statement,MonoDevelop.Ide.Editor,PairInsertEditSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditSession.cs,SessionStarted,The length of the statement  "			marker = TextMarkerFactory.CreateGenericTextSegmentMarker (Editor' TextSegmentMarkerEffect.Underline' color' endOffset' 1);" is 123.
Long Statement,MonoDevelop.Ide.Editor,Selection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Selection.cs,ToString,The length of the statement  "			return string.Format ("[Selection: Anchor={0}' Lead={1}' MinLine={2}' MaxLine={3}' SelectionMode={4}]"' Anchor' Lead' MinLine' MaxLine' SelectionMode);" is 151.
Long Statement,MonoDevelop.Ide.Editor,ConventionsFileManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorConfigService.cs,FileService_FileChanged,The length of the statement  "							ConventionFileChanged?.Invoke (this' new ConventionsFileChangeEventArgs (file.FileName.FileName' file.FileName.ParentDirectory' ChangeType.FileModified));" is 154.
Long Statement,MonoDevelop.Ide.Editor,ConventionsFileManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorConfigService.cs,FileService_FileRemoved,The length of the statement  "							ConventionFileChanged?.Invoke (this' new ConventionsFileChangeEventArgs (file.FileName.FileName' file.FileName.ParentDirectory' ChangeType.FileDeleted));" is 153.
Long Statement,MonoDevelop.Ide.Editor,IncludeWhitespacesProperty,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorPreferences.cs,GlobalOptions_OptionChanged,The length of the statement  "					this.Set (Convert (editorPreferences.globalOptions.GetOptionValue<DefaultTextViewOptions.IncludeWhitespaces> (DefaultTextViewOptions.UseVisibleWhitespaceName)));" is 161.
Long Statement,MonoDevelop.Ide.Editor,ShowWhitespacesProperty,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorPreferences.cs,GlobalOptions_OptionChanged,The length of the statement  "						if (editorPreferences.globalOptions.GetOptionValue<bool> (DefaultTextViewOptions.UseVisibleWhitespaceOnlyWhenSelectedName))" is 123.
Long Statement,MonoDevelop.Ide.Editor,ShowWhitespacesProperty,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorPreferences.cs,UpdateEditor,The length of the statement  "				editorPreferences.globalOptions.SetOptionValue (DefaultTextViewOptions.UseVisibleWhitespaceName' value != Editor.ShowWhitespaces.Never);" is 136.
Long Statement,MonoDevelop.Ide.Editor,ShowWhitespacesProperty,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\EditorPreferences.cs,UpdateEditor,The length of the statement  "				editorPreferences.globalOptions.SetOptionValue (DefaultTextViewOptions.UseVisibleWhitespaceOnlyWhenSelectedName' value == Editor.ShowWhitespaces.Selection);" is 156.
Long Statement,MonoDevelop.Ide.Editor.Extension,SignatureHelpTriggerInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,ToRoslyn,The length of the statement  "			return new Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerInfo ((Microsoft.CodeAnalysis.SignatureHelp.SignatureHelpTriggerReason)TriggerReason' TriggerCharacter);" is 172.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The length of the statement  "					var task = DoHandleCodeCompletionAsync (CurrentCompletionContext' new CompletionTriggerInfo (CompletionTriggerReason.CharTyped' descriptor.KeyChar)' token);" is 156.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The length of the statement  "			if ((descriptor.SpecialKey == SpecialKey.Delete || descriptor.SpecialKey == SpecialKey.BackSpace) && CompletionWidget != null && !CompletionWindowManager.IsVisible) {" is 166.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The length of the statement  "					var task = DoHandleCodeCompletionAsync (CurrentCompletionContext' new CompletionTriggerInfo (CompletionTriggerReason.BackspaceOrDeleteCommand' deleteOrBackspaceTriggerChar)' token);" is 181.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The length of the statement  "					var task = HandleParameterCompletionAsync (ctx' new SignatureHelpTriggerInfo (SignatureHelpTriggerReason.TypeCharCommand' descriptor.KeyChar)' token);" is 150.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,TriggerCompletion,The length of the statement  "				completionList = await DoHandleCodeCompletionAsync (CurrentCompletionContext' new CompletionTriggerInfo (reason)' token);" is 121.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,TriggerCompletion,The length of the statement  "				if (completionList == null || !CompletionWindowManager.ShowWindow (this' (char)0' completionList' CompletionWidget' CurrentCompletionContext)) {" is 144.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,RunParameterCompletionCommand,The length of the statement  "				ParameterInformationWindowManager.PostProcessKeyEvent (this' CompletionWidget' KeyDescriptor.FromGtk (Gdk.Key.F' 'f'' Gdk.ModifierType.None));" is 142.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,HandleParameterCompletionAsync,The length of the statement  "			return HandleParameterCompletionAsync (completionContext' triggerInfo.TriggerCharacter.HasValue ? triggerInfo.TriggerCharacter.Value : '\0'' token);" is 148.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,ShowCodeSurroundingsCommand,The length of the statement  "			foreach (CodeTemplate template in CodeTemplateService.GetCodeTemplatesAsync (Editor).WaitAndGetResult (CancellationToken.None)) {" is 129.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,ShowCodeTemplatesCommand,The length of the statement  "			foreach (CodeTemplate template in CodeTemplateService.GetCodeTemplatesAsync (Editor).WaitAndGetResult (CancellationToken.None)) {" is 129.
Long Statement,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,ParameterCompletionCommand,The length of the statement  "				return await HandleParameterCompletionAsync (completionContext' new SignatureHelpTriggerInfo (SignatureHelpTriggerReason.InvokeSignatureHelpCommand)' parameterHintingSrc.Token);" is 177.
Long Statement,MonoDevelop.Ide.Editor.Extension,KeyDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\KeyDescriptor.cs,ToString,The length of the statement  "			return string.Format ("[KeyDescriptor: SpecialKey={0}' KeyChar={1}' ModifierKeys={2}]"' SpecialKey' KeyChar' ModifierKeys);" is 123.
Long Statement,MonoDevelop.Ide.Editor.Extension,BraceMatcherTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BraceMatcherTextEditorExtension.cs,OnGotoMatchingBrace,The length of the statement  "				Editor.CaretOffset = currentResult.Value.IsCaretInLeft ? currentResult.Value.RightSegment.Offset : currentResult.Value.LeftSegment.Offset;" is 138.
Long Statement,MonoDevelop.Ide.Editor.Extension,AbstractNavigationExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\AbstractNavigationExtension.cs,Editor_MouseMoved,The length of the statement  "								var marker = Editor.TextMarkerFactory.CreateLinkMarker (Editor' segment.Offset' segment.Length' delegate { segment.Activate (); });" is 131.
Long Statement,MonoDevelop.Ide.Editor.Extension,FoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\FoldingTextEditorExtension.cs,UpdateFoldings,The length of the statement  "			if (parsedDocument == null || !Editor.Options.ShowFoldMargin || parsedDocument.Flags.HasFlag (ParsedDocumentFlags.SkipFoldings))" is 128.
Long Statement,MonoDevelop.Ide.Editor.Extension,ErrorHandlerTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\ErrorHandlerTextEditorExtension.cs,UpdateQuickTasks,The length of the statement  "					var newTask = new QuickTask (error.Message' offset' error.ErrorType == ErrorType.Error ? DiagnosticSeverity.Error : DiagnosticSeverity.Warning);" is 144.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,ToggleCodeCommentWithBlockComments,The length of the statement  "				if (startLineText.StartsWith (blockStart' StringComparison.Ordinal) && endLineText.EndsWith (blockEnd' StringComparison.Ordinal)) {" is 131.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,TryGetLineCommentTag,The length of the statement  "			var scope = Editor.SyntaxHighlighting.GetScopeStackAsync (Editor.CaretOffset' CancellationToken.None).WaitAndGetResult (CancellationToken.None);" is 144.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,OnUpdateToggleComment,The length of the statement  "			var scope = Editor.SyntaxHighlighting.GetScopeStackAsync (Editor.CaretOffset' CancellationToken.None).WaitAndGetResult (CancellationToken.None);" is 144.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,AddCodeComment,The length of the statement  "					changes.Add (new Microsoft.CodeAnalysis.Text.TextChange (new Microsoft.CodeAnalysis.Text.TextSpan (line.Offset + indent.Length' 0)' commentTag));" is 145.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,RemoveCodeComment,The length of the statement  "						changes.Add (new Microsoft.CodeAnalysis.Text.TextChange (new Microsoft.CodeAnalysis.Text.TextSpan (startOffset' commentTag.Length)' ""));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,RemoveCodeComment,The length of the statement  "					//						CodeFormatterService.Format (Editor' IdeApp.Workbench.ActiveDocument' TextSegment.FromBounds (first.Offset' last.EndOffset));" is 133.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,OnUpdateToggleErrorTextMarker,The length of the statement  "			var marker = (IMessageBubbleLineMarker)Editor.GetLineMarkers (line).FirstOrDefault (m => m is IMessageBubbleLineMarker);" is 120.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,OnUpdateToggleErrorTextMarker,The length of the statement  "				info.Text = marker.IsVisible ? GettextCatalog.GetString ("_Hide Current Message") : GettextCatalog.GetString ("_Show Hidden Message");" is 134.
Long Statement,MonoDevelop.Ide.Editor.Extension,DefaultCommandTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\DefaultCommandTextEditorExtension.cs,OnToggleErrorTextMarker,The length of the statement  "			var marker = (IMessageBubbleLineMarker)Editor.GetLineMarkers (line).FirstOrDefault (m => m is IMessageBubbleLineMarker);" is 120.
Long Statement,MonoDevelop.Ide.Editor.Extension,HighlightUrlExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\HighlightUrlExtension.cs,RunUpdateAll,The length of the statement  "			updateAllTask = RunUpdateTask (Editor.CreateSnapshot ()' Editor.GetLine (1)' Editor.Length' Editor.Version' updateAllSrc.Token);" is 128.
Long Statement,MonoDevelop.Ide.Editor.Extension,HighlightUrlExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\HighlightUrlExtension.cs,RunUpdateTask,The length of the statement  "						var marker = Editor.TextMarkerFactory.CreateUrlTextMarker (Editor' url' m.Item1' "url"' startCol' startCol + m.Item2.Length);" is 125.
Long Statement,MonoDevelop.Ide.Editor.Extension,LineSeparatorTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\LineSeparatorTextEditorExtension.cs,DocumentContext_DocumentParsed,The length of the statement  "			var lineSeparatorService = DocumentContext?.RoslynWorkspace?.Services.GetLanguageServices (analysisDocument.Project.Language).GetService<ILineSeparatorService> ();" is 163.
Long Statement,MonoDevelop.Ide.Editor.Extension,LineSeparatorTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\LineSeparatorTextEditorExtension.cs,DocumentContext_DocumentParsed,The length of the statement  "			var separators = await lineSeparatorService.GetLineSeparatorsAsync (analysisDocument' new TextSpan (0' Editor.Length)' token);" is 126.
Long Statement,MonoDevelop.Ide.Editor.Extension,BlockStructureFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BlockStructureFoldingTextEditorExtension.cs,DocumentContext_DocumentParsed,The length of the statement  "				return UpdateFoldings (snapshot' blockStructure.Spans' caretLocation' (start' length) => editor.CreateFoldSegment (start' length)' token);" is 138.
Long Statement,MonoDevelop.Ide.Editor.Extension,EditorFormattingServiceTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\EditorFormattingServiceTextEditorExtension.cs,TryFormat,The length of the statement  "				changes = formattingService.GetFormattingChangesOnReturnAsync (document' position' cancellationToken).WaitAndGetResult (cancellationToken);" is 139.
Long Statement,MonoDevelop.Ide.Editor.Extension,EditorFormattingServiceTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\EditorFormattingServiceTextEditorExtension.cs,TryFormat,The length of the statement  "				changes = formattingService.GetFormattingChangesAsync (document' typedChar' position' cancellationToken).WaitAndGetResult (cancellationToken);" is 142.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,GetIdeFittingTheme,The length of the statement  "				LoggingService.LogError ("Error while getting the color style : " + Ide.IdeApp.Preferences.ColorScheme + " in ide theme : " + Ide.IdeApp.Preferences.UserInterfaceTheme' e);" is 172.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The length of the statement  "			// this method dispatches to obsoleted methods for loading highlighting definitions and non-obsoleted methods for loading color themes" is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The length of the statement  "							var oldThemeProvider = AbstractThemeProvider.CreateProvider (EditorThemeFormat.XamarinStudio' styleName' getStreamProvider);" is 124.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The length of the statement  "							var syntaxProvider = AbstractSyntaxHighlightingDefinitionProvider.CreateProvider (SyntaxHighlightingDefinitionFormat.TextMateJson' styleName' scopeName' fileTypes' getStreamProvider); " is 183.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The length of the statement  "						var syntaxProvider = AbstractSyntaxHighlightingDefinitionProvider.CreateProvider (SyntaxHighlightingDefinitionFormat.TextMate' styleName' scopeName' fileTypes' getStreamProvider);" is 179.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The length of the statement  "						var syntaxProvider = AbstractSyntaxHighlightingDefinitionProvider.CreateProvider (SyntaxHighlightingDefinitionFormat.Sublime3' styleName' scopeName' fileTypes' getStreamProvider);" is 179.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The length of the statement  "			} else if (file.EndsWith (".sublime-package"' StringComparison.OrdinalIgnoreCase) || file.EndsWith (".tmbundle"' StringComparison.OrdinalIgnoreCase)) {" is 151.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadStylesAndModes,The length of the statement  "				LoadFile (builtInBundle' resource' () => assembly.GetManifestResourceStream (resource)' () => new ResourceStreamProvider (assembly' resource));" is 143.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,TryScanJSonStyle,The length of the statement  "				while ((line = queueOfPrereadLines.Count > 0 ? queueOfPrereadLines.Dequeue () : null) != null || (line = file.ReadLine ()) != null) {" is 133.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,TryScanTextMateSyntax,The length of the statement  "						if (line.IndexOf ("</array>"' StringComparison.Ordinal) >= 0 || line.IndexOf ("<array/>"' StringComparison.Ordinal) >= 0) {" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,AddStyle,The length of the statement  "			// this method dispatches to obsoleted methods for loading highlighting definitions and non-obsoleted methods for loading color themes " is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,AddStyle,The length of the statement  "						var oldThemeProvider = AbstractThemeProvider.CreateProvider (EditorThemeFormat.XamarinStudio' styleName' () => provider);" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,AddStyle,The length of the statement  "						var syntaxProvider = AbstractSyntaxHighlightingDefinitionProvider.CreateProvider (SyntaxHighlightingDefinitionFormat.TextMateJson' styleName' scopeName' fileTypes' () => provider); " is 180.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,GetSyntaxHighlightingDefinitionByName,The length of the statement  "							bestType.Length < fileType.Length || // longer match is better' e.g. 'xy' matches 'ab.nm.xy'' but 'nm.xy' matches better" is 120.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,GetSyntaxHighlightingDefinitionByName,The length of the statement  "							(bestType.Length == fileType.Length && bestPosition > i)) { //fileType is same... take higher on list(e.g. XAML specific will have .xaml at index 0' but XML general will have .xaml at index 68)" is 193.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ChunkStyle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\ChunkStyle.cs,Equals,The length of the statement  "			return ScopeStack == other.ScopeStack && Foreground.Equals (other.Foreground) && Background.Equals (other.Background) && FontWeight == other.FontWeight && FontStyle == other.FontStyle;" is 184.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ChunkStyle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\ChunkStyle.cs,GetHashCode,The length of the statement  "				return (ScopeStack != null ? ScopeStack.GetHashCode () : 0) ^ Foreground.GetHashCode () ^ Background.GetHashCode () ^ FontWeight.GetHashCode () ^ FontStyle.GetHashCode ();" is 171.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ChunkStyle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\ChunkStyle.cs,ToString,The length of the statement  "			return string.Format ("[ChunkStyle: ScopeStack={0}' CairoColor={1}' CairoBackgroundColor={2}' FontWeight={3}' FontStyle={4}]"' ScopeStack' Foreground' Background' FontWeight' FontStyle);" is 186.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ColorDescriptionAttribute,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\ColorDescriptionAttribute.cs,ToString,The length of the statement  "			return string.Format ("[ColorDescriptionAttribute: Name={0}' Description={1}' VSSetting={2}]"' Name' Description' VSSetting);" is 125.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,HighlightState,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlighting.cs,CreateNewState,The length of the statement  "					throw new NullReferenceException ("HighlightState.CreateNewState null reference exception highlighting.definition == null.");" is 125.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,HighlightState,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlighting.cs,Equals,The length of the statement  "				return ContextStack.SequenceEqual (other.ContextStack) && ScopeStack.SequenceEqual (other.ScopeStack) && MatchStack.SequenceEqual (other.MatchStack);" is 149.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,Highlighter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlighting.cs,GetColoredSegments,The length of the statement  "					return Task.FromResult (new HighlightedLine (new TextSegment (startOffset' length)' new [] { new ColoredSegment (0' length' ScopeStack.Empty) }));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,Highlighter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlighting.cs,GetColoredSegments,The length of the statement  "					return Task.FromResult (new HighlightedLine (new TextSegment (startOffset' length)' new [] { new ColoredSegment (0' length' ScopeStack.Empty) }));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,HighlightedLine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\ISyntaxHighlighting.cs,ToString,The length of the statement  "			return string.Format ("[HighlightedLine: TextSegment={0}' #Segments={1}' IsContinuedBeyondLineEnd={2}]"' TextSegment' Segments?.Count' IsContinuedBeyondLineEnd);" is 161.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,PObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ToEnumerable,The length of the statement  "				return ((PArray)obj).Select (k => new KeyValuePair<string' PObject> (k is IPValueObject ? ((IPValueObject)k).Value.ToString () : null' k));" is 139.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,PObjectContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Save,The length of the statement  "					using (var ctx = binary ? PropertyListFormat.Binary.StartWriting (stream) : PropertyListFormat.Xml.StartWriting (stream))" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ShouldDuplicate,The length of the statement  "						(pobj.Type == PObjectType.String && ((PString)pobj).Value.Any (c => c > 255)); //LAMESPEC: this is weird. Some things are duplicated" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadDate,The length of the statement  "					return DateTime.ParseExact (reader.ReadElementContentAsString ()' DATETIME_FORMAT' CultureInfo.InvariantCulture).ToUniversalTime ();" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The length of the statement  "					WriteLine ("<date>" + SecurityElement.Escape (date.Value.ToString (DATETIME_FORMAT' CultureInfo.InvariantCulture)) + "</date>");" is 128.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,CFBinaryPlistTrailer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The length of the statement  "						//LAMESPEC: apple's comments say this is the number of entries in the offset table' but this really *is* number of objects??!?!" is 127.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,ToString,The length of the statement  "			return string.Format ("[SyntaxContext: Name={0}' MetaScope={1}' MetaContentScope={2}' MetaIncludePrototype={3}]"' Name' MetaScope.Count == 0 ? "empty" : string.Join ("' "' MetaScope)' MetaContentScope.Count == 0 ? "empty" : string.Join ("' "' MetaContentScope)' MetaIncludePrototype);" is 284.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,SyntaxMatch,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,ToString,The length of the statement  "			return string.Format ("[SyntaxMatch: Match={0}' Scope={1}]"' Match' Scope.Count == 0 ? "empty" : string.Join ("' "' Scope));" is 124.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.ChangingUsagesRectangle] = colorScheme.ChangingUsagesRectangle.Color.ToPangoString ();" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.NotificationTextBackground] = colorScheme.NotificationText.Background.ToPangoString ();" is 122.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorMarker] = colorScheme.MessageBubbleErrorMarker.Color.ToPangoString ();" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorTag2] = colorScheme.MessageBubbleErrorTag.SecondColor.ToPangoString ();" is 124.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorTooltip] = colorScheme.MessageBubbleErrorTooltip.Color.ToPangoString ();" is 125.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorLine2] = colorScheme.MessageBubbleErrorLine.SecondColor.ToPangoString ();" is 126.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorBorderLine] = colorScheme.MessageBubbleErrorLine.BorderColor.ToPangoString ();" is 131.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorCounter] = colorScheme.MessageBubbleErrorCounter.Color.ToPangoString ();" is 125.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorCounter2] = colorScheme.MessageBubbleErrorCounter.SecondColor.ToPangoString ();" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorIconMargin] = colorScheme.MessageBubbleErrorIconMargin.Color.ToPangoString ();" is 131.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleErrorIconMarginBorder] = colorScheme.MessageBubbleErrorIconMargin.BorderColor.ToPangoString ();" is 143.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningMarker] = colorScheme.MessageBubbleWarningMarker.Color.ToPangoString ();" is 127.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningTag] = colorScheme.MessageBubbleWarningTag.Color.ToPangoString ();" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningTag2] = colorScheme.MessageBubbleWarningTag.SecondColor.ToPangoString ();" is 128.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningTooltip] = colorScheme.MessageBubbleWarningTooltip.Color.ToPangoString ();" is 129.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningLine] = colorScheme.MessageBubbleWarningLine.Color.ToPangoString ();" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningLine2] = colorScheme.MessageBubbleWarningLine.SecondColor.ToPangoString ();" is 130.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningBorderLine] = colorScheme.MessageBubbleWarningLine.BorderColor.ToPangoString ();" is 135.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningCounter] = colorScheme.MessageBubbleWarningCounter.Color.ToPangoString ();" is 129.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningCounter2] = colorScheme.MessageBubbleWarningCounter.SecondColor.ToPangoString ();" is 136.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningIconMargin] = colorScheme.MessageBubbleWarningIconMargin.Color.ToPangoString ();" is 135.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.MessageBubbleWarningIconMarginBorder] = colorScheme.MessageBubbleWarningIconMargin.BorderColor.ToPangoString ();" is 147.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.IndicatorMarginSeparator] = colorScheme.IndicatorMarginSeparator.Color.ToPangoString ();" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.BreakpointMarkerDisabled] = colorScheme.BreakpointMarkerDisabled.Color.ToPangoString ();" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.BreakpointMarkerInvalid] = colorScheme.BreakpointMarkerInvalid.Color.ToPangoString ();" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.DebuggerStackLineMarker] = colorScheme.DebuggerStackLineMarker.Color.ToPangoString ();" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.DebuggerCurrentLineMarker] = colorScheme.DebuggerCurrentLineMarker.Color.ToPangoString ();" is 125.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.PrimaryTemplateHighlighted2] = colorScheme.PrimaryTemplateHighlighted.Color.ToPangoString ();" is 128.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.SecondaryTemplateHighlighted] = colorScheme.SecondaryTemplateHighlighted.Color.ToPangoString ();" is 131.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.SecondaryTemplateHighlighted2] = colorScheme.SecondaryTemplateHighlighted.SecondColor.ToPangoString ();" is 138.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.PreviewDiffRemovedBackground] = colorScheme.PreviewDiffRemoved.Background.ToPangoString ();" is 126.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			defaultSettings [EditorThemeColors.PreviewDiffAddedBackground] = colorScheme.PreviewDiffAddedd.Background.ToPangoString ();" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Comment"' new List<string> { "comment" }' ConvertChunkStyle (colorScheme.CommentsSingleLine)));" is 128.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Comment Tags"' new List<string> { "markup.other" }' ConvertChunkStyle (colorScheme.CommentTags)));" is 131.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Comment Block"' new List<string> { "comment.block" }' ConvertChunkStyle (colorScheme.CommentsBlock)));" is 135.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Comment XML Doc Comment"' new List<string> { "comment.line.documentation" }' ConvertChunkStyle (colorScheme.CommentsForDocumentation)));" is 169.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Comment XML Doc Tag"' new List<string> { "comment.line.documentation.tag" }' ConvertChunkStyle (colorScheme.CommentsForDocumentationTags)));" is 173.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String Verbatim"' new List<string> { "string.verbatim" }' ConvertChunkStyle (colorScheme.StringVerbatim)));" is 140.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("punctuation.definition.string"' new List<string> { "punctuation.definition.string" }' ConvertChunkStyle (colorScheme.String)));" is 160.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Number"' new List<string> { "constant.numeric" }' ConvertChunkStyle (colorScheme.Number)));" is 124.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Built-in constant"' new List<string> { "constant.language" }' ConvertChunkStyle (colorScheme.KeywordConstants)));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User-defined constant"' new List<string> { "constant.character"' "constant.other" }' ConvertChunkStyle (colorScheme.Number)));" is 159.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Variable"' new List<string> { "variable" }' ConvertChunkStyle (colorScheme.UserVariableUsage)));" is 129.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("variable.other"' new List<string> { "variable.other" }' ConvertChunkStyle (colorScheme.ScriptKeyword)));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword"' new List<string> { "keyword - (source.c keyword.operator | source.c++ keyword.operator | source.objc keyword.operator | source.objc++ keyword.operator)' keyword.operator.word" }' ConvertChunkStyle (colorScheme.KeywordOther)));" is 269.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Access)"' new List<string> { "keyword.other.access" }' ConvertChunkStyle (colorScheme.KeywordAccessors)));" is 148.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Types)"' new List<string> { "keyword.other.type" }' ConvertChunkStyle (colorScheme.KeywordTypes)));" is 141.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Operator)"' new List<string> { "keyword.operator" }' ConvertChunkStyle (colorScheme.KeywordOperators)));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Selection)"' new List<string> { "keyword.other.selection" }' ConvertChunkStyle (colorScheme.KeywordSelection)));" is 154.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Itarator)"' new List<string> { "keyword.other.iteration" }' ConvertChunkStyle (colorScheme.KeywordIteration)));" is 153.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Jump)"' new List<string> { "keyword.other.jump" }' ConvertChunkStyle (colorScheme.KeywordJump)));" is 139.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Context)"' new List<string> { "keyword.other.context" }' ConvertChunkStyle (colorScheme.KeywordContext)));" is 148.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Exception)"' new List<string> { "keyword.other.exception" }' ConvertChunkStyle (colorScheme.KeywordException)));" is 154.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Modifier)"' new List<string> { "keyword.other.modifiers" }' ConvertChunkStyle (colorScheme.KeywordModifiers)));" is 153.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Void)"' new List<string> { "keyword.other.void" }' ConvertChunkStyle (colorScheme.KeywordVoid)));" is 139.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Namespace)"' new List<string> { "keyword.other.namespace" }' ConvertChunkStyle (colorScheme.KeywordNamespace)));" is 154.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Property)"' new List<string> { "keyword.other.property" }' ConvertChunkStyle (colorScheme.KeywordProperty)));" is 151.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Declaration)"' new List<string> { "keyword.other.declaration" }' ConvertChunkStyle (colorScheme.KeywordDeclaration)));" is 160.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Parameter)"' new List<string> { "keyword.other.parameter" }' ConvertChunkStyle (colorScheme.KeywordParameter)));" is 154.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Keyword (Operator)"' new List<string> { "keyword.other.access" }' ConvertChunkStyle (colorScheme.KeywordOperatorDeclaration)));" is 160.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("storage"' new List<string> { "storage" }' ConvertChunkStyle (colorScheme.KeywordOther)));" is 122.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("storage.type"' new List<string> { "storage.type" }' ConvertChunkStyle (colorScheme.KeywordOther)));" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("punctuation"' new List<string> { "punctuation" }' ConvertChunkStyle (colorScheme.Punctuation)));" is 129.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("punctuation.definition.comment"' new List<string> { "punctuation.definition.comment" }' ConvertChunkStyle (colorScheme.CommentsSingleLine)));" is 174.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Entity name"' new List<string> { "entity.name - (entity.name.filename | entity.name.section | entity.name.tag | entity.name.label)" }' ConvertChunkStyle (colorScheme.PlainText)));" is 212.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Tag name"' new List<string> { "entity.name.tag" }' ConvertChunkStyle (colorScheme.HtmlElementName)));" is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Preprocessor"' new List<string> { "meta.preprocessor" }' ConvertChunkStyle (colorScheme.Preprocessor)));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Preprocessor region name"' new List<string> { "meta.preprocessor.region.name" }' ConvertChunkStyle (colorScheme.PreprocessorRegionName)));" is 171.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Excluded Code"' new List<string> { "comment.excluded" }' ConvertChunkStyle (colorScheme.ExcludedCode)));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Tag attribute"' new List<string> { "entity.other.attribute-name" }' ConvertChunkStyle (colorScheme.XmlAttribute)));" is 148.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Function call"' new List<string> { "variable.function" }' ConvertChunkStyle (colorScheme.UserMethodDeclaration)));" is 147.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Library function"' new List<string> { "support.function" }' ConvertChunkStyle (colorScheme.UserMethodDeclaration)));" is 149.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Library constant"' new List<string> { "support.constant" }' ConvertChunkStyle (colorScheme.KeywordConstants)));" is 144.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Library class/type"' new List<string> { "support.type"' "support.class" }' ConvertChunkStyle (colorScheme.UserTypes)));" is 152.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Library variable"' new List<string> { "support.other.variable" }' ConvertChunkStyle (colorScheme.UserVariableUsage)));" is 151.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Invalid"' new List<string> { "invalid" }' ConvertChunkStyle (colorScheme.SyntaxError)));" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Invalid deprecated"' new List<string> { "invalid.deprecated" }' ConvertChunkStyle (colorScheme.SyntaxError)));" is 143.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("JSON String"' new List<string> { "meta.structure.dictionary.json string.quoted.double.json" }' ConvertChunkStyle (colorScheme.String)));" is 169.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("YAML String"' new List<string> { "string.unquoted.yaml" }' ConvertChunkStyle (colorScheme.String)));" is 133.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Entity Names"' new List<string> { "entity.name.tag" }' ConvertChunkStyle (colorScheme.XmlName)));" is 130.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Entity Attributes"' new List<string> { "entity.other.attribute" }' ConvertChunkStyle (colorScheme.XmlAttribute)));" is 147.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Diff Header"' new List<string> { "meta.diff"' "meta.diff.header" }' ConvertChunkStyle (colorScheme.DiffHeader)));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Diff Line(Removed)"' new List<string> { "markup.deleted" }' ConvertChunkStyle (colorScheme.DiffLineRemoved)));" is 143.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Diff Line(Added)"' new List<string> { "markup.inserted" }' ConvertChunkStyle (colorScheme.DiffLineAdded)));" is 140.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Diff Line(Changed)"' new List<string> { "markup.changed" }' ConvertChunkStyle (colorScheme.DiffLineChanged)));" is 143.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Character Class)"' new List<string> { "constant.character.regex.characterclass" }' ConvertChunkStyle (colorScheme.RegexCharacterClass)));" is 183.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Grouping Constructs)"' new List<string> { "constant.character.regex.grouping" }' ConvertChunkStyle (colorScheme.RegexGroupingConstructs)));" is 185.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Set Constructs)"' new List<string> { "constant.character.regex.set" }' ConvertChunkStyle (colorScheme.RegexSetConstructs)));" is 170.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Errors)"' new List<string> { "constant.character.regex.errors" }' ConvertChunkStyle (colorScheme.SyntaxError)));" is 158.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Comments)"' new List<string> { "constant.character.regex.comments" }' ConvertChunkStyle (colorScheme.CommentsSingleLine)));" is 169.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Escape Character)"' new List<string> { "constant.character.regex.escape" }' ConvertChunkStyle (colorScheme.RegexEscapeCharacter)));" is 177.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("String(Regex Alternate Escape Character)"' new List<string> { "constant.character.regex.altescape" }' ConvertChunkStyle (colorScheme.RegexAltEscapeCharacter)));" is 193.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types"' new List<string> { EditorThemeColors.UserTypes }' ConvertChunkStyle (colorScheme.UserTypes)));" is 140.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types(Value types)"' new List<string> { EditorThemeColors.UserTypesValueTypes }' ConvertChunkStyle (colorScheme.UserTypesValueTypes)));" is 173.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types(Interfaces)"' new List<string> { EditorThemeColors.UserTypesInterfaces }' ConvertChunkStyle (colorScheme.UserTypesInterfaces)));" is 172.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types(Enums)"' new List<string> { EditorThemeColors.UserTypesEnums }' ConvertChunkStyle (colorScheme.UserTypesEnums)));" is 157.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types(Type parameters)"' new List<string> { EditorThemeColors.UserTypesTypeParameters }' ConvertChunkStyle (colorScheme.UserTypesTypeParameters)));" is 185.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types(Delegates)"' new List<string> { EditorThemeColors.UserTypesDelegates }' ConvertChunkStyle (colorScheme.UserTypesDelegates)));" is 169.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Types(Mutable)"' new List<string> { EditorThemeColors.UserTypesMutable }' ConvertChunkStyle (colorScheme.UserTypesMutable)));" is 163.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Field"' new List<string> { EditorThemeColors.UserField }' ConvertChunkStyle (colorScheme.UserFieldDeclaration)));" is 151.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Enum Member"' new List<string> { EditorThemeColors.UserEnumMember }' ConvertChunkStyle (colorScheme.UserVariableDeclaration)));" is 165.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Constant"' new List<string> { EditorThemeColors.UserConstant }' ConvertChunkStyle (colorScheme.UserFieldDeclaration)));" is 157.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Property"' new List<string> { EditorThemeColors.UserProperty }' ConvertChunkStyle (colorScheme.UserPropertyDeclaration)));" is 160.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Event"' new List<string> { EditorThemeColors.UserEvent }' ConvertChunkStyle (colorScheme.UserEventDeclaration)));" is 151.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Method"' new List<string> { EditorThemeColors.UserMethod }' ConvertChunkStyle (colorScheme.UserMethodDeclaration)));" is 154.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Extension Method"' new List<string> { EditorThemeColors.UserExtensionMethod }' ConvertChunkStyle (colorScheme.UserMethodDeclaration)));" is 173.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Parameter"' new List<string> { EditorThemeColors.UserParameter }' ConvertChunkStyle (colorScheme.UserParameterDeclaration)));" is 163.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("User Variable"' new List<string> { EditorThemeColors.UserLocal }' ConvertChunkStyle (colorScheme.UserVariableDeclaration)));" is 157.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("CSS Comment"' new List<string> { "comment.block.css" }' ConvertChunkStyle (colorScheme.CssComment)));" is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("CSS Keyword"' new List<string> { "keyword.other.css" }' ConvertChunkStyle (colorScheme.CssKeyword)));" is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("CSS Selector"' new List<string> { "entity.other.pseudo-class.css" }' ConvertChunkStyle (colorScheme.CssSelector)));" is 148.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("CSS Property Name"' new List<string> { "support.type.property-name.css" }' ConvertChunkStyle (colorScheme.CssPropertyName)));" is 158.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("CSS Property Value"' new List<string> { "support.constant.property-value.css" }' ConvertChunkStyle (colorScheme.CssPropertyValue)));" is 165.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("CSS String Value"' new List<string> { "string.quoted.double.css" }' ConvertChunkStyle (colorScheme.CssStringValue)));" is 150.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("HTML Attribute Name"' new List<string> { "entity.other.attribute-name.html" }' ConvertChunkStyle (colorScheme.HtmlAttributeName)));" is 164.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("HTML Attribute Value"' new List<string> { "string.unquoted.html" }' ConvertChunkStyle (colorScheme.HtmlAttributeValue)));" is 154.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("HTML Comment"' new List<string> { "comment.block.html" }' ConvertChunkStyle (colorScheme.HtmlComment)));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("HTML Element Name"' new List<string> { "entity.name.tag.html" }' ConvertChunkStyle (colorScheme.HtmlElementName)));" is 148.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("HTML Entity"' new List<string> { "constant.character.entity.html" }' ConvertChunkStyle (colorScheme.HtmlEntity)));" is 147.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("HTML Server-Side Script"' new List<string> { "source.server.html" }' ConvertChunkStyle (colorScheme.HtmlServerSideScript)));" is 157.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml Name"' new List<string> { "entity.name.tag.localname.xml" }' ConvertChunkStyle (colorScheme.XmlName)));" is 140.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml Comment"' new List<string> { "comment.block.xml" }' ConvertChunkStyle (colorScheme.XmlComment)));" is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml Attribute"' new List<string> { "entity.other.attribute-name.localname.xml" }' ConvertChunkStyle (colorScheme.XmlAttribute)));" is 162.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml Delimiter"' new List<string> { "meta.tag.xml"' "punctuation.definition.tag.xml" }' ConvertChunkStyle (colorScheme.XmlDelimiter)));" is 167.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml CData Section"' new List<string> { "string.unquoted.cdata.xml" }' ConvertChunkStyle (colorScheme.XmlCDataSection)));" is 153.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml Attribute Value"' new List<string> { "string.quoted.double.xml"' "string.quoted.single.xml" }' ConvertChunkStyle (colorScheme.XmlAttributeValue)));" is 184.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xml Attribute Quotes"' new List<string> { "punctuation.definition.string.begin.xml"' "punctuation.definition.string.end.xml" }' ConvertChunkStyle (colorScheme.XmlAttributeQuotes)));" is 214.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Name"' new List<string> { "entity.name.tag.localname.xaml" }' ConvertChunkStyle (colorScheme.XAMLName)));" is 143.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Text"' new List<string> { "text.xaml" }' ConvertChunkStyle (colorScheme.XmlText)));" is 121.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Comment"' new List<string> { "comment.block.xaml" }' ConvertChunkStyle (colorScheme.XAMLComment)));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Attribute"' new List<string> { "entity.other.attribute-name.localname.xaml" }' ConvertChunkStyle (colorScheme.XAMLAttribute)));" is 165.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Delimiter"' new List<string> { "meta.tag.xml"' "punctuation.definition.tag.xaml" }' ConvertChunkStyle (colorScheme.XAMLDelimiter)));" is 170.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml CData Section"' new List<string> { "string.unquoted.cdata.xaml" }' ConvertChunkStyle (colorScheme.XAMLCDataSection)));" is 156.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Attribute Value"' new List<string> { "string.quoted.double.xaml"' "string.quoted.single.xaml" }' ConvertChunkStyle (colorScheme.XAMLAttributeValue)));" is 188.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("Xaml Attribute Quotes"' new List<string> { "punctuation.definition.string.begin.xml"' "punctuation.definition.string.end.xaml" }' ConvertChunkStyle (colorScheme.XmlAttributeQuotes)));" is 216.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("markup.emoji"' new List<string> { "markup.emoji" }' ConvertChunkStyle (colorScheme.Preprocessor)));" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,OldFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ConvertToEditorTheme,The length of the statement  "			settings.Add (new ThemeSetting ("markup.link"' new List<string> { "markup.link" }' ConvertChunkStyle (colorScheme.UserTypesInterfaces)));" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,CreateChunkStyle,The length of the statement  "								throw new InvalidDataException (el.Value + " is no valid text weight values are: " + string.Join ("'"' Enum.GetNames (typeof (Xwt.Drawing.FontWeight))));" is 153.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,CreateChunkStyle,The length of the statement  "								throw new InvalidDataException (el.Value + " is no valid text weight values are: " + string.Join ("'"' Enum.GetNames (typeof (Xwt.Drawing.FontStyle))));" is 152.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,LoadFrom,The length of the statement  "				var reader = System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (bytes' new System.Xml.XmlDictionaryReaderQuotas ());" is 141.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The length of the statement  "				result.IndentationGuide.Colors.Add (Tuple.Create ("color"' (HslColor)AlphaBlend (result.PlainText.Foreground' result.PlainText.Background' 0.3)));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The length of the statement  "				result.TooltipPagerTriangle.Colors.Add (Tuple.Create ("color"' (HslColor)AlphaBlend (result.PlainText.Foreground' result.PlainText.Background' 0.8)));" is 150.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ConvertUnicodeCategory,The length of the statement  "										UnicodeCategory.OtherPunctuation' UnicodeCategory.ConnectorPunctuation' UnicodeCategory.FinalQuotePunctuation' UnicodeCategory.InitialQuotePunctuation);" is 152.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,Save,The length of the statement  "			writer.WriteLine ("<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">");" is 137.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The length of the statement  "				settings [EditorThemeColors.LineNumbers] = HslColor.Parse (settings [EditorThemeColors.Foreground]).AddLight (-0.1 * darkModificator).ToPangoString ();" is 151.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The length of the statement  "			var templateTheme = SyntaxHighlightingService.GetEditorTheme (darkModificator == 1 ? EditorTheme.DefaultDarkThemeName : EditorTheme.DefaultThemeName);" is 150.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,ReadMatch,The length of the statement  "						list.Add (new SyntaxMatch (Sublime3Format.CompileRegex (end)' endScope' endCaptures ?? captures' null' true' null' null));" is 122.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,ReadMatch,The length of the statement  "						list.Add (new SyntaxMatch ("^(?!" + Sublime3Format.CompileRegex (whileLoop) +")"' endScope' endCaptures ?? captures' null' true' null' null));" is 142.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,ReadMatch,The length of the statement  "				return new SyntaxMatch (Sublime3Format.CompileRegex (begin)' matchScope' beginCaptures ?? captures' pushContext' false' null' null);" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,ReadHighlightingFromJson,The length of the statement  "			var reader = System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader (bytes' new System.Xml.XmlDictionaryReaderQuotas ());" is 141.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,Convert,The length of the statement  "						LoggingService.LogWarning ("Warning while converting json highlighting to textmate 'key' " + name + " is duplicated in : " + f);" is 128.
Long Statement,MonoDevelop.Ide.Editor.Highlighting,StringMatchExpression,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\StackMatchExpression.cs,MatchesStack,The length of the statement  "				bool found = top == scope || top.Length > scope.Length && top[scope.Length] == '.' && top.StartsWith (scope' StringComparison.Ordinal);" is 135.
Long Statement,MonoDevelop.Components.DockNotebook,DockNotebook,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebook.cs,OnDragDataReceived,The length of the statement  "						files.Add (new Ide.Gui.FileOpenInformation (filePath' null' 0' 0' Ide.Gui.OpenDocumentOptions.DefaultInternal) { DockNotebook = this });" is 136.
Long Statement,MonoDevelop.Components.DockNotebook,DockNotebook,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebook.cs,OnTabPinned,The length of the statement  "					ReorderTab (sender' normalPages.MinValueOrDefault (s => s.Index) ?? stickedPages.MaxValueOrDefault (s => s.Index)' false);" is 122.
Long Statement,MonoDevelop.Components.DockNotebook,DockNotebook,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebook.cs,OnTabPinned,The length of the statement  "				ReorderTab (sender' stickedPages.MaxValueOrDefault (s => s.Index) ?? normalPages.MinValueOrDefault (s => s.Index)' false);" is 122.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,UpdateAccessibilityTabs,The length of the statement  "			var tabs = notebook.Tabs.Where (x => x.Accessible != null).OrderBy (x => x.Index).Select (x => x.Accessible).ToArray ();" is 120.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawClosingTab,The length of the statement  "				return c => DrawTab (c' closingTab' Allocation' new Gdk.Rectangle (region.X' region.Y' tmp' region.Height)' false' false' false' CreateTabLayout (closingTab)' false);" is 166.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The length of the statement  "					drawActive = c => DrawTab (c' tab' Allocation' new Gdk.Rectangle (tmp' y' width' Allocation.Height)' true' true' draggingTab' CreateTabLayout (tab' true)' focused);" is 164.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The length of the statement  "					drawCommands.Add (c => DrawTab (c' tab' Allocation' new Gdk.Rectangle (tmp' y' width' Allocation.Height)' highlighted' false' false' CreateTabLayout (tab)' focused));" is 166.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The length of the statement  "						focusRect = new Gdk.Rectangle ((int)tab.CloseButtonActiveArea.X' (int)tab.CloseButtonActiveArea.Y' (int)tab.CloseButtonActiveArea.Width' (int)tab.CloseButtonActiveArea.Height);" is 176.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The length of the statement  "						focusRect = new Gdk.Rectangle (tab.Allocation.X + 5' tab.Allocation.Y + 10' tab.Allocation.Width - 30' tab.Allocation.Height - 15);" is 131.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The length of the statement  "			// Redraw the dragging tab here to be sure its on top. We drew it before to get the sizing correct' this should be fixed." is 121.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The length of the statement  "				Gtk.Style.PaintFocus (Style' GdkWindow' State' focusRect' this' "tab"' focusRect.X' focusRect.Y' focusRect.Width' focusRect.Height);" is 132.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The length of the statement  "			var closeButtonAlloation = new Cairo.Rectangle (tabBounds.Right - rightPadding - (tabCloseImage.Width / 2) - CloseButtonMarginRight'" is 132.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The length of the statement  "				ctx.DrawImage (this' tabCloseImage.WithAlpha ((closeButtonHovered ? 1.0 : 0.5) * tab.Opacity)' closeButtonAlloation.X' closeButtonAlloation.Y);" is 143.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The length of the statement  "				ctx.DrawImage (this' (tab.IsPinned ? tabPinnedImage : tabUnPinnedImage).WithAlpha ((pinButtonHovered ? 1.0 : 0.5) * tab.Opacity)' spinButtonAllocation.X' spinButtonAllocation.Y);" is 178.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The length of the statement  "				ctx.SetSourceColor ((tab.Notify ? Styles.TabBarNotifyTextColor : (active ? Styles.TabBarActiveTextColor : Styles.TabBarInactiveTextColor)).ToCairoColor ());" is 156.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The length of the statement  "				using (var lg = new LinearGradient (tx + tw - (drawPinButton ? DefaultGradientWidth : DefaultGradientPinWidth)' 0' tx + tw' 0)) {" is 129.
Long Statement,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The length of the statement  "					var color = (tab.Notify ? Styles.TabBarNotifyTextColor : (active ? Styles.TabBarActiveTextColor : Styles.TabBarInactiveTextColor)).ToCairoColor ();" is 147.
Long Statement,MonoDevelop.Ide.Editor.Util,DiffHunk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,ToString,The length of the statement  "			return string.Format ("[Hunk: InsertStart={0}' RemoveStart={1}' Removed={2}' Inserted={3}]"' InsertStart' RemoveStart' Removed' Inserted);" is 138.
Long Statement,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,CreateDiffs,The length of the statement  "				if (lineA < baseData.Length && !baseData.Modified[lineA] && lineB < changedData.Length && !changedData.Modified[lineB]) {" is 121.
Long Statement,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiffString,The length of the statement  "			return GetDiffString (baseDocument.GetDiff (changedDocument)' baseDocument' changedDocument' baseDocument.FileName' changedDocument.FileName);" is 142.
Long Statement,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiffString,The length of the statement  "					sb.Append ("@@ -").Append (remStart).Append ("'").Append (remEnd - remStart).Append (" +").Append (insStart).Append ("'").Append (insEnd - insStart).AppendLine (" @@");" is 168.
Long Statement,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiffString,The length of the statement  "				sb.Append ("@@ -").Append (remStart).Append ("'").Append (remEnd - remStart).Append (" +").Append (insStart).Append ("'").Append (insEnd - insStart).AppendLine (" @@");" is 168.
Long Statement,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,GetMatchingBracketOffset,The length of the statement  "				result = SearchMatchingBracketForward (document' offset + 1' closingBrackets [bracket]' openBrackets [bracket]' cancellationToken);" is 131.
Long Statement,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,GetMatchingBracketOffset,The length of the statement  "					result = SearchMatchingBracketBackward (document' offset - 1' openBrackets [bracket]' closingBrackets [bracket]' cancellationToken);" is 132.
Long Statement,MonoDevelop.Ide.Editor.Projection,ProjectedSegment,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedSegment.cs,ToString,The length of the statement  "			return string.Format ("[ProjectedSegment: Offset={0}' ProjectedOffset={1}' Length={2}]"' Offset' ProjectedOffset' Length);" is 122.
Long Statement,MonoDevelop.Ide.Editor.Projection,Projection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\Projection.cs,HandleTextChanging,The length of the statement  "							LoggingService.LogError ($"Error while replacing in projected editor at {projectedOffset} with length {projectedEditor.Length} change: {change}"' ex);" is 150.
Long Statement,MonoDevelop.Ide.Editor.Projection,ProjectedSemanticHighlighting,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedSemanticHighlighting.cs,GetColoredSegments,The length of the statement  "						foreach (var cs in p.ProjectedEditor.SemanticHighlighting.GetColoredSegments (MonoDevelop.Core.Text.TextSegment.FromBounds (projectedStartOffset' projectedEndOffset))) {" is 169.
Long Statement,MonoDevelop.Ide.Editor.Projection,ProjectedSemanticHighlighting,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedSemanticHighlighting.cs,GetColoredSegments,The length of the statement  "							foreach (var cs in GetColoredSegments (MonoDevelop.Core.Text.TextSegment.FromBounds (originalEndOffset' segment.EndOffset)))" is 124.
Long Statement,MonoDevelop.Ide.Editor.Projection,ProjectedTooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedTooltipProvider.cs,GetItem,The length of the statement  "					var result = await projectedTooltipProvider.GetItem (projection.ProjectedEditor' projection.ProjectedContext' pseg.FromOriginalToProjected (offset));" is 149.
Long Statement,MonoDevelop.Ide.Editor.Projection,ProjectedTooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedTooltipProvider.cs,CreateTooltipWindow,The length of the statement  "					return projectedTooltipProvider.CreateTooltipWindow (projection.ProjectedEditor' projection.ProjectedContext' item' pseg.FromOriginalToProjected (offset)' modifierState);" is 170.
Long Statement,MonoDevelop.Components.AutoTest.Results,GtkTreeModelResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkTreeModelResult.cs,NextSiblings,The length of the statement  "				var result = DisposeWithResult (new GtkTreeModelResult (ParentWidget' TModel' Column' currentIter) { SourceQuery = this.SourceQuery });" is 135.
Long Statement,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,ToString,The length of the statement  "			return String.Format ("{0} - {1} - {2} - {3}' - {4}"' resultWidget' resultWidget.Allocation' resultWidget.Name' resultWidget.GetType ().FullName' resultWidget.Toplevel.Name);" is 174.
Long Statement,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,Model,The length of the statement  "			return columnNumber == -1 ? null : DisposeWithResult (new GtkTreeModelResult (resultWidget' model' columnNumber) { SourceQuery = this.SourceQuery });" is 149.
Long Statement,MonoDevelop.Components.AutoTest.Results,GtkNotebookResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkNotebookResult.cs,ToString,The length of the statement  "			return String.Format ("{0} - {1} - {2} - {3}' - {4} - Tab: {5}"' noteBook' noteBook.Allocation' noteBook.Name' noteBook.GetType ().FullName' noteBook.Toplevel.Name' toBeSelected);" is 179.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,MatchPattern,The length of the statement  "                        Debug.Assert(textinfo.ToLower(_pattern[i]) == _pattern[i]' "pattern should be converted to lower case in constructor!"); " is 120.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,AddCharClass,The length of the statement  "            else if (_canonical && RangeCount() > 0 && cc.RangeCount() > 0 && cc.GetRangeAt(0)._first <= GetRangeAt(RangeCount() - 1)._last)" is 128.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,SingletonChar,The length of the statement  "            Debug.Assert(IsSingleton(set) || IsSingletonInverse(set)' "Tried to get the singleton char out of a non singleton character class");" is 132.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ParseRecursive,The length of the statement  "            return new RegexCharClass(charClass[start+FLAGS] == 1' ranges' new StringBuilder(charClass.Substring(end' myCategoryLength))' sub);" is 131.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,RegexRunnerField,The length of the statement  "            return typeof(RegexRunner).GetField(fieldname' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);" is 139.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,RegexRunnerMethod,The length of the statement  "            return typeof(RegexRunner).GetMethod(methname' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);" is 139.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateRegexType,The length of the statement  "                    _ilg.Emit(OpCodes.Call' typeof(Regex).GetConstructor(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance'" is 122.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateRegexType,The length of the statement  "                    Call(typeof(Regex).GetMethod("InitializeReferences"' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic));" is 146.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateRegexType,The length of the statement  "                    Call(typeof(Regex).GetMethod("ValidateMatchTimeout"' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic));" is 122.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateCreateHashtable,The length of the statement  "            MethodInfo addMethod = typeof(Hashtable).GetMethod("Add"' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);" is 150.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexTypeCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,RegexField,The length of the statement  "            return typeof(Regex).GetField(fieldname' BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);" is 133.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexLWCGCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,FactoryInstanceFromCode,The length of the statement  "            DynamicMethod firstCharMethod = DefineDynamicMethod("FindFirstChar" + regexnumString' typeof(bool)' typeof(CompiledRegexRunner));" is 129.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexLWCGCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,FactoryInstanceFromCode,The length of the statement  "            DynamicMethod trackCountMethod = DefineDynamicMethod("InitTrackCount" + regexnumString' null' typeof(CompiledRegexRunner));" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexLWCGCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,DefineDynamicMethod,The length of the statement  "            DynamicMethod dm = new DynamicMethod(methname' attribs' conventions' returntype' _paramTypes' hostType' false /*skipVisibility*/);" is 130.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,FirstChars,The length of the statement  "            CultureInfo culture = ((t._options & RegexOptions.CultureInvariant) != 0) ? CultureInfo.InvariantCulture : CultureInfo.CurrentCulture;" is 134.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,Prefix,The length of the statement  "                        return new RegexPrefix(curNode._ch.ToString(CultureInfo.InvariantCulture)' 0 != (curNode._options & RegexOptions.IgnoreCase));" is 126.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The length of the statement  "                            if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now" is 136.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,Parse,The length of the statement  "            p = new RegexParser((op & RegexOptions.CultureInvariant) != 0 ? CultureInfo.InvariantCulture : CultureInfo.CurrentCulture);" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ParseReplacement,The length of the statement  "            p = new RegexParser((op & RegexOptions.CultureInvariant) != 0 ? CultureInfo.InvariantCulture : CultureInfo.CurrentCulture);" is 123.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,Scan,The length of the statement  "                    Debug.WriteLine("Search range: from " + runtextbeg.ToString(CultureInfo.InvariantCulture) + " to " + runtextend.ToString(CultureInfo.InvariantCulture));" is 152.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,Scan,The length of the statement  "                    Debug.WriteLine("Firstchar search starting at " + runtextpos.ToString(CultureInfo.InvariantCulture) + " stopping at " + stoppos.ToString(CultureInfo.InvariantCulture));" is 168.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The length of the statement  "                    runmatch = new MatchSparse(runregex' runregex.caps' runregex.capsize' runtext' runtextbeg' runtextend - runtextbeg' runtextstart);" is 130.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The length of the statement  "                    runmatch = new Match      (runregex'                runregex.capsize' runtext' runtextbeg' runtextend - runtextbeg' runtextstart);" is 130.
Long Statement,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,RegexCodeFromRegexTree,The length of the statement  "            CultureInfo culture = (tree._options & RegexOptions.CultureInvariant) != 0 ? CultureInfo.InvariantCulture : CultureInfo.CurrentCulture;" is 135.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateIndentationTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateIndentationTextEditorExtension.cs,KeyPress,The length of the statement  "			bool isActive = (indentationTracker.SupportedFeatures & IndentationTrackerFeatures.CustomIndentationEngine) != IndentationTrackerFeatures.CustomIndentationEngine;" is 162.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateFoldingTextEditorExtension.cs,Initialize,The length of the statement  "				var startScope = Editor.SyntaxHighlighting.GetScopeStackAsync (0' CancellationToken.None).WaitAndGetResult (CancellationToken.None);" is 132.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateFoldingTextEditorExtension.cs,UpdateFoldings,The length of the statement  "			var scopeStack = Editor.SyntaxHighlighting.GetScopeStackAsync (0' CancellationToken.None).WaitAndGetResult (CancellationToken.None);" is 132.
Long Statement,MonoDevelop.Ide.Editor.TextMate,ShowTextMateScopesHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\ShowTextMateScopesHandler.cs,Run,The length of the statement  "			var scopeStack = editor.GetScopeStackAsync (editor.CaretOffset' CancellationToken.None).WaitAndGetResult (CancellationToken.None);" is 130.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateCompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateCompletionTextEditorExtension.cs,DocumentContext_DocumentParsed,The length of the statement  "				inactive = (DocumentContext.ParsedDocument.Flags & ParsedDocumentFlags.HasCustomCompletionExtension) == ParsedDocumentFlags.HasCustomCompletionExtension;" is 153.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateCompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateCompletionTextEditorExtension.cs,HandleCodeCompletionAsync,The length of the statement  "				if (completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (Editor.GetCharAt (completionContext.TriggerOffset - 2)))" is 121.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,AddLanguageBundle,The length of the statement  "			var dialog = new SelectFileDialog (GettextCatalog.GetString ("Language Bundles")' MonoDevelop.Components.FileChooserAction.Open) {" is 130.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,AddLanguageBundle,The length of the statement  "					MessageService.ShowError (string.Format (GettextCatalog.GetString ("Bundle with the same name already exists. Remove {0} first.")' System.IO.Path.GetFileNameWithoutExtension (newFileName)));" is 190.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,AddLanguageBundle,The length of the statement  "				var bundle = SyntaxHighlightingService.LoadStyleOrMode (SyntaxHighlightingService.userThemeBundle' newFileName) as LanguageBundle;" is 130.
Long Statement,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The length of the statement  "			this.textview1.Buffer.Text = global::Mono.Unix.Catalog.GetString(@"Language bundles can provide new editor themes' code snippets' code completion items and other information to improve the editing experience of specific languages. Visual Studio for Mac supports: <b>TextMate (.tmBundle)</b> and <b>Sublime 3 (.sublime)</b> package files.");" is 340.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,Reallocate,The length of the statement  "			pageRequest = currentPageWidget.Surface.GetPreferredSize (SizeConstraint.WithSize (contentWidth)' SizeConstraint.Unconstrained' true);" is 134.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,Reallocate,The length of the statement  "			currentPageFrame.MinHeight = Math.Max (contentHeight' Controller.DefaultPageSize.Height); // force default page height for smaller content" is 138.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,Reallocate,The length of the statement  "			currentPageFrame.MinWidth = Math.Max (contentWidth' Controller.DefaultPageSize.Width); // force default page width for smaller content" is 134.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleNextButtonClicked,The length of the statement  "				if (await Task.WhenAny (currentTransitionTask' Task.Delay (200' cancelTransitionRequest.Token)).ConfigureAwait (false) != currentTransitionTask) {" is 146.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleBackButtonClicked,The length of the statement  "				if (await Task.WhenAny (currentTransitionTask' Task.Delay (200' cancelTransitionRequest.Token)).ConfigureAwait (false) != currentTransitionTask) {" is 146.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleCurrentPagePropertyChanged,The length of the statement  "			case nameof (CurrentPage.PageTitle): header.Title = !string.IsNullOrEmpty (currentPage.PageTitle) ? currentPage.PageTitle : Controller.Title; break;" is 148.
Long Statement,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleCurrentPagePropertyChanged,The length of the statement  "					nextButton.Label = Controller.CurrentPageIsLast ? GettextCatalog.GetString ("Finish") : GettextCatalog.GetString ("Next");" is 122.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputProcessor.cs,AddNode,The length of the statement  "			if (nodeType == BuildOutputNodeType.Error || nodeType == BuildOutputNodeType.Message || nodeType == BuildOutputNodeType.Warning) {" is 130.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputViewContent.cs,CreateWidget,The length of the statement  "			var engine = Xwt.Toolkit.NativeEngine.Type == ToolkitType.XamMac && nativeEnabled ? Xwt.Toolkit.NativeEngine : Xwt.Toolkit.CurrentEngine;" is 137.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The length of the statement  "				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true));" is 122.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The length of the statement  "				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true));" is 131.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,ExpandChildrenWithErrorsOrWarnings,The length of the statement  "					if (child.NodeType == (expandWarnings ? BuildOutputNodeType.Warning : BuildOutputNodeType.Error) && firstNode == null) {" is 120.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,SaveAs,The length of the statement  "			var dlg = new Gui.Dialogs.OpenFileDialog (GettextCatalog.GetString ("Save as...")' MonoDevelop.Components.FileChooserAction.Save) {" is 131.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,IsSelectableTask,The length of the statement  "			return filePathLocation == FilePath.Empty && (node.NodeType == BuildOutputNodeType.Error || node.NodeType == BuildOutputNodeType.Warning);" is 138.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,UpdateJumpToHandler,The length of the statement  "			cinfo.Visible = cinfo.Enabled = selectedNode?.NodeType == BuildOutputNodeType.Warning || selectedNode?.NodeType == BuildOutputNodeType.Error;" is 141.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Find,The length of the statement  "				resultInformLabel.Text = GettextCatalog.GetString ("{0} of {1}"' currentSearch.CurrentAbsoluteMatchIndex' currentSearch.MatchesCount);" is 134.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,SetSearchButtonsSensitivity,The length of the statement  "			buttonSearchForward.Image = ImageService.GetIcon ("gtk-go-down"' Gtk.IconSize.Menu).WithStyles (sensitive ? "" : "disabled");" is 125.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,SetSearchButtonsSensitivity,The length of the statement  "			buttonSearchBackward.Image = ImageService.GetIcon ("gtk-go-up"' Gtk.IconSize.Menu).WithStyles (sensitive ? "" : "disabled");" is 124.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,ProcessLogs,The length of the statement  "							(treeView.Columns [0].Views [0] as BuildOutputTreeCellView).BuildOutputNodeField = buildOutputDataSource.BuildOutputNodeField;" is 126.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutput,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutput.cs,GetProjectRootNodes,The length of the statement  "				var message = errorCount > 0 ? GettextCatalog.GetString ("Build failed") : GettextCatalog.GetString ("Build succeeded");" is 120.
Long Statement,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,ProcessMessageEvent,The length of the statement  "						if (e.Message.IndexOf (SkippedSuffix' nextQuoteIndex + 1' SkippedSuffix.Length' StringComparison.Ordinal) == nextQuoteIndex + 1) {" is 130.
Long Statement,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,ProcessMessageEvent,The length of the statement  "			processor.AddNode (e.Importance == MessageImportance.Low ? BuildOutputNodeType.Diagnostics : BuildOutputNodeType.Message'" is 121.
Long Statement,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,ProcessTaskParameter,The length of the statement  "				var message = stringPool.Add (e.Message' TaskParameterMessagePrefix.Length' e.Message.Length - TaskParameterMessagePrefix.Length);" is 130.
Long Statement,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,ProcessTaskParameter,The length of the statement  "				content = $"{content.Substring (0' equalSign).Trim ()}={content.Substring (equalSign + 1' content.Length - equalSign - 1).Trim ()}";" is 132.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputNode.cs,AddChild,The length of the statement  "			if (child.NodeType == BuildOutputNodeType.Message && NodeType == BuildOutputNodeType.Task && KnownTools.Contains (Message)) {" is 125.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputNodeExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputNode.cs,GetDurationAsString,The length of the statement  "				return string.Format ("{0'7}"' GettextCatalog.GetString ("{0}h {1}m"' duration.Hours.ToString()' duration.Minutes.ToString ("00")));" is 132.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnDraw,The length of the statement  "			HighlightSearchResults (layout' contextProvider.SearchString' Styles.GetTextColor (buildOutputNode' false)' Styles.GetSearchMatchBackgroundColor (isSelected)); " is 159.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnDraw,The length of the statement  "				DrawNodeInformation (ctx' cellArea' buildOutputNode' status.LayoutYPadding' isSelected' ImageSize' ImagePadding' status); " is 121.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnDraw,The length of the statement  "				DrawText (ctx' cellArea' textStartX' GetInformationMessage (buildOutputNode)' status.LayoutYPadding' defaultFont' cellArea.Width - textStartX); " is 143.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeDuration,The length of the statement  "			var size = DrawText (ctx' cellArea' textStartX' duration' padding' defaultFont' DefaultInformationContainerWidth).GetSize (); " is 125.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The length of the statement  "			status.TaskLinkRenderRectangle.X = status.TaskLinkRenderRectangle.Y = status.TaskLinkRenderRectangle.Width = status.TaskLinkRenderRectangle.Height = 0; " is 151.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The length of the statement  "					DrawText (ctx' cellArea' textStartX' buildOutputNode.WarningCount.ToString ()' padding' defaultFont' 10' trimming: TextTrimming.Word); " is 134.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnMouseMoved,The length of the statement  "			var containsClickableElement = status.TaskLinkRenderRectangle.Contains (args.Position) || status.ErrorsRectangle.Contains (args.Position) || status.WarningsRectangle.Contains (args.Position); " is 191.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnMouseMoved,The length of the statement  "				var pos = status.layout.GetIndexFromCoordinates (args.Position.X - status.LastRenderLayoutBounds.X' args.Position.Y - status.LastRenderLayoutBounds.Y); " is 151.
Long Statement,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnButtonPressed,The length of the statement  "				var pos = status.layout.GetIndexFromCoordinates (args.Position.X - status.LastRenderLayoutBounds.X' args.Position.Y - status.LastRenderLayoutBounds.Y);" is 151.
Long Statement,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,CalculateLayout,The length of the statement  "				if (!LastRenderBounds.IsEmpty && LastRenderBounds.Contains (LastRenderLayoutBounds) && cellArea.Size == LastRenderBounds.Size) { " is 128.
Long Statement,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,CalculateLayout,The length of the statement  "					LastRenderExpanderBounds = LastRenderExpanderBounds.Offset (-LastRenderBounds.X' -LastRenderBounds.Y).Offset (cellArea.X' cellArea.Y); " is 134.
Long Statement,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,CalculateLayout,The length of the statement  "					LastRenderLayoutBounds = LastRenderLayoutBounds.Offset (-LastRenderBounds.X' -LastRenderBounds.Y).Offset (cellArea.X' cellArea.Y); " is 130.
Long Statement,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,CalculateLayout,The length of the statement  "					LastRenderImageBounds = LastRenderImageBounds.Offset (-LastRenderBounds.X' -LastRenderBounds.Y).Offset (cellArea.X' cellArea.Y); " is 128.
Long Statement,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,Initialize,The length of the statement  "				DrawsBottomLine = Node.Next == null || !(Node.Next.NodeType == BuildOutputNodeType.Error || Node.Next.NodeType == BuildOutputNodeType.Warning); " is 143.
Long Statement,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,Initialize,The length of the statement  "				DrawsTopLine = Node.Previous == null || !(Node.Previous.NodeType == BuildOutputNodeType.Error || Node.Previous.NodeType == BuildOutputNodeType.Warning); " is 152.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopErrorReportingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopErrorReportingService.cs,ShowDetailedErrorInfo,The length of the statement  "				var logFile = (string)typeof (LoggingService).InvokeMember ("logFile"' BindingFlags.GetField | BindingFlags.Static | BindingFlags.NonPublic' null' null' null);" is 159.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopInfoBarService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopInfoBarService.cs,ShowInfoBar,The length of the statement  "			// We can be called from any thread since errors can occur anywhere' however we can only construct and InfoBar from the UI thread." is 130.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopDocumentNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopDocumentNavigationService.cs,GetSpanWithinDocumentBounds,The length of the statement  "			return TextSpan.FromBounds (GetPositionWithinDocumentBounds (span.Start' documentLength)' GetPositionWithinDocumentBounds (span.End' documentLength));" is 150.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopDocumentNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopDocumentNavigationService.cs,TryMapSpanFromSecondaryBufferToPrimaryBuffer,The length of the statement  "				var snapshotSpanInSecondaryBuffer = new SnapshotSpan (secondarySnapshot' new Span (spanInSecondaryBuffer.Start' spanInSecondaryBuffer.Length));" is 143.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopDocumentNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopDocumentNavigationService.cs,CanMapFromSecondaryBufferToPrimaryBuffer,The length of the statement  "			return TryMapSpanFromSecondaryBufferToPrimaryBuffer (spanInSecondaryBuffer' workspace' document' out var spanInPrimaryBuffer);" is 126.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopSymbolNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopSymbolNavigationService.cs,TryNavigateToSymbol,The length of the statement  "			IdeApp.ProjectOperations.JumpToDeclaration (symbol' ((MonoDevelopWorkspace)project.Solution.Workspace).GetMonoProject (project));" is 129.
Long Statement,MonoDevelop.Ide.RoslynServices,MonoDevelopSymbolNavigationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopSymbolNavigationService.cs,TrySymbolNavigationNotify,The length of the statement  "			IdeApp.ProjectOperations.JumpToDeclaration (symbol' ((MonoDevelopWorkspace)project.Solution.Workspace).GetMonoProject (project));" is 129.
Long Statement,MonoDevelop.Ide.RoslynServices,RoslynLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynLogger.cs,IsEnabled,The length of the statement  "			// ? Maybe log more than these exceptions? http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/Log/FunctionId.cs'8" is 121.
Long Statement,MonoDevelop.Ide.RoslynServices,RoslynFileLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynFileLogger.cs,Log,The length of the statement  "			roslynLog.WriteLine (string.Format ("[{0}] {1} - {2}"' Thread.CurrentThread.ManagedThreadId' functionId.ToString ()' logMessage.GetMessage ()));" is 144.
Long Statement,MonoDevelop.Ide.RoslynServices,RoslynFileLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynFileLogger.cs,LogBlockStart,The length of the statement  "			roslynLog.WriteLine (string.Format ("[{0}] Start({1}) : {2} - {3}"' Thread.CurrentThread.ManagedThreadId' uniquePairId' functionId.ToString ()' logMessage.GetMessage ()));" is 171.
Long Statement,MonoDevelop.Ide.RoslynServices,RoslynFileLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynFileLogger.cs,LogBlockEnd,The length of the statement  "			roslynLog.WriteLine (string.Format ("[{0}] End({1}) : [{2}ms] {3}"' Thread.CurrentThread.ManagedThreadId' uniquePairId' delta' functionString));" is 144.
Long Statement,MonoDevelop.Ide.RoslynServices.Options,MonoDevelopGlobalOptionPersister,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\MonoDevelopGlobalOptionPersister.cs,TryFetch,The length of the statement  "					LoggingService.LogError ($"Failed to deserialize option: '{storageKey}' Type: '{optionKey.Option.Type}' value: '{serializedValue}'"' ex);" is 137.
Long Statement,MonoDevelop.Ide.RoslynServices.Options,MonoDevelopGlobalOptionPersister,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\MonoDevelopGlobalOptionPersister.cs,PrintOptionKey,The length of the statement  "			Console.WriteLine ($"Name '{optionKey.Option.Name}' Language '{optionKey.Language}' LanguageSpecific'{optionKey.Option.IsPerLanguage}'");" is 137.
Long Statement,MonoDevelop.Ide.RoslynServices.Options,RoslynPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\RoslynPreferences.cs,TryGetSerializationMethods,The length of the statement  "				deserializer = serializedValue => serializedValue != null ? (T)fromXElement.Invoke (null' new object [] { XElement.Parse (serializedValue) }) : default(T);" is 155.
Long Statement,MonoDevelop.Ide.RoslynServices.Options,RoslynPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices.Options\RoslynPreferences.cs,TryGetSerializationMethods,The length of the statement  "				deserializer = serializedValue => serializedValue != null ? (T)(object)NamingStylePreferences.FromXElement (XElement.Parse (serializedValue)) : default(T);" is 155.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentController.cs,RefreshExtensions,The length of the statement  "								var prevExtension = allExtensions.FirstOrDefault (ex => ex.SourceExtensionNode?.Data.NodeId == lastAddedNode.Data.NodeId && !string.IsNullOrEmpty (lastAddedNode.Data.NodeId));" is 175.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentModel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentModel.cs,CheckInitialized,The length of the statement  "				throw new InvalidOperationException ("Model not initialized. CreateNew() or Relink() must be called before accessing the model content.");" is 138.
Long Statement,MonoDevelop.Ide.Gui.Documents,FileModelRepresentation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\FileModel.cs,OnCopyFrom,The length of the statement  "					throw new InvalidOperationException ($"Can't copy data from model of type {other.GetType ()} into a model of type {GetType ()}");" is 129.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentControllerDescription,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentControllerDescription.cs,Equals,The length of the statement  "			return CanUseAsDefault == other.CanUseAsDefault && Role == other.Role && Name == other.Name && Factory == other.Factory;" is 120.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentControllerService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentControllerService.cs,GetFactories,The length of the statement  "				else if (node is TypeExtensionNode<ExportDocumentControllerFactoryAttribute> factoryNode && factoryNode.Data.CanHandle (modelDescriptor))" is 137.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentControllerService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentControllerService.cs,CreateTextEditorController,The length of the statement  "			var desc = (await GetSupportedControllers (fileDescriptor)).FirstOrDefault (d => d.Factory.Id == "MonoDevelop.Ide.Editor.TextEditorDisplayBinding" || d.Factory.Id == "MonoDevelop.TextEditor.TextViewControllerFactory");" is 218.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentControllerService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentControllerService.cs,CreateTextEditorController,The length of the statement  "			var id = useLegacyEditor ? "MonoDevelop.Ide.Editor.TextEditorDisplayBinding" : "MonoDevelop.TextEditor.TextViewControllerFactory";" is 130.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentControllerService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentControllerService.cs,GetModelExtensions,The length of the statement  "			return ctx.GetExtensionNodes<TypeExtensionNode<ExportDocumentControllerExtensionAttribute>> (DocumentController.DocumentControllerExtensionsPath).Concat (customExtensionNodes);" is 176.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,NewDocument,The length of the statement  "			var controllerDesc = (await documentControllerService.GetSupportedControllers (fileDescriptor)).FirstOrDefault (c => c.CanUseAsDefault);" is 136.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,OpenDocument,The length of the statement  "			var factories = (await documentControllerService.GetSupportedControllers (modelDescriptor)).Where (c => role == null || c.Role == role).ToList ();" is 146.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,OpenDocument,The length of the statement  "					if (info.Options.HasFlag (OpenDocumentOptions.TryToReuseViewer) || doc.DocumentControllerDescription == info.DocumentControllerDescription) {" is 141.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,RealOpenFile,The length of the statement  "			var externalViewers = displayBindingService.GetDisplayBindings (fileName' null' project as Project).OfType<IExternalDisplayBinding> ().ToList ();" is 145.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,ShowView,The length of the statement  "			var window = await workbench.ShowView (documentOpenInfo.DocumentController' documentOpenInfo.DockNotebook' commandHandler);" is 123.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,ShowView,The length of the statement  "			var doc = new Document (this' workbench' documentOpenInfo.DocumentController' documentOpenInfo.DocumentControllerDescription' window);" is 134.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,ShowView,The length of the statement  "			// Don't wait for the view to be initialized. The document can be made visible and can be functional before getting the view." is 125.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,CountFileOpened,The length of the statement  "				var mt = !string.IsNullOrEmpty (fileDocumentController.MimeType) ? fileDocumentController.MimeType : desktopService.GetMimeTypeForUri (fileDocumentController.FilePath);" is 168.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,GetStoredMemento,The length of the statement  "					string fileName = file.ToString ().Substring (3).Replace ('/'' '.').Replace ('\\'' '.').Replace (System.IO.Path.DirectorySeparatorChar' '.');" is 141.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,ScrollToRequestedCaretLocation,The length of the statement  "					ipos.SetCaretLocation (loc' info.Options.HasFlag (OpenDocumentOptions.HighlightCaretLine)' info.Options.HasFlag (OpenDocumentOptions.CenterCaretLine));" is 151.
Long Statement,MonoDevelop.Ide.Gui.Documents,DocumentViewContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentViewContainer.cs,UpdateChildVisibleStatus,The length of the statement  "			view.UpdateContentVisibility (ContentVisible && (view == activeView || CurrentMode == DocumentViewContainerMode.HorizontalSplit || CurrentMode == DocumentViewContainerMode.VerticalSplit));" is 188.
Long Statement,MonoDevelop.Ide.Gui.Documents,TextBufferFileModelRepresentation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\TextBufferFileModel.cs,OnLoad,The length of the statement  "					var buffer = PlatformCatalog.Instance.TextBufferFactoryService.CreateTextBuffer (new System.IO.StringReader (text.Text)' contentType);" is 134.
Long Statement,MonoDevelop.Ide.Gui.Documents,ContentCallbackRegistry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\ContentCallbackRegistry.cs,InvokeCallback,The length of the statement  "						// Content for this callback was stored' but the instance has changed. The callback has to be invoked for the old content" is 121.
Long Statement,MonoDevelop.Ide.Gui.Shell,GtkShellDocumentViewContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkShellDocumentViewContainer.cs,UpdateTabstrip,The length of the statement  "			hasSplit = (this.supportedModes & DocumentViewContainerMode.VerticalSplit) != 0 || (this.supportedModes & DocumentViewContainerMode.HorizontalSplit) != 0;" is 154.
Long Statement,MonoDevelop.Ide.Gui.Shell,GtkShellDocumentViewContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkShellDocumentViewContainer.cs,UpdateAttachedTabstrips,The length of the statement  "			var childrenWithTabs = GetAllViews ().OfType<GtkShellDocumentViewContainer> ().Where (c => c.tabstrip.Visible).ToList ();" is 121.
Long Statement,MonoDevelop.Ide.Gui.Shell,GtkShellDocumentViewContainerSplit,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkShellDocumentViewContainerSplit.cs,GetRelativeSplitSizes,The length of the statement  "				var childSize = mode == DocumentViewContainerMode.VerticalSplit ? (double)child.Allocation.Width : (double)child.Allocation.Height;" is 131.
Long Statement,MonoDevelop.Ide.Projects.FileNesting,NestingRule,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.FileNesting\NestingRule.cs,GetParentFile,The length of the statement  "						parentFile = inDirectory.Combine ($"{Path.GetFileNameWithoutExtension (Path.GetFileNameWithoutExtension (inputFile.FilePath))}{inputExtension}");" is 145.
Long Statement,MonoDevelop.Ide.Projects.FileNesting,NestingRulesProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.FileNesting\NestingRulesProvider.cs,AddRule,The length of the statement  "			LoggingService.LogInfo ($"Added nesting rule of type {kind} for {appliesTo} on files [{String.Join ("' "' patterns)}]");" is 120.
Complex Conditional,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,OnKeyReleased,The conditional expression  "currentEvent != null && 				currentEvent.Type == AppKit.NSEventType.KeyUp && 				firstResponder is AppKit.NSView view && 				view != window.ContentView"  is complex.
Complex Conditional,MonoDevelop.Ide.TypeSystem,FoldingUtilities,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\ParsedDocument.cs,ToFolds,The conditional expression  "curComment == null || !curComment.CommentStartsLine  					    || curComment.CommentType != comment.CommentType  					    || curLine + 1 != curComment.Region.BeginLine"  is complex.
Complex Conditional,MonoDevelop.Ide.TypeSystem,MonoDevelopTextLoader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopTextLoader.cs,LoadTextAndVersionAsync,The conditional expression  "IdeServices.DocumentManager?.Documents.Any (doc => doc.IsFile && doc.FileName != null && FilePath.PathComparer.Compare (Path.GetFullPath (doc.FileName)' fileName) == 0 && doc.Editor != null) == true"  is complex.
Complex Conditional,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OnProjectModified,The conditional expression  "!args.Any (x => x.Hint == "TargetFramework" || x.Hint == "References" || x.Hint == "CompilerParameters" || x.Hint == "CoreCompileFiles")"  is complex.
Complex Conditional,MonoDevelop.Ide.TypeSystem,ProjectCacheInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\WorkspaceFilesCache.cs,Equals,The conditional expression  "AdditionalFiles.Length != other.AdditionalFiles.Length || 				AnalyzerFiles.Length != other.AnalyzerFiles.Length || 				EditorConfigFiles.Length != other.EditorConfigFiles.Length || 				SourceFiles.Length != other.SourceFiles.Length || 				References.Length != other.References.Length || 				ProjectReferences.Length != other.ProjectReferences.Length"  is complex.
Complex Conditional,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,TransferFilesInternal,The conditional expression  "removeFromSource && sourceProject != null && pfolder.CanonicalPath != sourceProject.BaseDirectory.CanonicalPath && pfolder.IsChildPathOf (sourceProject.BaseDirectory)"  is complex.
Complex Conditional,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetTargetCopyName,The conditional expression  "(!isFolder && File.Exists (path)) || (isFolder && Directory.Exists (path))"  is complex.
Complex Conditional,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The conditional expression  "xPos <= x && yPos <= y && x < xPos + itemWidth && y < yPos + iconHeight"  is complex.
Complex Conditional,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnKeyReleaseEvent,The conditional expression  "(releaseMods.Length == 0 && (evnt.Key == Gdk.Key.Control_L || evnt.Key == Gdk.Key.Control_R)) || 			    releaseMods.Contains (evnt.Key)"  is complex.
Complex Conditional,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,The conditional expression  "IdeApp.Preferences.StartupBehaviour.Value == OnStartupBehaviour.LoadPreviousSolution && !startupInfo.HasSolutionFile && !IdeApp.Workspace.WorkspaceItemIsOpening && !IdeApp.Workspace.IsOpen"  is complex.
Complex Conditional,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckWindowsGtk,The conditional expression  "version == null || version < minVersion || location == null || !File.Exists (Path.Combine (location' "bin"' "libgtk-win32-2.0-0.dll"))"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,InitializeLayout,The conditional expression  "!visible.Contains (node.Id) && node.DefaultLayouts != null && (node.DefaultLayouts.Contains (stockLayout.Id) || node.DefaultLayouts.Contains ("*"))"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui,RoslynDocumentContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\RoslynDocumentExtension.cs,HandleRoslynProjectChange,The conditional expression  "e.Kind == Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectChanged || 				e.Kind == Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectAdded || 				e.Kind == Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectRemoved || 				e.Kind == Microsoft.CodeAnalysis.WorkspaceChangeKind.ProjectReloaded"  is complex.
Complex Conditional,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,UpdateCommentTags,The conditional expression  "oldTasks[j] != null && 					    newTasks[i].Line == oldTasks[j].Line && 					    newTasks[i].Column == oldTasks[j].Column && 					    newTasks[i].Description == oldTasks[j].Description && 					    newTasks[i].Priority == oldTasks[j].Priority"  is complex.
Complex Conditional,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,GetNextLocation,The conditional expression  "n != -1 && n < tasks.Count &&  				(iteratingSeverity != tasks [n].Severity || !IsProjectTaskFileInternal (tasks [n]))"  is complex.
Complex Conditional,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,GetPreviousLocation,The conditional expression  "n != -1 && n < tasks.Count && (iteratingSeverity != tasks [n].Severity || string.IsNullOrEmpty (tasks [n].FileName))"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,FindPrevWordStart,The conditional expression  "c == '_' || c == '#' || c == '~' || c == '@'"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,ParseVariables,The conditional expression  "name == "end" || name == "selected" || string.IsNullOrEmpty (name) || name.Trim ().Length == 0"  is complex.
Complex Conditional,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,ContainsReference,The conditional expression  "pr.ReferenceType == ReferenceType.Package && (pr.Reference == aname || pr.Reference.StartsWith (aname + "'")) ||  					pr.ReferenceType != ReferenceType.Package && pr.Reference.Contains (aname)"  is complex.
Complex Conditional,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,CreateIdentifierName,The conditional expression  "i != 0 && Char.IsLetterOrDigit (ch) || i == 0 && Char.IsLetter (ch) || ch == '_'"  is complex.
Complex Conditional,MonoDevelop.Ide.Templates,FileTemplateReference,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateReference.cs,GetDotNetIdentifier,The conditional expression  "char.IsLetter (c) || c == '_' || (sb.Length > 0 && char.IsNumber (c))"  is complex.
Complex Conditional,MonoDevelop.Ide.Templates,FileTemplateTagsModifier,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateTagsModifier.cs,CreateIdentifierName,The conditional expression  "i != 0 && Char.IsLetterOrDigit (ch) || i == 0 && Char.IsLetter (ch) || ch == '_'"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,UpdateExtraWidgets,The conditional expression  "Filenames.Length == 0 || Filename == null || Filename.Length == 0 || System.IO.Directory.Exists (Filename)"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingSelectedEventArgs,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,KeyBindingSelectedEventArgs,The conditional expression  "selectedKey < 0 || ((selectedKey != 0 && AllKeys.Count != 0) && selectedKey >= AllKeys.Count)"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The conditional expression  "cellx > xpad && cellx <= xpad + buttonWidth && 						    celly > ypad && celly <= ypad + buttonHeight"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,UpdateRestartMessage,The conditional expression  "currentTheme != IdeApp.Preferences.UserInterfaceThemeName.Value || 			    ((Platform.IsLinux && Gtk.Settings.Default.ThemeName != IdeApp.Preferences.UserInterfaceThemeName.Value) || 			     IdeTheme.UserInterfaceTheme != (IdeApp.Preferences.UserInterfaceThemeName == "Dark" ? Theme.Dark : Theme.Light))"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,BuildNode,The conditional expression  "p.SupportsBuild () && (noMapping || !ce.Build || (missingConfig = p.Configurations [ce.ItemConfiguration] == null))"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnKeyPress,The conditional expression  "args.Event.Key == Gdk.Key.asterisk || args.Event.Key == Gdk.Key.KP_Multiply 				|| (shift && (args.Event.Key == Gdk.Key.Right || args.Event.Key == Gdk.Key.KP_Right 					|| args.Event.Key == Gdk.Key.plus || args.Event.Key == Gdk.Key.KP_Add))"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Components,ZoomableCellRendererPixbuf,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,Render,The conditional expression  "overlayBottomLeft != null || overlayBottomRight != null || overlayTopLeft != null || overlayTopRight != null"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Components,TransactedTreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TransactedTreeBuilder.cs,MoveToChild,The conditional expression  "(name == null || NodeName == name) && (dataType == null || (DataItem != null && dataType.IsInstanceOfType (DataItem)))"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The conditional expression  "lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\')"  is complex.
Complex Conditional,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,GetDocument,The conditional expression  "cachedEditor == null || cachedEditor.IsDisposed || cachedEditor.FileName != FileName || cachedEditorFileProvider != fileProvider"  is complex.
Complex Conditional,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,CompareFileNames,The conditional expression  "searchResult1 == null || searchResult2 == null || searchResult1.FileName == null || searchResult2.FileName == null"  is complex.
Complex Conditional,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,CompareProjectFileNames,The conditional expression  "searchResult1 == null || searchResult2 == null || 				searchResult1.Projects == null || searchResult2.Projects == null || 				searchResult1.Projects.Count == 0 || searchResult2.Projects.Count == 0"  is complex.
Complex Conditional,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,CompareFilePaths,The conditional expression  "searchResult1 == null || searchResult2 == null || searchResult1.FileName == null || searchResult2.FileName == null"  is complex.
Complex Conditional,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,FindPosition,The conditional expression  "ch != '<' && ch != '&' && !inTag && !inChar && realPos >= pos"  is complex.
Complex Conditional,MonoDevelop.Components,MiniButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MiniButton.cs,OnButtonPressEvent,The conditional expression  "!ClickOnRelease && Clickable && evnt.Button == 1 && !evnt.TriggersContextMenu ()"  is complex.
Complex Conditional,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The conditional expression  "hasFrame && (!roundedShape || (roundedShape && !customRoundedShapeDrawing))"  is complex.
Complex Conditional,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The conditional expression  "hoverIndex >= 0 && hoverIndex < Path.Length && leftPath [i] == Path [hoverIndex] && (menuVisible || pressed || hovering)"  is complex.
Complex Conditional,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The conditional expression  "hoverIndex >= 0 && hoverIndex < Path.Length && rightPath [i] == Path [hoverIndex] && (menuVisible || pressed || hovering)"  is complex.
Complex Conditional,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CachedDraw,The conditional expression  "(surface.Data == null && parameters != null) || (surface.Data != null && !surface.Data.Equals (parameters))"  is complex.
Complex Conditional,MonoDevelop.Components,VPanedThin,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\VPanedThin.cs,OnExposeEvent,The conditional expression  "Child1 != null && Child1.Visible && Child2 != null && Child2.Visible"  is complex.
Complex Conditional,MonoDevelop.Components,HPanedThin,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnExposeEvent,The conditional expression  "Child1 != null && Child1.Visible && Child2 != null && Child2.Visible"  is complex.
Complex Conditional,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnParentSizeAllocated,The conditional expression  "ParentPaned.Child1 != null && ParentPaned.Child1.Visible && ParentPaned.Child2 != null && ParentPaned.Child2.Visible"  is complex.
Complex Conditional,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The conditional expression  "r.ChildRows != null && r.ChildRows.Count > 0 && (r.Expanded || r.AnimatingExpand)"  is complex.
Complex Conditional,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,GetAllRows,The conditional expression  "r.ChildRows != null && (!onlyVisible || r.Expanded || r.AnimatingExpand)"  is complex.
Complex Conditional,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,IsSelectedPage,The conditional expression  "type != DockGroupType.Tabbed || boundTabStrip == null || boundTabStrip.CurrentTab == -1 || VisibleObjects == null || boundTabStrip.CurrentTab >= VisibleObjects.Count"  is complex.
Complex Conditional,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The conditional expression  "x != rx || y != ry || w != rw || h != rh"  is complex.
Complex Conditional,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,OnMotionNotifyEvent,The conditional expression  "tabPressed && !item.Behavior.HasFlag (DockItemBehavior.NoGrip) && Math.Abs (evnt.X - pressX) > 3 && Math.Abs (evnt.Y - pressY) > 3"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionData.cs,ApplyDiplayFlagsFormatting,The conditional expression  "!HasOverloads && (DisplayFlags & DisplayFlags.Obsolete) != 0 || HasOverloads && OverloadedData.All (data => (data.DisplayFlags & DisplayFlags.Obsolete) != 0)"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,FindMatchedEntry,The conditional expression  "currentData == null || matcher != null && matcher.CalcMatchRank (mruData' out r1) && matcher.CalcMatchRank (currentData' out r2)"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,FindMatchedEntry,The conditional expression  "r1 >= r2 || partialWord.Length == 0 || partialWord.Length == 1 && mruData.DisplayText [0] == partialWord [0]"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionWindowManager.cs,UpdateCursorPosition,The conditional expression  "wnd == null || wnd.IsInCompletion || isShowing || isInUpdate"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The conditional expression  "(displayText == "\" \"" || displayText == "{ }" || displayText == "[ ]") && (descriptor.KeyChar == '"' || descriptor.KeyChar == '{' || descriptor.KeyChar == '[')"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The conditional expression  "(char.IsWhiteSpace (descriptor.KeyChar) || char.IsPunctuation (descriptor.KeyChar) || descriptor.KeyChar == '(' || descriptor.KeyChar == '<' || descriptor.KeyChar == '[')  && SelectedItem == null"  is complex.
Complex Conditional,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,CompleteWord,The conditional expression  "item.HasOverloads && declarationViewWindow != null && declarationViewWindow.CurrentOverload >= 0 && declarationViewWindow.CurrentOverload < item.OverloadedData.Count"  is complex.
Complex Conditional,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,AddToProjectComboChanged,The conditional expression  "basePath == null || basePath == String.Empty || (parentProject != null && basePath == parentProject.BaseDirectory)"  is complex.
Complex Conditional,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,FileListKeyPressEvent,The conditional expression  "args.Event.Key == Gdk.Key.Escape || args.Event.Key == Gdk.Key.BackSpace 			    || (args.Event.Key == Gdk.Key.Left && (args.Event.State & modifiers) == 0)"  is complex.
Complex Conditional,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,SanitisePotentialNamespace,The conditional expression  "char.IsLetter (c) || c == '_' || (sb.Length > 0 && (char.IsLetterOrDigit (sb[sb.Length - 1]) || sb[sb.Length - 1] == '_') && (c == '.' || char.IsNumber (c)))"  is complex.
Complex Conditional,MonoDevelop.Ide.WelcomePage,WelcomePageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageService.cs,Initialize,The conditional expression  "!IdeApp.IsExiting && IdeApp.Workbench.Documents.Count == 0 && !IdeApp.Workspace.IsOpen && !HasWindowImplementation"  is complex.
Complex Conditional,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnMouseMoved,The conditional expression  "item == null && SelectedItem != null ||  			    item != null && SelectedItem == null || item != null && !item.Equals (SelectedItem)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The conditional expression  "parent.Color == Black && sibling.Color == Black && GetColorSafe (sibling.Left) == Black && GetColorSafe (sibling.Right) == Black"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The conditional expression  "parent.Color == Red && sibling.Color == Black && GetColorSafe (sibling.Left) == Black && GetColorSafe (sibling.Right) == Black"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The conditional expression  "node == parent.Left && sibling.Color == Black && GetColorSafe (sibling.Left) == Red && GetColorSafe (sibling.Right) == Black"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor,RedBlackTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\SegmentTree.cs,DeleteOneChild,The conditional expression  "node == parent.Right && sibling.Color == Black && GetColorSafe (sibling.Right) == Red && GetColorSafe (sibling.Left) == Black"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The conditional expression  "triggerWordLength > 0 && (triggerWordLength < Editor.CaretOffset 																  || (triggerWordLength == 1 && Editor.CaretOffset == 1))"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The conditional expression  "(descriptor.SpecialKey == SpecialKey.Delete || descriptor.SpecialKey == SpecialKey.BackSpace) && CompletionWidget != null && !CompletionWindowManager.IsVisible"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The conditional expression  "triggerWordLength > 0 && (triggerWordLength < Editor.CaretOffset 																  || (triggerWordLength == 1 && Editor.CaretOffset == 1))"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,GetSyntaxHighlightingDefinitionByName,The conditional expression  "bestType == null || // 1st match we take anything 							bestType.Length < fileType.Length || // longer match is better' e.g. 'xy' matches 'ab.nm.xy'' but 'nm.xy' matches better 							(bestType.Length == fileType.Length && bestPosition > i)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting,EditorTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorTheme.cs,GetColor,The conditional expression  "found != null && (depth > foundDepth || depth == foundDepth && found.Length >= compatibleScope.Length)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting,EditorTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\EditorTheme.cs,TryGetColor,The conditional expression  "found != null && (depth > foundDepth || depth == foundDepth && found.Length >= compatibleScope.Length)"  is complex.
Complex Conditional,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,The conditional expression  "ox2 <= x && x <= ox2 + alloc.Width && oy2 <= y && y <= oy2 + alloc.Height"  is complex.
Complex Conditional,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The conditional expression  "!Visible || x != rx || y != ry || w != rw || h != rh"  is complex.
Complex Conditional,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnMotionNotifyEvent,The conditional expression  "x < sr.Left || x > sr.Right || y < sr.Top || y > sr.Bottom"  is complex.
Complex Conditional,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnMotionNotifyEvent,The conditional expression  "t != null && t != notebook.CurrentTab && ( 				        ((int)evnt.X > lastDragX && t.Index > notebook.CurrentTab.Index) || 				        ((int)evnt.X < lastDragX && t.Index < notebook.CurrentTab.Index))"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,CreateDiffs,The conditional expression  "lineA < baseData.Length && !baseData.Modified[lineA] && lineB < changedData.Length && !changedData.Modified[lineB]"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Projection,ProjectedSemanticHighlighting,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Projection\ProjectedSemanticHighlighting.cs,GetColoredSegments,The conditional expression  "seg.ContainsOriginal (segment.Offset) ||  					    seg.ContainsOriginal (segment.EndOffset) ||  					    segment.Offset <= seg.Offset && seg.Offset + seg.Length <= segment.EndOffset"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,AddCharClass,The conditional expression  "_canonical && RangeCount() > 0 && cc.RangeCount() > 0 && cc.GetRangeAt(0)._first <= GetRangeAt(RangeCount() - 1)._last"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,AddSet,The conditional expression  "_canonical && RangeCount() > 0 && set.Length > 0 &&                  set[0] <= GetRangeAt(RangeCount() - 1)._last"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,IsEmpty,The conditional expression  "charClass[CATEGORYLENGTH] == 0 && charClass[FLAGS] == 0 && charClass[SETLENGTH] == 0 && !IsSubtraction(charClass)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,IsSingleton,The conditional expression  "set[FLAGS] == 0 && set[CATEGORYLENGTH] == 0 && set[SETLENGTH] == 2 && !IsSubtraction(set) &&                 (set[SETSTART] == Lastchar || set[SETSTART]+1 == set[SETSTART+1])"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,IsSingletonInverse,The conditional expression  "set[FLAGS] == 1 && set[CATEGORYLENGTH] == 0 && set[SETLENGTH] == 2 && !IsSubtraction(set) &&                 (set[SETSTART] == Lastchar || set[SETSTART]+1 == set[SETSTART+1])"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,FindFirstChar,The conditional expression  "(0 != (runanchors & RegexFCD.Beginning) && runtextpos > runtextbeg) ||                         (0 != (runanchors & RegexFCD.Start) && runtextpos > runtextstart)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,FindFirstChar,The conditional expression  "(0 != (runanchors & RegexFCD.End) && runtextpos < runtextend) ||                         (0 != (runanchors & RegexFCD.EndZ) && (runtextpos < runtextend - 1 ||                                                                (runtextpos == runtextend - 1 && CharAt(runtextpos) != '\n'))) ||                         (0 != (runanchors & RegexFCD.Start) && runtextpos < runtextstart)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,ReduceRep,The conditional expression  "!(childType >= Oneloop && childType <= Setloop && type == Loop ||                           childType >= Onelazy && childType <= Setlazy && type == Lazyloop)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,ReduceAlternation,The conditional expression  "!wasLastSet || optionsLast != optionsAt || lastNodeCannotMerge || !RegexCharClass.IsMergeable(at._str)"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanRegex,The conditional expression  "CharsRight() > 0 && (!IsStopperX(ch = RightChar()) || ch == '{' && !IsTrueQuantifier())"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanRegex,The conditional expression  "CharsRight() > 0 && (!IsSpecial(ch = RightChar()) || ch == '{' && !IsTrueQuantifier())"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanCharClass,The conditional expression  "CharsRight() >= 1 && ch == '-' && !fTranslatedChar && RightChar() == '[' && !firstChar"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The conditional expression  "CharsRight() == 0 || RightChar() != '?' || (RightChar() == '?' && (CharsRight() > 1 && RightChar(1) == ')'))"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The conditional expression  "(capnum != -1 || proceed == true) && CharsRight() > 0 && RightChar() == '-'"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The conditional expression  "(capnum != -1 || uncapnum != -1) && CharsRight() > 0 && MoveRightGetChar() == close"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The conditional expression  "charsRight >=4 && (rightchar2 == '<' && RightChar(3) != '!' && RightChar(3) != '=')"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBlank,The conditional expression  "CharsRight() >= 3 && RightChar(2) == '#' &&                              RightChar(1) == '?' && RightChar() == '('"  is complex.
Complex Conditional,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBlank,The conditional expression  "CharsRight() < 3 || RightChar(2) != '#' ||                         RightChar(1) != '?' || RightChar() != '('"  is complex.
Complex Conditional,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,BinlogReader_MessageRaised,The conditional expression  "e.BuildEventContext != null && (e.BuildEventContext.NodeId == 0 && 												e.BuildEventContext.ProjectContextId == 0 && 												e.BuildEventContext.ProjectInstanceId == 0 && 												e.BuildEventContext.TargetId == 0 && 												e.BuildEventContext.TaskId == 0)"  is complex.
Complex Conditional,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The conditional expression  "!IsRowExpanded (buildOutputNode) &&  			    (buildOutputNode.NodeType == BuildOutputNodeType.Task || buildOutputNode.NodeType == BuildOutputNodeType.Target) &&  			    (buildOutputNode.ErrorCount > 0 || buildOutputNode.WarningCount > 0)"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Documents,DocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentController.cs,ScheduleModelSynchronization,The conditional expression  "!disposed && Model != null && shown && !hasFocus"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,WatchDirectories,The conditional expression  "doc.IsFile && !doc.IsNewDocument && doc.FilePath.IsAbsolute && File.Exists (doc.FilePath)"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,CheckRenamedFile,The conditional expression  "doc.IsFile && !doc.IsNewDocument && doc.FilePath == e.SourceFile && File.Exists (e.TargetFile)"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Documents,FileDocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\FileDocumentController.cs,OnFileNameChanged,The conditional expression  "FileModelType != null && FileModel != null && FileModel.IsLinked && FileModel.FilePath != filePath"  is complex.
Complex Conditional,MonoDevelop.Ide.Gui.Shell,GtkShellDocumentViewItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkShellDocumentViewItem.cs,OnFocusChildSet,The conditional expression  "lastViewFocused.TryGetTarget (out last) && last != this && !IsChildView (last) && last.Item != null"  is complex.
Virtual Method Call from Constructor,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,Ambience,The constructor "Ambience" calls a virtual method "CreateInstance".
Virtual Method Call from Constructor,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,Ambience,The constructor "Ambience" calls a virtual method "CreateInstance".
Virtual Method Call from Constructor,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,SelectEncodingsDialog,The constructor "SelectEncodingsDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide,IdeServices,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeServices.cs,IdeServices,The constructor "IdeServices" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui,Document,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Document.cs,Document,The constructor "Document" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui,RoslynDocumentExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\RoslynDocumentExtension.cs,RoslynDocumentExtension,The constructor "RoslynDocumentExtension" calls a virtual method "ReparseDocument".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,BaseDirectoryPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\BaseDirectoryPanelWidget.cs,BaseDirectoryPanelWidget,The constructor "BaseDirectoryPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,CodeFormattingPanelWidget,The constructor "CodeFormattingPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CombineBuildOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineBuildOptions.cs,CombineBuildOptionsWidget,The constructor "CombineBuildOptionsWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CombineConfigurationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineConfigurationPanel.cs,CombineConfigurationPanelWidget,The constructor "CombineConfigurationPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,CombineInformationWidget,The constructor "CombineInformationWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,CommonAssemblySigningPreferences,The constructor "CommonAssemblySigningPreferences" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanelWidget.cs,CustomCommandPanelWidget,The constructor "CustomCommandPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,CustomCommandWidget,The constructor "CustomCommandWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,CustomCommandWidget,The constructor "CustomCommandWidget" calls a virtual method "GetStringTagModelDescription".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,GeneralProjectOptionsWidget,The constructor "GeneralProjectOptionsWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,NamespaceSynchronisationPanelWidget,The constructor "NamespaceSynchronisationPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,OutputOptionsPanelWidget,The constructor "OutputOptionsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,RunOptionsPanelWidget,The constructor "RunOptionsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,RuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RuntimeOptionsPanel.cs,RuntimeOptionsPanelWidget,The constructor "RuntimeOptionsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects.OptionPanels,CombineEntryConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionItemConfigurationsPanel.cs,CombineEntryConfigurationsPanelWidget,The constructor "CombineEntryConfigurationsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,TaskStore,The constructor "TaskStore" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide.Tasks,TaskStore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\TaskStore.cs,TaskStore,The constructor "TaskStore" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,ExternalToolPanelWidget,The constructor "ExternalToolPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,CodeTemplatePanelWidget,The constructor "CodeTemplatePanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,EditTemplateDialog,The constructor "EditTemplateDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,NewLayoutDialog,The constructor "NewLayoutDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,TipOfTheDayWindow,The constructor "TipOfTheDayWindow" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,AddinLoadErrorDialog,The constructor "AddinLoadErrorDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,SelectFileFormatDialog,The constructor "SelectFileFormatDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,SelectFileFormatDialog,The constructor "SelectFileFormatDialog" calls a virtual method "GetCompatibilityWarnings".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,MultiMessageDialog,The constructor "MultiMessageDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,MultiTaskProgressDialog,The constructor "MultiTaskProgressDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The constructor "OptionsDialog" calls a virtual method "InitializeContext".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,ProgressDialog,The constructor "ProgressDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,BuildPanelWidget,The constructor "BuildPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,LoadSavePanelWidget,The constructor "LoadSavePanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,AddInsPanelWidget,The constructor "AddInsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,TasksPanelWidget,The constructor "TasksPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,KeyBindingsPanel,The constructor "KeyBindingsPanel" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,IDEStyleOptionsPanelWidget,The constructor "IDEStyleOptionsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,AuthorInformationPanelWidget,The constructor "AuthorInformationPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,GlobalAuthorInformationPanelWidget,The constructor "GlobalAuthorInformationPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,TextStylePolicyPanelWidget,The constructor "TextStylePolicyPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,MonoRuntimePanelWidget,The constructor "MonoRuntimePanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,MaintenanceOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MaintenanceOptionsPanel.cs,MaintenanceOptionsPanelWidget,The constructor "MaintenanceOptionsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,BuildMessagePanelWidget,The constructor "BuildMessagePanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.OptionPanels,SdkLocationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\SdkLocationPanel.cs,SdkLocationWidget,The constructor "SdkLocationWidget" calls a virtual method "LoadSdkLocationSetting".
Virtual Method Call from Constructor,MonoDevelop.Ide.StandardHeader,StandardHeaderPolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderPolicyPanel.cs,StandardHeaderPolicyPanelWidget,The constructor "StandardHeaderPolicyPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Components,ExecutionModeComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExecutionModeComboBox.cs,ExecutionModeComboBox,The constructor "ExecutionModeComboBox" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Components,ProjectFileEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectFileEntry.cs,ProjectFileEntry,The constructor "ProjectFileEntry" calls a virtual method "OnChanged".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,ProjectSelectorWidget,The constructor "ProjectSelectorWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Gui.Components,PriorityList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\PriorityList.cs,PriorityList,The constructor "PriorityList" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,FindInFilesDialog,The constructor "FindInFilesDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,CustomExecutionModeDialog,The constructor "CustomExecutionModeDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,CustomExecutionModeManagerDialog,The constructor "CustomExecutionModeManagerDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,CustomExecutionModeWidget,The constructor "CustomExecutionModeWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,MonoExecutionParametersPreview,The constructor "MonoExecutionParametersPreview" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,MonoExecutionParametersWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersWidget.cs,MonoExecutionParametersWidget,The constructor "MonoExecutionParametersWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,RunWithCustomParametersDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunWithCustomParametersDialog.cs,RunWithCustomParametersDialog,The constructor "RunWithCustomParametersDialog" calls a virtual method "Load".
Virtual Method Call from Constructor,MonoDevelop.Ide.Execution,RunWithCustomParametersDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunWithCustomParametersDialog.cs,RunWithCustomParametersDialog,The constructor "RunWithCustomParametersDialog" calls a virtual method "CreateControl".
Virtual Method Call from Constructor,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,FolderListSelector,The constructor "FolderListSelector" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Components.Theming,Theme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\Theme.cs,Theme,The constructor "Theme" calls a virtual method "OnColorsRefreshed".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,RenameConfigDialog,The constructor "RenameConfigDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,NewFileDialog,The constructor "NewFileDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,AddMimeTypeDialog,The constructor "AddMimeTypeDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,ConfirmProjectDeleteDialog,The constructor "ConfirmProjectDeleteDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,DeleteConfigDialog,The constructor "DeleteConfigDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,ProjectFileSelectorDialog,The constructor "ProjectFileSelectorDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,IncludeNewFilesDialog,The constructor "IncludeNewFilesDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The constructor "SelectReferenceDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,NewPolicySetDialog,The constructor "NewPolicySetDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,ExportProjectPolicyDialog,The constructor "ExportProjectPolicyDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,ApplyPolicyDialog,The constructor "ApplyPolicyDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,ProjectSelectorDialog,The constructor "ProjectSelectorDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,ImportProjectPolicyDialog,The constructor "ImportProjectPolicyDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,AddExternalFileDialog,The constructor "AddExternalFileDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,ExportSolutionDialog,The constructor "ExportSolutionDialog" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,GtkProjectFolderPreviewWidget,The constructor "GtkProjectFolderPreviewWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,GtkProjectConfigurationWidget,The constructor "GtkProjectConfigurationWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.Fonts,FontChooserPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Fonts\FontChooserPanelWidget.cs,FontChooserPanelWidget,The constructor "FontChooserPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.WelcomePage,WelcomePageBarButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageBarButton.cs,WelcomePageBarButton,The constructor "WelcomePageBarButton" calls a virtual method "CreateLabel".
Virtual Method Call from Constructor,MonoDevelop.Ide.Editor,DefaultSourceEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DefaultSourceEditorOptions.cs,DefaultSourceEditorOptions,The constructor "DefaultSourceEditorOptions" calls a virtual method "WhenServiceInitialized".
Virtual Method Call from Constructor,MonoDevelop.Ide.Editor.Extension,BraceMatcherTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BraceMatcherTextEditorExtension.cs,BraceMatcherTextEditorExtension,The constructor "BraceMatcherTextEditorExtension" calls a virtual method "CreateInstance".
Virtual Method Call from Constructor,MonoDevelop.Ide.Editor.Highlighting,SyntaxContextWithPrototype,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingDefinition.cs,SyntaxContextWithPrototype,The constructor "SyntaxContextWithPrototype" calls a virtual method "GetContexts".
Virtual Method Call from Constructor,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,TextMateBundleOptionsPanelWidget,The constructor "TextMateBundleOptionsPanelWidget" calls a virtual method "Build".
Virtual Method Call from Constructor,MonoDevelop.Ide.GettingStarted,GettingStartedViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.GettingStarted\GettingStartedViewContent.cs,GettingStartedViewContent,The constructor "GettingStartedViewContent" calls a virtual method "GetGettingStartedWidget".
Empty Catch Block,MonoDevelop.Ide.TypeSystem,MonoDevelopPersistentStorageLocationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopPersistentStorageLocationService.cs,SetupSolution,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,FileService_FileChanged,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,SafeFreezeLoad,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,HandleActiveConfigurationChanged,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,GetComponentCategory,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,IsToolboxItem,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,IsDesignerBrowsable,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ShowErrorsPadIfNecessary,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,FileStatusTracker,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AddFiles,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,FileStatusTracker,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,NotifyChanges,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckWindowsGtk,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,OpenFile,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetMonoUpdateInfo,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,RuntimeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RuntimeVersionInfo.cs,GetMonoUpdateInfo,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide,IdeInstanceConnection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeInstanceConnection.cs,StartListening,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Tasks,Legacy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksProvider.Legacy.cs,UpdateCommentTagsForProject,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Tasks,LegacyDocumentExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksProvider.Legacy.cs,Context_DocumentParsed,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.ExternalTools,ExternalTool,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalTool.cs,RunExternalTool,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,CreateAssembliesTable,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,UpdateAsync,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,FileSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FileSelector.cs,CommonSetup,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,HoverImageButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HoverImageButton.cs,LoadPixbufs,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,FixContainerLeak,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetOverlayScrollbarPolicy,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetOverlayScrollbarPolicy,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetOverlayScrollbarPolicy,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetOverlayScrollbarPolicy,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetSourceScale,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetSourceScale,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetSourceScaleWildcarded,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetSourceScaleWildcarded,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,Get2xVariant,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,Get2xVariant,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetScaleFactor,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetScaleFactor,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetScaleFactor,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetScaleFactor,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,RenderIcon,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,RenderIcon,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components,GtkGestures,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkGestures.cs,GtkGestures,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindowManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindowManager.cs,UpdateCursorPosition,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,AddOverload,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Desktop,PlatformService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\PlatformService.cs,GetMimeTypeForUri,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Desktop,PlatformService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\PlatformService.cs,GetMimeTypeForUri,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,AddToProjectComboChanged,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,TryGetFileType,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,GetStartingFolder,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Components.AutoTest,AutoTestClientSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestClientSession.cs,StartApplication,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.WelcomePage,WelcomePageNewsFeed,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageNewsFeed.cs,GetNewsXml,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,AbstractUsagesExtension<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\AbstractUsagesExtension.cs,DelayedTooltipShow,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,ParameterCompletionCommand,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,ParameterCompletionCommand,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,FoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\FoldingTextEditorExtension.cs,DocumentContext_DocumentParsed,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,FoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\FoldingTextEditorExtension.cs,UpdateFoldings,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,ErrorHandlerTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\ErrorHandlerTextEditorExtension.cs,DocumentContext_DocumentParsed,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,ErrorHandlerTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\ErrorHandlerTextEditorExtension.cs,UpdateErrorUnderlines,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Extension,BlockStructureFoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BlockStructureFoldingTextEditorExtension.cs,UpdateFoldings,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,Regex,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,AddLanguageBundle,The method has an empty catch block.
Magic Number,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,SaveConflicts,The following statement contains a magic number: writer.Indentation = 2;
Magic Number,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,UpdateStatus,The following statement contains a magic number: newWait = 500;
Magic Number,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,UpdateStatus,The following statement contains a magic number: secs < 10
Magic Number,MonoDevelop.Components.Commands,CommandManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,UpdateAppFocusStatus,The following statement contains a magic number: focusCheckDelayTimeout = now.AddMilliseconds (100);
Magic Number,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Init,The following statement contains a magic number: pars.Length == 2
Magic Number,MonoDevelop.Components.Commands,CommandUpdaterInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandManager.cs,Init,The following statement contains a magic number: pars.Length > 0 && pars.Length <= 2
Magic Number,MonoDevelop.Components.Commands,CommandToggleToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandToggleToolButton.cs,Update,The following statement contains a magic number: iconWidget.Image = iconWidget.Image.WithStyles (cmdInfo.Enabled ? "" : "disabled").WithAlpha (cmdInfo.Enabled ? 1.0 : 0.4);
Magic Number,MonoDevelop.Components.Commands,CommandToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\CommandToolButton.cs,Update,The following statement contains a magic number: iconWidget.Image = iconWidget.Image.WithStyles (cmdInfo.Enabled ? "" : "disabled").WithAlpha (cmdInfo.Enabled ? 1.0 : 0.4);
Magic Number,MonoDevelop.Components.Commands,MenuToolButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\MenuToolButton.cs,OnButtonPress,The following statement contains a magic number: menu.Popup (null' null' new Gtk.MenuPositionFunc (OnPosition)' 3' Gtk.Global.CurrentEventTime);
Magic Number,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,CheckKeyBindingConflicts,The following statement contains a magic number: clist.Count == 2
Magic Number,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,CheckKeyBindingConflicts,The following statement contains a magic number: clist.Count == 2
Magic Number,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,Save,The following statement contains a magic number: writer.Indentation = 2;
Magic Number,MonoDevelop.Ide.Commands,RecentFileListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileCommands.cs,Update,The following statement contains a magic number: string acceleratorKeyPrefix = i < 10 ? "_" + ((i + 1) % 10).ToString() + " " : "";
Magic Number,MonoDevelop.Ide.Commands,RecentFileListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileCommands.cs,Update,The following statement contains a magic number: string acceleratorKeyPrefix = i < 10 ? "_" + ((i + 1) % 10).ToString() + " " : "";
Magic Number,MonoDevelop.Ide.Commands,RecentProjectListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileCommands.cs,Update,The following statement contains a magic number: string acceleratorKeyPrefix = i < 10 ? "_" + ((i + 1) % 10).ToString() + " " : "";
Magic Number,MonoDevelop.Ide.Commands,RecentProjectListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\FileCommands.cs,Update,The following statement contains a magic number: string acceleratorKeyPrefix = i < 10 ? "_" + ((i + 1) % 10).ToString() + " " : "";
Magic Number,MonoDevelop.Ide.Commands,DumpUITreeHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\HelpCommands.cs,DumpGtkWidget,The following statement contains a magic number: DumpGtkWidget (child' indent + 3);
Magic Number,MonoDevelop.Ide.Commands,NextDocumentHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The following statement contains a magic number: IdeApp.Workbench.Documents.Count < 2
Magic Number,MonoDevelop.Ide.Commands,PrevDocumentHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The following statement contains a magic number: IdeApp.Workbench.Documents.Count < 2
Magic Number,MonoDevelop.Ide.Commands,OpenDocumentListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The following statement contains a magic number: IdeApp.Workbench.Documents.Count < 10
Magic Number,MonoDevelop.Ide.Commands,OpenDocumentListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The following statement contains a magic number: i < 9
Magic Number,MonoDevelop.Ide.Commands,OpenDocumentListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The following statement contains a magic number: commandInfo.AccelKey = ((Platform.IsMac) ? "Meta" : "Alt") + "|" + ((i + 1) % 10).ToString ();
Magic Number,MonoDevelop.Ide.Commands,OpenDocumentListHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\WindowCommands.cs,Update,The following statement contains a magic number: IdeApp.Workbench.Documents.Count + i < 10
Magic Number,MonoDevelop.Ide.Commands,NavigateHistory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\NavigationCommands.cs,Update,The following statement contains a magic number: IList<NavigationHistoryItem> points = IdeServices.NavigationHistoryService.GetNavigationList (15' out currentIndex);
Magic Number,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,GetStableHashCode,The following statement contains a magic number: h = (h << 5) - h + c;
Magic Number,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,GetPossibleCacheDirNames,The following statement contains a magic number: i < 999999
Magic Number,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,CleanupCache,The following statement contains a magic number: days > 30
Magic Number,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetCref,The following statement contains a magic number: cref.Length < 2
Magic Number,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetCref,The following statement contains a magic number: return cref.Substring (2' cref.Length - 2);
Magic Number,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetCref,The following statement contains a magic number: return cref.Substring (2' cref.Length - 2);
Magic Number,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,FormatCref,The following statement contains a magic number: return cref.Substring (2);
Magic Number,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,FormatCref,The following statement contains a magic number: cref.Length > 2 && cref [1] == ':'
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,The following statement contains a magic number: switch (idString[0]) { 				case 'T': 					doc = helpTree.GetHelpXml (idString); 					if (doc == null) 						return null; 					return doc.SelectSingleNode ("/Type/Docs").OuterXml; 				case 'M': 					var openIdx = idString.LastIndexOf ('('); 					var idx = idString.LastIndexOf ('.'' openIdx < 0 ? idString.Length - 1 : openIdx); 					var typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					string memberName; 					if (openIdx < 0) { 						memberName = idString.Substring (idx + 1); 						var xmlNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 						return xmlNode?.OuterXml; 					} 					string parameterString = idString.Substring (openIdx + 1' idString.Length - openIdx - 2); 					var parameterTypes = parameterString.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries); 					memberName = idString.Substring (idx + 1' openIdx - idx - 1); 					foreach (var o in doc.SelectNodes ("/Type/Members/Member[@MemberName='" + memberName + "']")) { 						var curNode = o as XmlElement; 						if (curNode == null) 							continue; 						var paramList = curNode.SelectNodes ("Parameters/*"); 						if (paramList.Count == 0) 							continue; 						if (parameterTypes.Length != paramList.Count) 							continue; 						bool matched = true; 						for (int i = 0; i < parameterTypes.Length; i++) { 							if (!CompareNames (parameterTypes [i]' paramList [i].Attributes ["Type"].Value)) { 								matched = false; 								break; 							} 						} 						if (matched) 							return curNode.SelectSingleNode ("Docs")?.OuterXml; 					} 					return null; 				case 'P': 				case 'F': 				case 'E': 					idx = idString.LastIndexOf ('.'' idString.Length - 1 ); 					typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					memberName = idString.Substring (idx + 1); 					var memberNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 					return memberNode?.OuterXml; 				}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,The following statement contains a magic number: switch (idString[0]) { 				case 'T': 					doc = helpTree.GetHelpXml (idString); 					if (doc == null) 						return null; 					return doc.SelectSingleNode ("/Type/Docs").OuterXml; 				case 'M': 					var openIdx = idString.LastIndexOf ('('); 					var idx = idString.LastIndexOf ('.'' openIdx < 0 ? idString.Length - 1 : openIdx); 					var typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					string memberName; 					if (openIdx < 0) { 						memberName = idString.Substring (idx + 1); 						var xmlNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 						return xmlNode?.OuterXml; 					} 					string parameterString = idString.Substring (openIdx + 1' idString.Length - openIdx - 2); 					var parameterTypes = parameterString.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries); 					memberName = idString.Substring (idx + 1' openIdx - idx - 1); 					foreach (var o in doc.SelectNodes ("/Type/Members/Member[@MemberName='" + memberName + "']")) { 						var curNode = o as XmlElement; 						if (curNode == null) 							continue; 						var paramList = curNode.SelectNodes ("Parameters/*"); 						if (paramList.Count == 0) 							continue; 						if (parameterTypes.Length != paramList.Count) 							continue; 						bool matched = true; 						for (int i = 0; i < parameterTypes.Length; i++) { 							if (!CompareNames (parameterTypes [i]' paramList [i].Attributes ["Type"].Value)) { 								matched = false; 								break; 							} 						} 						if (matched) 							return curNode.SelectSingleNode ("Docs")?.OuterXml; 					} 					return null; 				case 'P': 				case 'F': 				case 'E': 					idx = idString.LastIndexOf ('.'' idString.Length - 1 ); 					typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					memberName = idString.Substring (idx + 1); 					var memberNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 					return memberNode?.OuterXml; 				}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,The following statement contains a magic number: switch (idString[0]) { 				case 'T': 					doc = helpTree.GetHelpXml (idString); 					if (doc == null) 						return null; 					return doc.SelectSingleNode ("/Type/Docs").OuterXml; 				case 'M': 					var openIdx = idString.LastIndexOf ('('); 					var idx = idString.LastIndexOf ('.'' openIdx < 0 ? idString.Length - 1 : openIdx); 					var typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					string memberName; 					if (openIdx < 0) { 						memberName = idString.Substring (idx + 1); 						var xmlNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 						return xmlNode?.OuterXml; 					} 					string parameterString = idString.Substring (openIdx + 1' idString.Length - openIdx - 2); 					var parameterTypes = parameterString.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries); 					memberName = idString.Substring (idx + 1' openIdx - idx - 1); 					foreach (var o in doc.SelectNodes ("/Type/Members/Member[@MemberName='" + memberName + "']")) { 						var curNode = o as XmlElement; 						if (curNode == null) 							continue; 						var paramList = curNode.SelectNodes ("Parameters/*"); 						if (paramList.Count == 0) 							continue; 						if (parameterTypes.Length != paramList.Count) 							continue; 						bool matched = true; 						for (int i = 0; i < parameterTypes.Length; i++) { 							if (!CompareNames (parameterTypes [i]' paramList [i].Attributes ["Type"].Value)) { 								matched = false; 								break; 							} 						} 						if (matched) 							return curNode.SelectSingleNode ("Docs")?.OuterXml; 					} 					return null; 				case 'P': 				case 'F': 				case 'E': 					idx = idString.LastIndexOf ('.'' idString.Length - 1 ); 					typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					memberName = idString.Substring (idx + 1); 					var memberNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 					return memberNode?.OuterXml; 				}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,The following statement contains a magic number: switch (idString[0]) { 				case 'T': 					doc = helpTree.GetHelpXml (idString); 					if (doc == null) 						return null; 					return doc.SelectSingleNode ("/Type/Docs").OuterXml; 				case 'M': 					var openIdx = idString.LastIndexOf ('('); 					var idx = idString.LastIndexOf ('.'' openIdx < 0 ? idString.Length - 1 : openIdx); 					var typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					string memberName; 					if (openIdx < 0) { 						memberName = idString.Substring (idx + 1); 						var xmlNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 						return xmlNode?.OuterXml; 					} 					string parameterString = idString.Substring (openIdx + 1' idString.Length - openIdx - 2); 					var parameterTypes = parameterString.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries); 					memberName = idString.Substring (idx + 1' openIdx - idx - 1); 					foreach (var o in doc.SelectNodes ("/Type/Members/Member[@MemberName='" + memberName + "']")) { 						var curNode = o as XmlElement; 						if (curNode == null) 							continue; 						var paramList = curNode.SelectNodes ("Parameters/*"); 						if (paramList.Count == 0) 							continue; 						if (parameterTypes.Length != paramList.Count) 							continue; 						bool matched = true; 						for (int i = 0; i < parameterTypes.Length; i++) { 							if (!CompareNames (parameterTypes [i]' paramList [i].Attributes ["Type"].Value)) { 								matched = false; 								break; 							} 						} 						if (matched) 							return curNode.SelectSingleNode ("Docs")?.OuterXml; 					} 					return null; 				case 'P': 				case 'F': 				case 'E': 					idx = idString.LastIndexOf ('.'' idString.Length - 1 ); 					typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					memberName = idString.Substring (idx + 1); 					var memberNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 					return memberNode?.OuterXml; 				}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,The following statement contains a magic number: switch (idString[0]) { 				case 'T': 					doc = helpTree.GetHelpXml (idString); 					if (doc == null) 						return null; 					return doc.SelectSingleNode ("/Type/Docs").OuterXml; 				case 'M': 					var openIdx = idString.LastIndexOf ('('); 					var idx = idString.LastIndexOf ('.'' openIdx < 0 ? idString.Length - 1 : openIdx); 					var typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					string memberName; 					if (openIdx < 0) { 						memberName = idString.Substring (idx + 1); 						var xmlNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 						return xmlNode?.OuterXml; 					} 					string parameterString = idString.Substring (openIdx + 1' idString.Length - openIdx - 2); 					var parameterTypes = parameterString.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries); 					memberName = idString.Substring (idx + 1' openIdx - idx - 1); 					foreach (var o in doc.SelectNodes ("/Type/Members/Member[@MemberName='" + memberName + "']")) { 						var curNode = o as XmlElement; 						if (curNode == null) 							continue; 						var paramList = curNode.SelectNodes ("Parameters/*"); 						if (paramList.Count == 0) 							continue; 						if (parameterTypes.Length != paramList.Count) 							continue; 						bool matched = true; 						for (int i = 0; i < parameterTypes.Length; i++) { 							if (!CompareNames (parameterTypes [i]' paramList [i].Attributes ["Type"].Value)) { 								matched = false; 								break; 							} 						} 						if (matched) 							return curNode.SelectSingleNode ("Docs")?.OuterXml; 					} 					return null; 				case 'P': 				case 'F': 				case 'E': 					idx = idString.LastIndexOf ('.'' idString.Length - 1 ); 					typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					memberName = idString.Substring (idx + 1); 					var memberNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 					return memberNode?.OuterXml; 				}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetTypeString,The following statement contains a magic number: switch (t.TypeKind) { 			case TypeKind.Array: 				var arr = (IArrayTypeSymbol)t; 				return GetTypeString (arr.ElementType) + "[" + new string ('''' arr.Rank - 1) + "]"; 			case TypeKind.Pointer: 				var ptr = (IPointerTypeSymbol)t; 				return "*" + GetTypeString (ptr.PointedAtType); 			default: 				var docComment = t.GetDocumentationCommentId (); 				return docComment != null && docComment.Length > 2 ? docComment.Substring (2) : t.Name; 			}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetTypeString,The following statement contains a magic number: switch (t.TypeKind) { 			case TypeKind.Array: 				var arr = (IArrayTypeSymbol)t; 				return GetTypeString (arr.ElementType) + "[" + new string ('''' arr.Rank - 1) + "]"; 			case TypeKind.Pointer: 				var ptr = (IPointerTypeSymbol)t; 				return "*" + GetTypeString (ptr.PointedAtType); 			default: 				var docComment = t.GetDocumentationCommentId (); 				return docComment != null && docComment.Length > 2 ? docComment.Substring (2) : t.Name; 			}
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OpenDocument,The following statement contains a magic number: DispatchService.RunPendingEvents (30);
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDevelopWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopWorkspace.cs,OpenDocumentWithTextViewAsync,The following statement contains a magic number: await Task.WhenAny (openTask.Task' Task.Delay (1000));
Magic Number,MonoDevelop.Ide.TypeSystem,RoslynDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopMetadataReference.Snapshot.cs,GetHashCode,The following statement contains a magic number: return 42;
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDevelopRuleSetManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopRuleSetManager.cs,EnsureGlobalRulesetExists,The following statement contains a magic number: var id = match.Groups [2].Value;
Magic Number,MonoDevelop.Ide.TypeSystem,MonoDevelopRuleSetManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopRuleSetManager.cs,EnsureGlobalRulesetExists,The following statement contains a magic number: var id = match.Groups [2].Value;
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,RebuildAsync,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Rebuilding...")' 2);
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,AddFilesToProject,The following statement contains a magic number: files.Length > 10
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetTargetCopyName,The following statement contains a magic number: i<100
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,GetCopyTag,The following statement contains a magic number: switch (n) { 				case 1: sc = GettextCatalog.GetString ("copy"); break; 				case 2: sc = GettextCatalog.GetString ("another copy"); break; 				case 3: sc = GettextCatalog.GetString ("3rd copy"); break; 				case 4: sc = GettextCatalog.GetString ("4th copy"); break; 				case 5: sc = GettextCatalog.GetString ("5th copy"); break; 				case 6: sc = GettextCatalog.GetString ("6th copy"); break; 				case 7: sc = GettextCatalog.GetString ("7th copy"); break; 				case 8: sc = GettextCatalog.GetString ("8th copy"); break; 				case 9: sc = GettextCatalog.GetString ("9th copy"); break; 				default: sc = GettextCatalog.GetString ("copy {0}"); break; 			}
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: string[] reports = new string[16];
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [2] = DocumentsInMemory.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [3] = PadsLoaded.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [4] = CommandTargetScanTime.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [5] = OpenWorkspaceItemTimer.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [6] = OpenDocumentTimer.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [7] = DocumentOpened.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [8] = BuildItemTimer.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [9] = PadShown.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [10] = ParserService.FileParsed.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [11] = ParserService.ObjectSerialized.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [12] = ParserService.ObjectDeserialized.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [13] = ParserService.WorkspaceItemLoaded.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [14] = ParserService.ProjectsLoaded.ToString ();
Magic Number,MonoDevelop.Ide,Counters,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Services.cs,CounterReport,The following statement contains a magic number: reports [15] = Startup.ToString ();
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,OnRespond,The following statement contains a magic number: var enc = (int)storeSelected.GetValue (iter' 2);
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,MoveItem,The following statement contains a magic number: TreeIter newiter = targetStore.AppendValues (sourceStore.GetValue (iter' 0)' sourceStore.GetValue (iter' 1)' sourceStore.GetValue (iter' 2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 700;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 450;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.table5 = new global::Gtk.Table (((uint)(2))' ((uint)(4))' false);
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.table5 = new global::Gtk.Table (((uint)(2))' ((uint)(4))' false);
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.table5.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.table5.ColumnSpacing = ((uint)(12));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.table5.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.label106.WidthChars = 20;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w2.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.label107.WidthChars = 20;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w3.LeftAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w7.LeftAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w7.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.vbox74.Spacing = 6;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.imageAdd.IconSize = ((global::Gtk.IconSize)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.imageRemove.IconSize = ((global::Gtk.IconSize)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w12.Position = 2;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w13.Position = 3;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w14.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w14.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.vbox75.Spacing = 6;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.imageUp.IconSize = ((global::Gtk.IconSize)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.imageDown.IconSize = ((global::Gtk.IconSize)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w19.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w19.LeftAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w19.RightAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w21.Spacing = 6;
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w21.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: w21.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.cancelbutton1' -6);
Magic Number,MonoDevelop.Ide,SelectEncodingsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectEncodingsDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.okbutton1' -5);
Magic Number,MonoDevelop.Ide,MonoDevelopStatusBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\MonoDevelopStatusBar.cs,OnExposeEvent,The following statement contains a magic number: h = 18 - Style.YThickness;
Magic Number,MonoDevelop.Ide,MonoDevelopStatusBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\MonoDevelopStatusBar.cs,OnExposeEvent,The following statement contains a magic number: h < 18 - Style.YThickness
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: var iconHeight = Math.Max (h' cat.Items[0].Icon.Height + 2) + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: var iconHeight = Math.Max (h' cat.Items[0].Icon.Height + 2) + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: int itemWidth = w + (int)item.Icon.Width + 2 + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: int itemWidth = w + (int)item.Icon.Width + 2 + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: xPos += w + cat.Items[0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: xPos += w + cat.Items[0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: xPos += w + cat.Items[0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,GetItemAt,The following statement contains a magic number: xPos += w + cat.Items[0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,Ellipsize,The following statement contains a magic number: return str.Substring (0' maxLength - 3) + "...";
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: var iconHeight = Math.Max (h' cat.Items [0].Icon.Height + 2) + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: var iconHeight = Math.Max (h' cat.Items [0].Icon.Height + 2) + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: int itemWidth = w + (int)item.Icon.Width + 2 + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: int itemWidth = w + (int)item.Icon.Width + 2 + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: cr.MoveTo (xPos + item.Icon.Width + 2 + itemPadding' yPos + (iconHeight - h) / 2);
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: cr.MoveTo (xPos + item.Icon.Width + 2 + itemPadding' yPos + (iconHeight - h) / 2);
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: cr.DrawImage (this' item == ActiveItem ? item.Icon.WithStyles ("sel") : item.Icon' (int)xPos + itemPadding' 						                                 (int)(yPos + (iconHeight - item.Icon.Height) / 2));
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: xPos += w + cat.Items [0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: xPos += w + cat.Items [0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: xPos += w + cat.Items [0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnExposeEvent,The following statement contains a magic number: xPos += w + cat.Items [0].Icon.Width + 2 + padding + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,NextItem,The following statement contains a magic number: idx + 1 > cat.FirstVisibleItem + maxItems * maxRows - 3
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: maxLength = 15;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: maxLength = Math.Min (30' Math.Max (maxLength' (item.ListTitle ?? item.Title).Length));
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: var iconHeight = Math.Max (h' (int)icon.Height + 2) + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: var iconHeight = Math.Max (h' (int)icon.Height + 2) + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: var iconWidth = (int) icon.Width + 2 + w  + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: var iconWidth = (int) icon.Width + 2 + w  + itemPadding * 2;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: req.Width = totalWidth + padding * 2 + (categories.Count - 1) * padding;
Magic Number,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnSizeRequested,The following statement contains a magic number: req.Height = totalHeight + padding * 2;
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: hBox2.PackStart (hBox' false' false' 8);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: hBox.PackStart (imageTitle.ToGtkWidget ()' true' false' 2);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: labelTitle.HeightRequest = 24;
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: hBox.PackStart (labelTitle' true' true' 2);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: vBox.PackStart (hBox2' false' false' 6);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: labelType.HeightRequest = 16;
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: hBox.PackStart (labelType' false' false' 8);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: vBox.PackStart (hBox' false' false' 2);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: hBox.PackStart (labelFileName' true' true' 8);
Magic Number,MonoDevelop.Ide,DocumentSwitcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,DocumentSwitcher,The following statement contains a magic number: vBox.PackEnd (hBox' false' false' 6);
Magic Number,MonoDevelop.Ide,DesktopService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DesktopService.cs,GetFileIsTextAsync,The following statement contains a magic number: return await Task<bool>.Factory.StartNew (delegate { 				if (!File.Exists (file)) 					return false;  				using (var f = File.OpenRead (file)) { 					var buf = new byte [8192]; 					var read = f.Read (buf' 0' buf.Length); 					for (int i = 0; i < read; i++) 						if (buf [i] == 0) 							return false; 				} 				return true; 			});
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,RunPendingEvents,The following statement contains a magic number: RunPendingEvents (500);
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,RunPendingEvents,The following statement contains a magic number: int maxLength = 20;
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,PumpingWait,The following statement contains a magic number: DispatchService.RunPendingEvents (30);
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,RunAnimation,The following statement contains a magic number: animationHandle == 0 || currentAnimationSpan > 20
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,ProcessAnimations,The following statement contains a magic number: nms = 20;
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,ProcessAnimations,The following statement contains a magic number: nms < 20
Magic Number,MonoDevelop.Ide,DispatchService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\DispatchService.cs,ProcessAnimations,The following statement contains a magic number: animationHandle != 0 && Math.Abs (nms - currentAnimationSpan) <= 3
Magic Number,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,Initialize,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString("Loading Workbench")' 3);
Magic Number,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,EnableIdleActions,The following statement contains a magic number: DispatchIdleActions (500);
Magic Number,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,DispatchIdleActions,The following statement contains a magic number: DispatchIdleActions (1000);
Magic Number,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,DispatchIdleActions,The following statement contains a magic number: DispatchIdleActions (500 - (int) interactionSpan);
Magic Number,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,DispatchIdleActions,The following statement contains a magic number: interactionSpan < 500
Magic Number,MonoDevelop.Ide,IdeApp,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\Ide.cs,DispatchIdleActions,The following statement contains a magic number: DispatchIdleActions (500);
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,ImageService,The following statement contains a magic number: iconSizes[(int)Gtk.IconSize.Menu].Width = 16;
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,ImageService,The following statement contains a magic number: iconSizes[(int)Gtk.IconSize.Menu].Height = 16;
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,CreateColorIcon,The following statement contains a magic number: ib.Context.Rectangle (0' 0' 16' 16);
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,CreateColorIcon,The following statement contains a magic number: ib.Context.Rectangle (0' 0' 16' 16);
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,CreateColorBlock,The following statement contains a magic number: w = h = 22;
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,CreateColorBlock,The following statement contains a magic number: Gdk.Pixbuf p = new Gdk.Pixbuf (Gdk.Colorspace.Rgb' true' 8' w' h);
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: str.Length != (alpha ? 9 : 7)
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: str.Length != (alpha ? 9 : 7)
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: switch (str[stringIndex]) { 				case '0': 					bits = 0; 					break; 				case '1': 					bits = 1; 					break; 				case '2': 					bits = 2; 					break; 				case '3': 					bits = 3; 					break; 				case '4': 					bits = 4; 					break; 				case '5': 					bits = 5; 					break; 				case '6': 					bits = 6; 					break; 				case '7': 					bits = 7; 					break; 				case '8': 					bits = 8; 					break; 				case '9': 					bits = 9; 					break; 				case 'A': 				case 'a': 					bits = 10; 					break; 				case 'B': 				case 'b': 					bits = 11; 					break; 				case 'C': 				case 'c': 					bits = 12; 					break; 				case 'D': 				case 'd': 					bits = 13; 					break; 				case 'E': 				case 'e': 					bits = 14; 					break; 				case 'F': 				case 'f': 					bits = 15; 					break; 				default: 					return false; 				}
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: val = (val << 4) | bits;
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,TryParseColourFromHex,The following statement contains a magic number: val = (val << 8) | 0xff;
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,InternalGetStockIdFromResource,The following statement contains a magic number: id = id.Substring (4);
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,InternalGetStockIdFromAnimation,The following statement contains a magic number: id = id.Substring (10);
Magic Number,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,PixelClamp,The following statement contains a magic number: return (byte)System.Math.Max (0' System.Math.Min (255' val));
Magic Number,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,CenterWindow,The following statement contains a magic number: x = Math.Max (0' (winw - w) / 2) + winx;
Magic Number,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,CenterWindow,The following statement contains a magic number: y = Math.Max (0' (winh - h) / 2) + winy;
Magic Number,MonoDevelop.Ide,MessageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MessageService.cs,ExecuteTaskAndShowWaitDialog,The following statement contains a magic number: var delayTask = Task.Delay (1000);
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,Run,The following statement contains a magic number: InstrumentationService.StartAutoSave (logFile' 1000);
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,Run,The following statement contains a magic number: Platform.IsWindows && GtkWorkarounds.GtkMinorVersion >= 16
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,MainLoop,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Starting {0}"' BrandingService.ApplicationName)' 2);
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,StartLockupTracker,The following statement contains a magic number: GLib.Timeout.Add (2000' () => { 				lastIdle = DateTime.Now; 				return true; 			});
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,StartLockupTracker,The following statement contains a magic number: var lockupCheckThread = new Thread (delegate () { 				while (lockupCheckRunning) { 					const int waitTimeout = 5000; 					const int maxResponseTime = 10000; 					Thread.Sleep (waitTimeout);  					if ((DateTime.Now - lastIdle).TotalMilliseconds > maxResponseTime) { 						var pid = Process.GetCurrentProcess ().Id; 						Mono.Unix.Native.Syscall.kill (pid' Mono.Unix.Native.Signum.SIGQUIT);  						return; 					} 				} 			});
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,StartLockupTracker,The following statement contains a magic number: var lockupCheckThread = new Thread (delegate () { 				while (lockupCheckRunning) { 					const int waitTimeout = 5000; 					const int maxResponseTime = 10000; 					Thread.Sleep (waitTimeout);  					if ((DateTime.Now - lastIdle).TotalMilliseconds > maxResponseTime) { 						var pid = Process.GetCurrentProcess ().Id; 						Mono.Unix.Native.Syscall.kill (pid' Mono.Unix.Native.Signum.SIGQUIT);  						return; 					} 				} 			});
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckWindowsGtk,The following statement contains a magic number: Version minVersion = new Version (2' 12' 22);
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckWindowsGtk,The following statement contains a magic number: Version minVersion = new Version (2' 12' 22);
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckWindowsGtk,The following statement contains a magic number: Version minVersion = new Version (2' 12' 22);
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,CheckFileWatcher,The following statement contains a magic number: n <= 9000
Magic Number,MonoDevelop.Ide,IdeStartup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeStartup.cs,Main,The following statement contains a magic number: int threadCount = 125;
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: uint v1 = 2' v2 = 0' v3 = 0;
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: v1 < 99 && Gtk.Global.CheckVersion (v1' v2' v3) == null
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: v2 < 99 && Gtk.Global.CheckVersion (v1' v2' v3) == null
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: v3 < 99 && Gtk.Global.CheckVersion (v1' v2' v3) == null
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: v1 == 99 || v2 == 99 || v3 == 99
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: v1 == 99 || v2 == 99 || v3 == 99
Magic Number,MonoDevelop.Ide,IdeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeVersionInfo.cs,GetGtkVersion,The following statement contains a magic number: v1 == 99 || v2 == 99 || v3 == 99
Magic Number,MonoDevelop.Ide,ThreadedRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ThreadedRenderer.cs,ThreadedRenderer,The following statement contains a magic number: ThreadPool.SetMinThreads (20' 20);
Magic Number,MonoDevelop.Ide,ThreadedRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ThreadedRenderer.cs,ThreadedRenderer,The following statement contains a magic number: ThreadPool.SetMinThreads (20' 20);
Magic Number,MonoDevelop.Ide,RuntimeVersionInfo,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RuntimeVersionInfo.cs,GetRuntimeInfo,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,MonoDevelop.Ide,IdeInstanceConnection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeInstanceConnection.cs,StartListening,The following statement contains a magic number: listen_socket.Listen (5);
Magic Number,MonoDevelop.Ide,IdeInstanceConnection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeInstanceConnection.cs,ListenCallback,The following statement contains a magic number: byte [] buf = new byte [1024];
Magic Number,MonoDevelop.Ide,IdeInstanceConnection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeInstanceConnection.cs,HashSdbmBounded,The following statement contains a magic number: hash = ((ulong)input [i]) + (hash << 6) + (hash << 16) - hash;
Magic Number,MonoDevelop.Ide,IdeInstanceConnection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeInstanceConnection.cs,HashSdbmBounded,The following statement contains a magic number: hash = ((ulong)input [i]) + (hash << 6) + (hash << 16) - hash;
Magic Number,MonoDevelop.Ide,IdeInstanceConnection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\IdeInstanceConnection.cs,HashSdbmBounded,The following statement contains a magic number: return (int)(hash % 1000);
Magic Number,MonoDevelop.Ide,MonoDevelopOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MonoDevelopOptions.cs,Parse,The following statement contains a magic number: Console.Write (new string (' '' 29 - openFileText.Length));
Magic Number,MonoDevelop.Ide.Gui,ConfigurationComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,ConfigurationComboBox,The following statement contains a magic number: align = new Gtk.Alignment (0.5f' 0.5f' 1.0f' 0f);
Magic Number,MonoDevelop.Ide.Gui,ConfigurationComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,ConfigurationComboBox,The following statement contains a magic number: align = new Gtk.Alignment (0.5f' 0.5f' 1.0f' 0f);
Magic Number,MonoDevelop.Ide.Gui,ConfigurationComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,ConfigurationComboBox,The following statement contains a magic number: align.LeftPadding = 3;
Magic Number,MonoDevelop.Ide.Gui,ConfigurationComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,ConfigurationComboBox,The following statement contains a magic number: align.RightPadding = 3;
Magic Number,MonoDevelop.Ide.Gui,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,DropDownBox,The following statement contains a magic number: label.WidthRequest = 125;
Magic Number,MonoDevelop.Ide.Gui,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ConfigurationComboBox.cs,DropDownBox,The following statement contains a magic number: hbox.PackStart (label' true' true' 3);
Magic Number,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,Initialize,The following statement contains a magic number: monitor.BeginTask (GettextCatalog.GetString ("Initializing Main Window")' 4);
Magic Number,MonoDevelop.Ide.Gui,Workbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Workbench.cs,WorkbenchTabsChanged,The following statement contains a magic number: tabsChangedTimer = new System.Timers.Timer (10000);
Magic Number,MonoDevelop.Ide.Gui,ToolbarComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ToolbarComboBox.cs,ToolbarComboBox,The following statement contains a magic number: align = new Gtk.Alignment (0.5f' 0.5f' 1.0f' 0f);
Magic Number,MonoDevelop.Ide.Gui,ToolbarComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ToolbarComboBox.cs,ToolbarComboBox,The following statement contains a magic number: align = new Gtk.Alignment (0.5f' 0.5f' 1.0f' 0f);
Magic Number,MonoDevelop.Ide.Gui,ToolbarComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ToolbarComboBox.cs,ToolbarComboBox,The following statement contains a magic number: align.LeftPadding = 3;
Magic Number,MonoDevelop.Ide.Gui,ToolbarComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\ToolbarComboBox.cs,ToolbarComboBox,The following statement contains a magic number: align.RightPadding = 3;
Magic Number,MonoDevelop.Ide.Gui,ToolButtonStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DockItemToolbarLoader.cs,Update,The following statement contains a magic number: image.Image = image.Image.WithStyles (cmdInfo.Enabled ? "" : "disabled").WithAlpha (cmdInfo.Enabled ? 1.0 : 0.4);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.Red * 255)' (byte)(color.Green * 255)' 				                     (byte)(color.Blue * 255)' (byte)(color.Alpha * 255));
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.Red * 255)' (byte)(color.Green * 255)' 				                     (byte)(color.Blue * 255)' (byte)(color.Alpha * 255));
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.Red * 255)' (byte)(color.Green * 255)' 				                     (byte)(color.Blue * 255)' (byte)(color.Alpha * 255));
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.Red * 255)' (byte)(color.Green * 255)' 				                     (byte)(color.Blue * 255)' (byte)(color.Alpha * 255));
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadStyle,The following statement contains a magic number: Editor.SmartTagMarkerColorLight = Color.FromName ("#ff70fe").WithAlpha (.5);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadStyle,The following statement contains a magic number: Editor.SmartTagMarkerColorDark = Color.FromName ("#ffffff").WithAlpha (.5);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: BreadcrumbButtonFillColor = BaseSelectionBackgroundColor.WithAlpha (0.2);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: SubTabBarHoverBackgroundColor = BaseSelectionBackgroundColor.WithAlpha (0.2);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: StatusBarInnerColor = Color.FromName ("#000000").WithAlpha (.08);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: StatusBarShadowColor1 = Color.FromName ("#000000").WithAlpha (.06);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: StatusBarShadowColor2 = Color.FromName ("#000000").WithAlpha (.02);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: StatusBarProgressBackgroundColor = Color.FromName ("#000000").WithAlpha (.1);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: StatusBarProgressOutlineColor = Color.FromName ("#000000").WithAlpha (.1);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadLightStyle,The following statement contains a magic number: PopoverWindow.ShadowColor = Color.FromName ("#000000").WithAlpha (.05);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The following statement contains a magic number: StatusBarInnerColor = Color.FromName ("#000000").WithAlpha (.08);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The following statement contains a magic number: StatusBarShadowColor1 = Color.FromName ("#000000").WithAlpha (.06);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The following statement contains a magic number: StatusBarShadowColor2 = Color.FromName ("#000000").WithAlpha (.02);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The following statement contains a magic number: StatusBarProgressBackgroundColor = Color.FromName ("#ffffff").WithAlpha (.1);
Magic Number,MonoDevelop.Ide.Gui,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\Styles.cs,LoadDarkStyle,The following statement contains a magic number: StatusBarProgressOutlineColor = Color.FromName ("#ffffff").WithAlpha (.1);
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,LayoutChanged,The following statement contains a magic number: layoutChangedTask = Task.Delay (10000);
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following statement contains a magic number: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,CreateUI,The following statement contains a magic number: AddLabel (GettextCatalog.GetString ("Target Frameworks:")' 18);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddLabel,The following statement contains a magic number: label.SetAlignment (0.0f' 0.5f);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddLabel,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				TopPadding = top' 				BottomPadding = 4 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddLabel,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				TopPadding = top' 				BottomPadding = 4 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddTopSelectorCombo,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddTopSelectorCombo,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddTopSelectorCombo,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddMultiOptionCombo,The following statement contains a magic number: option.Items.Count < 2
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddMultiOptionCombo,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddMultiOptionCombo,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddMultiOptionCombo,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddSingleOptionCheckbox,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddSingleOptionCheckbox,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddSingleOptionCheckbox,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddWarningLabel,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				TopPadding = 8' 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddWarningLabel,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				TopPadding = 8' 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddWarningLabel,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				TopPadding = 8' 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddWarningLabel,The following statement contains a magic number: var alignment = new Alignment (0.0f' 0.5f' 1.0f' 1.0f) { 				TopPadding = 8' 				LeftPadding = 18' 				RightPadding = 18 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddWarningLabel,The following statement contains a magic number: warning.SetAlignment (0.0f' 0.5f);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,AddWarningLabel,The following statement contains a magic number: warningHBox = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeSelectorDialog.cs,TargetFrameworkChanged_internal,The following statement contains a magic number: selectedOptions.Count < 2
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,BaseDirectoryPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\BaseDirectoryPanelWidget.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,BaseDirectoryPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\BaseDirectoryPanelWidget.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,BaseDirectoryPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\BaseDirectoryPanelWidget.cs,Build,The following statement contains a magic number: this.label2.WidthRequest = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,BaseDirectoryPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\BaseDirectoryPanelWidget.cs,Build,The following statement contains a magic number: w4.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,CodeFormattingPanelWidget,The following statement contains a magic number: col.AddAttribute (crt' "text"' 2);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,CodeFormattingPanelWidget,The following statement contains a magic number: store.SetSortColumnId (2' Gtk.SortType.Ascending);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Build,The following statement contains a magic number: this.boxButtons.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CodeFormattingPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CodeFormattingPanel.cs,Build,The following statement contains a magic number: w6.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineBuildOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineBuildOptions.cs,Build,The following statement contains a magic number: this.vbox68.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineBuildOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineBuildOptions.cs,Build,The following statement contains a magic number: this.hbox46.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineBuildOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineBuildOptions.cs,Build,The following statement contains a magic number: w4.Padding = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineConfigurationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineConfigurationPanel.cs,Build,The following statement contains a magic number: this.vbox74.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineConfigurationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineConfigurationPanel.cs,Build,The following statement contains a magic number: this.hbox60.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: this.table14 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: this.table14 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: this.table14.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: this.table14.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: w1.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: w1.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: this.scrolledwindow14.WidthRequest = 350;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: this.scrolledwindow14.HeightRequest = 100;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: w4.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineInformationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CombineInformationPanel.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,LoadPanelContents,The following statement contains a magic number: signAsm == 2
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,LoadPanelContents,The following statement contains a magic number: delaySign == 2
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CommonAssemblySigningPreferences,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CommonAssemblySigningPreferences.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanelWidget.cs,Build,The following statement contains a magic number: this.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanelWidget.cs,Build,The following statement contains a magic number: this.vbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanelWidget.cs,Build,The following statement contains a magic number: this.label3.WidthRequest = 470;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandPanelWidget.cs,Build,The following statement contains a magic number: this.scrolledwindow1.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.Events = ((global::Gdk.EventMask)(16384));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.vbox1.Events = ((global::Gdk.EventMask)(28672));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.tableData = new global::Gtk.Table (((uint)(3))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.tableData = new global::Gtk.Table (((uint)(3))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.tableData.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.tableData.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w5.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w6.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.tagSelectorDirectory.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w8.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w8.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w8.LeftAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w8.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.hbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.tagSelectorCommand.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w11.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w11.LeftAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w11.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w11.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w11.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w12.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w12.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w12.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w12.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w13.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w13.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w13.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w14.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w14.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w15.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w15.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w15.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w15.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w16.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: this.boxData.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CustomCommandWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\CustomCommandWidget.cs,Build,The following statement contains a magic number: w19.Position = 3;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.vbox40.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.vbox47.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.label55.WidthRequest = 18;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.vbox46.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.table11 = new global::Gtk.Table (((uint)(4))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.table11 = new global::Gtk.Table (((uint)(4))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.table11.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.table11.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w3.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w4.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w7.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w8.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w9.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w10.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w10.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w10.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w11.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.scrolledwindow5.WidthRequest = 350;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.scrolledwindow5.HeightRequest = 100;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w13.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w13.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: w13.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,GeneralProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\GeneralProjectOptions.cs,Build,The following statement contains a magic number: this.label51.WidthRequest = 18;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,NamespaceSynchronisationPanelWidget,The following statement contains a magic number: previewTree.AppendColumn (GettextCatalog.GetString ("Namespace")' textRenderer' "text"' 2);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.alignment1.LeftPadding = ((uint)(24));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.namespaceAssociationBox.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.previewFrame.WidthRequest = 400;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: this.previewFrame.ShadowType = ((global::Gtk.ShadowType)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: w9.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,NamespaceSynchronisationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\NamespaceSynchronisationPanel.cs,Build,The following statement contains a magic number: w13.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox66.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox67.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.label91.WidthRequest = 18;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox69.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.table10 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.table10 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.table10.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: this.table10.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w6.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w6.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,OutputOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\OutputOptionsPanel.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox67.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox69.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: this.table10 = new global::Gtk.Table (((uint)(1))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: this.table10.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: w1.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: w6.Position = 3;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: w7.Position = 4;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunOptionsPanel.cs,Build,The following statement contains a magic number: w8.Position = 5;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RuntimeOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox81.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RuntimeOptionsPanel.cs,Build,The following statement contains a magic number: this.hbox68.Spacing = 7;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineEntryConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionItemConfigurationsPanel.cs,Build,The following statement contains a magic number: this.hbox61.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineEntryConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionItemConfigurationsPanel.cs,Build,The following statement contains a magic number: this.vbox76.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineEntryConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionItemConfigurationsPanel.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,CombineEntryConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionItemConfigurationsPanel.cs,Build,The following statement contains a magic number: w6.Position = 3;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: var fxAlignment = new Alignment (0f' 0f' 1f' 1f) { LeftPadding = 12 };
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: var radioBox = new VBox { Spacing = 10 };
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: var netstandardPickerHbox = new HBox { Spacing = 10 };
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: radioBox.PackStart (new Alignment (0f' 0f' 1f' 1f) { Child = netstandardDesc' LeftPadding = 24 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: var pclPickerHbox = new HBox { Spacing = 10 };
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: pclPickerHbox.PackStart (targetFrameworkEntry = new Entry { IsEditable = false' WidthChars = 20' Name = "targetFrameworkEntry" }' false' false' 0);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,PortableRuntimeOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\PortableRuntimeOptionsPanel.cs,Build,The following statement contains a magic number: radioBox.PackStart (new Alignment (0f' 0f' 1f' 1f) { Child = pclDesc' LeftPadding = 24 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,RunConfigurationsPanelWidget,The following statement contains a magic number: this.Margin = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,RunConfigurationsPanelWidget,The following statement contains a magic number: Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,RunConfigurationsPanelWidget,The following statement contains a magic number: box.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationNameDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationsPanel.cs,RunConfigurationNameDialog,The following statement contains a magic number: Width = 300;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,RunConfigurationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\RunConfigurationPanel.cs,Initialize,The following statement contains a magic number: box = new Gtk.VBox { 				Spacing = 12 			};
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.Margin = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: table.Add (appEntryInfoIcon = new InformationPopoverWidget ()' 2' 1);
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: table.MarginLeft = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,DotNetRunConfigurationEditorWidget,The following statement contains a magic number: adBox.Margin = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,EditRuntimeClicked,The following statement contains a magic number: dlg.Width = 700;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,DotNetRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\AssemblyRunConfigurationEditor.cs,EditRuntimeClicked,The following statement contains a magic number: dlg.Height = 500;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,ProcessRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\ProcessRunConfigurationEditor.cs,ProcessRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.Margin = 12;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,ProcessRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\ProcessRunConfigurationEditor.cs,ProcessRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,ProcessRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\ProcessRunConfigurationEditor.cs,ProcessRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,ProcessRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\ProcessRunConfigurationEditor.cs,ProcessRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,ProcessRunConfigurationEditorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\ProcessRunConfigurationEditor.cs,ProcessRunConfigurationEditorWidget,The following statement contains a magic number: mainBox.PackStart (new HSeparator () { MarginTop = 8' MarginBottom = 8 });
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,SolutionRunConfigurationsPanelWidget,The following statement contains a magic number: Margin = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,SolutionRunConfigurationsPanelWidget,The following statement contains a magic number: Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects.OptionPanels,SolutionRunConfigurationsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.OptionPanels\SolutionRunConfigurationsPanel.cs,SolutionRunConfigurationsPanelWidget,The following statement contains a magic number: box.Spacing = 6;
Magic Number,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,LoadColumnsVisibility,The following statement contains a magic number: i < 4
Magic Number,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,LoadColumnsVisibility,The following statement contains a magic number: tokens.Length == 4 && view != null && view.Columns.Length == 4
Magic Number,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,LoadColumnsVisibility,The following statement contains a magic number: tokens.Length == 4 && view != null && view.Columns.Length == 4
Magic Number,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,StringToColor,The following statement contains a magic number: rgb.Length != 3
Magic Number,MonoDevelop.Ide.Tasks,CommentTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTasksView.cs,StringToColor,The following statement contains a magic number: color.Blue = UInt16.Parse (rgb[2]' System.Globalization.NumberStyles.HexNumber);
Magic Number,MonoDevelop.Ide.Tasks,UserTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\UserTasksView.cs,GetEnumIndex,The following statement contains a magic number: switch (priority) { 			case TaskPriority.High: 				return 0; 			case TaskPriority.Normal: 				return 1; 			case TaskPriority.Low: 			default: 				return 2; 			}
Magic Number,MonoDevelop.Ide.Tasks,UserTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\UserTasksView.cs,StringToColor,The following statement contains a magic number: rgb.Length != 3
Magic Number,MonoDevelop.Ide.Tasks,UserTasksView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\UserTasksView.cs,StringToColor,The following statement contains a magic number: color.Blue = UInt16.Parse (rgb[2]' System.Globalization.NumberStyles.HexNumber);
Magic Number,MonoDevelop.Ide.Tasks,CommentTag,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Tasks\CommentTag.cs,CreateCommentTags,The following statement contains a magic number: split.Length == 2 && int.TryParse (split [1]' out priority)
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.vbox32.Spacing = 12;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.hbox21.Spacing = 6;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.scrolledwindow4.ShadowType = ((global::Gtk.ShadowType)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.toolListBox.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.toolListBox.HeightRequest = 150;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.buttons.Spacing = 6;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w6.Position = 3;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w7.Position = 4;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table2 = new global::Gtk.Table (((uint)(5))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table2 = new global::Gtk.Table (((uint)(5))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table2.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table2.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w10.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w10.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w10.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w11.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w11.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w11.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w11.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w12.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w12.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w13.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w13.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w13.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w13.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table3 = new global::Gtk.Table (((uint)(1))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table3.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table3.ColumnSpacing = ((uint)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.tagSelectorArgs.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w15.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w15.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w15.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w16.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w16.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w16.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table4 = new global::Gtk.Table (((uint)(1))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table4.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table4.ColumnSpacing = ((uint)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.tagSelectorPath.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w17.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w17.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w17.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w19.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w19.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w19.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table5 = new global::Gtk.Table (((uint)(1))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table5.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table5.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w20.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.keyBindingInfoEventBox.WidthRequest = 16;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.keyBindingInfoEventBox.HeightRequest = 16;
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w22.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w22.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w22.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w23.LeftAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w23.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w23.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w24.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w24.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w24.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w24.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w24.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w25.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w26.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w27.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w27.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w27.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w29.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w30.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w30.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w31.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w31.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.ExternalTools,ExternalToolPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolPanel.cs,Build,The following statement contains a magic number: w32.Position = 2;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,ConvertToTemplate,The following statement contains a magic number: number = number * 10 + (ch - '0');
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,RenderTemplateName,The following statement contains a magic number: crt.Markup = (string)model.GetValue (iter' 2);
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: this.vpaned1.Position = 127;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,CodeTemplatePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplatePanel.cs,Build,The following statement contains a magic number: w10.Position = 2;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,EditTemplateDialog,The following statement contains a magic number: treeviewVariable.AppendColumn (""' nameRenderer' delegate (TreeViewColumn col' CellRenderer cell' TreeModel model' TreeIter iter) { 				nameRenderer.Markup = ((string)model.GetValue (iter' 2)); 			});
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.hpaned1.Position = 555;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.table2 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.table2 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.table2.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.table2.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w4.Position = 2;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w5.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w8.Position = 2;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w9.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.hbox5.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w12.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w12.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w12.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w12.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w13.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w13.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w14.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w14.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w14.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.vbox3.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.hbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w18.Position = 2;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w28.Spacing = 6;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w28.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: w28.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 859;
Magic Number,MonoDevelop.Ide.CodeTemplates,EditTemplateDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\EditTemplateDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 494;
Magic Number,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,RunFunction,The following statement contains a magic number: switch (name) { 			case "GetCollections": 				return GetCollections (); 			case "GetCurrentClassName": 				return new CodeTemplateListDataProvider (GetCurrentClassName ()); 			case "GetConstructorModifier": 				return new CodeTemplateListDataProvider (GetConstructorModifier ()); 			case "GetSimpleTypeName": 				return new CodeTemplateListDataProvider (GetSimpleTypeName (match.Groups[2].Value.Trim ('"'))); 			case "GetLengthProperty": 				return new CodeTemplateListDataProvider (GetLengthProperty (callback' match.Groups == null || match.Groups.Count < 3 ? null : match.Groups[2].Value.Trim ('"'))); 			case "GetComponentTypeOf": 				return new CodeTemplateListDataProvider (GetComponentTypeOf (callback' match.Groups[2].Value.Trim ('"'))); 			}
Magic Number,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,RunFunction,The following statement contains a magic number: switch (name) { 			case "GetCollections": 				return GetCollections (); 			case "GetCurrentClassName": 				return new CodeTemplateListDataProvider (GetCurrentClassName ()); 			case "GetConstructorModifier": 				return new CodeTemplateListDataProvider (GetConstructorModifier ()); 			case "GetSimpleTypeName": 				return new CodeTemplateListDataProvider (GetSimpleTypeName (match.Groups[2].Value.Trim ('"'))); 			case "GetLengthProperty": 				return new CodeTemplateListDataProvider (GetLengthProperty (callback' match.Groups == null || match.Groups.Count < 3 ? null : match.Groups[2].Value.Trim ('"'))); 			case "GetComponentTypeOf": 				return new CodeTemplateListDataProvider (GetComponentTypeOf (callback' match.Groups[2].Value.Trim ('"'))); 			}
Magic Number,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,RunFunction,The following statement contains a magic number: switch (name) { 			case "GetCollections": 				return GetCollections (); 			case "GetCurrentClassName": 				return new CodeTemplateListDataProvider (GetCurrentClassName ()); 			case "GetConstructorModifier": 				return new CodeTemplateListDataProvider (GetConstructorModifier ()); 			case "GetSimpleTypeName": 				return new CodeTemplateListDataProvider (GetSimpleTypeName (match.Groups[2].Value.Trim ('"'))); 			case "GetLengthProperty": 				return new CodeTemplateListDataProvider (GetLengthProperty (callback' match.Groups == null || match.Groups.Count < 3 ? null : match.Groups[2].Value.Trim ('"'))); 			case "GetComponentTypeOf": 				return new CodeTemplateListDataProvider (GetComponentTypeOf (callback' match.Groups[2].Value.Trim ('"'))); 			}
Magic Number,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,RunFunction,The following statement contains a magic number: switch (name) { 			case "GetCollections": 				return GetCollections (); 			case "GetCurrentClassName": 				return new CodeTemplateListDataProvider (GetCurrentClassName ()); 			case "GetConstructorModifier": 				return new CodeTemplateListDataProvider (GetConstructorModifier ()); 			case "GetSimpleTypeName": 				return new CodeTemplateListDataProvider (GetSimpleTypeName (match.Groups[2].Value.Trim ('"'))); 			case "GetLengthProperty": 				return new CodeTemplateListDataProvider (GetLengthProperty (callback' match.Groups == null || match.Groups.Count < 3 ? null : match.Groups[2].Value.Trim ('"'))); 			case "GetComponentTypeOf": 				return new CodeTemplateListDataProvider (GetComponentTypeOf (callback' match.Groups[2].Value.Trim ('"'))); 			}
Magic Number,MonoDevelop.Ide.Templates,CodeDomFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\CodeDomFileDescriptionTemplate.cs,StripHeaderAndBlankLines,The following statement contains a magic number: realStartLine = i + 2;
Magic Number,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFileAsync,The following statement contains a magic number: byte [] buffer = new byte [2048];
Magic Number,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFileAsync,The following statement contains a magic number: (nr = stream.Read (buffer' 0' 2048)) > 0
Magic Number,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFile,The following statement contains a magic number: byte [] buffer = new byte [2048];
Magic Number,MonoDevelop.Ide.Templates,SingleFileDescriptionTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SingleFileDescriptionTemplate.cs,SaveFile,The following statement contains a magic number: (nr = stream.Read (buffer' 0' 2048)) > 0
Magic Number,MonoDevelop.Ide.Templates,XmlCodeDomReader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\XmlCodeDomReader.cs,GenerateElement,The following statement contains a magic number: att.Name.EndsWith ("Type") && type.GetProperty (att.Name.Substring (0' att.Name.Length - 4)) != null
Magic Number,MonoDevelop.Ide.Templates,RecentTemplates,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\TemplatingService.cs,FromRecentItem,The following statement contains a magic number: recentTemplate = TemplatingService.GetTemplate (  					categories'  					(template) => template.Id == templateId'  					(category) => parts.Length > 1 ? category.Id == parts[0] : true'  					(category) => parts.Length > 2 ? category.Id == parts[1] : true  				);
Magic Number,MonoDevelop.Ide.Templates,FileTemplateParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateParser.cs,CreateIfCondition,The following statement contains a magic number: parameterName.Length < 2
Magic Number,MonoDevelop.Ide.Templates,FileTemplateParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateParser.cs,CreateIfCondition,The following statement contains a magic number: parameterName = parameterName.Substring (1' parameterName.Length - 2);
Magic Number,MonoDevelop.Ide.Templates,FileTemplateParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\FileTemplateParser.cs,CreateIfCondition,The following statement contains a magic number: string parameterValue = condition.Substring (index + 2).Trim ();
Magic Number,MonoDevelop.Ide.Templates,OrFileTemplateCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\OrFileTemplateCondition.cs,Load,The following statement contains a magic number: childNodes.Length < 2
Magic Number,MonoDevelop.Ide.Gui.Content,DocumentStateTracker<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\DocumentStateTracker.cs,UpdateEngine,The following statement contains a magic number: const int BUFFER_SIZE = 2000;
Magic Number,MonoDevelop.Ide.Gui.Content,TextStylePolicy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\TextStylePolicy.cs,TextStylePolicy,The following statement contains a magic number: FileWidth = 120;
Magic Number,MonoDevelop.Ide.Gui.Content,TextStylePolicy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\TextStylePolicy.cs,TextStylePolicy,The following statement contains a magic number: TabWidth = 4;
Magic Number,MonoDevelop.Ide.Gui.Content,TextStylePolicy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\TextStylePolicy.cs,TextStylePolicy,The following statement contains a magic number: IndentWidth = 4;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (69' 69' 94));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (69' 69' 94));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyBg (Gtk.StateType.Normal' new Gdk.Color (69' 69' 94));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyBg (Gtk.StateType.Active' new Gdk.Color (69' 69' 94));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyBg (Gtk.StateType.Active' new Gdk.Color (69' 69' 94));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyBg (Gtk.StateType.Active' new Gdk.Color (69' 69' 94));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Normal' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Active' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Active' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Active' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Prelight' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Prelight' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,CommonAboutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\CommonAboutDialog.cs,ChangeColor,The following statement contains a magic number: w.ModifyFg (Gtk.StateType.Prelight' new Gdk.Color (255' 255' 255));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,The following statement contains a magic number: mainColumn.AddAttribute (togRender' "inconsistent"' 3);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,The following statement contains a magic number: sc.BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,The following statement contains a magic number: this.VBox.PackStart (sc' true' true' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,The following statement contains a magic number: this.SetDefaultSize (300' 200);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,DirtyFilesDialog,The following statement contains a magic number: this.SetDefaultSize (300' 200);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,SaveAndQuit,The following statement contains a magic number: tsFiles.Foreach (delegate (TreeModel model' TreePath path' TreeIter iter) { 				var doc = tsFiles.GetValue (iter' 2) as Document; 				if (doc == null) 					return false; 				if ((bool)tsFiles.GetValue (iter' 1)) 					saveTasks.Add (doc.Save ()); 				return false; 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,NewCheckStatus,The following statement contains a magic number: bool inconsistant = (bool)tsFiles.GetValue (childIter' 3);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,NewCheckStatus,The following statement contains a magic number: newsetting != lastsetting || (bool)tsFiles.GetValue (childIter' 3) == true
Magic Number,MonoDevelop.Ide.Gui.Dialogs,DirtyFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\DirtyFilesDialog.cs,NewCheckStatus,The following statement contains a magic number: tsFiles.SetValue (iter' 3' inconsistant);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.hbox45.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.layoutName.WidthRequest = 320;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: w8.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: w8.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: w8.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.button309' -6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.newButton' -5);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 459;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewLayoutDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewLayoutDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 162;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.Margin = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Markup = string.Format ("<b>{0}</b>"' GettextCatalog.GetString ("Version"))' 				MarginTop = 6' 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Text = IdeVersionInfo.MonoDevelopVersion' 				MarginLeft = 12 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 					Markup = string.Format ("<b>{0}</b>"' GettextCatalog.GetString ("License"))' 					MarginTop = 6' 				});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: var linkLabel = new Xwt.LinkLabel { 					Markup = "<span underline='true'>License Terms</span>"' 					Cursor = Xwt.CursorType.Hand' 					MarginLeft = 12' 					CanGetFocus = true' 					Uri = new Uri(BrandingService.LicenseTermsUrl)' 				};
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: linkLabel = new Xwt.LinkLabel { 						Markup = string.Format ("<span underline='true'>{0}</span>"' GettextCatalog.GetString ("Privacy Statement"))' 						Cursor = Xwt.CursorType.Hand' 						MarginLeft = 12' 						CanGetFocus = true' 						Uri = new Uri(BrandingService.PrivacyStatementUrl)' 					};
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Markup = string.Format ("<b>{0}</b>"' GettextCatalog.GetString ("Copyright"))' 				MarginTop = 6' 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Text = (DateTime.Now.Year == 2016 ? "© 2016" : "© 2016–" + DateTime.Now.Year) + " Microsoft Corp."' 				MarginLeft = 12 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Text = (DateTime.Now.Year == 2016 ? "© 2016" : "© 2016–" + DateTime.Now.Year) + " Microsoft Corp."' 				MarginLeft = 12 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Text = "© 2004–" + DateTime.Now.Year + " Xamarin Inc."' 				MarginLeft = 12 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AboutMonoDevelopTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AboutMonoDevelopTabPage.cs,AboutMonoDevelopTabPage,The following statement contains a magic number: infoBox.PackStart (new Xwt.Label () { 				Text = "© 2004–" + DateTime.Now.Year + " MonoDevelop contributors"' 				MarginLeft = 12 			});
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,VersionInformationTabPage,The following statement contains a magic number: BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,SetText,The following statement contains a magic number: contentBox.BorderWidth = 4;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,SetText,The following statement contains a magic number: var sw = new MonoDevelop.Components.CompactScrolledWindow () { 				ShowBorderLine = true' 				BorderWidth = 2 			};
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,CreateAssembliesTable,The following statement contains a magic number: table.ColumnSpacing = 3;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,CreateAssembliesTable,The following statement contains a magic number: table.Attach (new Gtk.Label (assemblyName.Version.ToString ()) { Xalign = 0 }' 1' 2' line' line + 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,CreateAssembliesTable,The following statement contains a magic number: table.Attach (new Gtk.Label (System.IO.Path.GetFullPath (assembly.Location)) { Xalign = 0 }' 2' 3' line' line + 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,VersionInformationTabPage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\VersionInformationTabPage.cs,CreateAssembliesTable,The following statement contains a magic number: table.Attach (new Gtk.Label (System.IO.Path.GetFullPath (assembly.Location)) { Xalign = 0 }' 2' 3' line' line + 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.vbox3.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.hbox7.Spacing = 5;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.iconInfo.IconSize = ((global::Gtk.IconSize)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.tipTextview.WrapMode = ((global::Gtk.WrapMode)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.hbox5.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.hbox5.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.hbuttonbox1.Spacing = 10;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.hbuttonbox1.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.DefaultWidth = 500;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,TipOfTheDayWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\TipOfTheDay.cs,Build,The following statement contains a magic number: this.DefaultHeight = 285;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 350;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.hbox1.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.iconError.IconSize = ((global::Gtk.IconSize)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.messageLabel.WidthRequest = 479;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w6.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w9.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w9.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w9.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.noButton' -9);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.yesButton' -8);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.closeButton' -7);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: w12.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,AddinLoadErrorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\AddinLoadErrorDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 575;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: Table table = new Table (2' 2' false);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: Table table = new Table (2' 2' false);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: table.RowSpacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: table.ColumnSpacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: table.Attach (encodingMenu' 1' 2' 0' 1' AttachOptions.Expand|AttachOptions.Fill' AttachOptions.Expand|AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: table.Attach (viewerLabel' 0' 1' 1' 2' AttachOptions.Fill' AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: Gtk.HBox box = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: table.Attach (box' 1' 2' 1' 2' AttachOptions.Expand|AttachOptions.Fill' AttachOptions.Expand|AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FileSelectorDialog,The following statement contains a magic number: table.Attach (box' 1' 2' 1' 2' AttachOptions.Expand|AttachOptions.Fill' AttachOptions.Expand|AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,FileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\FileSelectorDialog.cs,FillEncodings,The following statement contains a magic number: firstEncIndex = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.hbox1.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.iconWarning.IconSize = ((global::Gtk.IconSize)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.labelWarnings.WidthRequest = 525;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w6.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w7.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment2.LeftPadding = ((uint)(18));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment3 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment3 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment3.TopPadding = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.alignment3.BottomPadding = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w9.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w9.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w10.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w10.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w10.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w11.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w11.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w12.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w12.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w12.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w14.Position = 4;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w17.Spacing = 10;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w17.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: w17.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 638;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,SelectFileFormatDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\SelectFileFormatDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 246;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,AddMessage,The following statement contains a magic number: box.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,AddMessage,The following statement contains a magic number: lab.WidthRequest = 500;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Run,The following statement contains a magic number: this.Resize (10' 10);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Run,The following statement contains a magic number: this.Resize (10' 10);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Run,The following statement contains a magic number: msgBox.SizeRequest ().Height < 400
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.scrolled.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.scrolled.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.msgBox.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: w6.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: w6.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: w6.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 563;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiMessageDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiMessageDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 346;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,MultiTaskProgressDialog,The following statement contains a magic number: textColumn.MinWidth = 292;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,MultiTaskProgressDialog,The following statement contains a magic number: progressRenderer.Xpad = 4;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,MultiTaskProgressDialog,The following statement contains a magic number: progressRenderer.Ypad = 4;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,MultiTaskProgressDialog,The following statement contains a magic number: progressColumn.MinWidth = 108;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,MultiTaskProgressDialog,The following statement contains a magic number: tag.Indent = 10;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,SetProgress,The following statement contains a magic number: statusStore.SetValue (currentTaskIter' STORE_TaskProgress' System.Convert.ToInt32 (fraction * 100));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,SetProgress,The following statement contains a magic number: statusStore.SetValue (iter' STORE_TaskProgress' System.Convert.ToInt32 (fraction * 100));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Indent,The following statement contains a magic number: tag.Indent = 10 + 15 * (ident - 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Indent,The following statement contains a magic number: tag.Indent = 10 + 15 * (ident - 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.progressScroll.WidthRequest = 400;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.progressScroll.HeightRequest = 150;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.progressScroll.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w5.Padding = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.detailsScroll.HeightRequest = 120;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.detailsScroll.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.detailsTextView.WrapMode = ((global::Gtk.WrapMode)(3));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w7.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w8.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w8.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: w8.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonClose' -7);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 491;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiTaskProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiTaskProgressDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 418;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: fboxTree.BackgroundColor = new Gdk.Color (255' 255' 255);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: fboxTree.BackgroundColor = new Gdk.Color (255' 255' 255);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: fboxTree.BackgroundColor = new Gdk.Color (255' 255' 255);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: var headerBox = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: textHeader.BorderWidth = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: Realized += delegate { 				var c = Style.Background (Gtk.StateType.Normal).ToXwtColor (); 				c.Light += 0.09; 				fboxHeader.BackgroundColor = c.ToGdkColor (); 			};
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: StyleSet += delegate { 				if (IsRealized) { 					var c = Style.Background (Gtk.StateType.Normal).ToXwtColor (); 					c.Light += 0.09; 					fboxHeader.BackgroundColor = c.ToGdkColor (); 				} 			};
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: col0.MinWidth = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: DefaultWidth = 960;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,OptionsDialog,The following statement contains a magic number: DefaultHeight = 680;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The following statement contains a magic number: mainPageSize += pi.Widget.SizeRequest ().Height + 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The following statement contains a magic number: Gtk.VBox box = new VBox (false' 12);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The following statement contains a magic number: box.BorderWidth = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The following statement contains a magic number: box.BorderWidth = 9;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The following statement contains a magic number: a.BorderWidth = 9;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,OptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\OptionsDialog.cs,CreatePageWidget,The following statement contains a magic number: nb.BorderWidth = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,ProgressDialog,The following statement contains a magic number: DefaultHeight = 5;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,ProgressDialog,The following statement contains a magic number: tag.Indent = 10;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Indent,The following statement contains a magic number: tag.Indent = 10 + 15 * (ident - 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Indent,The following statement contains a magic number: tag.Indent = 10 + 15 * (ident - 1);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,OnExpander1Activated,The following statement contains a magic number: GLib.Timeout.Add (100' new GLib.TimeoutHandler (UpdateSize));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.GtkScrolledWindow.HeightRequest = 250;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: w9.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: w11.Spacing = 10;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: w11.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: w11.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 544;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,ProgressDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\ProgressDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 170;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsPanel<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsPanel.cs,CreateMimePanelWidget,The following statement contains a magic number: box.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: HBox hbox = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: VBox vbox = new VBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: warningMessage.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: wl.WidthRequest = 450;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: Alignment align = new Alignment (0.5f' 0.5f' 1f' 1f);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: Alignment align = new Alignment (0.5f' 0.5f' 1f' 1f);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MimeTypePolicyOptionsSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MimeTypePolicyOptionsSection.cs,CreatePanelWidget,The following statement contains a magic number: align.BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiConfigItemOptionsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: Gtk.VBox cbox = new Gtk.VBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,MultiConfigItemOptionsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\MultiConfigItemOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: Gtk.HBox combosBox = new Gtk.HBox (false' 6) { Name = "panelWidgetCombosBox" };
Magic Number,MonoDevelop.Ide.Gui.Dialogs,PolicyOptionsPanel<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\PolicyOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: HBox hbox = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,PolicyOptionsPanel<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\PolicyOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: VBox vbox = new VBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,PolicyOptionsPanel<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\PolicyOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: warningMessage.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,PolicyOptionsPanel<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\PolicyOptionsPanel.cs,CreatePanelWidget,The following statement contains a magic number: wl.WidthRequest = 450;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,GtkAlertDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\GtkAlertDialog.cs,Init,The following statement contains a magic number: this.BorderWidth  = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,GtkAlertDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\GtkAlertDialog.cs,Init,The following statement contains a magic number: this.VBox.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,GtkAlertDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\GtkAlertDialog.cs,Init,The following statement contains a magic number: this.hbox.Spacing     = 12;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,GtkAlertDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\GtkAlertDialog.cs,Init,The following statement contains a magic number: this.hbox.BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewFolderDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewFolderDialog.cs,Build,The following statement contains a magic number: Width = 320;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewFolderDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewFolderDialog.cs,Build,The following statement contains a magic number: folderNameHBox.Margin = 20;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The following statement contains a magic number: Padding = 6;
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The following statement contains a magic number: var mainVBox = new VBox () { Spacing = 6 };
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The following statement contains a magic number: var table = new Table { DefaultColumnSpacing = 6' DefaultRowSpacing = 6 };
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The following statement contains a magic number: var table = new Table { DefaultColumnSpacing = 6' DefaultRowSpacing = 6 };
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The following statement contains a magic number: table.Add (popover' 2' 0);
Magic Number,MonoDevelop.Ide.Gui.Dialogs,NewConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Dialogs\NewConfigurationDialog.cs,Build,The following statement contains a magic number: comboPlatform.WidthRequest = 250;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: this.vbox66.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w3.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w4.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: logContainer.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: logContainer.PackStart (label' false' false' 6);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: this.verbosityCombo.Active = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: logContainer.PackStart (this.verbosityCombo' false' false' 6);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w5.Position = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w6.Position = 5;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w7.Position = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w7.Padding = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: this.hbox44.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: this.vbox67.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w11.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildPanel.cs,Build,The following statement contains a magic number: w13.Position = 7;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.vbox17.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.vbox26.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.vbox18.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.hbox14.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.hbox10.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.vbox65.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: startSectionVbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: startContentVbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: startContentHbox.PackStart (startContentVbox' false' false' 24);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.hbox14.PackStart (this.hbox10' false' false' 24);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.vbox19.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.hbox11.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.vbox20.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: this.hbox11.PackStart (this.vbox20' false' false' 24);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LoadSavePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LoadSavePanel.cs,Build,The following statement contains a magic number: w17.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox72.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment3 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment3 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment3.LeftPadding = ((uint)(24));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment3.BottomPadding = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox5.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: w4.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: w5.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: w8.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.boxUnstable = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.boxUnstable = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.boxUnstable.LeftPadding = ((uint)(24));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox6.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: w11.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: w14.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.hbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: this.hbox3.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AddInsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AddInsOptionsPanel.cs,Build,The following statement contains a magic number: w16.Position = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,StringToColor,The following statement contains a magic number: rgb.Length != 3
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,StringToColor,The following statement contains a magic number: color.Blue = UInt16.Parse (rgb[2]' System.Globalization.NumberStyles.HexNumber);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox6.Spacing = 12;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 8;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.scrolledwindow3.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox14.Spacing = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.vboxPriority.Spacing = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.entryToken.MaxLength = 50;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.hbuttonbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.hbuttonbox2.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w11.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.label.Ypad = 12;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.label.Justify = ((global::Gtk.Justification)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w13.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment1.LeftPadding = ((uint)(12));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.alignment1.TopPadding = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.table6 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.table6 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.table6.RowSpacing = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.table6.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w17.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w18.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w18.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w18.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w19.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w19.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w21.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: this.label12.Justify = ((global::Gtk.Justification)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w22.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w22.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TasksPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TasksOptionsPanel.cs,Build,The following statement contains a magic number: w25.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,KeyBindingsPanel,The following statement contains a magic number: col.Spacing = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,KeyBindingsPanel,The following statement contains a magic number: searchEntry.Changed += delegate { 				processedFilterTerms = searchEntry.Entry.Text.ToLower ().Split (new char [] { ' ' }' StringSplitOptions.RemoveEmptyEntries); 				filterChanged = true; 				if (!filterTimeoutRunning) { 					filterTimeoutRunning = true; 					GLib.Timeout.Add (50' delegate { 						if (!filterChanged) { 							if (filterTimeoutRunning) 								Refilter (); 							filterTimeoutRunning = false; 							return false; 						} 						filterChanged = false; 						return true; 					}); 				}; 			};
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,BindingRenderer_KeyBindingSelected,The following statement contains a magic number: GLib.Timeout.Add (10' delegate { 				accelEntry.GrabFocus (); 				return false; 			});
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,SelectCommand,The following statement contains a magic number: keyTreeView.ScrollToCell (path' keyTreeView.Columns[0]' true' 0.5f' 0f);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.vbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.hbox2.WidthRequest = 300;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.searchEntry.WidthRequest = 250;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.globalWarningBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.alignment1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.warningBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w10.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w14.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w16.Position = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w17.Position = 5;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: this.hbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w20.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w21.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,KeyBindingsPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Build,The following statement contains a magic number: w22.Position = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,CellRendererKeyButtons,The following statement contains a magic number: KeySymbolFont.Size -= (int) Pango.Scale.PangoScale * 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: var xpad = (int)Xpad + 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: int buttonWidth = w + (2 * KeyHPadding);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: int buttonHeight = h + (2 * KeyVPadding);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: var ypad = 2 + ((cellBounds.Height / 2) - (buttonHeight / 2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: var ypad = 2 + ((cellBounds.Height / 2) - (buttonHeight / 2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: var ypad = 2 + ((cellBounds.Height / 2) - (buttonHeight / 2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,HitTest,The following statement contains a magic number: result.ButtonBounds.Inflate (0' 2);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Render,The following statement contains a magic number: int buttonWidth = w + (2 * KeyHPadding);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Render,The following statement contains a magic number: int buttonHeight = h + (2 * KeyVPadding);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Render,The following statement contains a magic number: double y = cell_area.Y + ((cell_area.Height / 2) - (buttonHeight / 2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,Render,The following statement contains a magic number: double y = cell_area.Y + ((cell_area.Height / 2) - (buttonHeight / 2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,GetSize,The following statement contains a magic number: height = h + (KeyVPadding * 2) + 1;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,CellRendererKeyButtons,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\KeyBindingsPanel.cs,GetSize,The following statement contains a magic number: buttonWidth = w + (2 * KeyHPadding);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox13.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w1.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w1.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w1.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w2.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w2.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w2.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.tableRestart = new global::Gtk.Table (((uint)(2))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.tableRestart = new global::Gtk.Table (((uint)(2))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.tableRestart.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: this.tableRestart.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w7.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w9.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w9.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,IDEStyleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\IDEStyleOptionsPanel.cs,Build,The following statement contains a magic number: w10.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: this.alignment1.LeftPadding = ((uint)(24));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: this.infoTable = new global::Gtk.Table (((uint)(5))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: this.infoTable = new global::Gtk.Table (((uint)(5))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: this.infoTable.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: this.infoTable.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w4.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w9.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w9.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w9.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w10.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w10.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w11.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w11.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w11.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w11.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,AuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\AuthorInformationPanel.cs,Build,The following statement contains a magic number: w13.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(5))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(5))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w1.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w1.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w1.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w1.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w2.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w5.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w9.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w10.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w10.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w10.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,GlobalAuthorInformationPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\GlobalAuthorInformationPanel.cs,Build,The following statement contains a magic number: w10.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.columnWidthSpin = new global::Gtk.SpinButton (0' 1000' 1);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.columnWidthSpin.Adjustment.PageIncrement = 10;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.columnWidthSpin.Value = 120;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w3.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.alignment2.TopPadding = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w9.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.alignment1.LeftPadding = ((uint)(12));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.indentWidthSpin = new global::Gtk.SpinButton (1' 50' 1);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.indentWidthSpin.Adjustment.PageIncrement = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.indentWidthSpin.Value = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w10.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w10.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w10.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w10.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w11.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w11.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w12.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w12.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w12.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.tabWidthSpin = new global::Gtk.SpinButton (1' 50' 1);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.tabWidthSpin.Adjustment.PageIncrement = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: this.tabWidthSpin.Value = 4;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w13.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w13.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w13.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w16.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w17.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,TextStylePolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\TextStylePolicyPanel.cs,Build,The following statement contains a magic number: w19.Position = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,GetProgramFilesX86,The following statement contains a magic number: return Environment.GetFolderPath (IntPtr.Size == 8? 				Environment.SpecialFolder.ProgramFilesX86 : Environment.SpecialFolder.ProgramFiles);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w2.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.textview1.WrapMode = ((global::Gtk.WrapMode)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.textview1.PixelsBelowLines = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.textview1.PixelsInsideWrap = 3;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w6.Position = 2;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w7.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MonoRuntimePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MonoRuntimePanel.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,MaintenanceOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\MaintenanceOptionsPanel.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: this.table4 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: this.table4 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: this.table4.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: this.table4.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w1.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w1.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w1.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w1.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w2.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w2.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w3.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w5.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,BuildMessagePanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\BuildMessagePanel.cs,Build,The following statement contains a magic number: this.hbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,SdkLocationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\SdkLocationPanel.cs,SdkLocationWidget,The following statement contains a magic number: var alignment = new Alignment (0f' 0f' 1f' 1f) { LeftPadding = 24 };
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,SdkLocationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\SdkLocationPanel.cs,SdkLocationWidget,The following statement contains a magic number: var vbox = new VBox (false ' 6);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,SdkLocationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\SdkLocationPanel.cs,SdkLocationWidget,The following statement contains a magic number: var locationBox = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,SdkLocationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\SdkLocationPanel.cs,SdkLocationWidget,The following statement contains a magic number: var messageBox = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.Gui.OptionPanels,LogAgentPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.OptionPanels\LogAgentOptionsPanel.cs,LogAgentPanelWidget,The following statement contains a magic number: container.PackEnd (privacyLabel.ToGtkWidget ()' false' false' 30);
Magic Number,MonoDevelop.Ide.Gui.Pads,TaskListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\TaskListPad.cs,TaskListPad,The following statement contains a magic number: (string)row[2] == className
Magic Number,MonoDevelop.Ide.Gui.Pads,TaskListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\TaskListPad.cs,OnContentSwitched,The following statement contains a magic number: string className = (string)switcherCombo.Model.GetValue (iter' 2);
Magic Number,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,MakeHBox,The following statement contains a magic number: var btnBox = new HBox (false' 2);
Magic Number,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,Initialize,The following statement contains a magic number: searchEntry.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,AddColumns,The following statement contains a magic number: descriptionCellRenderer.PreferedMaxWidth = IdeApp.Workbench.RootWindow.Allocation.Width / 3;
Magic Number,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,AddTasks,The following statement contains a magic number: (n++ % 100) == 0
Magic Number,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,SetInitialOutputViewSize,The following statement contains a magic number: pos = Math.Max(30' Math.Min(pos' controlWidth - 30));
Magic Number,MonoDevelop.Ide.Gui.Pads,ErrorListPad,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads\ErrorListPad.cs,SetInitialOutputViewSize,The following statement contains a magic number: pos = Math.Max(30' Math.Min(pos' controlWidth - 30));
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,SolutionFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SolutionFolderNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -1000;
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,FolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\FolderNodeBuilder.cs,HasChildNodes,The following statement contains a magic number: project.Files.Count > 500
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectFolderNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -100;
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectNodeBuilder.cs,OnAddFile,The following statement contains a magic number: args.CommonProject != null && args.Count > 2 && args.SingleVirtualDirectory
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,ProjectReferenceFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ProjectReferenceFolderNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -1000;
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesBuilderExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,BuildNode,The following statement contains a magic number: gicon = nodeInfo.Icon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,ShowAllFilesBuilderExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\ShowAllFilesBuilderExtension.cs,BuildNode,The following statement contains a magic number: gicon = nodeInfo.ClosedIcon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,SystemFileNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\SystemFileNodeBuilder.cs,BuildNode,The following statement contains a magic number: gicon = nodeInfo.Icon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,UnknownEntryNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\UnknownEntryNodeBuilder.cs,BuildNode,The following statement contains a magic number: gicon = nodeInfo.Icon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,PortableFrameworkSubsetNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ProjectPad\PortableFrameworkSubsetNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -1000;
Magic Number,MonoDevelop.Ide.Gui.Pads.ProjectPad,GettingStartedNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.GettingStarted\GettingStartedNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -2000;
Magic Number,MonoDevelop.Ide.StandardHeader,StandardHeaderPolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderPolicyPanel.cs,StandardHeaderPolicyPanelWidget,The following statement contains a magic number: treeviewTemplates.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.StandardHeader,StandardHeaderPolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderPolicyPanel.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.StandardHeader,StandardHeaderPolicyPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.StandardHeader\StandardHeaderPolicyPanel.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnInitialize,The following statement contains a magic number: tree.AddGestureMagnifyHandler ((sender' args) => { 					Zoom += Zoom * (args.Magnification / 4d); 				});
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnInitialize,The following statement contains a magic number: n<16
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetIconCellData,The following statement contains a magic number: var img = info.Icon != null && info.Icon != CellRendererImage.NullImage && info.DisabledStyle ? info.Icon.WithAlpha (0.5) : info.Icon;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,SetIconCellData,The following statement contains a magic number: cell.ImageExpanderClosed = info.ClosedIcon != null && info.ClosedIcon != CellRendererImage.NullImage && info.DisabledStyle ? info.ClosedIcon.WithAlpha (0.5) : info.ClosedIcon;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,ShowStatusMessage,The following statement contains a magic number: rect.Y += 2;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnZoomChanged,The following statement contains a magic number: int expanderSize = (int) (12 * Zoom);
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnZoomChanged,The following statement contains a magic number: expanderSize = 3;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnZoomChanged,The following statement contains a magic number: expanderSize < 3
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnZoomChanged,The following statement contains a magic number: expanderSize = 15;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnZoomChanged,The following statement contains a magic number: expanderSize > 15
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnZoomChanged,The following statement contains a magic number: expanderSize != 12
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,UpdateZoomIn,The following statement contains a magic number: cinfo.Enabled = zoom < ZOOM_MAX - 0.000001d;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,UpdateZoomOut,The following statement contains a magic number: cinfo.Enabled = zoom > ZOOM_MIN + 0.000001d;
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,StartLabelEdit,The following statement contains a magic number: GLib.Timeout.Add (20' new GLib.TimeoutHandler (wantFocus));
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeViewTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnDragBegin,The following statement contains a magic number: Gtk.Drag.SetIconPixbuf (context' dragIcon != null ? dragIcon.ToPixbuf (Gtk.IconSize.Menu) : null' -10' -10);
Magic Number,MonoDevelop.Ide.Gui.Components,ExtensibleTreeViewTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,OnDragBegin,The following statement contains a magic number: Gtk.Drag.SetIconPixbuf (context' dragIcon != null ? dragIcon.ToPixbuf (Gtk.IconSize.Menu) : null' -10' -10);
Magic Number,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,Render,The following statement contains a magic number: int ty = cell_area.Y + (cell_area.Height - h) / 2;
Magic Number,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,Render,The following statement contains a magic number: ctx.DrawImage (widget' img' x' cell_area.Y + (cell_area.Height - img.Height) / 2);
Magic Number,MonoDevelop.Ide.Gui.Components,CustomCellRendererText,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ExtensibleTreeView.cs,GetSize,The following statement contains a magic number: width += (int)Xpad * 2;
Magic Number,MonoDevelop.Ide.Gui.Components,TreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TreeBuilder.cs,GetNodeInfo,The following statement contains a magic number: gicon = nodeInfo.Icon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Gui.Components,TreeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\TreeBuilder.cs,GetNodeInfo,The following statement contains a magic number: gicon = nodeInfo.ClosedIcon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Gui.Components,PadTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\PadTreeView.cs,OnSizeAllocated,The following statement contains a magic number: int delta = v > 2? 0 : 1;
Magic Number,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,LogView,The following statement contains a magic number: normalTag.LeftMargin = 10;
Magic Number,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,InitSearchWidget,The following statement contains a magic number: searchBox.BorderWidth = 4;
Magic Number,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,InitSearchWidget,The following statement contains a magic number: searchBox.PackStart (new Label (GettextCatalog.GetString ("Search:"))' false' false' 4);
Magic Number,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,addQueuedUpdate,The following statement contains a magic number: GLib.Timeout.Add (50' outputDispatcher);
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following statement contains a magic number: state == 3 && fileNameEnd - fileNameStart > 0
Magic Number,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,OnButtonPressEvent,The following statement contains a magic number: evnt.Type == Gdk.EventType.ButtonPress && evnt.Button == 3
Magic Number,MonoDevelop.Ide.Gui.Components,IndentTracker,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,Indent,The following statement contains a magic number: tag.LeftMargin = 10 + 15 * (indent - 1);
Magic Number,MonoDevelop.Ide.Gui.Components,IndentTracker,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,Indent,The following statement contains a magic number: tag.LeftMargin = 10 + 15 * (indent - 1);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectFileEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectFileEntry.cs,ProjectFileEntry,The following statement contains a magic number: PackStart (button' false' false' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,EnvVarList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\EnvVarList.cs,EnvVarList,The following statement contains a magic number: TreeViewColumn col = list.AppendColumn (GettextCatalog.GetString ("Variable")' crt' "text"' 0' "foreground"' 3);
Magic Number,MonoDevelop.Ide.Gui.Components,EnvVarList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\EnvVarList.cs,EnvVarList,The following statement contains a magic number: col = list.AppendColumn (GettextCatalog.GetString ("Value")' crv' "text"' 1' "editable"' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,EnvVarList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\EnvVarList.cs,StoreValues,The following statement contains a magic number: bool inserter = !(bool) store.GetValue (it' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,EnvVarList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\EnvVarList.cs,OnExpEdited,The following statement contains a magic number: bool isInserter = !(bool) store.GetValue (it' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,EnvVarList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\EnvVarList.cs,OnExpEdited,The following statement contains a magic number: store.SetValue (it' 2' true);
Magic Number,MonoDevelop.Ide.Gui.Components,EnvVarList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\EnvVarList.cs,OnExpEdited,The following statement contains a magic number: store.SetValue (it' 3' null);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,ProjectSelectorWidget,The following statement contains a magic number: col.AddAttribute (ctog' "active"' 3);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,ProjectSelectorWidget,The following statement contains a magic number: col.AddAttribute (ctog' "visible"' 4);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,HandleTreeSelectionChanged,The following statement contains a magic number: currentSelection = (WorkspaceObject) store.GetValue (it' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,SetSelection,The following statement contains a magic number: WorkspaceObject item = (WorkspaceObject) store.GetValue (it' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,SetSelection,The following statement contains a magic number: bool val = (bool) store.GetValue (it' 3);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,SetSelection,The following statement contains a magic number: store.SetValue (it' 3' newVal);
Magic Number,MonoDevelop.Ide.Gui.Components,ProjectSelectorWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\ProjectSelectorWidget.cs,OnToggled,The following statement contains a magic number: var ob = (WorkspaceObject) store.GetValue (iter' 2);
Magic Number,MonoDevelop.Ide.Gui.Components,PriorityList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\PriorityList.cs,Build,The following statement contains a magic number: this.hbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Components,PriorityList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\PriorityList.cs,Build,The following statement contains a magic number: this.controls.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Components,FadeOutEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: AddImage (icon.WithAlpha (((double)(9-n))/10.0));
Magic Number,MonoDevelop.Ide.Gui.Components,FadeOutEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: AddImage (icon.WithAlpha (((double)(9-n))/10.0));
Magic Number,MonoDevelop.Ide.Gui.Components,FadeOutEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: AddPause (60);
Magic Number,MonoDevelop.Ide.Gui.Components,FadeOutEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: n<10
Magic Number,MonoDevelop.Ide.Gui.Components,FadeInEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: AddImage (icon.WithAlpha (((double)(n))/10.0));
Magic Number,MonoDevelop.Ide.Gui.Components,FadeInEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: AddPause (60);
Magic Number,MonoDevelop.Ide.Gui.Components,FadeInEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: n<10
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: var img1 = next.WithAlpha (((double)(n))/10.0);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: var img2 = prev.WithAlpha (((double)(9-n))/10.0);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: var img2 = prev.WithAlpha (((double)(9-n))/10.0);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: ib.Context.DrawImage (img1' 0' 0' ((double)(n)) / 10.0);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: ib.Context.DrawImage (img2' 0' 0' ((double)(9 - n)) / 10.0);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: ib.Context.DrawImage (img2' 0' 0' ((double)(9 - n)) / 10.0);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: AddPause (60);
Magic Number,MonoDevelop.Ide.Gui.Components,MorphEffect,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\AnimatedIcon.cs,OnRenderFrames,The following statement contains a magic number: n<10
Magic Number,MonoDevelop.Ide.Gui.Components,XwtInfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,XwtInfoBar,The following statement contains a magic number: var mainBox = new HBox { 				BackgroundColor = Styles.NotificationBar.BarBackgroundColor' 				MinHeight = 30 			};
Magic Number,MonoDevelop.Ide.Gui.Components,XwtInfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,XwtInfoBar,The following statement contains a magic number: mainBox.PackStart (new ImageView (ImageService.GetIcon (Stock.Information' Gtk.IconSize.Menu))' marginLeft: 11);
Magic Number,MonoDevelop.Ide.Gui.Components,XwtInfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,XwtInfoBar,The following statement contains a magic number: var closeButton = new InfoBarCloseButton { 				Image = closeImageInactive' 				MarginRight = 9' 			};
Magic Number,MonoDevelop.Ide.Gui.Components,XwtInfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,XwtInfoBar,The following statement contains a magic number: switch (item.Kind) 				{ 				case InfoBarItemKind.Button: 					var btn = new InfoBarButton { 						Label = item.Title' 						LabelColor = Styles.NotificationBar.ButtonLabelColor' 						Style = ButtonStyle.Normal'  						MinWidth = 77' 					};  					btn.AddAction (item.Action); 					if (item.CloseAfter) 						btn.AddAction (() => Dispose ()); 					toAdd = btn; 					break; 				// Creates a clickable hyperlink 				case InfoBarItemKind.Hyperlink: 					var link = new InfoBarLink { 						Text = item.Title' 					}; 					link.AddAction (item.Action); 					if (item.CloseAfter) 						link.AddAction (() => Dispose ()); 					toAdd = link; 					break; 				// We only have 1 close button' we attach all close actions to it 				case InfoBarItemKind.Close: 					closeButton.AddAction (item.Action); 					break; 				}
Magic Number,MonoDevelop.Ide.Gui.Components,InfoBarCloseButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,InfoBarCloseButton,The following statement contains a magic number: Opacity = 0.5;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The following statement contains a magic number: selectedSearchColor = searchColor.AddLight (-0.2);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The following statement contains a magic number: color1.L -= 0.5;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The following statement contains a magic number: color1.L + 0.5 > 1.0
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResult.cs,CreateMarkupAsync,The following statement contains a magic number: delta < 0.1
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SetButtonIcon,The following statement contains a magic number: Alignment alignment = new Alignment (0.5f' 0.5f' 0f' 0f);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SetButtonIcon,The following statement contains a magic number: Alignment alignment = new Alignment (0.5f' 0.5f' 0f' 0f);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,SetButtonIcon,The following statement contains a magic number: HBox hbox = new HBox (false' 2);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,FindInFilesDialog,The following statement contains a magic number: updateTimer = GLib.Timeout.Add (750' delegate { 				UpdateSensitivity (); 				return true; 			});
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,TableAddRow,The following statement contains a magic number: tr.XOptions = (AttachOptions) 4;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,TableAddRow,The following statement contains a magic number: tr.YOptions = (AttachOptions) 4;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,TableAddRow,The following statement contains a magic number: tr.XOptions = (AttachOptions) 4;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,TableAddRow,The following statement contains a magic number: tr.YOptions = (AttachOptions) 4;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,TableAddRow,The following statement contains a magic number: tr.RightAttach = 2;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width = Math.Max (480' requisition.Width);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,StoreHistory,The following statement contains a magic number: const int limit = 20;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.hbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.toggleFindInFiles.Relief = ((global::Gtk.ReliefStyle)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.toggleReplaceInFiles.Relief = ((global::Gtk.ReliefStyle)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w4.Position = 2;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.tableFindAndReplace = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.tableFindAndReplace = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.tableFindAndReplace.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.tableFindAndReplace.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w6.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w8.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w8.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w9.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w10.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w10.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w10.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w13.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w14.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w14.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w14.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w15.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w15.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w16.Position = 2;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w18.Spacing = 6;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w18.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w18.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonClose' -7);
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: w21.Position = 2;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 456;
Magic Number,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 348;
Magic Number,MonoDevelop.Ide.FindInFiles,WholeSolutionScope,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\Scope.cs,GetFiles,The following statement contains a magic number: options.MaxDegreeOfParallelism = 4;
Magic Number,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,The following statement contains a magic number: monitor.BeginTask (scope.GetDescription (filter' pattern' replacePattern)' 150);
Magic Number,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,The following statement contains a magic number: int step = Math.Max (1' totalWork / 50);
Magic Number,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,FindAll,The following statement contains a magic number: monitor.Step (2);
Magic Number,MonoDevelop.Ide.FindInFiles,FindReplace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindReplace.cs,Search,The following statement contains a magic number: var buffer = new RingBufferReader(reader' pattern.Length + 2);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: var projectColumn = new TreeViewColumn { 				Resizable = true' 				SortColumnId = 1' 				Title = GettextCatalog.GetString ("Project")' 				Sizing = TreeViewColumnSizing.Fixed' 				FixedWidth = 100 			};
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: var fileNameColumn = new TreeViewColumn { 				Resizable = true' 				SortColumnId = 2' 				Title = GettextCatalog.GetString ("File")' 				Sizing = TreeViewColumnSizing.Fixed' 				FixedWidth = 200 			};
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: var fileNameColumn = new TreeViewColumn { 				Resizable = true' 				SortColumnId = 2' 				Title = GettextCatalog.GetString ("File")' 				Sizing = TreeViewColumnSizing.Fixed' 				FixedWidth = 200 			};
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: textColumn.FixedWidth = 300;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: pathColumn.SortColumnId = 3;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: pathColumn.FixedWidth = 500;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: store.SetSortFunc (2' CompareFileNames);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,SearchResultWidget,The following statement contains a magic number: store.SetSortFunc (3' CompareFilePaths);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,BeginProgress,The following statement contains a magic number: newStore.SetSortFunc (2' CompareFileNames);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,BeginProgress,The following statement contains a magic number: newStore.SetSortFunc (3' CompareFilePaths);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,BeginProgress,The following statement contains a magic number: newStore.SetSortColumnId (2' SortType.Ascending);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColor,The following statement contains a magic number: color1.L += IdeApp.Preferences.UserInterfaceTheme == Theme.Light ? -0.5 : 0.5;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColor,The following statement contains a magic number: color1.L += IdeApp.Preferences.UserInterfaceTheme == Theme.Light ? -0.5 : 0.5;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColor,The following statement contains a magic number: color1.L += IdeApp.Preferences.UserInterfaceTheme == Theme.Light ? 0.5 : -0.5;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColor,The following statement contains a magic number: color1.L += IdeApp.Preferences.UserInterfaceTheme == Theme.Light ? 0.5 : -0.5;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColor,The following statement contains a magic number: delta < 0.1
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColors,The following statement contains a magic number: idx + 7 >= markup.Length
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColors,The following statement contains a magic number: offset = idx + 7;
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,AdjustColors,The following statement contains a magic number: string colorStr = markup.Substring (idx' 7);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorToPangoMarkup,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"' color.Red >> 8' color.Green >> 8' color.Blue >> 8);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorToPangoMarkup,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"' color.Red >> 8' color.Green >> 8' color.Blue >> 8);
Magic Number,MonoDevelop.Ide.FindInFiles,SearchResultWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorToPangoMarkup,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"' color.Red >> 8' color.Green >> 8' color.Blue >> 8);
Magic Number,MonoDevelop.Ide.FindInFiles,PangoHelper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorToPangoMarkup,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"' color.Red >> 8' color.Green >> 8' color.Blue >> 8);
Magic Number,MonoDevelop.Ide.FindInFiles,PangoHelper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorToPangoMarkup,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"' color.Red >> 8' color.Green >> 8' color.Blue >> 8);
Magic Number,MonoDevelop.Ide.FindInFiles,PangoHelper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\SearchResultWidget.cs,ColorToPangoMarkup,The following statement contains a magic number: return string.Format ("#{0:X2}{1:X2}{2:X2}"' color.Red >> 8' color.Green >> 8' color.Blue >> 8);
Magic Number,MonoDevelop.Ide.Execution,ExecutionModeCommandService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeCommandService.cs,ExecuteCommand,The following statement contains a magic number: list.Count > 10
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,SuggestName,The following statement contains a magic number: n<100
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,GetNamePosfix,The following statement contains a magic number: n < 2
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.boxEditor.Spacing = 9;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.boxEditor.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.boxModeSelector.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.hbox5.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.comboTargetMode.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.boxSave.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.boxName.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w12.Position = 2;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w13.Position = 3;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w14.Position = 2;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w15.Position = 3;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w16.Position = 2;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w18.Spacing = 10;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w18.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: w18.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 655;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 525;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,CustomExecutionModeManagerDialog,The following statement contains a magic number: listModes.AppendColumn (GettextCatalog.GetString ("Execution Mode")' crt' "text"' 2);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,CustomExecutionModeManagerDialog,The following statement contains a magic number: listModes.AppendColumn (GettextCatalog.GetString ("Available for")' crt' "text"' 3);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,CustomExecutionModeManagerDialog,The following statement contains a magic number: treeState = new TreeViewState (listModes' 4);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(9));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: w6.Position = 2;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: w10.Spacing = 10;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: w10.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: w10.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -7);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 645;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 409;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 9;
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(2))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w1.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w1.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w2.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w2.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Execution,CustomExecutionModeWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeWidget.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.GtkScrolledWindow.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.GtkScrolledWindow.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.labelOps.WidthChars = 50;
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: w6.Spacing = 10;
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: w6.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: w6.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -7);
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.DefaultWidth = 501;
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersPreview,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersPreview.cs,Build,The following statement contains a magic number: this.DefaultHeight = 341;
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersWidget.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersWidget.cs,Build,The following statement contains a magic number: this.hbox1.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Execution,MonoExecutionParametersWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\MonoExecutionParametersWidget.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Execution,ExecutionModeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeSelectorDialog.cs,ExecutionModeSelectorDialog,The following statement contains a magic number: Width = 500;
Magic Number,MonoDevelop.Ide.Execution,ExecutionModeSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\ExecutionModeSelectorDialog.cs,ExecutionModeSelectorDialog,The following statement contains a magic number: Height = 400;
Magic Number,MonoDevelop.Ide.Execution,RunWithCustomParametersDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunWithCustomParametersDialog.cs,RunWithCustomParametersDialog,The following statement contains a magic number: Width = 650;
Magic Number,MonoDevelop.Ide.Execution,RunWithCustomParametersDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\RunWithCustomParametersDialog.cs,RunWithCustomParametersDialog,The following statement contains a magic number: Height = 400;
Magic Number,MonoDevelop.Components,TabLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TabLabel.cs,TabLabel,The following statement contains a magic number: icon.Xpad = 2;
Magic Number,MonoDevelop.Components,TabLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TabLabel.cs,OnButtonReleaseEvent,The following statement contains a magic number: evnt.Button == 2 && CloseClicked != null
Magic Number,MonoDevelop.Components,CellRendererComboBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererComboBox.cs,CellRendererComboBox,The following statement contains a magic number: rowHeight = dummyEntry.SizeRequest ().Height + (2 * dummyEntry.Style?.YThickness ?? 0);
Magic Number,MonoDevelop.Components,TreeViewCellContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TreeViewCellContainer.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height += 2 * box.Child.Style?.YThickness ?? 0;
Magic Number,MonoDevelop.Components,MenuButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MenuButton.cs,MenuButton,The following statement contains a magic number: box.Spacing = 6;
Magic Number,MonoDevelop.Components,TooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipWindow.cs,TooltipWindow,The following statement contains a magic number: this.BorderWidth = 2;
Magic Number,MonoDevelop.Components,TooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipWindow.cs,OnSizeAllocated,The following statement contains a magic number: const int edgeGap = 2;
Magic Number,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The following statement contains a magic number: w8.Position = 3;
Magic Number,MonoDevelop.Components,FolderListSelector,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FolderListSelector.cs,Build,The following statement contains a magic number: w9.Position = 4;
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,InfoBar,The following statement contains a magic number: BorderWidth = 6;
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,InfoBar,The following statement contains a magic number: Spacing = 6;
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,InfoBar,The following statement contains a magic number: ActionArea = new VButtonBox () { 				Spacing = 6' 				LayoutStyle = ButtonBoxStyle.Start 			};
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,SetImage,The following statement contains a magic number: messageHBox.PackEnd (img' false' false' 12);
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,SetImage,The following statement contains a magic number: img.SetAlignment (0.5f' 0.5f);
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,SetImage,The following statement contains a magic number: img.SetAlignment (0.5f' 0.5f);
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,SetMessageLabel,The following statement contains a magic number: var l = new Gtk.Label () { 				Wrap = true' 				Selectable = true' 				Yalign = 0.5f' 				Xalign = 0f' 				Markup = markup' 				Style = Style 			};
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,SetMessageLabel,The following statement contains a magic number: l.SizeAllocated += delegate (object o' SizeAllocatedArgs args) { 				l.WidthRequest = Math.Max (350' args.Allocation.Width - 15); 			};
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,SetMessageLabel,The following statement contains a magic number: l.SizeAllocated += delegate (object o' SizeAllocatedArgs args) { 				l.WidthRequest = Math.Max (350' args.Allocation.Width - 15); 			};
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintFlatBox (Style' evnt.Window' StateType.Normal' ShadowType.Out' evnt.Area' this' "tooltip"'  				Allocation.X + 1' Allocation.Y + 1' Allocation.Width - 2' Allocation.Height - 2);
Magic Number,MonoDevelop.Components,InfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InfoBar.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintFlatBox (Style' evnt.Window' StateType.Normal' ShadowType.Out' evnt.Area' this' "tooltip"'  				Allocation.X + 1' Allocation.Y + 1' Allocation.Width - 2' Allocation.Height - 2);
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,GetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}"' 			                     (byte)(((double)color.Red / ushort.MaxValue) * 255)' 			                     (byte)(((double)color.Green / ushort.MaxValue) * 255)' 			                     (byte)(((double)color.Blue / ushort.MaxValue) * 255));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,GetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}"' 			                     (byte)(((double)color.Red / ushort.MaxValue) * 255)' 			                     (byte)(((double)color.Green / ushort.MaxValue) * 255)' 			                     (byte)(((double)color.Blue / ushort.MaxValue) * 255));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,GetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}"' 			                     (byte)(((double)color.Red / ushort.MaxValue) * 255)' 			                     (byte)(((double)color.Green / ushort.MaxValue) * 255)' 			                     (byte)(((double)color.Blue / ushort.MaxValue) * 255));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.R * 255d)' (byte)(color.G * 255d)' (byte)(color.B * 255d));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.R * 255d)' (byte)(color.G * 255d)' (byte)(color.B * 255d));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.R * 255d)' (byte)(color.G * 255d)' (byte)(color.B * 255d));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.Red * 255d)' (byte)(color.Green * 255d)' (byte)(color.Blue * 255d));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.Red * 255d)' (byte)(color.Green * 255d)' (byte)(color.Blue * 255d));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.Red * 255d)' (byte)(color.Green * 255d)' (byte)(color.Blue * 255d));
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,GetSize,The following statement contains a magic number: width = height = 16;
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,ScheduleHideTooltip,The following statement contains a magic number: data.LeaveTimer = GLib.Timeout.Add (50' delegate { 				data.LeaveTimer = 0; 				HideTooltip (tree); 				return false; 			});
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,HandleMotionNotifyEvent,The following statement contains a magic number: data.ShowTimer = GLib.Timeout.Add (300' delegate { 				data.ShowTimer = 0; 				int ox' oy; 				tree.BinWindow.GetOrigin (out ox' out oy); 				Gdk.Rectangle rect = tree.GetCellArea (path' col); 				data.Tooltip = new CellTooltipWindow (tree' col' path); 				if (rect.X + data.Tooltip.SizeRequest ().Width > tree.Allocation.Width) { 					data.Tooltip.Move (ox + rect.X - 1' oy + rect.Y); 					data.Tooltip.ShowAll (); 				} else { 					data.Tooltip.Destroy (); 					data.Tooltip = null; 				} 				return false; 			});
Magic Number,MonoDevelop.Components,GtkUtil,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,EntryButtonPressHandler,The following statement contains a magic number: args.Event.Button == 3
Magic Number,MonoDevelop.Components,CellTooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,CellTooltipWindow,The following statement contains a magic number: rect.Inflate (2' 2);
Magic Number,MonoDevelop.Components,CellTooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,CellTooltipWindow,The following statement contains a magic number: rect.Inflate (2' 2);
Magic Number,MonoDevelop.Components,CellTooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,CellTooltipWindow,The following statement contains a magic number: SetSizeRequest (x' th + 2);
Magic Number,MonoDevelop.Components,CellTooltipWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkUtil.cs,OnExposeEvent,The following statement contains a magic number: Gdk.Rectangle bgrect = new Gdk.Rectangle (x' expose.Y' wi' expose.Height - 2);
Magic Number,MonoDevelop.Components,MiniButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MiniButton.cs,MiniButton,The following statement contains a magic number: HBox box = new HBox (false' 3);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: alignment = new Alignment (0.5f' 0.5f' 1f' 0f);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: alignment = new Alignment (0.5f' 0.5f' 1f' 0f);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: alignment.SetPadding (1' 1' 3' 3);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: alignment.SetPadding (1' 1' 3' 3);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: entryAlignment = new Gtk.Alignment (0.5f' 0.5f' 1f' 1f);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: entryAlignment = new Gtk.Alignment (0.5f' 0.5f' 1f' 1f);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: alignment.SetPadding (0' 0' 3' 3);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,BuildWidget,The following statement contains a magic number: alignment.SetPadding (0' 0' 3' 3);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ShowHideButtons,The following statement contains a magic number: entryAlignment.RightPadding = (uint) (!clear_button.Visible && roundedShape ? 6 : 0);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ShowHideButtons,The following statement contains a magic number: entryAlignment.LeftPadding = (uint) (!filter_button.Visible && roundedShape ? 6 : 0);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnInnerEntryChanged,The following statement contains a magic number: changed_timeout_id = GLib.Timeout.Add (25' OnChangedTimeout);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,UpdateStyle,The following statement contains a magic number: var h = entry.SizeRequest ().Height + entry.Style.Ythickness * 2;
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,UpdateStyle,The following statement contains a magic number: box.BorderWidth = (uint)(diff / 2);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintFlatBox (Style' GdkWindow' entry.State' ShadowType.None' 					                    evnt.Area' this' "entry_bg"' alloc.X + 2' alloc.Y + 2' alloc.Width - 4' alloc.Height - 4);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintFlatBox (Style' GdkWindow' entry.State' ShadowType.None' 					                    evnt.Area' this' "entry_bg"' alloc.X + 2' alloc.Y + 2' alloc.Width - 4' alloc.Height - 4);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintFlatBox (Style' GdkWindow' entry.State' ShadowType.None' 					                    evnt.Area' this' "entry_bg"' alloc.X + 2' alloc.Y + 2' alloc.Width - 4' alloc.Height - 4);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintFlatBox (Style' GdkWindow' entry.State' ShadowType.None' 					                    evnt.Area' this' "entry_bg"' alloc.X + 2' alloc.Y + 2' alloc.Width - 4' alloc.Height - 4);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: RoundBorder (ctx' alloc.X + 0.5' alloc.Y + 0.5' alloc.Width - 1' alloc.Height - 1);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: RoundBorder (ctx' alloc.X + 0.5' alloc.Y + 0.5' alloc.Width - 1' alloc.Height - 1);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,RoundBorder,The following statement contains a magic number: double r = h / 2;
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + r' y + r' r' Math.PI / 2' Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + r' y + r' r' Math.PI / 2' Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + w - r' y + r' r' Math.PI + Math.PI / 2' Math.PI + Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Components,SearchEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + w - r' y + r' r' Math.PI + Math.PI / 2' Math.PI + Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: double blend = 0.5;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: int aR = a.Red >> 8;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: int aG = a.Green >> 8;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: int aB = a.Blue >> 8;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: int bR = b.Red >> 8;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: int bG = b.Green >> 8;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,ColorBlend,The following statement contains a magic number: int bB = b.Blue >> 8;
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: evnt.Window.DrawLayout (text_gc' 2' (SizeRequest ().Height - height) / 2' layout);
Magic Number,MonoDevelop.Components,FramelessEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SearchEntry.cs,OnExposeEvent,The following statement contains a magic number: evnt.Window.DrawLayout (text_gc' 2' (SizeRequest ().Height - height) / 2' layout);
Magic Number,MonoDevelop.Components,HoverImageButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HoverImageButton.cs,HoverImageButton,The following statement contains a magic number: Gtk.Alignment al = new Alignment (0.5f' 0.5f' 0f' 0f);
Magic Number,MonoDevelop.Components,HoverImageButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HoverImageButton.cs,HoverImageButton,The following statement contains a magic number: Gtk.Alignment al = new Alignment (0.5f' 0.5f' 0f' 0f);
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,SetAccessibilityFrame,The following statement contains a magic number: int height = Allocation.Height - topPadding - bottomPadding + buttonPadding * 2;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: int textTopPadding = topPadding + (height - textHeight) / 2;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: focusRect = new Gdk.Rectangle (x - padding' 0' itemWidth + (padding * 2) '0);
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: int iy = (height - (int)leftPath [i].DarkIcon.Height) / 2 + topPadding;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintVline (Style' GdkWindow' State' evnt.Area' this' ""' ypos' ypos + height' xpos - arrowSize / 2);
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: focusRect = new Gdk.Rectangle (x - padding' 0' itemWidth + (padding * 2)' 0);
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (0' Allocation.Height - 0.5);
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The following statement contains a magic number: int focusHeight = Allocation.Height - topPadding - bottomPadding + buttonPadding * 2;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,DrawPathSeparator,The following statement contains a magic number: ctx.LineTo (x + arrowSize' y + size / 2);
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,DrawButtonBorder,The following statement contains a magic number: double height = Allocation.Height - topPadding - bottomPadding + buttonPadding * 2;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,ReduceWidths,The following statement contains a magic number: int minItemWidth = 30;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,ShowMenu,The following statement contains a magic number: menuWidget.Hidden += delegate { 				menuVisible = false; 				QueueDraw (); 				 				//FIXME: for some reason the menu's children don't get activated if we destroy  				//directly here' so use a timeout to delay it 				hideTimeout = GLib.Timeout.Add (100' delegate { 					hideTimeout = 0; 					HideMenu (); 					return false; 				}); 			};
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,PositionWidget,The following statement contains a magic number: width = geomWidth - spacing * 2;
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,PositionWidget,The following statement contains a magic number: width >= geomWidth - spacing * 2
Magic Number,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,CreateWidthArray,The following statement contains a magic number: int maxIconHeight = 16;
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width += ((int)BorderWidth + frame_width) * 2;
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height += ((int)BorderWidth + frame_width) * 2;
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,OnSizeAllocated,The following statement contains a magic number: child_allocation = new Gdk.Rectangle (allocation.X + border' 			                                      allocation.Y + border' 			                                      (int)Math.Max (1' allocation.Width - border * 2)' 			                                      (int)Math.Max (1' allocation.Height - border * 2));
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,OnSizeAllocated,The following statement contains a magic number: child_allocation = new Gdk.Rectangle (allocation.X + border' 			                                      allocation.Y + border' 			                                      (int)Math.Max (1' allocation.Width - border * 2)' 			                                      (int)Math.Max (1' allocation.Height - border * 2));
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,DrawFrame,The following statement contains a magic number: int y = child_allocation.Y - 2 * frame_width - 1;
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,DrawFrame,The following statement contains a magic number: int width = child_allocation.Width + 2 * frame_width;
Magic Number,MonoDevelop.Components,RoundedFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrame.cs,DrawFrame,The following statement contains a magic number: int height = child_allocation.Height + 3 * frame_width;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CairoColorToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CairoColorToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,CairoColorToGdkColor,The following statement contains a magic number: return new Gdk.Color ((byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GdkColorToCairoColor,The following statement contains a magic number: return new Cairo.Color(                 (double)(color.Red >> 8) / 255.0'                 (double)(color.Green >> 8) / 255.0'                 (double)(color.Blue >> 8) / 255.0'                 alpha);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GdkColorToCairoColor,The following statement contains a magic number: return new Cairo.Color(                 (double)(color.Red >> 8) / 255.0'                 (double)(color.Green >> 8) / 255.0'                 (double)(color.Blue >> 8) / 255.0'                 alpha);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GdkColorToCairoColor,The following statement contains a magic number: return new Cairo.Color(                 (double)(color.Red >> 8) / 255.0'                 (double)(color.Green >> 8) / 255.0'                 (double)(color.Blue >> 8) / 255.0'                 alpha);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GdkColorToCairoColor,The following statement contains a magic number: return new Cairo.Color(                 (double)(color.Red >> 8) / 255.0'                 (double)(color.Green >> 8) / 255.0'                 (double)(color.Blue >> 8) / 255.0'                 alpha);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GdkColorToCairoColor,The following statement contains a magic number: return new Cairo.Color(                 (double)(color.Red >> 8) / 255.0'                 (double)(color.Green >> 8) / 255.0'                 (double)(color.Blue >> 8) / 255.0'                 alpha);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GdkColorToCairoColor,The following statement contains a magic number: return new Cairo.Color(                 (double)(color.Red >> 8) / 255.0'                 (double)(color.Green >> 8) / 255.0'                 (double)(color.Blue >> 8) / 255.0'                 alpha);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbToColor,The following statement contains a magic number: return RgbaToColor ((rgbColor << 8) | 0x000000ff);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RgbaToColor,The following statement contains a magic number: return new Cairo.Color (                 (byte)(rgbaColor >> 24) / 255.0'                 (byte)(rgbaColor >> 16) / 255.0'                 (byte)(rgbaColor >> 8) / 255.0'                 (byte)(rgbaColor & 0x000000ff) / 255.0);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorIsDark,The following statement contains a magic number: return b < 0.5;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,HsbFromColor,The following statement contains a magic number: brightness = (max + min) / 2;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,HsbFromColor,The following statement contains a magic number: Math.Abs(max - min) < 0.0001
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: m2 = brightness <= 0.5                 ? brightness * (1 + saturation)                 : brightness + saturation - brightness * saturation;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: m1 = 2 * brightness - m2;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: hue_shift[0] = hue + 120;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: hue_shift[2] = hue - 120;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: hue_shift[2] = hue - 120;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: color_shift[0] = color_shift[1] = color_shift[2] = brightness;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: i = saturation == 0 ? 3 : 0;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: m3 = Modula(m3' 360);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: m3 > 360
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: color_shift[i] = m1 + (m2 - m1) * m3 / 60;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: m3 < 60
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: i < 3
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorFromHsb,The following statement contains a magic number: return new Cairo.Color(color_shift[0]' color_shift[1]' color_shift[2]);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.R * 255)' (byte)(color.G * 255)'                     (byte)(color.B * 255)' (byte)(color.A * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.R * 255)' (byte)(color.G * 255)'                     (byte)(color.B * 255)' (byte)(color.A * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.R * 255)' (byte)(color.G * 255)'                     (byte)(color.B * 255)' (byte)(color.A * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ColorGetHex,The following statement contains a magic number: return String.Format("#{0:x2}{1:x2}{2:x2}{3:x2}"' (byte)(color.R * 255)' (byte)(color.G * 255)'                     (byte)(color.B * 255)' (byte)(color.A * 255));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RoundedRectangle,The following statement contains a magic number: cr.Arc(x + r' y + r' r' Math.PI' Math.PI * 1.5);
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (1.0/6.0' new Cairo.Color (0' 0' 0' .85 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (1.0/6.0' new Cairo.Color (0' 0' 0' .85 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (2.0/6.0' new Cairo.Color (0' 0' 0' .54 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (2.0/6.0' new Cairo.Color (0' 0' 0' .54 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (2.0/6.0' new Cairo.Color (0' 0' 0' .54 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (3.0/6.0' new Cairo.Color (0' 0' 0' .24 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (3.0/6.0' new Cairo.Color (0' 0' 0' .24 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (3.0/6.0' new Cairo.Color (0' 0' 0' .24 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (4.0/6.0' new Cairo.Color (0' 0' 0' .07 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (4.0/6.0' new Cairo.Color (0' 0' 0' .07 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (4.0/6.0' new Cairo.Color (0' 0' 0' .07 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (5.0/6.0' new Cairo.Color (0' 0' 0' .01 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (5.0/6.0' new Cairo.Color (0' 0' 0' .01 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ShadowGradient,The following statement contains a magic number: lg.AddColorStop (5.0/6.0' new Cairo.Color (0' 0' 0' .01 * strength));
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,RenderOuterShadow,The following statement contains a magic number: int doubleRounding = rounding * 2;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: s = "" + s[0]+s[0]+s[1]+s[1]+s[2]+s[2];
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: s = "" + s[0]+s[0]+s[1]+s[1]+s[2]+s[2];
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: s.Length == 3
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double r = ((double) int.Parse (s.Substring (0'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double r = ((double) int.Parse (s.Substring (0'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double g = ((double) int.Parse (s.Substring (2'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double g = ((double) int.Parse (s.Substring (2'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double g = ((double) int.Parse (s.Substring (2'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double b = ((double) int.Parse (s.Substring (4'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double b = ((double) int.Parse (s.Substring (4'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,CairoExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,ParseColor,The following statement contains a magic number: double b = ((double) int.Parse (s.Substring (4'2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Components,QuartzSurface,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CairoExtensions.cs,GetRetinaScale,The following statement contains a magic number: IntPtr.Size == 8
Magic Number,MonoDevelop.Components,MenuButtonEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MenuButtonEntry.cs,MenuButtonEntry,The following statement contains a magic number: PackStart (button' false' false' 2);
Magic Number,MonoDevelop.Components,MenuButtonEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MenuButtonEntry.cs,AddOptions,The following statement contains a magic number: options.GetLength (1) != 2
Magic Number,MonoDevelop.Components,MenuButtonEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MenuButtonEntry.cs,AddOptions,The following statement contains a magic number: optionPair.Length != 2
Magic Number,MonoDevelop.Components,MenuButtonEntry,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\MenuButtonEntry.cs,ShowQuickInsertMenu,The following statement contains a magic number: menu.Hidden += delegate { 				button.Relief = oldRelief ; 				isOpen = false; 				button.State = Gtk.StateType.Normal; 				 				//FIXME: for some reason the menu's children don't get activated if we destroy  				//directly here' so use a timeout to delay it 				GLib.Timeout.Add (100' delegate { 					menu.Destroy (); 					return false; 				}); 			};
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height += HScrollbar.Visible? 1 : 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width += VScrollbar.Visible? 1 : 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnSizeAllocated,The following statement contains a magic number: allocation.Height -= HScrollbar.Visible? 1 : 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnSizeAllocated,The following statement contains a magic number: allocation.Width -= VScrollbar.Visible? 1 : 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnSizeAllocated,The following statement contains a magic number: alloc.Width +=  hasVScroll? 1 :2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnSizeAllocated,The following statement contains a magic number: alloc.Height += hasHScroll? 1 : 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnExposeEvent,The following statement contains a magic number: rect.Width -= borderWidth + borderWidth - 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnExposeEvent,The following statement contains a magic number: rect.Height -= borderWidth + borderWidth - 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnExposeEvent,The following statement contains a magic number: rect.Height -= HScrollbar.Allocation.Height / 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnExposeEvent,The following statement contains a magic number: rect.Width -= VScrollbar.Allocation.Width / 2;
Magic Number,MonoDevelop.Components,CompactScrolledWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CompactScrolledWindow.cs,OnExposeEvent,The following statement contains a magic number: var halfLineWidth = lineWidth / 2.0;
Magic Number,MonoDevelop.Components,DropDownBoxListWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,SelectItem,The following statement contains a magic number: vScrollbar.Vadjustment.Value = Math.Max (0' i * list.RowHeight - vScrollbar.Vadjustment.PageSize / 2);
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,DrawList,The following statement contains a magic number: int lineWidth = winWidth - leftXAlignment * 2;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,DrawList,The following statement contains a magic number: int iconHeight = icon != null ? (int)icon.Height : 24;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,DrawList,The following statement contains a magic number: typos = he < rowHeight ? ypos + (rowHeight - he) / 2 : ypos;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,DrawList,The following statement contains a magic number: iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,CalcVisibleRows,The following statement contains a magic number: newHeight = win.DataProvider.IconCount > MaxVisibleRows ?  								(rowHeight * MaxVisibleRows) + leftXAlignment * 2 : 								(rowHeight * win.DataProvider.IconCount) + leftXAlignment * 2;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,CalcVisibleRows,The following statement contains a magic number: newHeight = win.DataProvider.IconCount > MaxVisibleRows ?  								(rowHeight * MaxVisibleRows) + leftXAlignment * 2 : 								(rowHeight * win.DataProvider.IconCount) + leftXAlignment * 2;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,CalcVisibleRows,The following statement contains a magic number: newHeight += 2;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,CalcVisibleRows,The following statement contains a magic number: listWidth = Math.Min (450' CalcWidth ());
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,CalcWidth,The following statement contains a magic number: int iconWidth = icon != null ? (int) icon.Width : 24;
Magic Number,MonoDevelop.Components,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBoxListWindow.cs,CalcWidth,The following statement contains a magic number: return iconWidth + iconTextDistance + (padding * 2) + leftXAlignment + w;
Magic Number,MonoDevelop.Components,Tabstrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width = tabs.Count == 0 ? 10 : tabs.Where (t => t.Visible).Sum (t => (int)Math.Ceiling (t.Size.X));
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,CreateLayout,The following statement contains a magic number: w = SpacerWidth * 2;
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: double x = Math.Ceiling (rectangle.X + rectangle.Width / 2) + 0.5;
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: double x = Math.Ceiling (rectangle.X + rectangle.Width / 2) + 0.5;
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.MoveTo (x' rectangle.Y + 0.5 + 2);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.MoveTo (x' rectangle.Y + 0.5 + 2);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.RelLineTo (0' rectangle.Height - 1 - 4);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.MoveTo (rectangle.X' (rectangle.Height - h) / 2 - 1);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.SetDash (new double[] { 1' 1 }' 0.5);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.Rectangle (rectangle.X + 2' rectangle.Y + 2' rectangle.Width - 4' rectangle.Height - 4);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.Rectangle (rectangle.X + 2' rectangle.Y + 2' rectangle.Width - 4' rectangle.Height - 4);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.Rectangle (rectangle.X + 2' rectangle.Y + 2' rectangle.Width - 4' rectangle.Height - 4);
Magic Number,MonoDevelop.Components,Tab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,Draw,The following statement contains a magic number: cr.Rectangle (rectangle.X + 2' rectangle.Y + 2' rectangle.Width - 4' rectangle.Height - 4);
Magic Number,MonoDevelop.Components,HeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HeaderBox.cs,OnExposeEvent,The following statement contains a magic number: gcol.Light -= 0.1;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,SectionList,The following statement contains a magic number: WidthRequest = 100;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnRealized,The following statement contains a magic number: var attributes = new Gdk.WindowAttr () { 				WindowType = Gdk.WindowType.Child' 				Wclass = Gdk.WindowClass.InputOnly' 				EventMask = (int) ( 					EventMask.EnterNotifyMask | 					EventMask.LeaveNotifyMask | 					EventMask.PointerMotionMask | 					EventMask.ButtonPressMask |  					EventMask.ButtonReleaseMask 				)' 				X = alloc.X + bw' 				Y = alloc.Y + bw' 				Width = alloc.Width - bw * 2' 				Height = alloc.Height - bw * 2' 			};
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnRealized,The following statement contains a magic number: var attributes = new Gdk.WindowAttr () { 				WindowType = Gdk.WindowType.Child' 				Wclass = Gdk.WindowClass.InputOnly' 				EventMask = (int) ( 					EventMask.EnterNotifyMask | 					EventMask.LeaveNotifyMask | 					EventMask.PointerMotionMask | 					EventMask.ButtonPressMask |  					EventMask.ButtonReleaseMask 				)' 				X = alloc.X + bw' 				Y = alloc.Y + bw' 				Width = alloc.Width - bw * 2' 				Height = alloc.Height - bw * 2' 			};
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,EnsureLayout,The following statement contains a magic number: headerHeight = Math.Max (20' h + headerPadding + headerPadding);
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnSizeRequested,The following statement contains a magic number: int bw2 = ((int)BorderWidth + borderLineWidth) * 2;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnSizeAllocated,The following statement contains a magic number: int bw2 = bw * 2;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnExposeEvent,The following statement contains a magic number: double halfLineWidth = borderLineWidth / 2.0;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnExposeEvent,The following statement contains a magic number: int bw2 = bw * 2;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnExposeEvent,The following statement contains a magic number: w = w - (2 * borderLineWidth);
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnExposeEvent,The following statement contains a magic number: unselectedCol.A = 0.6;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnExposeEvent,The following statement contains a magic number: hoverCol.A = 0.6;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,OnExposeEvent,The following statement contains a magic number: selectedCol.A = 0.6;
Magic Number,MonoDevelop.Components,SectionList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\SectionList.cs,GetSectionHeaderArea,The following statement contains a magic number: rect.Width -= borderWidth * 2;
Magic Number,MonoDevelop.Components,ContextMenuTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuTreeView.cs,OnSizeAllocated,The following statement contains a magic number: int delta = v > 2? 0 : 1;
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,AnimatedResize,The following statement contains a magic number: paintSize.Width <= 15 || paintSize.Height <= 15
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,AnimatedResize,The following statement contains a magic number: paintSize.Width <= 15 || paintSize.Height <= 15
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,AnimatedResize,The following statement contains a magic number: this.Animate ("Resize"' 			              transform' 			              s => paintSize = s' 			              length: 150' 			              easing: Easing.SinInOut' 			              finished: (x' aborted) => { if (!aborted) MaybeReanimate(); });
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: geometry.Inflate (-5' -5);
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: geometry.Inflate (-5' -5);
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: x = caret.X - MinArrowSpacing - Theme.ArrowWidth/2;
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: offset = caret.X + caret.Width / 2 - x;
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: offset = MinArrowSpacing + Theme.ArrowWidth/2;
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: offset - Theme.ArrowWidth/2 < MinArrowSpacing
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: offset = request.Width - MinArrowSpacing - Theme.ArrowWidth/2;
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following statement contains a magic number: offset > request.Width - MinArrowSpacing - Theme.ArrowWidth/2
Magic Number,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,UpdatePadding,The following statement contains a magic number: top = left = bottom = right = (uint)(Theme.Padding + (Core.Platform.IsWindows ? 1 : 2));
Magic Number,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,AddLabel,The following statement contains a magic number: InvokeAsync (() => { 					label = new Label (); 					label.Font = Theme.Font; 					label.Margin = new WidgetSpacing (5' 4' 5' 4); 					label.Accessible.Role = Xwt.Accessibility.Role.Label; 					Content = label; 				});
Magic Number,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,AddLabel,The following statement contains a magic number: InvokeAsync (() => { 					label = new Label (); 					label.Font = Theme.Font; 					label.Margin = new WidgetSpacing (5' 4' 5' 4); 					label.Accessible.Role = Xwt.Accessibility.Role.Label; 					Content = label; 				});
Magic Number,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,AddLabel,The following statement contains a magic number: InvokeAsync (() => { 					label = new Label (); 					label.Font = Theme.Font; 					label.Margin = new WidgetSpacing (5' 4' 5' 4); 					label.Accessible.Role = Xwt.Accessibility.Role.Label; 					Content = label; 				});
Magic Number,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,AddLabel,The following statement contains a magic number: InvokeAsync (() => { 					label = new Label (); 					label.Font = Theme.Font; 					label.Margin = new WidgetSpacing (5' 4' 5' 4); 					label.Accessible.Role = Xwt.Accessibility.Role.Label; 					Content = label; 				});
Magic Number,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,AdjustSize,The following statement contains a magic number: label.WidthRequest = 330;
Magic Number,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,AdjustSize,The following statement contains a magic number: s.Width > 330
Magic Number,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnParentSizeAllocated,The following statement contains a magic number: int centerSize = Child == null ? GrabAreaSize / 2 : 0;
Magic Number,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnMotionNotifyEvent,The following statement contains a magic number: ParentPaned.Position = newpos >= 10 ? newpos : 10;
Magic Number,MonoDevelop.Components,CustomGtkPanedHandle,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HPanedThin.cs,OnMotionNotifyEvent,The following statement contains a magic number: ParentPaned.Position = newpos >= 10 ? newpos : 10;
Magic Number,MonoDevelop.Components,ExtendedLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedLabel.cs,OnExposeEvent,The following statement contains a magic number: int tx = Allocation.X + (int) Xpad + (int) ((float)(Allocation.Width - (int)(Xpad*2) - w) * Xalign);
Magic Number,MonoDevelop.Components,ExtendedLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedLabel.cs,OnExposeEvent,The following statement contains a magic number: int ty = Allocation.Y + (int) Ypad + (int) ((float)(Allocation.Height - (int)(Ypad*2) - h) * Yalign);
Magic Number,MonoDevelop.Components,ExtendedLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedLabel.cs,OnExposeEvent,The following statement contains a magic number: color.A = 0.99;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,PopoverWindowTheme,The following statement contains a magic number: CornerRadius = 4;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,PopoverWindowTheme,The following statement contains a magic number: Padding = 6;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,PopoverWindowTheme,The following statement contains a magic number: ArrowWidth = 10;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,PopoverWindowTheme,The following statement contains a magic number: ArrowLength = 5;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.Arc(x + w - r' y + h - r' r' 0' Math.PI * 0.5);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.LineTo (x + apos + ArrowWidth / 2' y + h);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' ArrowLength);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' -ArrowLength);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.Arc(x + r' y + h - r' r' Math.PI * 0.5' Math.PI);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderShadow,The following statement contains a magic number: lg.AddColorStop (0.5' ShadowColor.MultiplyAlpha (0.0));
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x + apos - ArrowWidth / 2' y);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowWidth / 2' -ArrowLength);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowWidth / 2' ArrowLength);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc(x + w - r' y + r' r' Math.PI * 1.5' Math.PI * 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc(x + w - r' y + r' r' Math.PI * 1.5' Math.PI * 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x + w' y + apos - ArrowWidth / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowLength' ArrowWidth / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowLength' ArrowWidth / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc(x + w - r' y + h - r' r' 0' Math.PI * 0.5);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x + apos + ArrowWidth / 2' y + h);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' ArrowLength);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' -ArrowLength);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc(x + r' y + h - r' r' Math.PI * 0.5' Math.PI);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x' y + apos + ArrowWidth / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowLength' -ArrowWidth / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowLength' -ArrowWidth / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc(x + r' y + r' r' Math.PI' Math.PI * 1.5);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPager,The following statement contains a magic number: Gdk.Rectangle arrowRect = new Gdk.Rectangle (boundingBox.X + pagerArrowPadding'  															 boundingBox.Y + (boundingBox.Height - Styles.PopoverWindow.PagerTriangleSize) / 2'  															 Styles.PopoverWindow.PagerTriangleSize'  															 Styles.PopoverWindow.PagerTriangleSize);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,GetPagerBounds,The following statement contains a magic number: int width = textWidth + Styles.PopoverWindow.PagerTriangleSize * 2 + 20;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,GetPagerBounds,The following statement contains a magic number: int width = textWidth + Styles.PopoverWindow.PagerTriangleSize * 2 + 20;
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,HitTestPagerLeftArrow,The following statement contains a magic number: Gdk.Rectangle arrowActiveRect = new Gdk.Rectangle (boundingBox.X'  																   boundingBox.Y'  																   Styles.PopoverWindow.PagerTriangleSize + (pagerArrowPadding * 2)'  																   boundingBox.Height);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,HitTestPagerRightArrow,The following statement contains a magic number: Gdk.Rectangle arrowActiveRect = new Gdk.Rectangle (boundingBox.X + boundingBox.Width - (pagerArrowPadding * 2 + Styles.PopoverWindow.PagerTriangleSize)'  																   boundingBox.Y'  																   Styles.PopoverWindow.PagerTriangleSize + (pagerArrowPadding * 2)'  																   boundingBox.Height);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,HitTestPagerRightArrow,The following statement contains a magic number: Gdk.Rectangle arrowActiveRect = new Gdk.Rectangle (boundingBox.X + boundingBox.Width - (pagerArrowPadding * 2 + Styles.PopoverWindow.PagerTriangleSize)'  																   boundingBox.Y'  																   Styles.PopoverWindow.PagerTriangleSize + (pagerArrowPadding * 2)'  																   boundingBox.Height);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,SetupPagerText,The following statement contains a magic number: pl.FontDescription.AbsoluteSize = Pango.Units.FromPixels (Styles.PopoverWindow.PagerHeight - 5);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerText,The following statement contains a magic number: context.MoveTo (bounds.X + (bounds.Width - w) / 2' bounds.Y + (bounds.Height - h) / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerText,The following statement contains a magic number: context.MoveTo (bounds.X + (bounds.Width - w) / 2' bounds.Y + (bounds.Height - h) / 2);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerBackground,The following statement contains a magic number: CairoExtensions.RoundedRectangle (context'  			                                  bounds.X + 1'  			                                  bounds.Y + 1'  			                                  bounds.Width - 2'  			                                  bounds.Height - 1'  			                                  CornerRadius'                                                CairoCorners.All);
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case ArrowType.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case ArrowType.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case ArrowType.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case ArrowType.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case ArrowType.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case ArrowType.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,PopoverWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case ArrowType.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case ArrowType.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case ArrowType.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,PopoverWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWidget.cs,AnimatedResize,The following statement contains a magic number: paintSize.Width <= 15 || paintSize.Height <= 15
Magic Number,MonoDevelop.Components,PopoverWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWidget.cs,AnimatedResize,The following statement contains a magic number: paintSize.Width <= 15 || paintSize.Height <= 15
Magic Number,MonoDevelop.Components,PopoverWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWidget.cs,AnimatedResize,The following statement contains a magic number: this.Animate ("Resize"' 			              transform' 			              s => paintSize = s' 			              length: 150' 			              easing: Easing.SinInOut' 			              finished: (x' aborted) => { if (!aborted) MaybeReanimate(); });
Magic Number,MonoDevelop.Components,PopoverWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWidget.cs,OnExposeEvent,The following statement contains a magic number: theme.ArrowOffset = Allocation.Width / 2;
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,Render,The following statement contains a magic number: var x = cell_area.X + cell_area.Width / 2 - (int)(img.Width / 2);
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,Render,The following statement contains a magic number: var x = cell_area.X + cell_area.Width / 2 - (int)(img.Width / 2);
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,Render,The following statement contains a magic number: var y = cell_area.Y + cell_area.Height / 2 - (int)(img.Height / 2);
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,Render,The following statement contains a magic number: var y = cell_area.Y + cell_area.Height / 2 - (int)(img.Height / 2);
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetImageInfo,The following statement contains a magic number: x = (int)(cell_area.X + cell_area.Width / 2);
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetImageInfo,The following statement contains a magic number: y = (int)(cell_area.Y + cell_area.Height / 2);
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The following statement contains a magic number: width += (int)Xpad * 2;
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The following statement contains a magic number: height += (int)Ypad * 2;
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The following statement contains a magic number: x_offset = (int)(cell_area.Width / 2 - (width / 2));
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The following statement contains a magic number: x_offset = (int)(cell_area.Width / 2 - (width / 2));
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The following statement contains a magic number: y_offset = (int)(cell_area.Height / 2 - (height / 2));
Magic Number,MonoDevelop.Components,CellRendererImage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\CellRendererImage.cs,GetSize,The following statement contains a magic number: y_offset = (int)(cell_area.Height / 2 - (height / 2));
Magic Number,MonoDevelop.Components,ImageView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ImageView.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width = Xpad * 2;
Magic Number,MonoDevelop.Components,ImageView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ImageView.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = Ypad * 2;
Magic Number,MonoDevelop.Components,ImageView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ImageView.cs,OnExposeEvent,The following statement contains a magic number: ctx.DrawImage (this' IsParentDisabled () ? image.WithAlpha (0.4) : image' x' y);
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: width += (int)Pixbuf.Width + pixbufSpacing * 2;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: width += 2;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: int arrowHeight = height / 2;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = FixedHeight >0 ? FixedHeight : height + ySpacing * 2;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: int arrowHeight = height / 2;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: arrowXPos -= 4;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: const int padding = 4;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: ctx.DrawImage (this' Pixbuf' xPos + pixbufSpacing' Allocation.Y + (Allocation.Height - Pixbuf.Height) / 2);
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: xPos += (int)Pixbuf.Width + pixbufSpacing * 2;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: xPos += 4;
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: var textArea = new Gdk.Rectangle (xPos' Allocation.Y + ySpacing' arrowXPos - xPos - 2' Allocation.Height - ySpacing);
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Style.PaintLayout (Style' win' state' true' textArea' this' ""' textArea.X' textArea.Y + Math.Max (0' (textArea.Height - height) / 2)' layout);
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintArrow (this.Style' win' state' ShadowType.None' args.Area' this' ""' ArrowType.Up' true' arrowXPos' Allocation.Y + (Allocation.Height) / 2 - arrowHeight' arrowWidth' arrowHeight);
Magic Number,MonoDevelop.Components,DropDownBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\DropDownBox.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintArrow (this.Style' win' state' ShadowType.None' args.Area' this' ""' ArrowType.Down' true' arrowXPos' Allocation.Y + (Allocation.Height) / 2' arrowWidth' arrowHeight);
Magic Number,MonoDevelop.Components,ImageLoader,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ImageLoader.cs,LoadFromDisk,The following statement contains a magic number: Xwt.Application.Invoke (delegate { 				Xwt.Drawing.Image newImage = null; 				try { 					if (File.Exists (path)) { 						using (var stream = File.OpenRead (path)) 							newImage = Xwt.Drawing.Image.FromStream (stream); 						if (Math.Abs (scaleFactor - 1) > 0.2) 							newImage = newImage.Scale (1 / scaleFactor); 					} 					UpdateImage (newImage' downloaded); 				} catch (Exception ex) { 					LoggingService.LogError ("Failed to load cached image"' ex); 					try { 						File.Delete (path); 					} catch { 						LoggingService.LogError ("Failed to delete corrupt cached image"' ex); 					} 					UpdateImage (null' downloaded); 				} 			});
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The following statement contains a magic number: Global.CheckVersion (2' (uint)i' 0) == null
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The following statement contains a magic number: i >= 14
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The following statement contains a magic number: Global.CheckVersion (2' (uint)GtkMinorVersion' (uint)i) == null
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The following statement contains a magic number: i < 99
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The following statement contains a magic number: Platform.IsMac && GtkMinorVersion >= 24 && GtkMicroVersion >= 8
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GtkWorkarounds,The following statement contains a magic number: Platform.IsMac && GtkMinorVersion >= 24 && GtkMicroVersion >= 8
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,IsContextMenuButton,The following statement contains a magic number: evt.Button == 3 && 				(evt.State & (Gdk.ModifierType.Button1Mask | Gdk.ModifierType.Button2Mask)) == 0
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetPageScrollPixelDeltas,The following statement contains a magic number: deltaY = System.Math.Pow (pageSizeY' 2.0 / 3.0);
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,GetPageScrollPixelDeltas,The following statement contains a magic number: deltaY = System.Math.Pow (pageSizeY' 2.0 / 3.0);
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,MapKeys,The following statement contains a magic number: id = (((ulong)(uint)evt.State) | (((ulong)evt.HardwareKeycode) << 32) | (((ulong)evt.Group) << 48));
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,MapKeys,The following statement contains a magic number: id = (((ulong)(uint)evt.State) | (((ulong)evt.HardwareKeycode) << 32) | (((ulong)evt.Group) << 48));
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,MapKeys,The following statement contains a magic number: GtkMinorVersion >= 20
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetImCursorLocation,The following statement contains a magic number: Platform.IsWindows && System.Environment.OSVersion.Version.Major >= 6
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,CreateForallCallback,The following statement contains a magic number: il.Emit (OpCodes.Ldloca_S' 2);
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,MarkupLinks,The following statement contains a magic number: GtkMinorVersion < 18
Magic Number,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,SetLinkHandler,The following statement contains a magic number: GtkMinorVersion >= 18
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: return temp1 + (temp2 - temp1) * x * 6.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: 6.0 * x < 1.0
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: 2.0 * x < 1.0
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: return (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - x) * 6.0);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: return (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - x) * 6.0);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: return (temp1 + (temp2 - temp1) * ((2.0 / 3.0) - x) * 6.0);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: 3.0 * x < 2.0
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ConvertVector,The following statement contains a magic number: 3.0 * x < 2.0
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPixel,The following statement contains a magic number: uint rv = (uint)(r * 255);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPixel,The following statement contains a magic number: uint gv = (uint)(g * 255);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPixel,The following statement contains a magic number: uint bv = (uint)(b * 255);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPixel,The following statement contains a magic number: return rv << 16 | gv << 8 | bv;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPixel,The following statement contains a magic number: return rv << 16 | gv << 8 | bv;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToRgba,The following statement contains a magic number: return ((byte)(r * 255)' (byte)(g * 255)' (byte) (b * 255)' (byte)(Alpha * 255));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToRgba,The following statement contains a magic number: return ((byte)(r * 255)' (byte)(g * 255)' (byte) (b * 255)' (byte)(Alpha * 255));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToRgba,The following statement contains a magic number: return ((byte)(r * 255)' (byte)(g * 255)' (byte) (b * 255)' (byte)(Alpha * 255));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToRgba,The following statement contains a magic number: return ((byte)(r * 255)' (byte)(g * 255)' (byte) (b * 255)' (byte)(Alpha * 255));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,FromPixel,The following statement contains a magic number: var r = ((pixel >> 16) & 0xFF) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,FromPixel,The following statement contains a magic number: var r = ((pixel >> 16) & 0xFF) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,FromPixel,The following statement contains a magic number: var g = ((pixel >> 8) & 0xFF) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,FromPixel,The following statement contains a magic number: var g = ((pixel >> 8) & 0xFF) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,FromPixel,The following statement contains a magic number: var b = (pixel & 0xFF) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,HslColor,The following statement contains a magic number: this.L = (m + v) / 2.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,HslColor,The following statement contains a magic number: this.S /= (this.L <= 0.5) ? (v + m) : (2.0 - v - m);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,HslColor,The following statement contains a magic number: this.S /= (this.L <= 0.5) ? (v + m) : (2.0 - v - m);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,HslColor,The following statement contains a magic number: this.H = (g == m ? 5.0 + b2 : 1.0 - g2);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,HslColor,The following statement contains a magic number: this.H /= 6.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double r = ((double)int.Parse (color.Substring (1' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double r = ((double)int.Parse (color.Substring (1' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double g = ((double)int.Parse (color.Substring (3' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double g = ((double)int.Parse (color.Substring (3' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double g = ((double)int.Parse (color.Substring (3' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double b = ((double)int.Parse (color.Substring (5' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double b = ((double)int.Parse (color.Substring (5' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double b = ((double)int.Parse (color.Substring (5' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double a = ((double)int.Parse (color.Substring (7' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double a = ((double)int.Parse (color.Substring (7' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: double a = ((double)int.Parse (color.Substring (7' 2)' System.Globalization.NumberStyles.HexNumber)) / 255.0;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Parse,The following statement contains a magic number: color.Length == 9 && color.StartsWith ("#"' StringComparison.Ordinal)
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,Brightness,The following statement contains a magic number: return System.Math.Sqrt (r * .241 + g * .691 + b * .068);
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: double bgH = (backGround.H == 0 && backGround.S == 0) ? 2 / 3.0 : backGround.H;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: double bgH = (backGround.H == 0 && backGround.S == 0) ? 2 / 3.0 : backGround.H;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: h = bgH + 0.5;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: double s = 0.85;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: double l = 0.5;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: l = 0.8;
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,GenerateHighlightColors,The following statement contains a magic number: backGround.H == 0 && backGround.S == 0 && backGround.L < 0.5
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPangoString,The following statement contains a magic number: return string.Format ("#{0}{1}{2}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPangoString,The following statement contains a magic number: return string.Format ("#{0}{1}{2}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToPangoString,The following statement contains a magic number: return string.Format ("#{0}{1}{2}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToMarkup,The following statement contains a magic number: return string.Format ("#{0}{1}{2}{3}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2")' 				((int)(resultColor.A * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToMarkup,The following statement contains a magic number: return string.Format ("#{0}{1}{2}{3}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2")' 				((int)(resultColor.A * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToMarkup,The following statement contains a magic number: return string.Format ("#{0}{1}{2}{3}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2")' 				((int)(resultColor.A * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HslColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HslColor.cs,ToMarkup,The following statement contains a magic number: return string.Format ("#{0}{1}{2}{3}"' 				((int)(resultColor.R * 255)).ToString ("x2")' 				((int)(resultColor.G * 255)).ToString ("x2")' 				((int)(resultColor.B * 255)).ToString ("x2")' 				((int)(resultColor.A * 255)).ToString ("x2"));
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,GetColorString,The following statement contains a magic number: return string.Format ("#{0:X02}{1:X02}{2:X02}"' color.Red / 256' color.Green / 256' color.Blue / 256);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,GetColorString,The following statement contains a magic number: return string.Format ("#{0:X02}{1:X02}{2:X02}"' color.Red / 256' color.Green / 256' color.Blue / 256);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,GetColorString,The following statement contains a magic number: return string.Format ("#{0:X02}{1:X02}{2:X02}"' color.Red / 256' color.Green / 256' color.Blue / 256);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,SharpLineX,The following statement contains a magic number: cr.MoveTo (x1 + 0.5' y1);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,SharpLineX,The following statement contains a magic number: cr.LineTo (x2 + 0.5' y2);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,SharpLineY,The following statement contains a magic number: cr.MoveTo (x1' y1 + 0.5);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,SharpLineY,The following statement contains a magic number: cr.LineTo (x2' y2 + 0.5);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,Inflate,The following statement contains a magic number: return new Cairo.Rectangle( 				rect.X - width' 				rect.Y - height' 				rect.Width + (width * 2)' 				rect.Height + (height * 2) 			);
Magic Number,MonoDevelop.Components,HelperMethods,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\HelperMethods.cs,Inflate,The following statement contains a magic number: return new Cairo.Rectangle( 				rect.X - width' 				rect.Y - height' 				rect.Width + (width * 2)' 				rect.Height + (height * 2) 			);
Magic Number,MonoDevelop.Components,ContextMenuItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuItem.cs,SanitizeMnemonics,The following statement contains a magic number: return label.Remove (index' 4);
Magic Number,MonoDevelop.Components,ContextMenuItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuItem.cs,SanitizeMnemonics,The following statement contains a magic number: label.Length >= index + 3 && label [index + 1] == '_' && label [index + 3] == ')'
Magic Number,MonoDevelop.Components,ContextMenuItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ContextMenuItem.cs,SanitizeMnemonics,The following statement contains a magic number: label.Length >= index + 3 && label [index + 1] == '_' && label [index + 3] == ')'
Magic Number,MonoDevelop.Components,EventBoxTooltip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\EventBoxTooltip.cs,ShowTooltip,The following statement contains a magic number: var rect = new Gdk.Rectangle (0' 0' eventBox.Allocation.Width' eventBox.Allocation.Height + 5);
Magic Number,MonoDevelop.Components,IdeTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\IdeTheme.cs,UpdateStyles,The following statement contains a magic number: UserInterfaceTheme = HslColor.Brightness (bgColor) < 0.5 ? Theme.Dark : Theme.Light;
Magic Number,MonoDevelop.Components,EnvironmentVariableCollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\EnvironmentVariableCollectionEditor.cs,CrtTextChanged,The following statement contains a magic number: Xwt.Application.TimeoutInvoke (100' delegate { 				list.StartEditingCell (r' valueCell); return false; 			});
Magic Number,MonoDevelop.Components,ExtendedHeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedHeaderBox.cs,ExtendedHeaderBox,The following statement contains a magic number: headerTitle.Font = font.WithSize (16);
Magic Number,MonoDevelop.Components,ExtendedHeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedHeaderBox.cs,ExtendedHeaderBox,The following statement contains a magic number: headerSeparator = new Label (" – ") { 				TextColor = Styles.SecondaryTextColor' 				Font = font.WithSize (14)' 			};
Magic Number,MonoDevelop.Components,ExtendedHeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedHeaderBox.cs,ExtendedHeaderBox,The following statement contains a magic number: headerSubtitle = new Label { 				TextColor = Styles.SecondaryTextColor' 				Font = font.WithSize (14)' 			};
Magic Number,MonoDevelop.Components,ExtendedHeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedHeaderBox.cs,ExtendedHeaderBox,The following statement contains a magic number: backButton.MarginRight = 6;
Magic Number,MonoDevelop.Components,ExtendedHeaderBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\ExtendedHeaderBox.cs,ExtendedHeaderBox,The following statement contains a magic number: Padding = 15;
Magic Number,MonoDevelop.Components,XwtBoxTooltip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\XwtBoxTooltip.cs,XwtBoxTooltip,The following statement contains a magic number: xwtPopover.Padding = 3;
Magic Number,MonoDevelop.Components,XwtBoxTooltip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\XwtBoxTooltip.cs,HideTooltip,The following statement contains a magic number: hideTooltipTimer = new Timer (50) { 					AutoReset = false' 					SynchronizingObject = this' 				};
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.TopLeft + border.Left / 2' rect.Top + radius.TopLeft + border.Top / 2' radius.TopLeft' 180' 270);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.TopLeft + border.Left / 2' rect.Top + radius.TopLeft + border.Top / 2' radius.TopLeft' 180' 270);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.TopLeft + border.Left / 2' rect.Top + radius.TopLeft + border.Top / 2' radius.TopLeft' 180' 270);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.TopLeft + border.Left / 2' rect.Top + radius.TopLeft + border.Top / 2' radius.TopLeft' 180' 270);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.LineTo (rect.Right - (radius.TopRight + border.Right / 2)' rect.Top + border.Top / 2);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.LineTo (rect.Right - (radius.TopRight + border.Right / 2)' rect.Top + border.Top / 2);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Right - (radius.TopRight + border.Right / 2)' rect.Top + radius.TopRight + border.Top / 2' radius.TopRight' 270' 0);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Right - (radius.TopRight + border.Right / 2)' rect.Top + radius.TopRight + border.Top / 2' radius.TopRight' 270' 0);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Right - (radius.TopRight + border.Right / 2)' rect.Top + radius.TopRight + border.Top / 2' radius.TopRight' 270' 0);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.LineTo (rect.Right - border.Right / 2' rect.Bottom - (border.Bottom > 0 ? radius.BottomRight : 0));
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Right - (radius.BottomRight + border.Right / 2)' rect.Bottom - (radius.BottomRight + border.Bottom / 2)' radius.BottomRight' 0' 90);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Right - (radius.BottomRight + border.Right / 2)' rect.Bottom - (radius.BottomRight + border.Bottom / 2)' radius.BottomRight' 0' 90);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Right - (radius.BottomRight + border.Right / 2)' rect.Bottom - (radius.BottomRight + border.Bottom / 2)' radius.BottomRight' 0' 90);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.LineTo (rect.Left + (radius.BottomLeft + border.Left / 2)' rect.Bottom - border.Bottom / 2);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.LineTo (rect.Left + (radius.BottomLeft + border.Left / 2)' rect.Bottom - border.Bottom / 2);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.BottomLeft + border.Left / 2' rect.Bottom - (radius.BottomLeft + border.Bottom / 2)' radius.BottomLeft' 90' 180);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.BottomLeft + border.Left / 2' rect.Bottom - (radius.BottomLeft + border.Bottom / 2)' radius.BottomLeft' 90' 180);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.BottomLeft + border.Left / 2' rect.Bottom - (radius.BottomLeft + border.Bottom / 2)' radius.BottomLeft' 90' 180);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.Arc (rect.Left + radius.BottomLeft + border.Left / 2' rect.Bottom - (radius.BottomLeft + border.Bottom / 2)' radius.BottomLeft' 90' 180);
Magic Number,MonoDevelop.Components,FrameCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RoundedFrameBox.cs,Draw,The following statement contains a magic number: ctx.LineTo (rect.Left + border.Left / 2' rect.Top + (border.Top > 0 ? radius.TopLeft : 0));
Magic Number,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,RepositionWindow,The following statement contains a magic number: geometry = geometry.Inflate (-5' -5);
Magic Number,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,RepositionWindow,The following statement contains a magic number: geometry = geometry.Inflate (-5' -5);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,XwtPopupWindowTheme,The following statement contains a magic number: CornerRadius = 4;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,XwtPopupWindowTheme,The following statement contains a magic number: Padding = 6;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,XwtPopupWindowTheme,The following statement contains a magic number: ArrowWidth = 10;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,XwtPopupWindowTheme,The following statement contains a magic number: ArrowLength = 5;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.Arc (x + w - r' y + h - r' r' 0' 90);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.LineTo (x + apos + ArrowWidth / 2' y + h);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' ArrowLength);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' -ArrowLength);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.Arc (x + r' y + h - r' r' 90' 180);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderShadow,The following statement contains a magic number: context.Arc (x + r' y + h - r' r' 90' 180);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: double x = region.X + 0.5' y = region.Y + 0.5' w = region.Width - 1' h = region.Height - 1;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x + apos - ArrowWidth / 2' y);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowWidth / 2' -ArrowLength);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowWidth / 2' ArrowLength);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc (x + w - r' y + r' r' -90' 0);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x + w' y + apos - ArrowWidth / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowLength' ArrowWidth / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowLength' ArrowWidth / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc (x + w - r' y + h - r' r' 0' 90);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x + apos + ArrowWidth / 2' y + h);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' ArrowLength);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowWidth / 2' -ArrowLength);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc (x + r' y + h - r' r' 90' 180);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc (x + r' y + h - r' r' 90' 180);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.LineTo (x' y + apos + ArrowWidth / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (-ArrowLength' -ArrowWidth / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.RelLineTo (ArrowLength' -ArrowWidth / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc (x + r' y + r' r' 180' 270);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetBorderPath,The following statement contains a magic number: context.Arc (x + r' y + r' r' 180' 270);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPager,The following statement contains a magic number: Rectangle arrowRect = new Rectangle (boundingBox.X + pagerArrowPadding' 															 boundingBox.Y + (boundingBox.Height - Styles.PopoverWindow.PagerTriangleSize) / 2' 															 Styles.PopoverWindow.PagerTriangleSize' 															 Styles.PopoverWindow.PagerTriangleSize);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,GetPagerBounds,The following statement contains a magic number: var width = textSize.Width + Styles.PopoverWindow.PagerTriangleSize * 2 + 20;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,GetPagerBounds,The following statement contains a magic number: var width = textSize.Width + Styles.PopoverWindow.PagerTriangleSize * 2 + 20;
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,HitTestPagerLeftArrow,The following statement contains a magic number: Rectangle arrowActiveRect = new Rectangle (boundingBox.X' 																   boundingBox.Y' 																   Styles.PopoverWindow.PagerTriangleSize + (pagerArrowPadding * 2)' 																   boundingBox.Height);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,HitTestPagerRightArrow,The following statement contains a magic number: Rectangle arrowActiveRect = new Rectangle (boundingBox.X + boundingBox.Width - (pagerArrowPadding * 2 + Styles.PopoverWindow.PagerTriangleSize)' 																   boundingBox.Y' 																   Styles.PopoverWindow.PagerTriangleSize + (pagerArrowPadding * 2)' 																   boundingBox.Height);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,HitTestPagerRightArrow,The following statement contains a magic number: Rectangle arrowActiveRect = new Rectangle (boundingBox.X + boundingBox.Width - (pagerArrowPadding * 2 + Styles.PopoverWindow.PagerTriangleSize)' 																   boundingBox.Y' 																   Styles.PopoverWindow.PagerTriangleSize + (pagerArrowPadding * 2)' 																   boundingBox.Height);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,SetupPagerText,The following statement contains a magic number: layout.Font = Font.WithSize (Pango.Units.FromPixels (Styles.PopoverWindow.PagerHeight - 5) / Pango.Scale.PangoScale);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerText,The following statement contains a magic number: context.DrawTextLayout (layout' bounds.X + (bounds.Width - s.Width) / 2' bounds.Y + (bounds.Height - s.Height) / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerText,The following statement contains a magic number: context.DrawTextLayout (layout' bounds.X + (bounds.Width - s.Width) / 2' bounds.Y + (bounds.Height - s.Height) / 2);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerBackground,The following statement contains a magic number: context.RoundRectangle (bounds.X + 1' 			                        bounds.Y + 1' 			                        bounds.Width - 2' 			                        bounds.Height - 1' 			                        CornerRadius);
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case PagerArrowDirection.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case PagerArrowDirection.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case PagerArrowDirection.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,XwtPopupWindowTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopupWindowTheme.cs,RenderPagerArrow,The following statement contains a magic number: switch (direction) { 			case PagerArrowDirection.Up: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Down: 				context.MoveTo (bounds.X + bounds.Width / 2.0' bounds.Y + bounds.Height); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Left: 				context.MoveTo (bounds.X' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X + bounds.Width' bounds.Y); 				context.LineTo (bounds.X + bounds.Width' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			case PagerArrowDirection.Right: 				context.MoveTo (bounds.X + bounds.Width' bounds.Y + bounds.Height / 2.0); 				context.LineTo (bounds.X' bounds.Y); 				context.LineTo (bounds.X' bounds.Y + bounds.Height); 				context.ClosePath (); 				break; 			default: 				return; 			}
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: geometry = geometry.Inflate (-5' -5);
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: geometry = geometry.Inflate (-5' -5);
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: x = currentRect.X - MinArrowSpacing - Theme.ArrowWidth / 2;
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: offset = currentRect.X + currentRect.Width / 2 - x;
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: offset = MinArrowSpacing + Theme.ArrowWidth / 2;
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: offset - Theme.ArrowWidth / 2 < MinArrowSpacing
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: offset = request.Width - MinArrowSpacing - Theme.ArrowWidth / 2;
Magic Number,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following statement contains a magic number: offset > request.Width - MinArrowSpacing - Theme.ArrowWidth / 2
Magic Number,MonoDevelop.Components,XwtPopoverCanvas,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,UpdatePadding,The following statement contains a magic number: top = left = bottom = right = (Theme.Padding + (Core.Platform.IsWindows ? 1 : 2));
Magic Number,MonoDevelop.Components,RestartPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RestartPanel.cs,RestartPanel,The following statement contains a magic number: RowSpacing = 6;
Magic Number,MonoDevelop.Components,RestartPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RestartPanel.cs,RestartPanel,The following statement contains a magic number: ColumnSpacing = 6;
Magic Number,MonoDevelop.Components,RestartPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RestartPanel.cs,RestartPanel,The following statement contains a magic number: Attach (btnRestart' 1' 2' 1' 2' AttachOptions.Fill' AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Components,RestartPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RestartPanel.cs,RestartPanel,The following statement contains a magic number: Attach (btnRestart' 1' 2' 1' 2' AttachOptions.Fill' AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Components,RestartPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\RestartPanel.cs,RestartPanel,The following statement contains a magic number: Attach (labelRestart' 1' 3' 0' 1' AttachOptions.Fill' AttachOptions.Fill' 0' 0);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: int right = rwidth - 2 - AreaBorderWidth;
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: int bottom = rheight - 2 - AreaBorderWidth;
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: ctx.Rectangle (left - 1' top - 1' width + 2' height + 2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: ctx.Rectangle (left - 1' top - 1' width + 2' height + 2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: win.DrawRectangle (Style.BlackGC' false' left - AreaBorderWidth' top - AreaBorderWidth' width + AreaBorderWidth*2' height + AreaBorderWidth*2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: win.DrawRectangle (Style.BlackGC' false' left - AreaBorderWidth' top - AreaBorderWidth' width + AreaBorderWidth*2' height + AreaBorderWidth*2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: sgc.RgbFgColor = new Color (225' 225' 225);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: sgc.RgbFgColor = new Color (225' 225' 225);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnExposeEvent,The following statement contains a magic number: sgc.RgbFgColor = new Color (225' 225' 225);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawAxis,The following statement contains a magic number: TickEnumerator enumBig = ax.GetTickEnumerator (minStep * 2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: lastPos = left - minTickStep*2;
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: (Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: (Math.Abs (px - lastPosLabel) - (tw/2) - (lastTw/2)) >= MinLabelGapX
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawTicks,The following statement contains a magic number: win.DrawLayout (gc' px - (tw/2)' top - AreaBorderWidth - th' layout);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,MeasureAxisSize,The following statement contains a magic number: TickEnumerator enumBig = ax.GetTickEnumerator (minStep * 2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: Point [] ps = new Point [4];
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: ps [1] = new Point (x + (cursor.HandleSize / 2)' cy - cursor.HandleSize + 1);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: ps [2] = new Point (x - (cursor.HandleSize / 2)' cy - cursor.HandleSize + 1);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: ps [2] = new Point (x - (cursor.HandleSize / 2)' cy - cursor.HandleSize + 1);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursor,The following statement contains a magic number: ps [3] = ps [0];
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: int tl = x - tw / 2;
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: int tt = top + 4;
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: tl + tw + 2 >= left + width
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: GdkWindow.DrawRectangle (Style.WhiteGC' true' tl - 1' tt - 1' tw + 2' th + 2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: GdkWindow.DrawRectangle (Style.WhiteGC' true' tl - 1' tt - 1' tw + 2' th + 2);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: GdkWindow.DrawRectangle (Style.BlackGC' false' tl - 2' tt - 2' tw + 3' th + 3);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: GdkWindow.DrawRectangle (Style.BlackGC' false' tl - 2' tt - 2' tw + 3' th + 3);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: GdkWindow.DrawRectangle (Style.BlackGC' false' tl - 2' tt - 2' tw + 3' th + 3);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,DrawCursorLabel,The following statement contains a magic number: GdkWindow.DrawRectangle (Style.BlackGC' false' tl - 2' tt - 2' tw + 3' th + 3);
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnButtonPressEvent,The following statement contains a magic number: Math.Abs (ev.X - cx) <= 2 || (ev.Y < top && (Math.Abs (ev.X - cx) <= cursor.HandleSize/2))
Magic Number,MonoDevelop.Components.Chart,ChartWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\BasicChart.cs,OnButtonPressEvent,The following statement contains a magic number: Math.Abs (ev.X - cx) <= 2 || (ev.Y < top && (Math.Abs (ev.X - cx) <= cursor.HandleSize/2))
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: val > TimeSpan.TicksPerDay * 30 * 365
Magic Number,MonoDevelop.Components.Chart,DateTimeAxis,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,CreateTickEnumerator,The following statement contains a magic number: val > TimeSpan.TicksPerDay * 30 * 365
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,Init,The following statement contains a magic number: switch (scale) { 				case 0: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' t.Second); break; 				case 1: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' (t.Second / 15) * 15); break; 				case 2: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' t.Minute' 0); break; 				case 3: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' (t.Minute / 15) * 15' 0); break; 				case 4: nt = new DateTime (t.Year' t.Month' t.Day' t.Hour' 0' 0); break; 				case 5: nt = new DateTime (t.Year' t.Month' t.Day); break; 				case 6: nt = new DateTime (t.Year' t.Month' 1); break; 				default: nt = new DateTime (t.Year' 1' 1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following statement contains a magic number: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: long red = 10;
Magic Number,MonoDevelop.Components.Chart,IntegerAxis,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\IntegerAxis.cs,CreateTickEnumerator,The following statement contains a magic number: red = red * 10;
Magic Number,MonoDevelop.Components.Extensions,TextQuestionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Extensions\TextQuestionDialog.cs,RunDefault,The following statement contains a magic number: md = new Gtk.Dialog (Caption' TransientFor' DialogFlags.Modal | DialogFlags.DestroyWithParent) { 					HasSeparator = false' 					BorderWidth = 6' 				};
Magic Number,MonoDevelop.Components.Extensions,TextQuestionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Extensions\TextQuestionDialog.cs,RunDefault,The following statement contains a magic number: md.VBox.PackStart (questionLabel' true' false' 6);
Magic Number,MonoDevelop.Components.Extensions,TextQuestionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Extensions\TextQuestionDialog.cs,RunDefault,The following statement contains a magic number: md.VBox.PackStart (responseEntry' false' true' 6);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyEditorCell.cs,Render,The following statement contains a magic number: int dy = (bounds.Height - h) / 2;
Magic Number,MonoDevelop.Components.PropertyGrid,CellRendererWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyEditorCell.cs,OnExposeEvent,The following statement contains a magic number: rect.Inflate (-3' 0);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyDialogueEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyEditorCell.cs,PropertyDialogueEditor,The following statement contains a magic number: Spacing = 3;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGrid,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,AddHelpPane,The following statement contains a magic number: descTitleLabel.SetPadding (5' 2);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGrid,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,AddHelpPane,The following statement contains a magic number: descTitleLabel.SetPadding (5' 2);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGrid,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,AddHelpPane,The following statement contains a magic number: descTextView.HeightRequest = 70;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGrid,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,AddHelpPane,The following statement contains a magic number: descTextView.LeftMargin = 5;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGrid,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,AddHelpPane,The following statement contains a magic number: descTextView.RightMargin = 5;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGrid.cs,PropertyGridToolbar,The following statement contains a magic number: Spacing = 3;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,OnSizeRequested,The following statement contains a magic number: requisition.Width = 20;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,MeasureHeight,The following statement contains a magic number: r.Bounds = new Gdk.Rectangle (0' y' width' h + CategoryTopBottomPadding * 2);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,MeasureHeight,The following statement contains a magic number: y += h + CategoryTopBottomPadding * 2;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (dx + 0.5' 0);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: var rh = h + CategoryTopBottomPadding*2;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.Rectangle (1' y + 1' Allocation.Width - 2' rh - 3);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.Rectangle (1' y + 1' Allocation.Width - 2' rh - 3);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.SetDash (new double[] { 1' 1 }' 0.5);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.MoveTo (0' y + 0.5);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.LineTo (Allocation.Width' y + 0.5);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.MoveTo (0' y + rh - 0.5);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.LineTo (Allocation.Width' y + rh - 0.5);
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,Draw,The following statement contains a magic number: ctx.DrawImage (this' img' Allocation.Width - img.Width - CategoryTopBottomPadding' y + Math.Round ((rh - img.Height) / 2));
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,OnButtonPressEvent,The following statement contains a magic number: Math.Abs (dx - evnt.X) < 4
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,OnMotionNotifyEvent,The following statement contains a magic number: px = 10;
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,OnMotionNotifyEvent,The following statement contains a magic number: px < 10
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,OnMotionNotifyEvent,The following statement contains a magic number: Math.Abs (dx - evnt.X) < 4
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,ShowTooltip,The following statement contains a magic number: tooltipTimeout = GLib.Timeout.Add (500' delegate { 				ShowTooltipWindow ((int)evnt.X' (int)evnt.Y); 				return false; 			});
Magic Number,MonoDevelop.Components.PropertyGrid,PropertyGridTable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid\PropertyGridTable.cs,ShowTooltipWindow,The following statement contains a magic number: const int chunkLength = 200;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: dialog.VBox.PackStart (hBox' true' true' 5);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: grid = new PropertyGrid (base.EditorManager) {  				CurrentObject = null'  				WidthRequest = 200'  				ShowHelp = false  			};
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: hBox.PackEnd (grid' true' true' 5);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: buttonBox.Spacing = 6;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: hBox.PackEnd (buttonBox' false' false' 5);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: listScroll.WidthRequest = 200;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: listScroll.HeightRequest = 320;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: hBox.PackStart (listScroll' false' false' 5);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,LaunchDialogue,The following statement contains a magic number: itemTree.AppendColumn (new TreeViewColumn ("Object"' rdr' "text"' 2));
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,CollectionEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\CollectionEditor.cs,UpdateName,The following statement contains a magic number: itemStore.SetValue(iter' 2' name);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,ColorEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\ColorEditorCell.cs,Render,The following statement contains a magic number: int yd = (bounds.Height - ColorBoxSize) / 2;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,EventEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\EventEditor.cs,CreateEditor,The following statement contains a magic number: combo.WidthRequest = 30;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsEditorCell.cs,Render,The following statement contains a magic number: int dy = 2;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsEditorCell.cs,Render,The following statement contains a magic number: ctx.MoveTo (bounds.X + indicatorSize + indicatorSpacing' dy + bounds.Y + ((indicatorSize - th) / 2));
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsEditorCell.cs,GetSize,The following statement contains a magic number: height = 4 + (indicatorSize * values.Length) + (CheckSpacing * (values.Length - 1));
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsEditorCell.cs,Initialize,The following statement contains a magic number: vbox.PackStart (check' false' false' 3);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsSelectorDialog.cs,FlagsSelectorDialog,The following statement contains a magic number: sc.BorderWidth = 6;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsSelectorDialog.cs,Run,The following statement contains a magic number: dialog.DefaultWidth = 500;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsSelectorDialog.cs,Run,The following statement contains a magic number: dialog.DefaultHeight = 400;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FlagsSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FlagsSelectorDialog.cs,OnToggled,The following statement contains a magic number: ulong flag = (ulong) store.GetValue (iter' 2);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,FloatRange,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\FloatRange.cs,Initialize,The following statement contains a magic number: Digits = 2;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,TextEditorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\TextEditorDialog.cs,TextEditorDialog,The following statement contains a magic number: sc.BorderWidth = 6;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,TextEditorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\TextEditorDialog.cs,Run,The following statement contains a magic number: dialog.DefaultWidth = 500;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,TextEditorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\TextEditorDialog.cs,Run,The following statement contains a magic number: dialog.DefaultHeight = 400;
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,BooleanEditorCell,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\BooleanEditorCell.cs,Render,The following statement contains a magic number: Gtk.Style.PaintCheck (style' window' state' sh' bounds' Container' "checkbutton"' bounds.X + indicatorSpacing - 1' bounds.Y + (bounds.Height - s)/2' s' s);
Magic Number,MonoDevelop.Components.PropertyGrid.PropertyEditors,PropertyTextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.PropertyGrid.Editors\PropertyTextEditor.cs,Initialize,The following statement contains a magic number: Spacing = 3;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,GetCairoTextMidColor,The following statement contains a magic number: return CairoExtensions.AlphaBlend (text_color' background_color' 0.5);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,GetGdkTextMidColor,The following statement contains a magic number: Gdk.Color gdk_color = new Gdk.Color ((byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,GetGdkTextMidColor,The following statement contains a magic number: Gdk.Color gdk_color = new Gdk.Color ((byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,GetGdkTextMidColor,The following statement contains a magic number: Gdk.Color gdk_color = new Gdk.Color ((byte)(color.R * 255)' (byte)(color.G * 255)' (byte)(color.B * 255));
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,OnColorsRefreshed,The following statement contains a magic number: rule_color = CairoExtensions.ColorShade (ViewFill' 0.95);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawPie,The following statement contains a magic number: double a1 = 3.0 * Math.PI / 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawPie,The following statement contains a magic number: double a1 = 3.0 * Math.PI / 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawPie,The following statement contains a magic number: double a2 = a1 + 2.0 * Math.PI * fraction;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawPie,The following statement contains a magic number: Color color_b = CairoExtensions.ColorShade (color_a' 1.4);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawPie,The following statement contains a magic number: Context.Cairo.SetSourceColor (CairoExtensions.ColorShade (color_a' 0.8));
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawArrow,The following statement contains a magic number: cr.Translate (0.5' 0.5);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawArrow,The following statement contains a magic number: cr.Translate (0.5' 0.5);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawArrow,The following statement contains a magic number: double x3 = alloc.X + alloc.Width / 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawArrow,The following statement contains a magic number: cr.Translate (-0.5' -0.5);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawArrow,The following statement contains a magic number: cr.Translate (-0.5' -0.5);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawFrameBorder,The following statement contains a magic number: double offset = (double)cr.LineWidth / 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawFrameBorderFocused,The following statement contains a magic number: cr.LineWidth = BorderWidth * 1.5;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawFrameBorderFocused,The following statement contains a magic number: cr.SetSourceColor (CairoExtensions.ColorShade (border_color' 0.8));
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawFrameBorderFocused,The following statement contains a magic number: double offset = (double)cr.LineWidth / 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHighlight,The following statement contains a magic number: Color light_color = CairoExtensions.ColorShade (color' 1.6);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHighlight,The following statement contains a magic number: Color dark_color = CairoExtensions.ColorShade (color' 1.3);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHighlight,The following statement contains a magic number: cr.Rectangle (alloc.X + 1.5' alloc.Y + 1.5' alloc.Width - 3' alloc.Height - 2);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHighlight,The following statement contains a magic number: cr.Rectangle (alloc.X + 1.5' alloc.Y + 1.5' alloc.Width - 3' alloc.Height - 2);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHighlight,The following statement contains a magic number: cr.Rectangle (alloc.X + 1.5' alloc.Y + 1.5' alloc.Width - 3' alloc.Height - 2);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHighlight,The following statement contains a magic number: cr.Rectangle (alloc.X + 1.5' alloc.Y + 1.5' alloc.Width - 3' alloc.Height - 2);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderBackground,The following statement contains a magic number: Color light_color = CairoExtensions.ColorShade (gtk_background_color' 1.1);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderBackground,The following statement contains a magic number: Color dark_color = CairoExtensions.ColorShade (gtk_background_color' 0.95);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderBackground,The following statement contains a magic number: grad.AddColorStop (0.75' dark_color);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: double top_offset = 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: double right_offset = 2.0;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: double margin = 0.5;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: double line_width = 0.7;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: Cairo.Color stroke_color = CairoExtensions.ColorShade (Colors.GetWidgetColor (GtkColorClass.Background' StateType.Selected)' 0.8);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: stroke_color.A = 0.1;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (margin + line_width) * 2.0 - right_offset' alloc.Height - (margin + line_width) * 2.0 - top_offset' Context.Radius / 2.0' CairoCorners.None);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (margin + line_width) * 2.0 - right_offset' alloc.Height - (margin + line_width) * 2.0 - top_offset' Context.Radius / 2.0' CairoCorners.None);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (margin + line_width) * 2.0 - right_offset' alloc.Height - (margin + line_width) * 2.0 - top_offset' Context.Radius / 2.0' CairoCorners.None);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (line_width + margin) * 2.0 - right_offset' alloc.Height - (line_width + margin) * 2.0 - right_offset' Context.Radius / 2.0' CairoCorners.All);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (line_width + margin) * 2.0 - right_offset' alloc.Height - (line_width + margin) * 2.0 - right_offset' Context.Radius / 2.0' CairoCorners.All);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawColumnHeaderFocus,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' alloc.X + margin + line_width + right_offset' alloc.Y + margin + line_width + top_offset' alloc.Width - (line_width + margin) * 2.0 - right_offset' alloc.Height - (line_width + margin) * 2.0 - right_offset' Context.Radius / 2.0' CairoCorners.All);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderSeparator,The following statement contains a magic number: Cairo.Color dark_color = CairoExtensions.ColorShade (gtk_background_color' 0.8);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderSeparator,The following statement contains a magic number: Cairo.Color light_color = CairoExtensions.ColorShade (gtk_background_color' 1.1);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderSeparator,The following statement contains a magic number: int y_1 = alloc.Top + 4;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawHeaderSeparator,The following statement contains a magic number: int y_2 = alloc.Bottom - 3;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowCursor,The following statement contains a magic number: cr.LineWidth = 1.25;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowCursor,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + cr.LineWidth / 2.0' y + cr.LineWidth / 2.0' width - cr.LineWidth' height - cr.LineWidth' Context.Radius' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowCursor,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + cr.LineWidth / 2.0' y + cr.LineWidth / 2.0' width - cr.LineWidth' height - cr.LineWidth' Context.Radius' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: Color selection_highlight = CairoExtensions.ColorShade (selection_color' 1.24);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: Color selection_stroke = CairoExtensions.ColorShade (selection_color' 0.85);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: selection_highlight.A = 0.5;
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: Color selection_fill_light = CairoExtensions.ColorShade (selection_color' 1.12);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: grad.AddColorStop (0.4' selection_fill_dark);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + 1.5' y + 1.5' width - 3' height - 3' Context.Radius - 1' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + 1.5' y + 1.5' width - 3' height - 3' Context.Radius - 1' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + 1.5' y + 1.5' width - 3' height - 3' Context.Radius - 1' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + 1.5' y + 1.5' width - 3' height - 3' Context.Radius - 1' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + 0.5' y + 0.5' width - 1' height - 1' Context.Radius' corners' true);
Magic Number,MonoDevelop.Components.Theming,GtkTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkTheme.cs,DrawRowSelection,The following statement contains a magic number: CairoExtensions.RoundedRectangle (cr' x + 0.5' y + 0.5' width - 1' height - 1' Context.Radius' corners' true);
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,The following statement contains a magic number: switch (pos) { 				case PositionType.Left: cframe.SetPadding (0' 0' 0' 4); gripSize = 4; break; 				case PositionType.Right: cframe.SetPadding (0' 0' 4' 0); gripSize = 4; break; 				}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,The following statement contains a magic number: switch (pos) { 				case PositionType.Left: cframe.SetPadding (0' 0' 0' 4); gripSize = 4; break; 				case PositionType.Right: cframe.SetPadding (0' 0' 4' 0); gripSize = 4; break; 				}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,The following statement contains a magic number: switch (pos) { 				case PositionType.Left: cframe.SetPadding (0' 0' 0' 4); gripSize = 4; break; 				case PositionType.Right: cframe.SetPadding (0' 0' 4' 0); gripSize = 4; break; 				}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,The following statement contains a magic number: switch (pos) { 				case PositionType.Left: cframe.SetPadding (0' 0' 0' 4); gripSize = 4; break; 				case PositionType.Right: cframe.SetPadding (0' 0' 4' 0); gripSize = 4; break; 				}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateShow,The following statement contains a magic number: switch (position) { 			case PositionType.Left: 				Width += 1 + (targetSize - Width) / 3; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Right: 				Width += 1 + (targetSize - Width) / 3; 				X = - Width; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Top: 				Height += 1 + (targetSize - Height) / 3; 				if (Height < targetSize) 					return true; 				break; 			case PositionType.Bottom: 				Height += 1 + (targetSize - Height) / 3; 				Y = - Height; 				if (Height < targetSize) 					return true; 				break; 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateShow,The following statement contains a magic number: switch (position) { 			case PositionType.Left: 				Width += 1 + (targetSize - Width) / 3; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Right: 				Width += 1 + (targetSize - Width) / 3; 				X = - Width; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Top: 				Height += 1 + (targetSize - Height) / 3; 				if (Height < targetSize) 					return true; 				break; 			case PositionType.Bottom: 				Height += 1 + (targetSize - Height) / 3; 				Y = - Height; 				if (Height < targetSize) 					return true; 				break; 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateShow,The following statement contains a magic number: switch (position) { 			case PositionType.Left: 				Width += 1 + (targetSize - Width) / 3; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Right: 				Width += 1 + (targetSize - Width) / 3; 				X = - Width; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Top: 				Height += 1 + (targetSize - Height) / 3; 				if (Height < targetSize) 					return true; 				break; 			case PositionType.Bottom: 				Height += 1 + (targetSize - Height) / 3; 				Y = - Height; 				if (Height < targetSize) 					return true; 				break; 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateShow,The following statement contains a magic number: switch (position) { 			case PositionType.Left: 				Width += 1 + (targetSize - Width) / 3; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Right: 				Width += 1 + (targetSize - Width) / 3; 				X = - Width; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Top: 				Height += 1 + (targetSize - Height) / 3; 				if (Height < targetSize) 					return true; 				break; 			case PositionType.Bottom: 				Height += 1 + (targetSize - Height) / 3; 				Y = - Height; 				if (Height < targetSize) 					return true; 				break; 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateHide,The following statement contains a magic number: switch (position) { 			case PositionType.Left: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					return true; 				} 				break; 			} 			case PositionType.Right: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					X = - ns; 					return true; 				} 				break; 			} 			case PositionType.Top: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					return true; 				} 				break; 			} 			case PositionType.Bottom: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					Y = - ns; 					return true; 				} 				break; 			} 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateHide,The following statement contains a magic number: switch (position) { 			case PositionType.Left: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					return true; 				} 				break; 			} 			case PositionType.Right: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					X = - ns; 					return true; 				} 				break; 			} 			case PositionType.Top: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					return true; 				} 				break; 			} 			case PositionType.Bottom: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					Y = - ns; 					return true; 				} 				break; 			} 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateHide,The following statement contains a magic number: switch (position) { 			case PositionType.Left: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					return true; 				} 				break; 			} 			case PositionType.Right: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					X = - ns; 					return true; 				} 				break; 			} 			case PositionType.Top: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					return true; 				} 				break; 			} 			case PositionType.Bottom: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					Y = - ns; 					return true; 				} 				break; 			} 			}
Magic Number,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateHide,The following statement contains a magic number: switch (position) { 			case PositionType.Left: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					return true; 				} 				break; 			} 			case PositionType.Right: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					X = - ns; 					return true; 				} 				break; 			} 			case PositionType.Top: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					return true; 				} 				break; 			} 			case PositionType.Bottom: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					Y = - ns; 					return true; 				} 				break; 			} 			}
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,DockBar,The following statement contains a magic number: filler.WidthRequest = 4;
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,DockBar,The following statement contains a magic number: filler.HeightRequest = 4;
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,DisableHoverActivation,The following statement contains a magic number: hoverActivationDelay = DateTime.Now + TimeSpan.FromSeconds (1.5);
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,OnExposeEvent,The following statement contains a magic number: switch (Position) { 					case PositionType.Left:ctx.MoveTo (alloc.X + alloc.Width - 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Right: ctx.MoveTo (alloc.X + 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Top: ctx.MoveTo (alloc.X' alloc.Y + alloc.Height + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					case PositionType.Bottom: ctx.MoveTo (alloc.X' alloc.Y + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					}
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,OnExposeEvent,The following statement contains a magic number: switch (Position) { 					case PositionType.Left:ctx.MoveTo (alloc.X + alloc.Width - 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Right: ctx.MoveTo (alloc.X + 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Top: ctx.MoveTo (alloc.X' alloc.Y + alloc.Height + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					case PositionType.Bottom: ctx.MoveTo (alloc.X' alloc.Y + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					}
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,OnExposeEvent,The following statement contains a magic number: switch (Position) { 					case PositionType.Left:ctx.MoveTo (alloc.X + alloc.Width - 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Right: ctx.MoveTo (alloc.X + 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Top: ctx.MoveTo (alloc.X' alloc.Y + alloc.Height + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					case PositionType.Bottom: ctx.MoveTo (alloc.X' alloc.Y + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					}
Magic Number,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,OnExposeEvent,The following statement contains a magic number: switch (Position) { 					case PositionType.Left:ctx.MoveTo (alloc.X + alloc.Width - 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Right: ctx.MoveTo (alloc.X + 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Top: ctx.MoveTo (alloc.X' alloc.Y + alloc.Height + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					case PositionType.Bottom: ctx.MoveTo (alloc.X' alloc.Y + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					}
Magic Number,MonoDevelop.Components.Docking,CrossfadeIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: RenderIcon (context' primary' 1.0f - (float)Math.Pow (secondaryOpacity' 3.0f));
Magic Number,MonoDevelop.Components.Docking,CrossfadeIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,RenderIcon,The following statement contains a magic number: context.DrawImage (this' surface.WithAlpha (opacity)' 			                          Allocation.X + (Allocation.Width - surface.Width) / 2' 			                          Allocation.Y + (Allocation.Height - surface.Height) / 2);
Magic Number,MonoDevelop.Components.Docking,CrossfadeIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,RenderIcon,The following statement contains a magic number: context.DrawImage (this' surface.WithAlpha (opacity)' 			                          Allocation.X + (Allocation.Width - surface.Width) / 2' 			                          Allocation.Y + (Allocation.Height - surface.Height) / 2);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,AnimateHover,The following statement contains a magic number: this.Animate ("Hover"' 			              x => hoverProgress = x' 			              hoverProgress' 			              hovered ? 1.0f : 0.0f' 			              length: 100);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: mainBox.SetPadding (5' 5' 11' 9);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: mainBox.SetPadding (5' 5' 11' 9);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: mainBox.SetPadding (5' 5' 11' 9);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: mainBox.SetPadding (5' 5' 11' 9);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: var desat = it.Icon.WithAlpha (0.5);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: label.Angle = 270;
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: label.SetAlignment (0' 0.5f);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,UpdateTab,The following statement contains a magic number: box.Spacing = 2;
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,Present,The following statement contains a magic number: GLib.Timeout.Add (200' delegate { 					// Using a small delay because AutoShow uses an animation and setting focus may 					// not work until the item is visible 					if (autoShowFrame != null && autoShowFrame.ContainerWindow != null && autoShowFrame.ContainerWindow != (Gtk.Window)Toplevel) 						autoShowFrame.ContainerWindow.Present (); 					it.SetFocus (); 					ScheduleAutoHide (false); 					return false; 				});
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: lg.AddColorStop (0.35' primaryColor);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: lg.AddColorStop (0.65' primaryColor);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintFocus (Style' GdkWindow' State' Allocation' this' "button"' Allocation.X + 2' Allocation.Y + 2' Allocation.Width - 4' Allocation.Height - 4);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintFocus (Style' GdkWindow' State' Allocation' this' "button"' Allocation.X + 2' Allocation.Y + 2' Allocation.Width - 4' Allocation.Height - 4);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintFocus (Style' GdkWindow' State' Allocation' this' "button"' Allocation.X + 2' Allocation.Y + 2' Allocation.Width - 4' Allocation.Height - 4);
Magic Number,MonoDevelop.Components.Docking,DockBarItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBarItem.cs,OnExposeEvent,The following statement contains a magic number: Gtk.Style.PaintFocus (Style' GdkWindow' State' Allocation' this' "button"' Allocation.X + 2' Allocation.Y + 2' Allocation.Width - 4' Allocation.Height - 4);
Magic Number,MonoDevelop.Components.Docking,DockContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,AllocateSplitter,The following statement contains a magic number: a.X -= (int)(SplitterSize / 2);
Magic Number,MonoDevelop.Components.Docking,DockContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,UpdatePlaceholder,The following statement contains a magic number: padTitleWindow.Move (ox + px - tw / 2' oy + py - th / 2);
Magic Number,MonoDevelop.Components.Docking,DockContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,UpdatePlaceholder,The following statement contains a magic number: padTitleWindow.Move (ox + px - tw / 2' oy + py - th / 2);
Magic Number,MonoDevelop.Components.Docking,SplitterWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,OnRealized,The following statement contains a magic number: ModifyBg (StateType.Normal' new Gdk.Color (255'0'0));
Magic Number,MonoDevelop.Components.Docking,SplitterWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,OnRealized,The following statement contains a magic number: ModifyBase (StateType.Normal' new Gdk.Color (255'0'0));
Magic Number,MonoDevelop.Components.Docking,SplitterWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockContainer.cs,OnRealized,The following statement contains a magic number: ModifyFg (StateType.Normal' new Gdk.Color (255'0'0));
Magic Number,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,DockFrame,The following statement contains a magic number: CompactGuiLevel = 2;
Magic Number,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,SizeAllocate,The following statement contains a magic number: double obSize = double.IsNaN (ob.Size) ? 10.0 : ob.Size;
Magic Number,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,UpdateNotebook,The following statement contains a magic number: boundTabStrip.BottomPadding = 3;
Magic Number,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,UpdateNotebook,The following statement contains a magic number: Frame.CompactGuiLevel == 3 && IsNextToMargin (PositionType.Bottom' true)
Magic Number,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,Dump,The following statement contains a magic number: ob.Dump (ind + 2);
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,The following statement contains a magic number: int xdockMargin = (int) ((double)rect.Width * (1.0 - DockFrame.ItemDockCenterArea)) / 2;
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,GetDockTarget,The following statement contains a magic number: int ydockMargin = (int) ((double)rect.Height * (1.0 - DockFrame.ItemDockCenterArea)) / 2;
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,SetBarDocPosition,The following statement contains a magic number: n<4
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,SetBarDocPosition,The following statement contains a magic number: autoHideSize = 200;
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,SetBarDocPosition,The following statement contains a magic number: autoHideSize = 200;
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,CalcBarDocPosition,The following statement contains a magic number: int mid = Allocation.Left + Allocation.Width / 2;
Magic Number,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,CalcBarDocPosition,The following statement contains a magic number: mid > Frame.Allocation.Left + Frame.Allocation.Width / 2
Magic Number,MonoDevelop.Components.Docking,CustomFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemContainer.cs,OnExposeEvent,The following statement contains a magic number: gcol.Light -= 0.1;
Magic Number,MonoDevelop.Components.Docking,CustomFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemContainer.cs,OnExposeEvent,The following statement contains a magic number: double y = rect.Y + topMargin / 2d;
Magic Number,MonoDevelop.Components.Docking,CustomFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemContainer.cs,OnExposeEvent,The following statement contains a magic number: y = bottom - bottomMargin / 2d;
Magic Number,MonoDevelop.Components.Docking,CustomFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemContainer.cs,OnExposeEvent,The following statement contains a magic number: double x = rect.X + leftMargin / 2d;
Magic Number,MonoDevelop.Components.Docking,CustomFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemContainer.cs,OnExposeEvent,The following statement contains a magic number: x = right - rightMargin / 2d;
Magic Number,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,DockItemToolbar,The following statement contains a magic number: topFrame.SetPadding (3'3'3'3);
Magic Number,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,DockItemToolbar,The following statement contains a magic number: topFrame.SetPadding (3'3'3'3);
Magic Number,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,DockItemToolbar,The following statement contains a magic number: topFrame.SetPadding (3'3'3'3);
Magic Number,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,DockItemToolbar,The following statement contains a magic number: topFrame.SetPadding (3'3'3'3);
Magic Number,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,DockItemToolbar,The following statement contains a magic number: box = new HBox (false' 3);
Magic Number,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,Add,The following statement contains a magic number: int defaultPadding = 3;
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,OnRealized,The following statement contains a magic number: GdkWindow.Opacity = 0.6;
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,CreateShape,The following statement contains a magic number: white = new Gdk.Color (255' 255' 255);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,CreateShape,The following statement contains a magic number: white = new Gdk.Color (255' 255' 255);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,CreateShape,The following statement contains a magic number: white = new Gdk.Color (255' 255' 255);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,CreateShape,The following statement contains a magic number: pm.DrawRectangle (gc' false' 1' 1' width - 3' height - 3);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,CreateShape,The following statement contains a magic number: pm.DrawRectangle (gc' false' 1' 1' width - 3' height - 3);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,OnExposeEvent,The following statement contains a magic number: this.GdkWindow.DrawRectangle (redgc' false' 1' 1' w-3' h-3);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,OnExposeEvent,The following statement contains a magic number: this.GdkWindow.DrawRectangle (redgc' false' 1' 1' w-3' h-3);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: int sa = 7;
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: Resize (rw+sa*2' rh+sa*2);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: Resize (rw+sa*2' rh+sa*2);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: anim = GLib.Timeout.Add (10' RunAnimation);
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: animate && w < 150 && h < 150
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: animate && w < 150 && h < 150
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,RunAnimation,The following statement contains a magic number: ch-=2;
Magic Number,MonoDevelop.Components.Docking,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,RunAnimation,The following statement contains a magic number: cw-=2;
Magic Number,MonoDevelop.Components.Docking,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,PadTitleWindow,The following statement contains a magic number: HBox box = new HBox (false' 3);
Magic Number,MonoDevelop.Components.Docking,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.Docking,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.Docking,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.Docking,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\PlaceholderWindow.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.Docking,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\TabStrip.cs,TabStrip,The following statement contains a magic number: BottomPadding = 3;
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,UpdateVisualStyle,The following statement contains a magic number: inactiveIconAlpha = 0.8;
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,UpdateVisualStyle,The following statement contains a magic number: labelWidget.Xalign = 0.5f;
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,UpdateVisualStyle,The following statement contains a magic number: font.AbsoluteSize = Pango.Units.FromPixels (11);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: box.Spacing = -2;
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: box.PackStart (tabIcon' false' false' 3);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: var alignLabel = new Alignment (0.0f' 0.5f' 1' 1);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: alignLabel.RightPadding = 15;
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: al = new Alignment (0' 0.5f' 1' 1);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: btnBox.PackStart (btnDock' false' false' 3);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: box.PackEnd (al' false' false' 3);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,SetLabel,The following statement contains a magic number: minWidth = tabIcon.SizeRequest ().Width + al.SizeRequest ().Width + 10;
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,HandleShowMenu,The following statement contains a magic number: item.ShowDockPopupMenu (this' Allocation.Width / 2' Allocation.Height / 2);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,HandleShowMenu,The following statement contains a magic number: item.ShowDockPopupMenu (this' Allocation.Width / 2' Allocation.Height / 2);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,OnMotionNotifyEvent,The following statement contains a magic number: tabPressed && !item.Behavior.HasFlag (DockItemBehavior.NoGrip) && Math.Abs (evnt.X - pressX) > 3 && Math.Abs (evnt.Y - pressY) > 3
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,OnMotionNotifyEvent,The following statement contains a magic number: tabPressed && !item.Behavior.HasFlag (DockItemBehavior.NoGrip) && Math.Abs (evnt.X - pressX) > 3 && Math.Abs (evnt.Y - pressY) > 3
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,OnSizeAllocated,The following statement contains a magic number: int centerY = topPadding + ((rect.Height - bottomPadding - topPadding) / 2);
Magic Number,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,OnSizeAllocated,The following statement contains a magic number: rect.Y += centerY - (height / 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ParameterInformationWindow,The following statement contains a magic number: headlabel.Indent = -20;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ParameterInformationWindow,The following statement contains a magic number: descriptionBox.Spacing = 4;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ParameterInformationWindow,The following statement contains a magic number: vb2.Spacing = 4;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,The following statement contains a magic number: Y = pos.y - lineHeight - (int)lastH - 10;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,The following statement contains a magic number: Y = Y - lineHeight - (int)lastH - 4;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,The following statement contains a magic number: var completionWindow = new Xwt.Rectangle (CompletionWindowManager.X' CompletionWindowManager.Y - lineHeight' CompletionWindowManager.Wnd.Allocation.Width' CompletionWindowManager.Wnd.Allocation.Height + lineHeight * 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,The following statement contains a magic number: Y = (int)completionWindow.Y - (int)lastH - 6;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,UpdateParameterInfoLocation,The following statement contains a magic number: Y = (int)completionWindow.Bottom + 6;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowParameterInfo,The following statement contains a magic number: lastParam = -2;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowTooltipInfo,The following statement contains a magic number: headlabel.WidthRequest = headlabel.RealWidth + 70;
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowTooltipInfo,The following statement contains a magic number: descriptionBox.PackStart (CreateCategory (TooltipInformationWindow.GetHeaderMarkup (cat.Item1)' cat.Item2)' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ShowTooltipInfo,The following statement contains a magic number: descriptionBox.PackStart (CreateCategory (TooltipInformationWindow.GetHeaderMarkup (GettextCatalog.GetString ("Summary"))' currentTooltipInformation.SummaryMarkup)' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,ParameterInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ParameterInformationWindow.cs,ChangeOverload,The following statement contains a magic number: lastParam = -2;
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The following statement contains a magic number: int numFilterThreads = Math.Max (Math.Min (dataList.Count / 4000' Environment.ProcessorCount / 2)' 1);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The following statement contains a magic number: int numFilterThreads = Math.Max (Math.Min (dataList.Count / 4000' Environment.ProcessorCount / 2)' 1);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The following statement contains a magic number: var items = new List<int> (slice / 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionDataList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionDataList.cs,DefaultFilterItems,The following statement contains a magic number: var categories = new List<CategorizedCompletionItems> (5);
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: context.MoveTo ((width - lWidth) / 2' yPos + (height - lHeight - yPos) / 2 - lHeight / 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: context.MoveTo ((width - lWidth) / 2' yPos + (height - lHeight - yPos) / 2 - lHeight / 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: context.MoveTo ((width - lWidth) / 2' yPos + (height - lHeight - yPos) / 2 - lHeight / 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,OnExposeEvent,The following statement contains a magic number: Iterate (true' ref yPos' delegate (CategorizedCompletionItems category' int ypos) { 					if (ypos >= height) 						return; 					if (ypos < -rowHeight) 						return;  					//	window.DrawRectangle (this.Style.BackgroundGC (StateType.Insensitive)' true' 0' yPos' width' rowHeight); 					int x = 2; 					if (category.CompletionCategory != null && !string.IsNullOrEmpty (category.CompletionCategory.Icon)) { 						var icon = ImageService.GetIcon (category.CompletionCategory.Icon' IconSize.Menu); 						context.DrawImage (this' icon' 0' ypos); 						x = (int)icon.Width + 4; 					} 					context.Rectangle (0' ypos' Allocation.Width' rowHeight); 					context.SetSourceColor (backgroundColor); 					context.Fill ();   					//					layout.SetMarkup ("<span weight='bold' foreground='#AAAAAA'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					//					window.DrawLayout (textGCInsensitive' x - 1' ypos + 1 + (rowHeight - py) / 2' layout); 					//					layout.SetMarkup ("<span weight='bold'>" + (category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized") + "</span>"); 					categoryLayout.SetMarkup ((category.CompletionCategory != null ? category.CompletionCategory.DisplayText : "Uncategorized")); 					int px' py; 					categoryLayout.GetPixelSize (out px' out py); 					context.MoveTo (x' ypos + (rowHeight - py) / 2); 					context.SetSourceColor (categoryColor); 					Pango.CairoHelper.ShowLayout (context' categoryLayout); 				}' delegate (CategorizedCompletionItems curCategory' int item' int itemidx' int ypos) { 				if (ypos >= height) 					return false; 				if (ypos < -rowHeight) 					return true; 				const int categoryModeItemIndenting = 0; 				if (InCategoryMode && curCategory != null && curCategory.CompletionCategory != null) { 					xpos = iconTextSpacing + categoryModeItemIndenting; 				} else { 					xpos = iconTextSpacing; 				} 				bool drawIconAsSelected = SelectionEnabled && item == SelectedItemIndex; 				string markup = DataProvider.HasMarkup (item) ? (DataProvider.GetMarkup (item) ?? "&lt;null&gt;") : GLib.Markup.EscapeText (DataProvider.GetText (item) ?? "<null>"); 				string description = DataProvider.GetDescription (item' drawIconAsSelected);  				if (string.IsNullOrEmpty (description)) { 					layout.SetMarkup (markup); 				} else { 					layout.SetMarkup (markup + " " + description); 				}  				string text = DataProvider.GetText (item);  				if (!string.IsNullOrEmpty (text)) { 					int [] matchIndices = DataProvider.GetHighlightedTextIndices(item); 					if (matchIndices != null) { 						Pango.AttrList attrList = layout.Attributes ?? new Pango.AttrList (); 						for (int newSelection = 0; newSelection < matchIndices.Length; newSelection++) { 							int idx = matchIndices [newSelection]; 							var bold = new AttrWeight (Weight.Bold);  							bold.StartIndex = (uint)idx; 							bold.EndIndex = (uint)(idx + 1); 							attrList.Insert (bold);  							if (item != SelectedItemIndex) { 								var highlightColor = (item == SelectedItemIndex) ? Styles.CodeCompletion.SelectionHighlightColor : Styles.CodeCompletion.HighlightColor; 								var fg = new AttrForeground ((ushort)(highlightColor.Red * ushort.MaxValue)' (ushort)(highlightColor.Green * ushort.MaxValue)' (ushort)(highlightColor.Blue * ushort.MaxValue)); 								fg.StartIndex = (uint)idx; 								fg.EndIndex = (uint)(idx + 1); 								attrList.Insert (fg); 							} 						} 						layout.Attributes = attrList; 					} 				}  				Xwt.Drawing.Image icon = DataProvider.GetIcon (item); 				int iconHeight' iconWidth; 				if (icon != null) { 					if (drawIconAsSelected) 						icon = icon.WithStyles ("sel"); 					iconWidth = (int)icon.Width; 					iconHeight = (int)icon.Height; 				} else if (!Gtk.Icon.SizeLookup (IconSize.Menu' out iconWidth' out iconHeight)) { 					iconHeight = iconWidth = 24; 				}  				int wi' he' typos' iypos; 				layout.GetPixelSize (out wi' out he);   				typos = he < rowHeight ? ypos + (int)Math.Ceiling ((rowHeight - he) / 2.0) : ypos; 				if (scalef <= 1.0) 					typos -= 1; // 1px up on non HiDPI 				iypos = iconHeight < rowHeight ? ypos + (rowHeight - iconHeight) / 2 : ypos; 				if (item == SelectedItemIndex) { 					var barStyle = SelectionEnabled ? Styles.CodeCompletion.SelectionBackgroundColor : Styles.CodeCompletion.SelectionBackgroundInactiveColor; 					context.SetSourceColor (barStyle.ToCairoColor ());  					if (SelectionEnabled) { 						context.Rectangle (0' ypos' Allocation.Width' rowHeight); 						context.Fill (); 					} else { 						context.LineWidth++; 						context.Rectangle (0.5' ypos + 0.5' Allocation.Width - 1' rowHeight - 1); 						context.Stroke (); 						context.LineWidth--; 					} 				}  				if (icon != null) { 					context.DrawImage (this' icon' xpos' iypos); 					xpos += iconTextSpacing; 				} 				context.SetSourceColor ((drawIconAsSelected ? Styles.CodeCompletion.SelectionTextColor : Styles.CodeCompletion.TextColor).ToCairoColor ()); 				var textXPos = xpos + iconWidth + 2; 				context.MoveTo (textXPos' typos); 				layout.Width = (int)((Allocation.Width - textXPos) * Pango.Scale.PangoScale); 				layout.Ellipsize = EllipsizeMode.End; 				Pango.CairoHelper.ShowLayout (context' layout); 				int textW' textH; 				layout.GetPixelSize (out textW' out textH); 				layout.Width = -1; 				layout.Ellipsize = EllipsizeMode.None;  				layout.SetMarkup (""); 				if (layout.Attributes != null) { 					layout.Attributes.Dispose (); 					layout.Attributes = null; 				}  				string rightText = DataProvider.GetRightSideDescription (item' drawIconAsSelected); 					if (!string.IsNullOrEmpty (rightText)) { 						layout.SetMarkup (rightText);  						int w' h; 						layout.GetPixelSize (out w' out h); 						const int leftpadding = 8; 						const int rightpadding = 3; 						w += rightpadding; 						w = Math.Min (w' Allocation.Width - textXPos - textW - leftpadding); 						wi += w; 						typos = h < rowHeight ? ypos + (rowHeight - h) / 2 : ypos; 						if (scalef <= 1.0) 							typos -= 1; // 1px up on non HiDPI 						context.MoveTo (Allocation.Width - w' typos); 						layout.Width = (int)(w * Pango.Scale.PangoScale); 						layout.Ellipsize = EllipsizeMode.End;  						Pango.CairoHelper.ShowLayout (context' layout); 						layout.Width = -1; 						layout.Ellipsize = EllipsizeMode.None;  					}  					if (Math.Min (maxListWidth'  wi + xpos + iconWidth + 2) > listWidth) { 						WidthRequest = listWidth = Math.Min (maxListWidth' wi + xpos + iconWidth + 2 + iconTextSpacing); 						win.ResetSizes (); 					} else { 						//workaround for the vscrollbar display - the calculated width needs to be the width ofthe render region. 						if (Allocation.Width < listWidth) { 							if (listWidth - Allocation.Width < 30) { 								WidthRequest = listWidth + listWidth - Allocation.Width; 								win.ResetSizes (); 							} 						} 					}  					return true; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,ListWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\ListWidget.cs,CalcVisibleRows,The following statement contains a magic number: rowHeight = Math.Max (1' (int)icon.Height + 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,AddOverload,The following statement contains a magic number: w >= Size.Width - 10
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: headLabel.MaxWidth = ((int) (Screen?.VisibleBounds.Width / 5 ?? LabelMaxWidth));
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: headLabel.WidthRequest = headLabel.RealWidth + 70;
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: descriptionBox.PackStart (CreateCategory (GetHeaderMarkup (cat.Item1)' cat.Item2' foreColor' Theme.Font.ToPangoFont ()' LabelMaxWidth - 80)' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: descriptionBox.PackStart (CreateCategory (GetHeaderMarkup (cat.Item1)' cat.Item2' foreColor' Theme.Font.ToPangoFont ()' LabelMaxWidth - 80)' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: descriptionBox.PackStart (CreateCategory (GetHeaderMarkup (GettextCatalog.GetString ("Summary"))' o.SummaryMarkup' foreColor' Theme.Font.ToPangoFont ()' LabelMaxWidth - 80)' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: descriptionBox.PackStart (CreateCategory (GetHeaderMarkup (GettextCatalog.GetString ("Summary"))' o.SummaryMarkup' foreColor' Theme.Font.ToPangoFont ()' LabelMaxWidth - 80)' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: contentLabel.MaxWidth = LabelMaxWidth - 80;
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: descriptionBox.PackEnd (contentLabel' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,ShowOverload,The following statement contains a magic number: Xwt.Application.TimeoutInvoke (50' delegate { 					Opacity = 1; 					return false; 				});
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,CreateCategory,The following statement contains a magic number: vbox.Spacing = 8;
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: descriptionBox.Spacing = 4;
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: VBox vb = new VBox (false' 8);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: vb.PackStart (headLabel' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: vb.PackStart (descriptionBox' true' true' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: HBox hb = new HBox (false' 4);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: hb.PackStart (vb' true' true' 6);
Magic Number,MonoDevelop.Ide.CodeCompletion,TooltipInformationWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\TooltipInformationWindow.cs,TooltipInformationWindow,The following statement contains a magic number: vb2.Spacing = 4;
Magic Number,MonoDevelop.Ide.CodeCompletion,SignatureHelpParameterHintingData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\SignatureHelpParameterHintingData.cs,CreateTooltipInformation,The following statement contains a magic number: markup.AppendTaggedText (theme' documentation' p.Name.Length + 2' MaxParamColumnCount);
Magic Number,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,GetIcon,The following statement contains a magic number: var hash = modifier | type << 16;
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,UpdateDeclarationView,The following statement contains a magic number: declarationViewTimer = GLib.Timeout.Add (150' DelayedTooltipShow);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,EnsureDeclarationViewWindow,The following statement contains a magic number: declarationViewWindow.LabelMaxWidth = 380;
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The following statement contains a magic number: switch (descriptor.SpecialKey) { 			case SpecialKey.Home: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				SelectedItemIndex = ViewIndexToItemIndex (0); 				return KeyActions.Ignore;  			case SpecialKey.End: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				SelectedItemIndex = ViewIndexToItemIndex (filteredItems.Count - 1); 				return KeyActions.Ignore;  			case SpecialKey.Up: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) { 					if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) 						AutoCompleteEmptyMatch = AutoSelect = true; 					if (!InCategoryMode) { 						IdeApp.Preferences.EnableCompletionCategoryMode.Set (true); 						return KeyActions.Ignore; 					} 					MoveToCategory (-1); 					return KeyActions.Ignore; 				} 				if (SelectionEnabled && filteredItems.Count < 1) 					return KeyActions.CloseWindow | KeyActions.Process; 				if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) { 					AutoCompleteEmptyMatch = AutoSelect = true; 				} else { 					view.MoveCursor (-1); 				} 				return KeyActions.Ignore;  			case SpecialKey.Tab: 				//tab always completes current item even if selection is disabled 				if (!AutoSelect) 					AutoSelect = true; 				if (!AutoCompleteEmptyMatch) 					AutoCompleteEmptyMatch = true; 				goto case SpecialKey.Return;  			case SpecialKey.Return: 				if (descriptor.ModifierKeys != ModifierKeys.None && descriptor.ModifierKeys != ModifierKeys.Shift) 					return KeyActions.CloseWindow; 				if (dataList == null || dataList.Count == 0 || !listWindow.SelectionEnabled) 					return KeyActions.CloseWindow; 				WasShiftPressed = (descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift;  				if (SelectedItem != null) { 					switch (SelectedItem.Rules.EnterKeyRule) { 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.Always: 						return KeyActions.Complete | KeyActions.Process | KeyActions.CloseWindow; 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.AfterFullyTypedWord: 						if (PartialWord.Length == SelectedItem.CompletionText.Length) 							return KeyActions.Complete | KeyActions.Ignore | KeyActions.CloseWindow; 						return KeyActions.Complete | KeyActions.Process | KeyActions.CloseWindow; 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.Never: 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.Default: 					default: 						return KeyActions.Complete | KeyActions.Ignore | KeyActions.CloseWindow; 					} 				} 				return KeyActions.Complete | KeyActions.Ignore | KeyActions.CloseWindow;  			case SpecialKey.Down: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) { 					if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) 						AutoCompleteEmptyMatch = AutoSelect = true; 					if (!InCategoryMode) { 						IdeApp.Preferences.EnableCompletionCategoryMode.Set (true); 						return KeyActions.Ignore; 					} 					MoveToCategory (1); 					return KeyActions.Ignore; 				} 				if (SelectionEnabled && filteredItems.Count < 1) 					return KeyActions.CloseWindow | KeyActions.Process;  				if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) { 					AutoCompleteEmptyMatch = AutoSelect = true; 				} else { 					view.MoveCursor (1); 				} 				return KeyActions.Ignore;  			case SpecialKey.PageUp: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				if (filteredItems.Count < 2) 					return KeyActions.CloseWindow | KeyActions.Process; 				view.PageUp (); 				return KeyActions.Ignore;  			case SpecialKey.PageDown: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				if (filteredItems.Count < 2) 					return KeyActions.CloseWindow | KeyActions.Process; 				view.PageDown (); 				return KeyActions.Ignore;  			case SpecialKey.Left: 				//if (curPos == 0) return KeyActions.CloseWindow | KeyActions.Process; 				//curPos--; 				return KeyActions.Process;  			case SpecialKey.Right: 				//if (curPos == word.Length) return KeyActions.CloseWindow | KeyActions.Process; 				//curPos++; 				return KeyActions.Process;  				//			case Gdk.Key.Caps_Lock: 				//			case Gdk.Key.Num_Lock: 				//			case Gdk.Key.Scroll_Lock: 				//				return KeyActions.Ignore; 				// 				//			case Gdk.Key.Control_L: 				//			case Gdk.Key.Control_R: 				//			case Gdk.Key.Alt_L: 				//			case Gdk.Key.Alt_R: 				//			case Gdk.Key.Shift_L: 				//			case Gdk.Key.Shift_R: 				//			case Gdk.Key.ISO_Level3_Shift: 				//				// AltGr 				//				return KeyActions.Process; 			}
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PreProcessKey,The following statement contains a magic number: switch (descriptor.SpecialKey) { 			case SpecialKey.Home: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				SelectedItemIndex = ViewIndexToItemIndex (0); 				return KeyActions.Ignore;  			case SpecialKey.End: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				SelectedItemIndex = ViewIndexToItemIndex (filteredItems.Count - 1); 				return KeyActions.Ignore;  			case SpecialKey.Up: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) { 					if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) 						AutoCompleteEmptyMatch = AutoSelect = true; 					if (!InCategoryMode) { 						IdeApp.Preferences.EnableCompletionCategoryMode.Set (true); 						return KeyActions.Ignore; 					} 					MoveToCategory (-1); 					return KeyActions.Ignore; 				} 				if (SelectionEnabled && filteredItems.Count < 1) 					return KeyActions.CloseWindow | KeyActions.Process; 				if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) { 					AutoCompleteEmptyMatch = AutoSelect = true; 				} else { 					view.MoveCursor (-1); 				} 				return KeyActions.Ignore;  			case SpecialKey.Tab: 				//tab always completes current item even if selection is disabled 				if (!AutoSelect) 					AutoSelect = true; 				if (!AutoCompleteEmptyMatch) 					AutoCompleteEmptyMatch = true; 				goto case SpecialKey.Return;  			case SpecialKey.Return: 				if (descriptor.ModifierKeys != ModifierKeys.None && descriptor.ModifierKeys != ModifierKeys.Shift) 					return KeyActions.CloseWindow; 				if (dataList == null || dataList.Count == 0 || !listWindow.SelectionEnabled) 					return KeyActions.CloseWindow; 				WasShiftPressed = (descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift;  				if (SelectedItem != null) { 					switch (SelectedItem.Rules.EnterKeyRule) { 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.Always: 						return KeyActions.Complete | KeyActions.Process | KeyActions.CloseWindow; 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.AfterFullyTypedWord: 						if (PartialWord.Length == SelectedItem.CompletionText.Length) 							return KeyActions.Complete | KeyActions.Ignore | KeyActions.CloseWindow; 						return KeyActions.Complete | KeyActions.Process | KeyActions.CloseWindow; 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.Never: 					case Microsoft.CodeAnalysis.Completion.EnterKeyRule.Default: 					default: 						return KeyActions.Complete | KeyActions.Ignore | KeyActions.CloseWindow; 					} 				} 				return KeyActions.Complete | KeyActions.Ignore | KeyActions.CloseWindow;  			case SpecialKey.Down: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) { 					if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) 						AutoCompleteEmptyMatch = AutoSelect = true; 					if (!InCategoryMode) { 						IdeApp.Preferences.EnableCompletionCategoryMode.Set (true); 						return KeyActions.Ignore; 					} 					MoveToCategory (1); 					return KeyActions.Ignore; 				} 				if (SelectionEnabled && filteredItems.Count < 1) 					return KeyActions.CloseWindow | KeyActions.Process;  				if (!SelectionEnabled /*&& !CompletionWindowManager.ForceSuggestionMode*/) { 					AutoCompleteEmptyMatch = AutoSelect = true; 				} else { 					view.MoveCursor (1); 				} 				return KeyActions.Ignore;  			case SpecialKey.PageUp: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				if (filteredItems.Count < 2) 					return KeyActions.CloseWindow | KeyActions.Process; 				view.PageUp (); 				return KeyActions.Ignore;  			case SpecialKey.PageDown: 				if ((descriptor.ModifierKeys & ModifierKeys.Shift) == ModifierKeys.Shift) 					return KeyActions.Process; 				if (filteredItems.Count < 2) 					return KeyActions.CloseWindow | KeyActions.Process; 				view.PageDown (); 				return KeyActions.Ignore;  			case SpecialKey.Left: 				//if (curPos == 0) return KeyActions.CloseWindow | KeyActions.Process; 				//curPos--; 				return KeyActions.Process;  			case SpecialKey.Right: 				//if (curPos == word.Length) return KeyActions.CloseWindow | KeyActions.Process; 				//curPos++; 				return KeyActions.Process;  				//			case Gdk.Key.Caps_Lock: 				//			case Gdk.Key.Num_Lock: 				//			case Gdk.Key.Scroll_Lock: 				//				return KeyActions.Ignore; 				// 				//			case Gdk.Key.Control_L: 				//			case Gdk.Key.Control_R: 				//			case Gdk.Key.Alt_L: 				//			case Gdk.Key.Alt_R: 				//			case Gdk.Key.Shift_L: 				//			case Gdk.Key.Shift_R: 				//			case Gdk.Key.ISO_Level3_Shift: 				//				// AltGr 				//				return KeyActions.Process; 			}
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ResetSizes,The following statement contains a magic number: int width = Math.Max (allocWidth' list.WidthRequest + Theme.CornerRadius * 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ResetSizes,The following statement contains a magic number: int height = Math.Max (Allocation.Height' list.HeightRequest + 2 + (footer != null ? footer.Allocation.Height : 0) + Theme.CornerRadius * 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ResetSizes,The following statement contains a magic number: int height = Math.Max (Allocation.Height' list.HeightRequest + 2 + (footer != null ? footer.Allocation.Height : 0) + Theme.CornerRadius * 2);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,PageDown,The following statement contains a magic number: MoveCursor (8);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,PageUp,The following statement contains a magic number: MoveCursor (-8);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ShowLoadingMessage,The following statement contains a magic number: hbox.BorderWidth = 3;
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ShowLoadingMessage,The following statement contains a magic number: hbox.PackStart (lab' true' true' 3);
Magic Number,MonoDevelop.Ide.CodeCompletion,CompletionListWindowGtk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionListWindowGtk.cs,ShowPreviewCompletionEntry,The following statement contains a magic number: GLib.Timeout.Add (10' delegate { 				previewEntry.GrabFocus (); 				return false; 			});
Magic Number,MonoDevelop.Ide.Desktop,RecentFileStorage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\RecentFileStorage.cs,SaveRecentFiles,The following statement contains a magic number: await Task.Delay (1000).ConfigureAwait (false);
Magic Number,MonoDevelop.Ide.Desktop,RecentFileStorage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\RecentFileStorage.cs,AcquireFileExclusive,The following statement contains a magic number: const int MAX_WAIT_TIME = 1000;
Magic Number,MonoDevelop.Ide.Desktop,RecentFileStorage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Desktop\RecentFileStorage.cs,AcquireFileExclusive,The following statement contains a magic number: const int RETRY_WAIT = 50;
Magic Number,MonoDevelop.Ide.Projects,ProjectOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectOptionsDialog.cs,ProjectOptionsDialog,The following statement contains a magic number: this.DefaultWidth = 960;
Magic Number,MonoDevelop.Ide.Projects,ProjectOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectOptionsDialog.cs,ProjectOptionsDialog,The following statement contains a magic number: this.DefaultHeight = 680;
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: this.vbox79.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: this.vbox79.BorderWidth = ((uint)(7));
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: this.hbox63.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: w7.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: w7.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: w7.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.button9' -6);
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 371;
Magic Number,MonoDevelop.Ide.Projects,RenameConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\RenameConfigDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 149;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,NewFileDialog,The following statement contains a magic number: BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,SelectTemplate,The following statement contains a magic number: (List<TemplateItem>)(catStore.GetValue (iter' 2))
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,AddTemplate,The following statement contains a magic number: (templateLanguage != "") && (activeLangs.Count > 2)
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,FillCategoryTemplates,The following statement contains a magic number: var list = (List<TemplateItem>)(catStore.GetValue (iter' 2));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.hpaned1.Position = 192;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.catView.WidthRequest = 160;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.panedTemplates.Position = 292;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.boxTemplates.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.scrolledInfo.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.boxInfo.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.boxInfo.BorderWidth = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.labelTemplateTitle.WidthRequest = 145;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.infoLabel.WidthRequest = 145;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w16.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.boxProject.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.hbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.hbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w23.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w25.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w25.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: w25.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.cancelButton' -6);
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 718;
Magic Number,MonoDevelop.Ide.Projects,NewFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 524;
Magic Number,MonoDevelop.Ide.Projects,TemplateTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,TemplateTreeView,The following statement contains a magic number: crp.Ypad = 2;
Magic Number,MonoDevelop.Ide.Projects,TemplateTreeView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewFileDialog.cs,TemplateTreeView,The following statement contains a magic number: var crp = new CellRendererImage () { 					StockSize = Gtk.IconSize.Dnd' 					Ypad = 2' 				};
Magic Number,MonoDevelop.Ide.Projects,AddFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddFileDialog.cs,RunDefault,The following statement contains a magic number: box.PackStart (check' false' false' 4);
Magic Number,MonoDevelop.Ide.Projects,AddFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddFileDialog.cs,RunDefault,The following statement contains a magic number: box.PackStart (combo' false' false' 4);
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(9));
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: w6.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: w8.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: w8.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: w8.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 400;
Magic Number,MonoDevelop.Ide.Projects,AddMimeTypeDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddMimeTypeDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 164;
Magic Number,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,AssemblyReferencePanel,The following statement contains a magic number: Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,AssemblyReferencePanel,The following statement contains a magic number: BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,GetMatchMarkup,The following statement contains a magic number: var color = HslColor.GenerateHighlightColors (widget.Style.Base (StateType.Normal)'  				widget.Style.Text (StateType.Normal)' 3)[2];
Magic Number,MonoDevelop.Ide.Projects,AssemblyReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AssemblyReferencePanel.cs,GetMatchMarkup,The following statement contains a magic number: var color = HslColor.GenerateHighlightColors (widget.Style.Base (StateType.Normal)'  				widget.Style.Text (StateType.Normal)' 3)[2];
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,ConfirmProjectDeleteDialog,The following statement contains a magic number: col.AddAttribute (cre' "text"' 2);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,ConfirmProjectDeleteDialog,The following statement contains a magic number: col.AddAttribute (cre' "foreground"' 4);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,ConfirmProjectDeleteDialog,The following statement contains a magic number: store.SetSortColumnId (2' SortType.Ascending);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,GetFilesToDelete,The following statement contains a magic number: files.Add ((string) store.GetValue (it' 3));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,The following statement contains a magic number: pix = pix.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,The following statement contains a magic number: var pix = IdeServices.DesktopService.GetIconForFile (dir' IconSize.Menu).WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,FillDirRec,The following statement contains a magic number: store.SetValue (dit' 4' "dimgrey");
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,CrtToggled,The following statement contains a magic number: string path = (string) store.GetValue (iter' 3);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,SelectWholeDirectory,The following statement contains a magic number: FilePath cpath = (string) store.GetValue (it' 3);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,UpdateDirectoryToggle,The following statement contains a magic number: FilePath cpath = (string) store.GetValue (it' 3);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.alignment1.LeftPadding = ((uint)(30));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w5.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w6.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.alignment2.LeftPadding = ((uint)(30));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w9.Position = 4;
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w11.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w11.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: w11.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 512;
Magic Number,MonoDevelop.Ide.Projects,ConfirmProjectDeleteDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ConfirmProjectDeleteDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 387;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,DefaultPolicyOptionsDialog,The following statement contains a magic number: topBar.Spacing = 3;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,DefaultPolicyOptionsDialog,The following statement contains a magic number: align.LeftPadding = 9;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,DefaultPolicyOptionsDialog,The following statement contains a magic number: align.TopPadding = 9;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,DefaultPolicyOptionsDialog,The following statement contains a magic number: align.RightPadding = 9;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,DefaultPolicyOptionsDialog,The following statement contains a magic number: align.BottomPadding = 9;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,FillPolicySets,The following statement contains a magic number: policiesCombo.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.Projects,DefaultPolicyOptionsDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DefaultPolicyOptionsDialog.cs,FillPolicySets,The following statement contains a magic number: policiesCombo.SizeRequest ().Width < 200
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.hbox64.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.hbox64.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.imageQuestion.IconSize = ((global::Gtk.IconSize)(6));
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.vbox80.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: w7.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.button11' -9);
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.button12' -8);
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 381;
Magic Number,MonoDevelop.Ide.Projects,DeleteConfigDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\DeleteConfigDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 128;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.hpaned1.Position = 182;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.hpaned1.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.AddFileButton.Relief = ((global::Gtk.ReliefStyle)(2));
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.typeBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: w15.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: w15.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: w15.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 522;
Magic Number,MonoDevelop.Ide.Projects,ProjectFileSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectFileSelectorDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 416;
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: w9.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: w9.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: w9.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 410;
Magic Number,MonoDevelop.Ide.Projects,IncludeNewFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\IncludeNewFilesDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 323;
Magic Number,MonoDevelop.Ide.Projects,ProjectReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectReferencePanel.cs,ProjectReferencePanel,The following statement contains a magic number: BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectReferencePanel.cs,AddReference,The following statement contains a magic number: Project project = (Project) store.GetValue (iter' 2);
Magic Number,MonoDevelop.Ide.Projects,ProjectReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectReferencePanel.cs,PopulateListView,The following statement contains a magic number: icon = icon.WithAlpha (0.5);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,OnMainBookSwitchPage,The following statement contains a magic number: filterEntry.Sensitive = args.PageNum != 3;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: boxRefs.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: HBox tab = new HBox (false' 3);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab = new HBox (false' 3);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab = new HBox (false' 3);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab = new HBox (false' 3);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: tab.BorderWidth = 3;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: header.SetPadding (6' 6' 6' 6);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: header.SetPadding (6' 6' 6' 6);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: header.SetPadding (6' 6' 6' 6);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,SelectReferenceDialog,The following statement contains a magic number: header.SetPadding (6' 6' 6' 6);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,LoadRecentFiles,The following statement contains a magic number: solutionPath = (FilePath)line.Substring (2);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.WidthRequest = 640;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.HeightRequest = 520;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.vbox5.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.vbox5.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.hpaned1.Position = 590;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.alignment1.RightPadding = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.alignment2 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.alignment2.LeftPadding = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.selectedHeader = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.selectedHeader = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.RemoveReferenceButton.Relief = ((global::Gtk.ReliefStyle)(2));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.hbox4.HeightRequest = 150;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.hbox4.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: w15.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: w15.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: w15.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.cancelbutton' -6);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.okbutton' -5);
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 889;
Magic Number,MonoDevelop.Ide.Projects,SelectReferenceDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 551;
Magic Number,MonoDevelop.Ide.Projects,CombinedBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,CombinedBox,The following statement contains a magic number: filterEntry.WidthRequest = 180;
Magic Number,MonoDevelop.Ide.Projects,CombinedBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,OnSizeAllocated,The following statement contains a magic number: allocation.Y -= 2;
Magic Number,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Render,The following statement contains a magic number: const int textXOffset = 2;
Magic Number,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Render,The following statement contains a magic number: int ty = cell_area.Y + (cell_area.Height - h) / 2 - textXOffset;
Magic Number,MonoDevelop.Ide.Projects,CustomSelectedReferenceCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\SelectReferenceDialog.cs,Render,The following statement contains a magic number: int textPixelWidth = cell_area.Width - ((int)Xpad * 2) ;
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: w4.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: w5.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: w7.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: w7.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: w7.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 429;
Magic Number,MonoDevelop.Ide.Projects,NewPolicySetDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewPolicySetDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 200;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: infoBox.BorderWidth = 4;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: infoBox.Spacing = 4;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: infoBox.SizeAllocated += delegate { 				var w = infoBox.Allocation.Width - 10; 				if (infoHeaderLabel.WidthRequest != w) { 					infoHeaderLabel.WidthRequest = w; 					infoDecriptionLabel.WidthRequest = w; 				} 			};
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: searchEntry.WidthRequest = 150;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: rightVbox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: templateView.HeightRequest = 200;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: infoScrolledWindow.HeightRequest = 75;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: sectionList.WidthRequest = 150;
Magic Number,MonoDevelop.Ide.Projects,TemplatePickerWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\TemplatePickerWidget.cs,TemplatePickerWidget,The following statement contains a magic number: rightVbox.WidthRequest = 300;
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: var table = new Table (5' 3' false) { 				ColumnSpacing = 4' 				RowSpacing = 4' 			};
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: var table = new Table (5' 3' false) { 				ColumnSpacing = 4' 				RowSpacing = 4' 			};
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: var table = new Table (5' 3' false) { 				ColumnSpacing = 4' 				RowSpacing = 4' 			};
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: var table = new Table (5' 3' false) { 				ColumnSpacing = 4' 				RowSpacing = 4' 			};
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (header' 0' 3' row' row + 1' expand' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (nameEntry' 1' 3' row' row+1' expand' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (locationEntry' 1' 3' row' row+1' expand' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (solutionNameEntry' 1' 2' row' row+1' expand' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (createSolutionDirectoryCheck' 2' 3' row' row+1' fill' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (createSolutionDirectoryCheck' 2' 3' row' row+1' fill' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,NewProjectOptionsWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectOptionsWidget.cs,NewProjectOptionsWidget,The following statement contains a magic number: table.Attach (saveInLabel' 1' 3' row' row+1' fill' shrink' 0' 0);
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 16;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.boxCustom = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.boxCustom = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.boxCustom.LeftPadding = ((uint)(42));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.entryName.WidthChars = 40;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.boxFile = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.boxFile = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.boxFile.LeftPadding = ((uint)(42));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w11.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox5.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w17.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w17.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w17.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 476;
Magic Number,MonoDevelop.Ide.Projects,ExportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 321;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 16;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox3.BorderWidth = ((uint)(12));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.boxCustom = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.boxCustom = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.boxCustom.LeftPadding = ((uint)(42));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.boxFile = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.boxFile = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.boxFile.LeftPadding = ((uint)(42));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.hbox2.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: w11.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: w17.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: w17.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: w17.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 475;
Magic Number,MonoDevelop.Ide.Projects,ApplyPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 325;
Magic Number,MonoDevelop.Ide.Projects,PoliciesListSummaryTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,OnExposeEvent,The following statement contains a magic number: var x = (a.Width - w) / 2;
Magic Number,MonoDevelop.Ide.Projects,PoliciesListSummaryTree,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ApplyPolicyDialog.cs,OnExposeEvent,The following statement contains a magic number: var y = (a.Height - h ) / 2;
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.vbox4.BorderWidth = ((uint)(9));
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.selector.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: w5.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: w5.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: w5.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 492;
Magic Number,MonoDevelop.Ide.Projects,ProjectSelectorDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ProjectSelectorDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 466;
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox5.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.vbox5.BorderWidth = ((uint)(9));
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w4.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.selector.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w5.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w7.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w7.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: w7.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 501;
Magic Number,MonoDevelop.Ide.Projects,ImportProjectPolicyDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ImportProjectPolicyDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 447;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.hbox1.BorderWidth = ((uint)(9));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.iconQuestion.IconSize = ((global::Gtk.IconSize)(6));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 18;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.labelTitle.WidthRequest = 450;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.alignment1 = new global::Gtk.Alignment (0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.alignment1.LeftPadding = ((uint)(20));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.labelKeep.WidthRequest = 376;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w10.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w12.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w15.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w18.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w18.BorderWidth = ((uint)(11));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: w18.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonCancel' -6);
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 536;
Magic Number,MonoDevelop.Ide.Projects,AddExternalFileDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\AddExternalFileDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 286;
Magic Number,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,PackageReferencePanel,The following statement contains a magic number: BorderWidth = 6;
Magic Number,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,GetMatchMarkup,The following statement contains a magic number: var color = HslColor.GenerateHighlightColors (widget.Style.Base (StateType.Normal)'  				widget.Style.Text (StateType.Normal)' 3)[2];
Magic Number,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,GetMatchMarkup,The following statement contains a magic number: var color = HslColor.GenerateHighlightColors (widget.Style.Base (StateType.Normal)'  				widget.Style.Text (StateType.Normal)' 3)[2];
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,ExportSolutionDialog,The following statement contains a magic number: formats.Length < 2
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,ExportSolutionDialog,The following statement contains a magic number: folderEntry.WidthRequest = 380;
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w1.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 12;
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.table = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.table = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.table.RowSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.table.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w2.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w2.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w2.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w3.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w4.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w6.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w10.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w10.BorderWidth = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: w10.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.button51' -6);
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.AddActionWidget (this.buttonOk' -5);
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 496;
Magic Number,MonoDevelop.Ide.Projects,ExportSolutionDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\ExportSolutionDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 154;
Magic Number,MonoDevelop.Ide.Projects,NewProjectDialogController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewProjectController.cs,SelectTemplateInCategory,The following statement contains a magic number: parts.Count < 2
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: DefaultWidth = 901;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: DefaultHeight = 632;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: topLabelEventBox.HeightRequest = 52;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: font.Size = (int)(font.Size * 2.0);
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: topLabelHBox.PackStart (topBannerLabel' false' false' 20);
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateCategoriesBgBox.WidthRequest = 220;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templatesBgBox.WidthRequest = 400;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateVBox.BorderWidth = 20;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateVBox.Spacing = 10;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateImage.HeightRequest = 140;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateImage.WidthRequest = 240;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateVBox.PackStart (templateImage' false' false' 10);
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateNameLabel.WidthRequest = 240;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: templateDescriptionLabel.WidthRequest = 240;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: cancelButtonBox.BorderWidth = 16;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: previousNextButtonBox.BorderWidth = 16;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,Build,The following statement contains a magic number: previousNextButtonBox.Spacing = 9;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,CreateTemplateCategoriesTreeViewColumn,The following statement contains a magic number: categoryTextRenderer.Xpad = 17;
Magic Number,MonoDevelop.Ide.Projects,GtkNewProjectDialogBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkNewProjectDialogBackend.cs,CreateTemplateListTreeViewColumn,The following statement contains a magic number: templateTextRenderer.Xpad = 14;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,CreateFolderTreeViewColumns,The following statement contains a magic number: folderTreeView.LevelIndentation = 10;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,GetTransparentIcon,The following statement contains a magic number: return ImageService.GetIcon (iconId' IconSize.Menu).WithAlpha (0.3);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,Build,The following statement contains a magic number: this.mainVBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,Build,The following statement contains a magic number: this.previewLabelHBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectFolderPreviewWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectFolderPreviewWidget.cs,Build,The following statement contains a magic number: this.GtkScrolledWindow.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,GtkProjectConfigurationWidget,The following statement contains a magic number: projectNameTextBox.WidthRequest = 335;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControlsSeparator,The following statement contains a magic number: projectConfigurationTable.Attach (  				extraControlsSeparator'  				0'  				3'  				defaultTableRows'  				defaultTableRows + 1'  				AttachOptions.Fill'  				(AttachOptions)0'  				0'  				10);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControlsSeparator,The following statement contains a magic number: projectConfigurationTable.Attach (  				extraControlsSeparator'  				0'  				3'  				defaultTableRows'  				defaultTableRows + 1'  				AttachOptions.Fill'  				(AttachOptions)0'  				0'  				10);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControl,The following statement contains a magic number: var extraRow = new ExtraControlTableRow {  				Row = projectConfigurationTable.NRows'  				Label = new Label (control.Label ?? string.Empty) {  					Xpad = 5'  					Xalign = 1'  					Justify = Justification.Left  				}'  				MainWidget = (Widget)control  			};
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,CreateTooltip,The following statement contains a magic number: var tooltipEventBox = new EventBox {  				HeightRequest = 16'  				WidthRequest = 16'  				VisibleWindow = false  			};
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,CreateTooltip,The following statement contains a magic number: var tooltipEventBox = new EventBox {  				HeightRequest = 16'  				WidthRequest = 16'  				VisibleWindow = false  			};
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControl,The following statement contains a magic number: uint rightAttach = 2;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControl,The following statement contains a magic number: rightAttach = 3;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControl,The following statement contains a magic number: projectConfigurationTable.Attach (  					extraRow.InformationTooltipWidget'  					2'  					3'  					extraRow.Row'  					extraRow.Row + 1'  					AttachOptions.Fill'  					AttachOptions.Fill'  					0'  					0);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,AddExtraControl,The following statement contains a magic number: projectConfigurationTable.Attach (  					extraRow.InformationTooltipWidget'  					2'  					3'  					extraRow.Row'  					extraRow.Row + 1'  					AttachOptions.Fill'  					AttachOptions.Fill'  					0'  					0);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.leftBorderEventBox.WidthRequest = 30;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectConfigurationTableEventBox.WidthRequest = 561;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectConfigurationTable = new global::Gtk.Table (((uint)(8))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectConfigurationTable = new global::Gtk.Table (((uint)(8))' ((uint)(3))' false);
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectConfigurationTable.RowSpacing = ((uint)(7));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectConfigurationTable.ColumnSpacing = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.LeftAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.XPadding = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w4.TopAttach = ((uint)(7));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(8));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w4.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w5.TopAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w5.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.locationLabel.Xpad = 5;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w6.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w6.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w7.TopAttach = ((uint)(5));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w7.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w7.YPadding = ((uint)(10));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w8.TopAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w8.BottomAttach = ((uint)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w8.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectNameLabel.Xpad = 5;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w9.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w9.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w10.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w10.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.solutionNameLabel.Xpad = 5;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w11.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w11.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w11.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w12.TopAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w12.BottomAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w12.RightAttach = ((uint)(3));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w12.YPadding = ((uint)(10));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w12.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w13.BottomAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w13.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w13.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w13.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w14.TopAttach = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w14.BottomAttach = ((uint)(7));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w14.RightAttach = ((uint)(2));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w14.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w14.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.versionControlSpacerLabel.WidthRequest = 24;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.versionControlLabel.Xpad = 5;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w17.TopAttach = ((uint)(6));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w17.BottomAttach = ((uint)(7));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w17.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w17.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w19.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectConfigurationRightBorderEventBox.WidthRequest = 30;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w22.Position = 2;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.previewProjectFolderVBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.previewProjectFolderVBox.BorderWidth = ((uint)(20));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectFolderPreviewWidget.WidthRequest = 240;
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: this.projectFolderPreviewWidget.Events = ((global::Gdk.EventMask)(256));
Magic Number,MonoDevelop.Ide.Projects,GtkProjectConfigurationWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkProjectConfigurationWidget.cs,Build,The following statement contains a magic number: w25.Position = 3;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,GetSize,The following statement contains a magic number: height = (int)CategoryIcon.Height + ((int)Ypad * 2) + topLevelTemplateHeadingTotalYPadding;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,DrawIcon,The following statement contains a magic number: int iconY = cell_area.Y + ((cell_area.Height - (int)CategoryIcon.Height) / 2) + (Category == null ? 0 : topLevelTemplateHeadingYOffset);
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,DrawTemplateCategoryText,The following statement contains a magic number: int textPixelWidth = widget.Allocation.Width - ((int)Xpad * 2) - iconRect.Width - iconTextPadding;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCategoryCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCategoryCellRenderer.cs,DrawTemplateCategoryText,The following statement contains a magic number: int textY = cell_area.Y + (cell_area.Height - h) / 2 + textYOffset;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,GetSize,The following statement contains a magic number: height = (int)TemplateIcon.Height + ((int)Ypad * 2);
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawTemplateCategoryText,The following statement contains a magic number: int textPixelWidth = widget.Allocation.Width - ((int)Xpad * 2);
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawTemplateCategoryText,The following statement contains a magic number: int textY = cell_area.Y + (cell_area.Height - h) / 2 + groupTemplateHeadingYOffset;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawTemplateNameText,The following statement contains a magic number: int textPixelWidth = cell_area.Width - ((int)Xpad * 2) - iconRect.Width - iconTextPadding;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawTemplateNameText,The following statement contains a magic number: int textY = cell_area.Y + (RenderRecentTemplate ? (2) : (cell_area.Height - h) / 2);
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawTemplateNameText,The following statement contains a magic number: int textY = cell_area.Y + (RenderRecentTemplate ? (2) : (cell_area.Height - h) / 2);
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawCategoryText,The following statement contains a magic number: int textPixelWidth = cell_area.Width - ((int)Xpad * 2) - iconRect.Width - iconTextPadding;
Magic Number,MonoDevelop.Ide.Projects,GtkTemplateCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\GtkTemplateCellRenderer.cs,DrawCategoryText,The following statement contains a magic number: int textY = cell_area.Y + ((cell_area.Height - h) - 2);
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,LanguageCellRenderer,The following statement contains a magic number: minLanguageRectWidth = languageLeftHandPadding + 				dropdownTriangleWidth + 				dropdownTriangleRightHandPadding + 				languageRightHandPadding + 10;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,Render,The following statement contains a magic number: int tw = TemplateHasMultipleLanguages () ? textWidth + dropdownTriangleWidth + 2 : textWidth;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,Render,The following statement contains a magic number: int languageTextX = languageRect.X + ((languageRect.Width - tw) / 2);
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,Render,The following statement contains a magic number: int languageTextY = languageRect.Y + (languageRect.Height - textHeight) / 2;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,Render,The following statement contains a magic number: int triangleY = languageRect.Y + (languageRect.Height - dropdownTriangleHeight) / 2;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,DrawTriangle,The following statement contains a magic number: ctx.LineTo (x + (width / 2)' y + height);
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,GetLanguageButtonRectangle,The following statement contains a magic number: int languageRectangleHeight = cell_area.Height - 8;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,GetLanguageButtonRectangle,The following statement contains a magic number: var dy = (cell_area.Height - languageRectangleHeight) / 2 - 1;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,RoundBorder,The following statement contains a magic number: double r = h / 2;
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + r' y + r' r' Math.PI / 2' Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + r' y + r' r' Math.PI / 2' Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + w - r' y + r' r' Math.PI + Math.PI / 2' Math.PI + Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Ide.Projects,LanguageCellRenderer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\LanguageCellRenderer.cs,RoundBorder,The following statement contains a magic number: ctx.Arc (x + w - r' y + r' r' Math.PI + Math.PI / 2' Math.PI + Math.PI + Math.PI / 2);
Magic Number,MonoDevelop.Ide.Projects,NewSolutionRunConfigurationDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\NewSolutionRunConfigurationDialog.cs,NewSolutionRunConfigurationDialog,The following statement contains a magic number: box.PackStart (label' expand: true' marginBottom: 12);
Magic Number,MonoDevelop.Ide.Navigation,TextFileNavigationPoint,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Navigation\TextFileNavigationPoint.cs,ShouldReplace,The following statement contains a magic number: return base.Equals (tf) && Math.Abs (line1 - line2) < 5;
Magic Number,MonoDevelop.Ide.Navigation,HistoryList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Navigation\HistoryList.cs,GetList,The following statement contains a magic number: int half = ((desiredLength - 1) / 2);
Magic Number,MonoDevelop.Components.AutoTest,AutoTestSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestSession.cs,Sync,The following statement contains a magic number: !syncEvent.WaitOne (30000)
Magic Number,MonoDevelop.Components.AutoTest,AutoTestSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestSession.cs,WaitForElement,The following statement contains a magic number: const int pollTime = 200;
Magic Number,MonoDevelop.Components.AutoTest,AutoTestSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestSession.cs,WaitForNoElement,The following statement contains a magic number: const int pollTime = 100;
Magic Number,MonoDevelop.Components.AutoTest,AutoTestSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestSession.cs,WaitForCounterToStabilize,The following statement contains a magic number: Func<int' bool> isDone = current => { 				// Check if the UI thread is stuck 				// Some counters require UI thread synchronization' so we might not be getting events 				try { 					ExecuteOnIdle (() => { }' timeout: 5000); 				} catch (TimeoutException) { 					return false; 				}  				// We're still getting value updates. 				if (current != lastValue) { 					lastValue = current; 					return false; 				}  				return true; 			};
Magic Number,MonoDevelop.Components.AutoTest,AutoTestClientSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestClientSession.cs,StartApplication,The following statement contains a magic number: !waitEvent.WaitOne (120000)
Magic Number,MonoDevelop.Components.AutoTest,AutoTestToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest\AutoTestToolbar.cs,GetExecutionInfo,The following statement contains a magic number: var info = new Dictionary<ExecutionInfoKeys' string> (3);
Magic Number,MonoDevelop.Ide.Fonts,FontChooserPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Fonts\FontChooserPanelWidget.cs,Build,The following statement contains a magic number: this.mainBox.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,CombineNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\CombineNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -100;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,GetTypeSortValue,The following statement contains a magic number: return 2;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,GetTypeSortValue,The following statement contains a magic number: return 3;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,GetTypeSortValue,The following statement contains a magic number: return 4;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,GetAccessSortValue,The following statement contains a magic number: return 2;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,GetAccessSortValue,The following statement contains a magic number: return 3;
Magic Number,MonoDevelop.Ide.Gui.Pads.ClassPad,MemberNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Pads.ClassPad\MemberNodeBuilder.cs,GetAccessSortValue,The following statement contains a magic number: return 4;
Magic Number,MonoDevelop.Ide.Updater,AddinsUpdateHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Updater\AddinsUpdateHandler.cs,WarnAvailableUpdates,The following statement contains a magic number: n<updates.Length && n < 10
Magic Number,MonoDevelop.Ide.Updater,AddinsUpdateHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Updater\AddinsUpdateHandler.cs,WarnAvailableUpdates,The following statement contains a magic number: updates.Length > 10
Magic Number,MonoDevelop.Ide.Updater,AddinsUpdateHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Updater\AddinsUpdateHandler.cs,WarnAvailableUpdates,The following statement contains a magic number: updateIcon.SetAlertMode (20);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageWidget.cs,WelcomePageWidget,The following statement contains a magic number: LogoHeight = 90;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageLinkButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageLinkButton.cs,WelcomePageLinkButton,The following statement contains a magic number: box = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageLinkButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageLinkButton.cs,GetLinkTooltip,The following statement contains a magic number: message = message.Substring (10);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageNewsFeed,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageNewsFeed.cs,WelcomePageNewsFeed,The following statement contains a magic number: ContentAlignment.TopPadding += 10;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageNewsFeed,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageNewsFeed.cs,LoadNews,The following statement contains a magic number: var label = new Label (GettextCatalog.GetString ("No news found.")) { Xalign = 0' Xpad = 6 };
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageNewsFeed,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageNewsFeed.cs,LoadNews,The following statement contains a magic number: box.PackStart (spacerLabel' true' false' 4);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: btn.WidthRequest = (int) (Styles.WelcomeScreen.Pad.Solutions.SolutionTile.Width / 2.3);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: btn.BorderPadding = 6;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: btn.LeftTextPadding = 24;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: btn.WidthRequest = (int) (Styles.WelcomeScreen.Pad.Solutions.SolutionTile.Width / 2.3);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: btn.BorderPadding = 6;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: btn.LeftTextPadding = 24;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageRecentProjectsList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageRecentProjectsList.cs,RecentFilesChanged,The following statement contains a magic number: button.BorderPadding = 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,WelcomePageSection,The following statement contains a magic number: uint p = Styles.WelcomeScreen.Pad.ShadowSize * 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: int inset = 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: var r = new Cairo.Rectangle (rect.X + ss + 0.5' rect.Y + ss + 0.5' rect.Width - ss * 2 - 1' rect.Height - ss * 2 - 1);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: var r = new Cairo.Rectangle (rect.X + ss + 0.5' rect.Y + ss + 0.5' rect.Width - ss * 2 - 1' rect.Height - ss * 2 - 1);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: var r = new Cairo.Rectangle (rect.X + ss + 0.5' rect.Y + ss + 0.5' rect.Width - ss * 2 - 1' rect.Height - ss * 2 - 1);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: var r = new Cairo.Rectangle (rect.X + ss + 0.5' rect.Y + ss + 0.5' rect.Width - ss * 2 - 1' rect.Height - ss * 2 - 1);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: var sr = new Cairo.Rectangle (r.X + inset' r.Y + inset + Styles.WelcomeScreen.Pad.ShadowVerticalOffset' r.Width - inset * 2' r.Height - inset * 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: var sr = new Cairo.Rectangle (r.X + inset' r.Y + inset + Styles.WelcomeScreen.Pad.ShadowVerticalOffset' r.Width - inset * 2' r.Height - inset * 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: double alpha = 0.2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: double alphaDec = 0.2 / (double)size;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: sr = new Cairo.Rectangle (sr.X - 1' sr.Y - 1' sr.Width + 2' sr.Height + 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: sr = new Cairo.Rectangle (sr.X - 1' sr.Y - 1' sr.Width + 2' sr.Height + 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: CairoExtensions.RoundedRectangle (ctx' sr.X' sr.Y' sr.Width' sr.Height' 4);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageSection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageSection.cs,OnExposeEvent,The following statement contains a magic number: CairoExtensions.RoundedRectangle (ctx' r.X' r.Y' r.Width' r.Height' 4);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,WelcomePageFeedItem,The following statement contains a magic number: Pango.AttrRise rise = new Pango.AttrRise (Pango.Units.FromPixels (7));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFeedItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFeedItem.cs,GetLinkTooltip,The following statement contains a magic number: message = message.Substring (10);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,WelcomePageListButton,The following statement contains a magic number: HeightRequest = Styles.WelcomeScreen.Pad.Solutions.SolutionTile.Height + 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.MoveTo (Allocation.X' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.MoveTo (Allocation.X' Allocation.Y + Allocation.Height - 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.MoveTo (Allocation.Right + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.MoveTo (Allocation.Right + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.LineTo (Allocation.Right + 0.5' Allocation.Bottom - 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.LineTo (Allocation.Right + 0.5' Allocation.Bottom - 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.MoveTo (Allocation.Left + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.MoveTo (Allocation.Left + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.LineTo (Allocation.Left + 0.5' Allocation.Bottom - 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawHoverBackground,The following statement contains a magic number: ctx.LineTo (Allocation.Left + 0.5' Allocation.Bottom - 0.5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawIcon,The following statement contains a magic number: int y = Allocation.Y + (Allocation.Height - (int)icon.Height) / 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawIcon,The following statement contains a magic number: x = x + (int)icon.Width - (int)star.Width + 3;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,DrawIcon,The following statement contains a magic number: y = y + (int)icon.Height - (int)star.Height + 3;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,OnExposeEvent,The following statement contains a magic number: int textWidth = Allocation.Width - LeftTextPadding - InternalPadding * 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageListButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageListButton.cs,OnExposeEvent,The following statement contains a magic number: int ty = Allocation.Y + (Allocation.Height - height) / 2;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageBarButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageBarButton.cs,WelcomePageBarButton,The following statement contains a magic number: imageNormal = imageHover.WithAlpha (0.7);
Magic Number,MonoDevelop.Ide.WelcomePage,DefaultWelcomePage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\DefaultWelcomePage.cs,BuildContent,The following statement contains a magic number: var mainAlignment = new Gtk.Alignment (0.5f' 0.5f' 0f' 1f);
Magic Number,MonoDevelop.Ide.WelcomePage,DefaultWelcomePage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\DefaultWelcomePage.cs,BuildContent,The following statement contains a magic number: var mainAlignment = new Gtk.Alignment (0.5f' 0.5f' 0f' 1f);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageProjectBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFrame.cs,WelcomePageProjectBar,The following statement contains a magic number: SetPadding (3' 3' 12' 12);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageProjectBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFrame.cs,WelcomePageProjectBar,The following statement contains a magic number: SetPadding (3' 3' 12' 12);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageProjectBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFrame.cs,WelcomePageProjectBar,The following statement contains a magic number: SetPadding (3' 3' 12' 12);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageProjectBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFrame.cs,WelcomePageProjectBar,The following statement contains a magic number: SetPadding (3' 3' 12' 12);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageProjectBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFrame.cs,WelcomePageProjectBar,The following statement contains a magic number: HBox box = new HBox (false' 6);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageTipOfTheDaySection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageTipOfTheDaySection.cs,WelcomePageTipOfTheDaySection,The following statement contains a magic number: Gtk.VBox box = new Gtk.VBox (false' 12);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageTipOfTheDaySection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageTipOfTheDaySection.cs,WelcomePageTipOfTheDaySection,The following statement contains a magic number: label.WidthRequest = 200;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageTipOfTheDaySection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageTipOfTheDaySection.cs,WelcomePageTipOfTheDaySection,The following statement contains a magic number: label.SetPadding (0' 10);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: TitleOffset = TextOffset = new Gdk.Point (0' 40);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: IconScale = 0.5;
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,OnMapped,The following statement contains a magic number: GLib.Timeout.Add (750' () => { 				new Animation () 					.AddConcurrent (new Animation ((f) => TitleOffset.Y = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOffset.Y  = (int) (40 * f)' start: 1' end: 0' easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => TitleOpacity = f'      easing: Easing.CubicInOut)' 0' 0.5f) 					.AddConcurrent (new Animation ((f) => TextOpacity = f'       easing: Easing.CubicInOut)' 0.1f' 0.6f) 					.AddConcurrent (new Animation ((f) => ButtonOpacity = f'     easing: Easing.CubicInOut)' 0.3f' 0.9f) 					.AddConcurrent (new Animation ((f) => BackgroundOpacity = f' easing: Easing.CubicInOut)' 0' 0.2f) 					.AddConcurrent (new Animation ((f) => IconOpacity = f'       easing: Easing.CubicInOut)' 0.2f' 0.7f) 					.AddConcurrent (new Animation ((f) => IconScale = f' start: 0.5f' end: 1' easing: Easing.SpringOut)' 0.2f' 0.7f) 					.Commit (this' "Intro"' length: 1200); 				return false; 			});
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RenderOuterShadow (new Gdk.Rectangle (region.X + 10' region.Y + 15' region.Width - 20' region.Height - 15)' Padding' 3' .25);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 5);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (.36' .53' .73));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (.36' .53' .73));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (.36' .53' .73));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (.21' .37' .54));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (.21' .37' .54));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (.21' .37' .54));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.SetSourceRGB (.29' .47' .67);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.SetSourceRGB (.29' .47' .67);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderBackground,The following statement contains a magic number: context.SetSourceRGB (.29' .47' .67);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderPreview,The following statement contains a magic number: context.DrawImage (this' brandedIcon.WithAlpha (opacity)' -brandedIcon.Width / 2' -brandedIcon.Height / 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderPreview,The following statement contains a magic number: context.DrawImage (this' brandedIcon.WithAlpha (opacity)' -brandedIcon.Width / 2' -brandedIcon.Height / 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderShadowedText,The following statement contains a magic number: context.MoveTo (position.X' position.Y + 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderShadowedText,The following statement contains a magic number: context.SetSourceRGBA (0' 0' 0' 0.3 * opacity);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 3);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 3);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 3);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (.15' .76' .09' opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (.15' .76' .09' opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (.15' .76' .09' opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (.41' .91' .46' opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (.41' .91' .46' opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (.41' .91' .46' opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.SetSourceRGBA (.29' .79' .28' opacity);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.SetSourceRGBA (.29' .79' .28' opacity);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.SetSourceRGBA (.29' .79' .28' opacity);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: context.RoundedRectangle (region.X + 0.5' region.Y + 0.5' region.Width - 1' region.Height - 1' 2);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (0' new Cairo.Color (1' 1' 1' .74 * opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (0.1' new Cairo.Color (1' 1' 1' 0));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (0.9' new Cairo.Color (0' 0' 0' 0));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: lg.AddColorStop (1' new Cairo.Color (0' 0' 0' .34 * opacity));
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: RenderShadowedText (context' new Gdk.Point (corner.X + ButtonSize.Width / 2 - w / 2' corner.Y + ButtonSize.Height / 2 - h / 2 - 1)' opacity' layout);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: RenderShadowedText (context' new Gdk.Point (corner.X + ButtonSize.Width / 2 - w / 2' corner.Y + ButtonSize.Height / 2 - h / 2 - 1)' opacity' layout);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: RenderShadowedText (context' new Gdk.Point (corner.X + ButtonSize.Width / 2 - w / 2' corner.Y + ButtonSize.Height / 2 - h / 2 - 1)' opacity' layout);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,RenderButton,The following statement contains a magic number: RenderShadowedText (context' new Gdk.Point (corner.X + ButtonSize.Width / 2 - w / 2' corner.Y + ButtonSize.Height / 2 - h / 2 - 1)' opacity' layout);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,ButtonLayout,The following statement contains a magic number: layout.FontDescription.AbsoluteSize = Pango.Units.FromPixels (16);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,TitleLayout,The following statement contains a magic number: layout.FontDescription.AbsoluteSize = Pango.Units.FromPixels (26);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,TextLayout,The following statement contains a magic number: layout.FontDescription.AbsoluteSize = Pango.Units.FromPixels (15);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,TextLayout,The following statement contains a magic number: layout.Width = Pango.Units.FromPixels (420);
Magic Number,MonoDevelop.Ide.WelcomePage,WelcomePageFirstRun,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.WelcomePage\WelcomePageFirstRun.cs,TextLayout,The following statement contains a magic number: Pango.AttrRise rise = new Pango.AttrRise (Pango.Units.FromPixels (7));
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,RuntimeRenderCell,The following statement contains a magic number: renderer.Xpad = (uint)(runtime.IsIndented ? 18 : 3);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,RuntimeRenderCell,The following statement contains a magic number: renderer.Xpad = (uint)(runtime.IsIndented ? 18 : 3);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,RuntimeRenderCell,The following statement contains a magic number: renderer.Xpad = 3;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: AddSpace (8);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: configurationCombosBox = new HBox (false' 8);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: buttonBarBox = new Alignment (0.5f' 0.5f' 0' 0);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: buttonBarBox = new Alignment (0.5f' 0.5f' 0' 0);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: buttonBarBox.LeftPadding = (uint) 7;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: AddSpace (24);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: AddSpace (24);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: statusAreaAlign.SizeAllocated += (object o' SizeAllocatedArgs args) => { 				Gtk.Widget toplevel = this.Toplevel; 				if (toplevel == null) 					return;  				int windowWidth = toplevel.Allocation.Width; 				int center = windowWidth / 2; 				int left = Math.Max (center - 300' args.Allocation.Left); 				int right = Math.Min (left + 600' args.Allocation.Right); 				uint left_padding = (uint) (left - args.Allocation.Left); 				uint right_padding = (uint) (args.Allocation.Right - right);  				if (left_padding != statusAreaAlign.LeftPadding || right_padding != statusAreaAlign.RightPadding) 					statusAreaAlign.SetPadding (0' 0' (uint) left_padding' (uint) right_padding); 			};
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: statusAreaAlign.SizeAllocated += (object o' SizeAllocatedArgs args) => { 				Gtk.Widget toplevel = this.Toplevel; 				if (toplevel == null) 					return;  				int windowWidth = toplevel.Allocation.Width; 				int center = windowWidth / 2; 				int left = Math.Max (center - 300' args.Allocation.Left); 				int right = Math.Min (left + 600' args.Allocation.Right); 				uint left_padding = (uint) (left - args.Allocation.Left); 				uint right_padding = (uint) (args.Allocation.Right - right);  				if (left_padding != statusAreaAlign.LeftPadding || right_padding != statusAreaAlign.RightPadding) 					statusAreaAlign.SetPadding (0' 0' (uint) left_padding' (uint) right_padding); 			};
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: statusAreaAlign.SizeAllocated += (object o' SizeAllocatedArgs args) => { 				Gtk.Widget toplevel = this.Toplevel; 				if (toplevel == null) 					return;  				int windowWidth = toplevel.Allocation.Width; 				int center = windowWidth / 2; 				int left = Math.Max (center - 300' args.Allocation.Left); 				int right = Math.Min (left + 600' args.Allocation.Right); 				uint left_padding = (uint) (left - args.Allocation.Left); 				uint right_padding = (uint) (args.Allocation.Right - right);  				if (left_padding != statusAreaAlign.LeftPadding || right_padding != statusAreaAlign.RightPadding) 					statusAreaAlign.SetPadding (0' 0' (uint) left_padding' (uint) right_padding); 			};
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: matchEntry.WidthRequest = 240;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: align.TopPadding = (uint) 5;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: align.LeftPadding = (uint) 9;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: align.RightPadding = (uint) 18;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: align.BottomPadding = (uint) 10;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,MainToolbar,The following statement contains a magic number: SetDefaultSizes (-1' 21);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: configurationCombo.SetSizeRequest (150' comboHeight);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: runConfigurationCombo.SetSizeRequest (150' comboHeight);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: runtimeCombo.SetSizeRequest (Platform.IsWindows ? 175 : 150' comboHeight);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: runtimeCombo.SetSizeRequest (Platform.IsWindows ? 175 : 150' comboHeight);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: statusArea.SetSizeRequest (32' 32);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: statusArea.SetSizeRequest (32' 32);
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: matchEntry.HeightRequest = height + 4;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,SetDefaultSizes,The following statement contains a magic number: buttonBar.HeightRequest = height + 2;
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbar.cs,OnExposeEvent,The following statement contains a magic number: context.MoveTo (0' Allocation.Height - 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,StatusArea,The following statement contains a magic number: statusIconBox.Spacing = 3;
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,StatusArea,The following statement contains a magic number: mainAlign = new Alignment (0' 0.5f' 1' 0);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,StatusArea,The following statement contains a magic number: mainAlign.LeftPadding = 12;
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,StatusArea,The following statement contains a magic number: mainAlign.RightPadding = 8;
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,StartBuildAnimation,The following statement contains a magic number: this.Animate ("Build"' 			              val => renderArg.BuildAnimationProgress = val' 			              length: 5000' 			              repeat: () => true);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,OnSizeAllocated,The following statement contains a magic number: allocation = new Gdk.Rectangle (allocation.X + (allocation.Width - MaxWidth) / 2' allocation.Y' MaxWidth' allocation.Height);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,TriggerErrorAnimation,The following statement contains a magic number: this.Animate ("statusAreaError"' 			              val => renderArg.ErrorAnimationProgress = val' 			              length: 900);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,CreateBuildResultsWidget,The following statement contains a magic number: box.Spacing = 3;
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = 32;
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,ShowMessageInner,The following statement contains a magic number: this.Animate ("Text"' 			              x => renderArg.TextAnimationProgress = x' 			              easing: Easing.SinInOut' 			              finished: (x' b) => { animPauseHandle = GLib.Timeout.Add (1000' () => { 					if (messageQueue.Count > 0) { 						Message m = messageQueue.Dequeue(); 						ShowMessageInner (m.Icon' m.Text' m.IsMarkup); 					} 					animPauseHandle = 0; 					return false; 				}); 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,LoadPixbuf,The following statement contains a magic number: renderArg.CurrentPixbuf = iconAnimation.FirstFrame.WithSize (16'16);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,LoadPixbuf,The following statement contains a magic number: renderArg.CurrentPixbuf = iconAnimation.FirstFrame.WithSize (16'16);
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,LoadPixbuf,The following statement contains a magic number: currentIconAnimation = iconAnimation.StartAnimation (delegate (Xwt.Drawing.Image p) { 					renderArg.CurrentPixbuf = p.WithSize (16'16); 					QueueDraw (); 				});
Magic Number,MonoDevelop.Components.MainToolbar,StatusArea,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,LoadPixbuf,The following statement contains a magic number: currentIconAnimation = iconAnimation.StartAnimation (delegate (Xwt.Drawing.Image p) { 					renderArg.CurrentPixbuf = p.WithSize (16'16); 					QueueDraw (); 				});
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,ShowTooltipEvent,The following statement contains a magic number: remainingMs > 50
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,SetAlertMode,The following statement contains a magic number: animation = GLib.Timeout.Add (60' new GLib.TimeoutHandler (AnimateIcon));
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,SetAlertMode,The following statement contains a magic number: images = new Xwt.Drawing.Image [10];
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,SetAlertMode,The following statement contains a magic number: images [n] = icon.WithAlpha (((double)(9-n))/10.0);
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,SetAlertMode,The following statement contains a magic number: images [n] = icon.WithAlpha (((double)(9-n))/10.0);
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,SetAlertMode,The following statement contains a magic number: n<10
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,AnimateIcon,The following statement contains a magic number: astep < 10
Magic Number,MonoDevelop.Components.MainToolbar,StatusIcon,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,AnimateIcon,The following statement contains a magic number: astep = (astep + 1) % 20;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaSeparator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,OnExposeEvent,The following statement contains a magic number: gr.AddColorStop (0.5' new Cairo.Color (0' 0' 0' 0.2));
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaSeparator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusArea.cs,OnExposeEvent,The following statement contains a magic number: gr.AddColorStop (0.5' new Cairo.Color (0' 0' 0' 0.2));
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,IsInside,The following statement contains a magic number: var xr = x - Allocation.Width / 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,IsInside,The following statement contains a magic number: var yr = y - Allocation.Height / 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,IsInside,The following statement contains a magic number: return Math.Sqrt (xr * xr + yr * yr) <= height / 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,OnSizeRequested,The following statement contains a magic number: requisition.Height = (int) btnNormal.Size.Height + 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,OnExposeEvent,The following statement contains a magic number: DrawBackground (context' Allocation' 15' State);
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,OnExposeEvent,The following statement contains a magic number: context.DrawImage (this' icon' Allocation.X + Math.Max (0' (Allocation.Width - icon.Width) / 2)' Allocation.Y + Math.Max (0' (Allocation.Height - icon.Height) / 2));
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,OnExposeEvent,The following statement contains a magic number: context.DrawImage (this' icon' Allocation.X + Math.Max (0' (Allocation.Width - icon.Width) / 2)' Allocation.Y + Math.Max (0' (Allocation.Height - icon.Height) / 2));
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,DrawBackground,The following statement contains a magic number: int x = region.X + region.Width / 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,DrawBackground,The following statement contains a magic number: int y = region.Y + region.Height / 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,DrawBackground,The following statement contains a magic number: x -= (int) img.Width / 2;
Magic Number,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,DrawBackground,The following statement contains a magic number: y -= (int) img.Height / 2;
Magic Number,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnExposeEvent,The following statement contains a magic number: Xwt.Drawing.Image img = images [lastWasSeparator ? 0 : nextIsSeparator ? 2 : 1];
Magic Number,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnExposeEvent,The following statement contains a magic number: icon = icon.WithAlpha (0.4);
Magic Number,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnExposeEvent,The following statement contains a magic number: context.DrawImage (this' icon' Math.Truncate (x + (img.Width - icon.Width) / 2)' Math.Truncate (y + (img.Height - icon.Height) / 2));
Magic Number,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,OnExposeEvent,The following statement contains a magic number: context.DrawImage (this' icon' Math.Truncate (x + (img.Width - icon.Width) / 2)' Math.Truncate (y + (img.Height - icon.Height) / 2));
Magic Number,MonoDevelop.Components.MainToolbar,ButtonBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ButtonBar.cs,ExpandImageVertically,The following statement contains a magic number: int h1 = (int)img.Height / 2;
Magic Number,MonoDevelop.Components.MainToolbar,FileSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\FileSearchCategory.cs,GetResults,The following statement contains a magic number: return Task.Run (async delegate { 				List<Tuple<string' string' ProjectFile>> files; 				//This lock is here in case user quickly types 5 letters which triggers 5 threads 				//we don't want to use all CPU doing same thing' instead 1st one will create cache' others will wait here 				//and then all will use cached version... 				bool locked = false; 				try { 					locked = await allFilesLock.WaitAsync (System.Threading.Timeout.Infinite' token).ConfigureAwait (false); 					files = allFilesCache = allFilesCache ?? GenerateAllFiles (); 					if (token.IsCancellationRequested) 						return; 				} finally { 					if (locked) 						allFilesLock.Release (); 				}  				var matcher = StringMatcher.GetMatcher (pattern.Pattern' false); 				var savedMatches = new Dictionary<string' MatchResult> (files.Count * 2); 				foreach (var file in files) { 					if (token.IsCancellationRequested) 						break; 					int rank1; 					int rank2; 					var match1 = MatchName (savedMatches' matcher' file.Item1' out rank1); 					var match2 = MatchName (savedMatches' matcher' file.Item2' out rank2); 					if (match1 && match2) { 						if (rank1 > rank2 || (rank1 == rank2 && String.CompareOrdinal (file.Item1' file.Item2) > 0)) { 							searchResultCallback.ReportResult (new FileSearchResult (pattern.Pattern' file.Item1' rank1' file.Item3)); 						} else { 							searchResultCallback.ReportResult (new FileSearchResult (pattern.Pattern' file.Item2' rank2' file.Item3)); 						} 					} else if (match1) { 						searchResultCallback.ReportResult (new FileSearchResult (pattern.Pattern' file.Item1' rank1' file.Item3)); 					} else if (match2) { 						searchResultCallback.ReportResult (new FileSearchResult (pattern.Pattern' file.Item2' rank2' file.Item3)); 					} 				} 			}' token);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (Allocation.X + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (Allocation.X + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceRGB (0.8' 0.8' 0.8);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceRGB (0.8' 0.8' 0.8);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceRGB (0.8' 0.8' 0.8);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (Allocation.X + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (Allocation.X + 0.5' Allocation.Y + 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceRGB (0.1' 0.1' 0.1);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceRGB (0.1' 0.1' 0.1);
Magic Number,MonoDevelop.Components.MainToolbar,StyledProgressBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StyledProgressBar.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceRGB (0.1' 0.1' 0.1);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,SearchPopupWindow,The following statement contains a magic number: Content.MarginTop = Content.MarginBottom = 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDrawContent,The following statement contains a magic number: context.MoveTo (0.5 + backgroundBounds.X + headerMargin' 0);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDrawContent,The following statement contains a magic number: context.LineTo (0.5 + backgroundBounds.X + headerMargin' backgroundBounds.Height);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: int maxHeight = (int)geometry.Height * 4 / 5;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: int maxHeight = (int)geometry.Height * 4 / 5;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: y + ls.Height + itemSeparatorHeight + itemPadding * 2 > maxHeight
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: y += ls.Height + itemSeparatorHeight + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: retVal.Width = Math.Min ((int)geometry.Width * 4 / 5' 480);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: retVal.Width = Math.Min ((int)geometry.Width * 4 / 5' 480);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: retVal.Width = Math.Min ((int)geometry.Width * 4 / 5' 480);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: var realHeight = ls.Height + itemSeparatorHeight + 4 + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetIdealSize,The following statement contains a magic number: var realHeight = ls.Height + itemSeparatorHeight + 4 + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetItemAt,The following statement contains a magic number: y += ls.Height + itemSeparatorHeight + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetItemAt,The following statement contains a magic number: y += ls.Height + itemSeparatorHeight + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,ShowTooltip,The following statement contains a magic number: declarationviewwindow.ShowPopup (this' new Rectangle (0' (int)rect.Y - 5' Bounds.Width' (int)rect.Height)' PopupPosition.Right);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: context.Rectangle (alloc.X + headerMarginSize + 1' y' Bounds.Width - adjustedMarginSize - 1' ls.Height + itemPadding * 2);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: y += ls.Height + itemSeparatorHeight + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: y + ls.Height + itemPadding * 2 > Bounds.Height
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: layout.Width = Bounds.Width - adjustedMarginSize - 35;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: y + ls.Height + itemSeparatorHeight + itemPadding * 2 > Bounds.Height
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: context.Rectangle (alloc.X + headerMarginSize + 1' y' Bounds.Width - adjustedMarginSize - 1' ls.Height + itemPadding * 2);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,OnDraw,The following statement contains a magic number: y += ls.Height + itemSeparatorHeight + itemPadding * 2;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetRowMarkup,The following statement contains a magic number: var sb = new System.Text.StringBuilder (text.Length + resultFgColor.Length + descLength + descFgColor.Length + 68);
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,GetRowMarkup,The following statement contains a magic number: sb.Append ("\" font=\"" + ParentWindow.Theme.Font.WithScaledSize (0.7).ToString () + "\">\n");
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: const int maxTag = 4;
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following statement contains a magic number: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: arg.BuildAnimationOpacity > 0.001f
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: arg.ErrorAnimationProgress > 0.001 && arg.ErrorAnimationProgress < .999
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: arg.ErrorAnimationProgress > 0.001 && arg.ErrorAnimationProgress < .999
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: int x1 = arg.Allocation.X + arg.MousePosition.X - 200;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: int x2 = x1 + 400;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: targetColor.A = .7;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: targetColor.A = .7 * arg.HoverProgress;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: gradient.AddColorStop (0.5' targetColor);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: arg.HoverProgress > 0.001f
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: int y = arg.Allocation.Y + (arg.Allocation.Height - (int)arg.CurrentPixbuf.Size.Height) / 2;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: int center = arg.Allocation.Y + arg.Allocation.Height / 2;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: Gdk.Rectangle progressArea = new Gdk.Rectangle (progress_bar_x' center - Styles.ProgressBarHeight / 2' progress_bar_width' Styles.ProgressBarHeight);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: int text_width = progress_bar_width - (Styles.ProgressBarInnerPadding * 2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: DrawString (arg.LastText' arg.LastTextIsMarkup' context' text_x'  				            center - (int)(textTweenValue * arg.Allocation.Height * 0.3)' text_width' opacity' arg.Pango' arg);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,Render,The following statement contains a magic number: DrawString (arg.CurrentText' arg.CurrentTextIsMarkup' context' text_x'  				            center + (int)((1.0f - textTweenValue) * arg.Allocation.Height * 0.3)' text_width' Math.Min (textTweenValue' 1.0)' arg.Pango' arg);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,LayoutRoundedRectangle,The following statement contains a magic number: CairoExtensions.RoundedRectangle (context' region.X + .5' region.Y + .5' region.Width - 1' region.Height - 1' rounding);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,LayoutRoundedRectangle,The following statement contains a magic number: CairoExtensions.RoundedRectangle (context' region.X + .5' region.Y + .5' region.Width - 1' region.Height - 1' rounding);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: Gdk.Point center = new Gdk.Point (area.Left + 19' (area.Top + area.Bottom) / 2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: Gdk.Point center = new Gdk.Point (area.Left + 19' (area.Top + area.Bottom) / 2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: var circles = new [] { 				new { Radius = 200' Thickness = 12' Speed = 1' ArcLength = Math.PI * 1.50 }' 				new { Radius = 195' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 240' Thickness = 12' Speed = 3' ArcLength = Math.PI * 1.50 }' 				new { Radius = 160' Thickness = 17' Speed = 3' ArcLength = Math.PI * 0.75 }' 				new { Radius = 200' Thickness = 15' Speed = 2' ArcLength = Math.PI * 0.25 }' 				new { Radius = 215' Thickness = 20' Speed = 2' ArcLength = Math.PI * 1.25 } 			};
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: zoom = (double) Math.Sin (zporg * Math.PI * 2 + zmod);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: zoom = ((zoom + 1) / 6.0d) + .05d;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: zoom = ((zoom + 1) / 6.0d) + .05d;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: context.Rotate (Math.PI * 2 * progress * arc.Speed);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: context.SetSourceColor (CairoExtensions.ParseColor ("B1DDED"' 0.35 * opacity));
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: context.Rotate (Math.PI * 2 * -progress * arc.Speed);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: context.Rotate (Math.PI * 2 * progress * arc.Speed);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBuildEffect,The following statement contains a magic number: context.Rotate (Math.PI * 2 * -progress * arc.Speed);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBackground,The following statement contains a magic number: double midX = region.X + region.Width / 2.0;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBackground,The following statement contains a magic number: lg.AddColorStop (1' Styles.StatusBarShadowColor1.WithAlpha (Styles.StatusBarShadowColor1.Alpha * 0.2).ToCairoColor ());
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBackground,The following statement contains a magic number: lg.AddColorStop (1' Styles.StatusBarShadowColor2.WithAlpha (Styles.StatusBarShadowColor2.Alpha * 0.2).ToCairoColor ());
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawBackground,The following statement contains a magic number: LayoutRoundedRectangle (context' region' 0' -2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: const int surfaceWidth = 2000;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: progress = (int) (arg.ErrorAnimationProgress * arg.Allocation.Width * 2.4);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: arg.ErrorAnimationProgress < .5f
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: context.CachedDraw (surface: ref errorSurface' 			                    position: new Gdk.Point (arg.Allocation.X - surfaceWidth + progress' arg.Allocation.Y)' 			                    size: new Gdk.Size (surfaceWidth' arg.Allocation.Height)' 			                    opacity: (float)opacity' 			                    draw: (c' o) => { 				// The smaller the pixel range of our gradient the less error there will be in it. 				using (var lg = new LinearGradient (surfaceWidth - 250' 0' surfaceWidth' 0)) { 					lg.AddColorStop (0.00' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.10' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.88' Styles.StatusBarErrorColor.WithAlpha (0.30 * o).ToCairoColor ()); 					lg.AddColorStop (1.00' Styles.StatusBarErrorColor.WithAlpha (0.00 * o).ToCairoColor ());  					c.SetSource (lg); 					c.Paint (); 				} 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: context.CachedDraw (surface: ref errorSurface' 			                    position: new Gdk.Point (arg.Allocation.X - surfaceWidth + progress' arg.Allocation.Y)' 			                    size: new Gdk.Size (surfaceWidth' arg.Allocation.Height)' 			                    opacity: (float)opacity' 			                    draw: (c' o) => { 				// The smaller the pixel range of our gradient the less error there will be in it. 				using (var lg = new LinearGradient (surfaceWidth - 250' 0' surfaceWidth' 0)) { 					lg.AddColorStop (0.00' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.10' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.88' Styles.StatusBarErrorColor.WithAlpha (0.30 * o).ToCairoColor ()); 					lg.AddColorStop (1.00' Styles.StatusBarErrorColor.WithAlpha (0.00 * o).ToCairoColor ());  					c.SetSource (lg); 					c.Paint (); 				} 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: context.CachedDraw (surface: ref errorSurface' 			                    position: new Gdk.Point (arg.Allocation.X - surfaceWidth + progress' arg.Allocation.Y)' 			                    size: new Gdk.Size (surfaceWidth' arg.Allocation.Height)' 			                    opacity: (float)opacity' 			                    draw: (c' o) => { 				// The smaller the pixel range of our gradient the less error there will be in it. 				using (var lg = new LinearGradient (surfaceWidth - 250' 0' surfaceWidth' 0)) { 					lg.AddColorStop (0.00' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.10' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.88' Styles.StatusBarErrorColor.WithAlpha (0.30 * o).ToCairoColor ()); 					lg.AddColorStop (1.00' Styles.StatusBarErrorColor.WithAlpha (0.00 * o).ToCairoColor ());  					c.SetSource (lg); 					c.Paint (); 				} 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: context.CachedDraw (surface: ref errorSurface' 			                    position: new Gdk.Point (arg.Allocation.X - surfaceWidth + progress' arg.Allocation.Y)' 			                    size: new Gdk.Size (surfaceWidth' arg.Allocation.Height)' 			                    opacity: (float)opacity' 			                    draw: (c' o) => { 				// The smaller the pixel range of our gradient the less error there will be in it. 				using (var lg = new LinearGradient (surfaceWidth - 250' 0' surfaceWidth' 0)) { 					lg.AddColorStop (0.00' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.10' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.88' Styles.StatusBarErrorColor.WithAlpha (0.30 * o).ToCairoColor ()); 					lg.AddColorStop (1.00' Styles.StatusBarErrorColor.WithAlpha (0.00 * o).ToCairoColor ());  					c.SetSource (lg); 					c.Paint (); 				} 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: context.CachedDraw (surface: ref errorSurface' 			                    position: new Gdk.Point (arg.Allocation.X - surfaceWidth + progress' arg.Allocation.Y)' 			                    size: new Gdk.Size (surfaceWidth' arg.Allocation.Height)' 			                    opacity: (float)opacity' 			                    draw: (c' o) => { 				// The smaller the pixel range of our gradient the less error there will be in it. 				using (var lg = new LinearGradient (surfaceWidth - 250' 0' surfaceWidth' 0)) { 					lg.AddColorStop (0.00' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.10' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.88' Styles.StatusBarErrorColor.WithAlpha (0.30 * o).ToCairoColor ()); 					lg.AddColorStop (1.00' Styles.StatusBarErrorColor.WithAlpha (0.00 * o).ToCairoColor ());  					c.SetSource (lg); 					c.Paint (); 				} 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawErrorAnimation,The following statement contains a magic number: context.CachedDraw (surface: ref errorSurface' 			                    position: new Gdk.Point (arg.Allocation.X - surfaceWidth + progress' arg.Allocation.Y)' 			                    size: new Gdk.Size (surfaceWidth' arg.Allocation.Height)' 			                    opacity: (float)opacity' 			                    draw: (c' o) => { 				// The smaller the pixel range of our gradient the less error there will be in it. 				using (var lg = new LinearGradient (surfaceWidth - 250' 0' surfaceWidth' 0)) { 					lg.AddColorStop (0.00' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.10' Styles.StatusBarErrorColor.WithAlpha (0.15 * o).ToCairoColor ()); 					lg.AddColorStop (0.88' Styles.StatusBarErrorColor.WithAlpha (0.30 * o).ToCairoColor ()); 					lg.AddColorStop (1.00' Styles.StatusBarErrorColor.WithAlpha (0.00 * o).ToCairoColor ());  					c.SetSource (lg); 					c.Paint (); 				} 			});
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawString,The following statement contains a magic number: context.MoveTo (x' y - h / 2 - (h % 2));
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaTheme.cs,DrawString,The following statement contains a magic number: context.MoveTo (x' y - h / 2 - (h % 2));
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.Translate (region.X + region.Width / 2.0' region.Y + region.Height);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: LayoutRoundedRectangle (context' region' -3' -3' 2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: LayoutRoundedRectangle (context' region' -3' -3' 2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: LayoutRoundedRectangle (context' region' -3' -3' 2);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.SetSourceRGBA (1' 1' 1' 0.4);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: int boxSize = 11;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: int x = region.Left + (region.Width % boxSize) / 2;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.MoveTo (x + 0.5' region.Top);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.LineTo (x + 0.5' region.Bottom);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: int y = region.Top + (region.Height % boxSize) / 2;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: y += boxSize / 2;
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.MoveTo (region.Left' y + 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.LineTo (region.Right' y + 0.5);
Magic Number,MonoDevelop.Components.MainToolbar,StatusAreaBuildTheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\StatusAreaBuildTheme.cs,DrawBackground,The following statement contains a magic number: context.SetSourceRGBA (1' 1' 1' 0.2);
Magic Number,MonoDevelop.Components.MainToolbar,ResultsDataSource,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ResultsDataSource.cs,SortUpToN,The following statement contains a magic number: Count < n * 2
Magic Number,MonoDevelop.Components.MainToolbar,ResultsDataSource,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ResultsDataSource.cs,SortUpToN,The following statement contains a magic number: int top = (index - 1) / 2;
Magic Number,MonoDevelop.Components.MainToolbar,ResultsDataSource,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ResultsDataSource.cs,SortUpToN,The following statement contains a magic number: index > 0 && 				       comparison.Compare (this[offset + (index - 1) / 2]' item) > 0
Magic Number,MonoDevelop.Components.MainToolbar,ResultsDataSource,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ResultsDataSource.cs,SortUpToN,The following statement contains a magic number: int left = index * 2 + 1' right = left + 1;
Magic Number,MonoDevelop.Components.MainToolbar,ResultsDataSource,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\ResultsDataSource.cs,SortUpToN,The following statement contains a magic number: index * 2 + 1 < i
Magic Number,MonoDevelop.Components.MainToolbar,MainToolbarController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\MainToolbarController.cs,FillRuntimesForProject,The following statement contains a magic number: configurationMergers [project].GetTargetsForConfiguration (IdeApp.Workspace.ActiveConfigurationId' configurationMergers.Count < 2)
Magic Number,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetResults,The following statement contains a magic number: return Task.Run (async delegate {  				try {  					var kinds = GetTagKinds (searchPattern.Tag);   					// TODO: Fill this right.  					var priorityDocuments = ImmutableArray.Create<Document> (); 					// Maybe use language services instead of AbstractNavigateToSearchService 					var aggregatedResults = await Task.WhenAll (IdeApp.TypeSystemService.AllWorkspaces  										.Select (ws => ws.CurrentSolution)  										.SelectMany (sol => sol.Projects)  										.Select (async proj => {  											using (proj.Solution.Services.CacheService?.EnableCaching (proj.Id)) { 												var searchService = TryGetNavigateToSearchService (proj);  												if (searchService == null)  													return ImmutableArray<INavigateToSearchResult>.Empty;  												return await searchService.SearchProjectAsync (proj' priorityDocuments' searchPattern.Pattern' kinds ?? searchService.KindsProvided' token).ConfigureAwait (false);  											}  										})  					).ConfigureAwait (false);    					foreach (var results in aggregatedResults) { 						foreach (var result in results) { 							int laneLength = result.NameMatchSpans.Length;  							int index = laneLength > 0 ? result.NameMatchSpans [0].Start : -1;    							int rank = 0;  							if (result.MatchKind == NavigateToMatchKind.Exact) {  								rank = int.MaxValue;  							} else {  								int patternLength = searchPattern.Pattern.Length;  								rank = searchPattern.Pattern.Length - result.Name.Length;  								rank -= index;    								rank -= laneLength * 100;    								// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  								int baseRank = (patternLength - laneLength - 1) * 5000;    								// First matching letter close to the begining is better  								// The more matched letters the better  								rank = baseRank - (index + (laneLength - patternLength));    								// rank up matches which start with a filter substring  								if (index == 0)  									rank += result.NameMatchSpans [0].Length * 50;  							}    							if (!result.IsCaseSensitive)  								rank /= 2;    							searchResultCallback.ReportResult (new DeclaredSymbolInfoResult (  								searchPattern.Pattern'  								result.Name'  								rank'  								result  							));  						}  					} 				} catch {  					token.ThrowIfCancellationRequested ();  					throw;  				}  			}' token);
Magic Number,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetResults,The following statement contains a magic number: return Task.Run (async delegate {  				try {  					var kinds = GetTagKinds (searchPattern.Tag);   					// TODO: Fill this right.  					var priorityDocuments = ImmutableArray.Create<Document> (); 					// Maybe use language services instead of AbstractNavigateToSearchService 					var aggregatedResults = await Task.WhenAll (IdeApp.TypeSystemService.AllWorkspaces  										.Select (ws => ws.CurrentSolution)  										.SelectMany (sol => sol.Projects)  										.Select (async proj => {  											using (proj.Solution.Services.CacheService?.EnableCaching (proj.Id)) { 												var searchService = TryGetNavigateToSearchService (proj);  												if (searchService == null)  													return ImmutableArray<INavigateToSearchResult>.Empty;  												return await searchService.SearchProjectAsync (proj' priorityDocuments' searchPattern.Pattern' kinds ?? searchService.KindsProvided' token).ConfigureAwait (false);  											}  										})  					).ConfigureAwait (false);    					foreach (var results in aggregatedResults) { 						foreach (var result in results) { 							int laneLength = result.NameMatchSpans.Length;  							int index = laneLength > 0 ? result.NameMatchSpans [0].Start : -1;    							int rank = 0;  							if (result.MatchKind == NavigateToMatchKind.Exact) {  								rank = int.MaxValue;  							} else {  								int patternLength = searchPattern.Pattern.Length;  								rank = searchPattern.Pattern.Length - result.Name.Length;  								rank -= index;    								rank -= laneLength * 100;    								// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  								int baseRank = (patternLength - laneLength - 1) * 5000;    								// First matching letter close to the begining is better  								// The more matched letters the better  								rank = baseRank - (index + (laneLength - patternLength));    								// rank up matches which start with a filter substring  								if (index == 0)  									rank += result.NameMatchSpans [0].Length * 50;  							}    							if (!result.IsCaseSensitive)  								rank /= 2;    							searchResultCallback.ReportResult (new DeclaredSymbolInfoResult (  								searchPattern.Pattern'  								result.Name'  								rank'  								result  							));  						}  					} 				} catch {  					token.ThrowIfCancellationRequested ();  					throw;  				}  			}' token);
Magic Number,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetResults,The following statement contains a magic number: return Task.Run (async delegate {  				try {  					var kinds = GetTagKinds (searchPattern.Tag);   					// TODO: Fill this right.  					var priorityDocuments = ImmutableArray.Create<Document> (); 					// Maybe use language services instead of AbstractNavigateToSearchService 					var aggregatedResults = await Task.WhenAll (IdeApp.TypeSystemService.AllWorkspaces  										.Select (ws => ws.CurrentSolution)  										.SelectMany (sol => sol.Projects)  										.Select (async proj => {  											using (proj.Solution.Services.CacheService?.EnableCaching (proj.Id)) { 												var searchService = TryGetNavigateToSearchService (proj);  												if (searchService == null)  													return ImmutableArray<INavigateToSearchResult>.Empty;  												return await searchService.SearchProjectAsync (proj' priorityDocuments' searchPattern.Pattern' kinds ?? searchService.KindsProvided' token).ConfigureAwait (false);  											}  										})  					).ConfigureAwait (false);    					foreach (var results in aggregatedResults) { 						foreach (var result in results) { 							int laneLength = result.NameMatchSpans.Length;  							int index = laneLength > 0 ? result.NameMatchSpans [0].Start : -1;    							int rank = 0;  							if (result.MatchKind == NavigateToMatchKind.Exact) {  								rank = int.MaxValue;  							} else {  								int patternLength = searchPattern.Pattern.Length;  								rank = searchPattern.Pattern.Length - result.Name.Length;  								rank -= index;    								rank -= laneLength * 100;    								// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  								int baseRank = (patternLength - laneLength - 1) * 5000;    								// First matching letter close to the begining is better  								// The more matched letters the better  								rank = baseRank - (index + (laneLength - patternLength));    								// rank up matches which start with a filter substring  								if (index == 0)  									rank += result.NameMatchSpans [0].Length * 50;  							}    							if (!result.IsCaseSensitive)  								rank /= 2;    							searchResultCallback.ReportResult (new DeclaredSymbolInfoResult (  								searchPattern.Pattern'  								result.Name'  								rank'  								result  							));  						}  					} 				} catch {  					token.ThrowIfCancellationRequested ();  					throw;  				}  			}' token);
Magic Number,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetResults,The following statement contains a magic number: return Task.Run (async delegate {  				try {  					var kinds = GetTagKinds (searchPattern.Tag);   					// TODO: Fill this right.  					var priorityDocuments = ImmutableArray.Create<Document> (); 					// Maybe use language services instead of AbstractNavigateToSearchService 					var aggregatedResults = await Task.WhenAll (IdeApp.TypeSystemService.AllWorkspaces  										.Select (ws => ws.CurrentSolution)  										.SelectMany (sol => sol.Projects)  										.Select (async proj => {  											using (proj.Solution.Services.CacheService?.EnableCaching (proj.Id)) { 												var searchService = TryGetNavigateToSearchService (proj);  												if (searchService == null)  													return ImmutableArray<INavigateToSearchResult>.Empty;  												return await searchService.SearchProjectAsync (proj' priorityDocuments' searchPattern.Pattern' kinds ?? searchService.KindsProvided' token).ConfigureAwait (false);  											}  										})  					).ConfigureAwait (false);    					foreach (var results in aggregatedResults) { 						foreach (var result in results) { 							int laneLength = result.NameMatchSpans.Length;  							int index = laneLength > 0 ? result.NameMatchSpans [0].Start : -1;    							int rank = 0;  							if (result.MatchKind == NavigateToMatchKind.Exact) {  								rank = int.MaxValue;  							} else {  								int patternLength = searchPattern.Pattern.Length;  								rank = searchPattern.Pattern.Length - result.Name.Length;  								rank -= index;    								rank -= laneLength * 100;    								// Favor matches with less splits. That is' 'abc def' is better than 'ab c def'.  								int baseRank = (patternLength - laneLength - 1) * 5000;    								// First matching letter close to the begining is better  								// The more matched letters the better  								rank = baseRank - (index + (laneLength - patternLength));    								// rank up matches which start with a filter substring  								if (index == 0)  									rank += result.NameMatchSpans [0].Length * 50;  							}    							if (!result.IsCaseSensitive)  								rank /= 2;    							searchResultCallback.ReportResult (new DeclaredSymbolInfoResult (  								searchPattern.Pattern'  								result.Name'  								rank'  								result  							));  						}  					} 				} catch {  					token.ThrowIfCancellationRequested ();  					throw;  				}  			}' token);
Magic Number,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,GetRequiredPosition,The following statement contains a magic number: xalign = 0.5;
Magic Number,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,CalculateWindowLocation,The following statement contains a magic number: w += 10;
Magic Number,MonoDevelop.Ide.Editor,TooltipProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TooltipProvider.cs,CalculateWindowLocation,The following statement contains a magic number: y += 10;
Magic Number,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,AddAnnotation,The following statement contains a magic number: list = new AnnotationList (4);
Magic Number,MonoDevelop.Ide.Editor,TextEditorViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditorViewContent.cs,InformAutoSave,The following statement contains a magic number: autoSaveTimer = GLib.Timeout.Add (500' delegate { 				autoSaveTimer = 0; 				if (autoSaveTask != null && !autoSaveTask.IsCompleted) 					return false;  				autoSaveTask = AutoSave.InformAutoSaveThread (textEditor.CreateSnapshot ()' textEditor.FileName' HasUnsavedChanges); 				return false; 			});
Magic Number,MonoDevelop.Ide.Editor,TextEditorViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditorViewContent.cs,OnDispose,The following statement contains a magic number: autoSaveTask.Wait (TimeSpan.FromSeconds (5));
Magic Number,MonoDevelop.Ide.Editor,DocumentLocation,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DocumentLocation.cs,GetHashCode,The following statement contains a magic number: return unchecked (Column << 20 ^ Line);
Magic Number,MonoDevelop.Ide.Editor,DocumentLocationConverter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\DocumentLocation.cs,ConvertFrom,The following statement contains a magic number: parts.Length == 2
Magic Number,MonoDevelop.Ide.Editor,CustomEditorOptions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\CustomEditorOptions.cs,CustomEditorOptions,The following statement contains a magic number: this.TabSize = this.IndentationSize = 4;
Magic Number,MonoDevelop.Ide.Editor.Extension,AbstractUsagesExtension<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\AbstractUsagesExtension.cs,HandleTextEditorDataCaretPositionChanged,The following statement contains a magic number: popupTimer = GLib.Timeout.Add (250' () => { DelayedTooltipShow (); return false; } );
Magic Number,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The following statement contains a magic number: descriptor.KeyChar == (char)16 || descriptor.KeyChar == (char)17
Magic Number,MonoDevelop.Ide.Editor.Extension,CompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\CompletionTextEditorExtension.cs,KeyPress,The following statement contains a magic number: descriptor.KeyChar == (char)16 || descriptor.KeyChar == (char)17
Magic Number,MonoDevelop.Ide.Editor.Extension,AbstractNavigationExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\AbstractNavigationExtension.cs,AbstractNavigationExtension_LinksShownChanged,The following statement contains a magic number: timerId = GLib.Timeout.Add (250' delegate { 					timerId = 0; 					ShowLinks (); 					return false; 				});
Magic Number,MonoDevelop.Ide.Editor.Extension,ErrorHandlerTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\ErrorHandlerTextEditorExtension.cs,UpdateErrorUnderlines,The following statement contains a magic number: Application.Invoke ((o' args) => { 					if (token.IsCancellationRequested || isDisposed) 						return; 					RemoveErrorUndelinesResetTimerId (); 					const uint timeout = 500; 					resetTimerId = GLib.Timeout.Add (timeout' delegate { 						if (token.IsCancellationRequested) { 							resetTimerId = 0; 							return false; 						} 						RemoveErrorUnderlines (); 						// Else we underline the error 						if (docErrors != null) { 							foreach (var error in docErrors) { 								UnderLineError (error); 							} 						} 						resetTimerId = 0; 						return false; 					}); 				});
Magic Number,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,FitsIdeTheme,The following statement contains a magic number: return (bgColor.L <= 0.5);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,FitsIdeTheme,The following statement contains a magic number: return (bgColor.L > 0.5);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,BinaryFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,StartReading,The following statement contains a magic number: input.Length < BPLIST_MAGIC.Length + 2
Magic Number,MonoDevelop.Ide.Editor.Highlighting,BinaryFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,StartReading,The following statement contains a magic number: input.Seek (2' SeekOrigin.Current);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadInteger,The following statement contains a magic number: switch (CurrentType) { 					case PlistType.integer: 						return ReadBigEndianInteger ((int)Math.Pow (2' currentLength)); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadReal,The following statement contains a magic number: var bytes = ReadBigEndianBytes ((int)Math.Pow (2' currentLength));
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadReal,The following statement contains a magic number: switch (CurrentType) { 					case PlistType.real: 						switch (bytes.Length) { 						case 4: 							return (double)BitConverter.ToSingle (bytes' 0); 						case 8: 							return BitConverter.ToDouble (bytes' 0); 						} 						throw new NotSupportedException (bytes.Length + "-byte real"); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadReal,The following statement contains a magic number: switch (CurrentType) { 					case PlistType.real: 						switch (bytes.Length) { 						case 4: 							return (double)BitConverter.ToSingle (bytes' 0); 						case 8: 							return BitConverter.ToDouble (bytes' 0); 						} 						throw new NotSupportedException (bytes.Length + "-byte real"); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadDate,The following statement contains a magic number: var bytes = ReadBigEndianBytes (8);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadString,The following statement contains a magic number: switch (CurrentType) { 					case PlistType.@string: // ASCII 						bytes = new byte [currentLength]; 						stream.Read (bytes' 0' bytes.Length); 						return Encoding.ASCII.GetString (bytes); 					case PlistType.wideString: //CFBinaryPList.c: Unicode string...big-endian 2-byte uint16_t 						bytes = new byte [currentLength * 2]; 						stream.Read (bytes' 0' bytes.Length); 						return Encoding.BigEndianUnicode.GetString (bytes); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianInteger,The following statement contains a magic number: switch (numBytes) { 					case 1: 						return (long)bytes [0]; 					case 2: 						return (long)BitConverter.ToInt16 (bytes' 0); 					case 4: 						return (long)BitConverter.ToInt32 (bytes' 0); 					case 8: 						return BitConverter.ToInt64 (bytes' 0); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianInteger,The following statement contains a magic number: switch (numBytes) { 					case 1: 						return (long)bytes [0]; 					case 2: 						return (long)BitConverter.ToInt16 (bytes' 0); 					case 4: 						return (long)BitConverter.ToInt32 (bytes' 0); 					case 8: 						return BitConverter.ToInt64 (bytes' 0); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianInteger,The following statement contains a magic number: switch (numBytes) { 					case 1: 						return (long)bytes [0]; 					case 2: 						return (long)BitConverter.ToInt16 (bytes' 0); 					case 4: 						return (long)BitConverter.ToInt32 (bytes' 0); 					case 8: 						return BitConverter.ToInt64 (bytes' 0); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianUInteger,The following statement contains a magic number: switch (numBytes) { 					case 1: 						return (ulong)bytes [0]; 					case 2: 						return (ulong)BitConverter.ToUInt16 (bytes' 0); 					case 4: 						return (ulong)BitConverter.ToUInt32 (bytes' 0); 					case 8: 						return BitConverter.ToUInt64 (bytes' 0); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianUInteger,The following statement contains a magic number: switch (numBytes) { 					case 1: 						return (ulong)bytes [0]; 					case 2: 						return (ulong)BitConverter.ToUInt16 (bytes' 0); 					case 4: 						return (ulong)BitConverter.ToUInt32 (bytes' 0); 					case 8: 						return BitConverter.ToUInt64 (bytes' 0); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianUInteger,The following statement contains a magic number: switch (numBytes) { 					case 1: 						return (ulong)bytes [0]; 					case 2: 						return (ulong)BitConverter.ToUInt16 (bytes' 0); 					case 4: 						return (ulong)BitConverter.ToUInt32 (bytes' 0); 					case 8: 						return BitConverter.ToUInt64 (bytes' 0); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianUInt64,The following statement contains a magic number: var bytes = ReadBigEndianBytes (8);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The following statement contains a magic number: str.Value.Any (c => c > 127)
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,WriteObjectHead,The following statement contains a magic number: switch (type) { 					case PlistType.@null: 					case PlistType.@false: 					case PlistType.@true: 					case PlistType.fill: 						stream.WriteByte ((byte)type); 						break; 					case PlistType.date: 						stream.WriteByte (0x33); 						break; 					case PlistType.integer: 					case PlistType.real: 						break; 					default: 						if (size < 15) { 							stream.WriteByte ((byte)((byte)type | size)); 						} else { 							stream.WriteByte ((byte)((byte)type | 0xF)); 							Write (size); 						} 						break; 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The following statement contains a magic number: switch (byteCount) { 					case 1: 						stream.WriteByte ((byte)value); 						break; 					case 2: 						bytes = MakeBigEndian (BitConverter.GetBytes ((short)value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					case 4: 						bytes = MakeBigEndian (BitConverter.GetBytes ((int)value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					case 8: 						bytes = MakeBigEndian (BitConverter.GetBytes (value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					default: 						throw new NotSupportedException (byteCount.ToString () + "-byte integer"); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The following statement contains a magic number: switch (byteCount) { 					case 1: 						stream.WriteByte ((byte)value); 						break; 					case 2: 						bytes = MakeBigEndian (BitConverter.GetBytes ((short)value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					case 4: 						bytes = MakeBigEndian (BitConverter.GetBytes ((int)value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					case 8: 						bytes = MakeBigEndian (BitConverter.GetBytes (value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					default: 						throw new NotSupportedException (byteCount.ToString () + "-byte integer"); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The following statement contains a magic number: switch (byteCount) { 					case 1: 						stream.WriteByte ((byte)value); 						break; 					case 2: 						bytes = MakeBigEndian (BitConverter.GetBytes ((short)value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					case 4: 						bytes = MakeBigEndian (BitConverter.GetBytes ((int)value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					case 8: 						bytes = MakeBigEndian (BitConverter.GetBytes (value)); 						stream.Write (bytes' 0' bytes.Length); 						break; 					default: 						throw new NotSupportedException (byteCount.ToString () + "-byte integer"); 					}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ShouldDuplicate,The following statement contains a magic number: return pobj.Type == PObjectType.Boolean || pobj.Type == PObjectType.Array || pobj.Type == PObjectType.Dictionary || 						(pobj.Type == PObjectType.String && ((PString)pobj).Value.Any (c => c > 255));
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,GetMinByteLength,The following statement contains a magic number: return 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,GetMinByteLength,The following statement contains a magic number: return 4;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,GetMinByteLength,The following statement contains a magic number: return 8;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Dispose,The following statement contains a magic number: i < 6
Magic Number,MonoDevelop.Ide.Editor.Highlighting,CFBinaryPlistTrailer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,Write,The following statement contains a magic number: bytes = new byte [8];
Magic Number,MonoDevelop.Ide.Editor.Highlighting,AmbientColor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The following statement contains a magic number: info.Length != 2
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double r = ((double)int.Parse (value.Substring (1' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double r = ((double)int.Parse (value.Substring (1' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double g = ((double)int.Parse (value.Substring (3' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double g = ((double)int.Parse (value.Substring (3' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double g = ((double)int.Parse (value.Substring (3' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double b = ((double)int.Parse (value.Substring (5' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double b = ((double)int.Parse (value.Substring (5' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double b = ((double)int.Parse (value.Substring (5' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double a = ((double)int.Parse (value.Substring (7' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double a = ((double)int.Parse (value.Substring (7' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: double a = ((double)int.Parse (value.Substring (7' 2)' System.Globalization.NumberStyles.HexNumber)) / 255;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ParseColor,The following statement contains a magic number: value.Length == 9 && value.StartsWith ("#"' StringComparison.Ordinal)
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,LoadFrom,The following statement contains a magic number: var defaultStyle = HslColor.Brightness (result.PlainText.Background) < 0.5 ? dark : light;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ColorToMarkup,The following statement contains a magic number: a == 255
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ImportVsColor,The following statement contains a magic number: string color = "#" + colorString.Substring (8' 2) + colorString.Substring (6' 2) + colorString.Substring (4' 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ImportVsColor,The following statement contains a magic number: string color = "#" + colorString.Substring (8' 2) + colorString.Substring (6' 2) + colorString.Substring (4' 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ImportVsColor,The following statement contains a magic number: string color = "#" + colorString.Substring (8' 2) + colorString.Substring (6' 2) + colorString.Substring (4' 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ImportVsColor,The following statement contains a magic number: string color = "#" + colorString.Substring (8' 2) + colorString.Substring (6' 2) + colorString.Substring (4' 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ImportVsColor,The following statement contains a magic number: string color = "#" + colorString.Substring (8' 2) + colorString.Substring (6' 2) + colorString.Substring (4' 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,ImportVsColor,The following statement contains a magic number: string color = "#" + colorString.Substring (8' 2) + colorString.Substring (6' 2) + colorString.Substring (4' 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The following statement contains a magic number: result.IndentationGuide.Colors.Add (Tuple.Create ("color"' (HslColor)AlphaBlend (result.PlainText.Foreground' result.PlainText.Background' 0.3)));
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The following statement contains a magic number: h.L += 0.01;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The following statement contains a magic number: result.TooltipPagerTriangle.Colors.Add (Tuple.Create ("color"' (HslColor)AlphaBlend (result.PlainText.Foreground' result.PlainText.Background' 0.8)));
Magic Number,MonoDevelop.Ide.Editor.Highlighting,ColorScheme,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\OldFormat.cs,Import,The following statement contains a magic number: var defaultStyle = HslColor.Brightness (result.PlainText.Background) < 0.5 ? dark : light;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,Generate,The following statement contains a magic number: j - i > 3
Magic Number,MonoDevelop.Ide.Editor.Highlighting,CharacterClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ConvertUnicodeCategory,The following statement contains a magic number: switch (category) { 				case "alnum": // Alphabetic and numeric character 							  //return inCharacterClass ? "\\w\\d": "[\\w\\d]"; 					AddRange ('a'' 'z'); 					AddRange ('A'' 'Z'); 					AddRange ('0'' '9'); 					break; 				case "ascii": 					AddRange ((char)0' (char)127); 					break; 				case "alpha": // Alphabetic character 					AddRange ('a'' 'z'); 					AddRange ('A'' 'Z'); 					break; 				case "blank": // Space or tab 					Add (' '); 					Add ('\t'); 					break; 				case "cntrl": // Control character 					AddUnicodeCategory (UnicodeCategory.Control); 					break; 				case "digit": // Digit 					AddRange ('0'' '9'); 					break; 				case "graph": // Non - blank character (excludes spaces' control characters' and similar) 					for (int i = 0; i < table.Length; i++) { 						var ch = (char)i; 						if (ch == ' ' || ch == '\t') 							continue; 						var cat = char.GetUnicodeCategory (ch); 						if (cat == UnicodeCategory.Control || cat == UnicodeCategory.LineSeparator) 							continue; 						table [i] = negativeGroup ? -1 : 1; 					} 					break; 				case "lower": // Lowercase alphabetical character 					AddRange ('a'' 'z'); 					break; 				case "print": // Like [:graph:]' but includes the space character 					for (int i = 0; i < table.Length; i++) { 						var ch = (char)i; 						var cat = char.GetUnicodeCategory (ch); 						if (cat == UnicodeCategory.Control || cat == UnicodeCategory.LineSeparator) 							continue; 						table [i] = negativeGroup ? -1 : 1; 					} 					break; 				case "punct": // Punctuation character 					AddUnicodeCategory (UnicodeCategory.OpenPunctuation' UnicodeCategory.ClosePunctuation' UnicodeCategory.DashPunctuation' 										UnicodeCategory.OtherPunctuation' UnicodeCategory.ConnectorPunctuation' UnicodeCategory.FinalQuotePunctuation' UnicodeCategory.InitialQuotePunctuation); 					break; 				case "space": // Whitespace character ([:blank:]' newline' carriage return' etc.) 					Add (' '); 					Add ('\t'); 					Add ('\r'); 					Add ('\n'); 					break; 				case "upper": // Uppercase alphabetical 					AddRange ('A'' 'Z'); 					break; 				case "xdigit": // Digit allowed in a hexadecimal number (i.e.' 0 - 9a - fA - F) 					AddRange ('a'' 'f'); 					AddRange ('A'' 'F'); 					AddRange ('0'' '9'); 					break; 				default: 					LoggingService.LogWarning ("unknown unicode category : " + category); 					break; 				}
Magic Number,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The following statement contains a magic number: var darkModificator = HslColor.Brightness (bgColor) < 0.5 ? 1 : -1;
Magic Number,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The following statement contains a magic number: settings [EditorThemeColors.LineNumbersBackground] = bgColor.AddLight (0.01 * darkModificator).ToPangoString ();
Magic Number,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The following statement contains a magic number: settings [EditorThemeColors.IndicatorMarginSeparator] = bgColor.AddLight (0.03 * darkModificator).ToPangoString ();
Magic Number,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The following statement contains a magic number: settings [EditorThemeColors.LineNumbers] = HslColor.Parse (settings [EditorThemeColors.Foreground]).AddLight (-0.1 * darkModificator).ToPangoString ();
Magic Number,MonoDevelop.Ide.Editor.Highlighting,TextMateFormat,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\TextMateFormat.cs,CalculateMissingDefaultColors,The following statement contains a magic number: settings [EditorThemeColors.IndicatorMargin] = bgColor.AddLight (0.02 * darkModificator).ToPangoString ();
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,PlaceholderWindow,The following statement contains a magic number: titleWindow.FocusOutEvent += delegate { 				timeout = GLib.Timeout.Add (100' () => { 					timeout = 0; 					titleWindow.Close (); 					return false; 				}); 			};
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,MovePosition,The following statement contains a magic number: titleWindow.Move (x - alloc.Width / 2' y - alloc.Height / 2);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,MovePosition,The following statement contains a magic number: titleWindow.Move (x - alloc.Width / 2' y - alloc.Height / 2);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,The following statement contains a magic number: Relocate ( 							ox' 							oy' 							alloc.Width / 2' 							alloc.Height' 							false 						);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,The following statement contains a magic number: targetTabCount > 0 && x <= ox + alloc.Width / 3 && !overTabStrip
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,The following statement contains a magic number: Relocate ( 							ox + alloc.Width / 2' 							oy' 							alloc.Width / 2' 							alloc.Height' 							false 						);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,The following statement contains a magic number: Relocate ( 							ox + alloc.Width / 2' 							oy' 							alloc.Width / 2' 							alloc.Height' 							false 						);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,ShowPlaceholder,The following statement contains a magic number: targetTabCount > 0 && x >= ox + alloc.Width - alloc.Width / 3 && !overTabStrip
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnFocusOutEvent,The following statement contains a magic number: timeout = GLib.Timeout.Add (100' () => { 				timeout = 0; 				titleWindow.Close (); 				return false; 			});
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnRealized,The following statement contains a magic number: GdkWindow.Opacity = 0.4;
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceColor (new Cairo.Color (0.17' 0.55' 0.79));
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceColor (new Cairo.Color (0.17' 0.55' 0.79));
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnExposeEvent,The following statement contains a magic number: ctx.SetSourceColor (new Cairo.Color (0.17' 0.55' 0.79));
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: const int sa = 7;
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: Resize (rw+sa*2' rh+sa*2);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: Resize (rw+sa*2' rh+sa*2);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: anim = GLib.Timeout.Add (10' RunAnimation);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: animate && w < 150 && h < 150
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,Relocate,The following statement contains a magic number: animate && w < 150 && h < 150
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,RunAnimation,The following statement contains a magic number: ch-=2;
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,RunAnimation,The following statement contains a magic number: cw-=2;
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,PlaceInFloatingFrame,The following statement contains a magic number: newWindow.Move (ox - w / 2' oy - h / 2);
Magic Number,MonoDevelop.Components.DockNotebook,PlaceholderWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,PlaceInFloatingFrame,The following statement contains a magic number: newWindow.Move (ox - w / 2' oy - h / 2);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: mainBox.Spacing = 3;
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: titleBox = new HBox (false' 3);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: wi = wi.WithBoxSize (200);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: f.SetPadding (2' 2' 2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: f.SetPadding (2' 2' 2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: f.SetPadding (2' 2' 2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,DocumentTitleWindow,The following statement contains a magic number: f.SetPadding (2' 2' 2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnKeyPressEvent,The following statement contains a magic number: controlKeyMask |= 2;
Magic Number,MonoDevelop.Components.DockNotebook,DocumentTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\PlaceholderWindow.cs,OnKeyReleaseEvent,The following statement contains a magic number: controlKeyMask &= ~2;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: TabWidth = 125;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: TargetWidth = 125;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: arr.HeightRequest = arr.WidthRequest = 10;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: var alignment = new Alignment (0.5f' 0.5f' 0.0f' 0.0f);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: var alignment = new Alignment (0.5f' 0.5f' 0.0f' 0.0f);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: arr.HeightRequest = arr.WidthRequest = 10;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: alignment = new Alignment (0.5f' 0.5f' 0.0f' 0.0f);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,TabStrip,The following statement contains a magic number: alignment = new Alignment (0.5f' 0.5f' 0.0f' 0.0f);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,StartOpenAnimation,The following statement contains a magic number: new Animation (f => tab.WidthModifier = f) 				.AddConcurrent (new Animation (f => tab.Opacity = f)' 0.0d' 0.2d) 				.Commit (tab' "Open"' easing: Easing.CubicInOut);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,StartCloseAnimation,The following statement contains a magic number: new Animation (f => tab.WidthModifier = f' tab.WidthModifier' 0) 				.AddConcurrent (new Animation (f => tab.Opacity = f' tab.Opacity' 0)' 0.8d) 				.Commit (tab' "Closing"' 				easing: Easing.CubicOut' 				finished: (f' a) => { 					if (!a) 						closingTabs.Remove (tab.Index); 				});
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnSizeAllocated,The following statement contains a magic number: tabStartX = /*allocation.X +*/ LeftBarPadding + LeanWidth / 2;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnMotionNotifyEvent,The following statement contains a magic number: sr.Inflate (30' 30);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnMotionNotifyEvent,The following statement contains a magic number: sr.Inflate (30' 30);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnButtonPressEvent,The following statement contains a magic number: evnt.Button == 2
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnAccessibilityShowMenu,The following statement contains a magic number: int x = tab.Allocation.X + (tab.Allocation.Width / 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,OnAccessibilityShowMenu,The following statement contains a magic number: int y = tab.Allocation.Y + (tab.Allocation.Height / 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,FindTab,The following statement contains a magic number: allocWithLean.X -= LeanWidth / 2;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,UpdateTabWidth,The following statement contains a magic number: TargetWidth = Clamp (width / notebook.Tabs.Count' 50' 200);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,UpdateTabWidth,The following statement contains a magic number: TargetWidth = Clamp (width / notebook.Tabs.Count' 50' 200);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,UpdateTabWidth,The following statement contains a magic number: LastTabWidthAdjustment = Math.Abs (LastTabWidthAdjustment) < 50 ? LastTabWidthAdjustment : 0;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The following statement contains a magic number: int width = Math.Min (TabWidth' Math.Max (50' tabEndX - x - 1));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,Draw,The following statement contains a magic number: ctx.Rectangle (tabStartX - LeanWidth / 2' allocation.Y' tabArea + LeanWidth' allocation.Height);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: double rightPadding = (active ? TabActivePadding.Right : TabPadding.Right) - (LeanWidth / 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: rightPadding = (rightPadding * Math.Min (1.0' Math.Max (0.5' (tabBounds.Width - 30) / 70.0)));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: rightPadding = (rightPadding * Math.Min (1.0' Math.Max (0.5' (tabBounds.Width - 30) / 70.0)));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: rightPadding = (rightPadding * Math.Min (1.0' Math.Max (0.5' (tabBounds.Width - 30) / 70.0)));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: double leftPadding = (active ? TabActivePadding.Left : TabPadding.Left) - (LeanWidth / 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: leftPadding = (leftPadding * Math.Min (1.0' Math.Max (0.5' (tabBounds.Width - 30) / 70.0)));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: leftPadding = (leftPadding * Math.Min (1.0' Math.Max (0.5' (tabBounds.Width - 30) / 70.0)));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: leftPadding = (leftPadding * Math.Min (1.0' Math.Max (0.5' (tabBounds.Width - 30) / 70.0)));
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: var closeButtonAlloation = new Cairo.Rectangle (tabBounds.Right - rightPadding - (tabCloseImage.Width / 2) - CloseButtonMarginRight' 			                                 tabBounds.Height - bottomPadding - tabCloseImage.Height - CloseButtonMarginBottom' 			                                 tabCloseImage.Width' tabCloseImage.Height);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: tab.CloseButtonActiveArea = closeButtonAlloation.Inflate (2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: tab.CloseButtonActiveArea = closeButtonAlloation.Inflate (2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: tab.PinButtonActiveArea = spinButtonAllocation.Inflate (2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: tab.PinButtonActiveArea = spinButtonAllocation.Inflate (2' 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: !closeButtonHovered && tab.DirtyStrength > 0.5
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: ctx.DrawImage (this' tabCloseImage.WithAlpha ((closeButtonHovered ? 1.0 : 0.5) * tab.Opacity)' closeButtonAlloation.X' closeButtonAlloation.Y);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: ctx.DrawImage (this' (tab.IsPinned ? tabPinnedImage : tabUnPinnedImage).WithAlpha ((pinButtonHovered ? 1.0 : 0.5) * tab.Opacity)' spinButtonAllocation.X' spinButtonAllocation.Y);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: tw -= closeButtonAlloation.Width / 2;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: drawCloseButton || tab.DirtyStrength > 0.5
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: tw -= spinButtonAllocation.Width / 2 + rightPadding;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTab,The following statement contains a magic number: drawPinButton || tab.DirtyStrength > 0.5
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTabBackground,The following statement contains a magic number: int lean = Math.Min (LeanWidth' contentWidth / 2);
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTabBackground,The following statement contains a magic number: int halfLean = lean / 2;
Magic Number,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,DrawTabBackground,The following statement contains a magic number: double width = contentWidth - (TabSpacing * 2) + lean;
Magic Number,MonoDevelop.Components.DockNotebook,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,PadTitleWindow,The following statement contains a magic number: var box = new HBox (false' 3);
Magic Number,MonoDevelop.Components.DockNotebook,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.DockNotebook,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.DockNotebook,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.DockNotebook,PadTitleWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,PadTitleWindow,The following statement contains a magic number: f.SetPadding (12' 12' 12' 12);
Magic Number,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,OnSizeAllocated,The following statement contains a magic number: p.Position = allocation.Width / 2;
Magic Number,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,MoveToFloatingWindow,The following statement contains a magic number: return MoveToFloatingWindow (workspaceWindow' 0' 0' 640' 480);
Magic Number,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,MoveToFloatingWindow,The following statement contains a magic number: return MoveToFloatingWindow (workspaceWindow' 0' 0' 640' 480);
Magic Number,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,InsertLeft,The following statement contains a magic number: return Insert (window' container => { 				var box = new HPanedThin { GrabAreaSize = 6 }; 				var new_container = new DockNotebookContainer (tabControl);  				box.Pack1 (container' true' true); 				box.Pack2 (new_container' true' true); 				Child = box; 			});
Magic Number,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,InsertRight,The following statement contains a magic number: return Insert (window' container => { 				var box = new HPanedThin () { GrabAreaSize = 6 }; 				var new_container = new DockNotebookContainer (tabControl);  				box.Pack1 (new_container' true' true); 				box.Pack2 (container' true' true); 				box.Position = Allocation.Width / 2; 				Child = box; 			});
Magic Number,MonoDevelop.Components.DockNotebook,DockNotebookContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockNotebookContainer.cs,InsertRight,The following statement contains a magic number: return Insert (window' container => { 				var box = new HPanedThin () { GrabAreaSize = 6 }; 				var new_container = new DockNotebookContainer (tabControl);  				box.Pack1 (new_container' true' true); 				box.Pack2 (container' true' true); 				box.Position = Allocation.Width / 2; 				Child = box; 			});
Magic Number,MonoDevelop.Components.DockNotebook,DockWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\DockWindow.cs,OnRealized,The following statement contains a magic number: GLib.Timeout.Add (120' delegate { 				GdkWindow.Opacity = 1; 				return false; 			});
Magic Number,MonoDevelop.Ide.Editor.Util,DiffHunk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,DiffHunk,The following statement contains a magic number: this.Context = 3;
Magic Number,MonoDevelop.Ide.Editor.Util,DiffHunk,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,Overlaps,The following statement contains a magic number: return DistanceTo (other) < this.Context * 2;
Magic Number,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiff,The following statement contains a magic number: int[] downVector = new int[2 * MAX + 2];
Magic Number,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiff,The following statement contains a magic number: int[] downVector = new int[2 * MAX + 2];
Magic Number,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiff,The following statement contains a magic number: int[] upVector = new int[2 * MAX + 2];
Magic Number,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,GetDiff,The following statement contains a magic number: int[] upVector = new int[2 * MAX + 2];
Magic Number,MonoDevelop.Ide.Editor.Util,Diff,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,SMS,The following statement contains a magic number: int MaxD = ((upperA - lowerA + upperB - lowerB) / 2) + 1;
Magic Number,MonoDevelop.Ide.Editor.Util,DiffData<T>,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\Diff.cs,DiffData,The following statement contains a magic number: Modified = new bool[Length + 2];
Magic Number,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,SearchMatchingBracketForward,The following statement contains a magic number: offset % 100 == 0 && cancellationToken.IsCancellationRequested
Magic Number,MonoDevelop.Ide.Editor.Util,SimpleBracketMatcher,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleBracketMatcher.cs,SearchMatchingBracketBackward,The following statement contains a magic number: offset % 100 == 0 && cancellationToken.IsCancellationRequested
Magic Number,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,Flash,The following statement contains a magic number: int flashCount = 10;
Magic Number,MonoDevelop.Components.AutoTest.Results,GtkWidgetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.AutoTest.Results\GtkWidgetResult.cs,Flash,The following statement contains a magic number: GLib.Timeout.Add (1000' () => { 				resultWidget.QueueDraw (); 				flashCount--;  				if (flashCount == 0) { 					resultWidget.ExposeEvent -= OnFlashWidget; 					return false; 				} 				return true; 			});
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Regex,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\Regex.cs,GroupNumberFromName,The following statement contains a magic number: result *= 10;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,RegexBoyerMoore,The following statement contains a magic number: _negativeASCII = new int[128];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,RegexBoyerMoore,The following statement contains a magic number: i < 128
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,RegexBoyerMoore,The following statement contains a magic number: _lowASCII = 127;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,RegexBoyerMoore,The following statement contains a magic number: ch < 128
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexBoyerMoore,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexBoyerMoore.cs,Scan,The following statement contains a magic number: chTest < 128
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,CaptureCollection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCaptureCollection.cs,GetCapture,The following statement contains a magic number: _captures[j] = new Capture(_group._text' _group._caps[j * 2]' _group._caps[j * 2 + 1]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,CaptureCollection,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCaptureCollection.cs,GetCapture,The following statement contains a magic number: _captures[j] = new Capture(_group._text' _group._caps[j * 2]' _group._caps[j * 2 + 1]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: Dictionary<String' String> tempCategories = new Dictionary<String' String>(32);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: char[] groups = new char[9];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: StringBuilder word = new StringBuilder(11);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.Format + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Cf"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.OtherNotAssigned + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Cn"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[4] = (char) ((int) UnicodeCategory.PrivateUse + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Co"] = groups[4].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[5] = (char) ((int) UnicodeCategory.Surrogate + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Cs"] = groups[5].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[6] = GroupChar;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["C"] = new String(groups' 0' 7);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.ModifierLetter + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Lm"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.OtherLetter + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Lo"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[4] = (char) ((int) UnicodeCategory.TitlecaseLetter + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Lt"] = groups[4].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[5] = (char) ((int) UnicodeCategory.UppercaseLetter + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Lu"] = groups[5].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["L"] = new String(groups' 0' 7);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: word.Append(new String(groups' 1' 5));
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories[InternalRegexIgnoreCase] = String.Format(CultureInfo.InvariantCulture' "{0}{1}{2}{3}{4}"' GroupChar' groups[1]' groups[4]' groups[5]' groups[6]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories[InternalRegexIgnoreCase] = String.Format(CultureInfo.InvariantCulture' "{0}{1}{2}{3}{4}"' GroupChar' groups[1]' groups[4]' groups[5]' groups[6]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories[InternalRegexIgnoreCase] = String.Format(CultureInfo.InvariantCulture' "{0}{1}{2}{3}{4}"' GroupChar' groups[1]' groups[4]' groups[5]' groups[6]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.EnclosingMark + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Me"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.NonSpacingMark + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Mn"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[4] = GroupChar;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["M"] = new String(groups' 0' 5);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: word.Append(groups[3]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.LetterNumber + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Nl"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.OtherNumber + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["No"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["N"] = new String(groups' 0' 5);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.DashPunctuation + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Pd"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.ClosePunctuation + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Pe"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[4] = (char) ((int) UnicodeCategory.OtherPunctuation + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Po"] = groups[4].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[5] = (char) ((int) UnicodeCategory.OpenPunctuation + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Ps"] = groups[5].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[6] = (char) ((int) UnicodeCategory.FinalQuotePunctuation + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Pf"] = groups[6].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[7] = (char) ((int) UnicodeCategory.InitialQuotePunctuation + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Pi"] = groups[7].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[8] = GroupChar;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["P"] = new String(groups' 0' 9);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.ModifierSymbol + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Sk"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.MathSymbol + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Sm"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[4] = (char) ((int) UnicodeCategory.OtherSymbol + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["So"] = groups[4].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[5] = GroupChar;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["S"] = new String(groups' 0' 6);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[2] = (char) ((int) UnicodeCategory.ParagraphSeparator + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Zp"] = groups[2].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[3] = (char) ((int) UnicodeCategory.SpaceSeparator + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Zs"] = groups[3].ToString();
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: groups[4] = GroupChar;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: tempCategories["Z"] = new String(groups' 0' 5);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,RegexCharClass,The following statement contains a magic number: _rangelist = new List<SingleRange>(6);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,AddLowercaseRange,The following statement contains a magic number: iMid = (i + iMax) / 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ConvertOldStringsToClass,The following statement contains a magic number: StringBuilder sb = new StringBuilder(set.Length + category.Length + 3);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ConvertOldStringsToClass,The following statement contains a magic number: sb.Append((char) (set.Length - 2));
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ConvertOldStringsToClass,The following statement contains a magic number: sb.Append(set' 2' set.Length - 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ConvertOldStringsToClass,The following statement contains a magic number: sb.Append(set' 2' set.Length - 2);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ConvertOldStringsToClass,The following statement contains a magic number: set.Length >= 2 && set[0] =='\0' && set[1] == '\0'
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,IsSingleton,The following statement contains a magic number: set[FLAGS] == 0 && set[CATEGORYLENGTH] == 0 && set[SETLENGTH] == 2 && !IsSubtraction(set) &&                 (set[SETSTART] == Lastchar || set[SETSTART]+1 == set[SETSTART+1])
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,IsSingletonInverse,The following statement contains a magic number: set[FLAGS] == 1 && set[CATEGORYLENGTH] == 0 && set[SETLENGTH] == 2 && !IsSubtraction(set) &&                 (set[SETSTART] == Lastchar || set[SETSTART]+1 == set[SETSTART+1])
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,CharInClassInternal,The following statement contains a magic number: mid = (min + max) / 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ToStringClass,The following statement contains a magic number: int rangeLen = _rangelist.Count * 2 ;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,ToStringClass,The following statement contains a magic number: StringBuilder sb = new StringBuilder(rangeLen + _categories.Length + 3);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,SetFromProperty,The following statement contains a magic number: int mid = (min + max) / 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCode.cs,OpcodeSize,The following statement contains a magic number: switch (Opcode) {                 case Nothing:                 case Bol:                 case Eol:                 case Boundary:                 case Nonboundary:                 case ECMABoundary:                 case NonECMABoundary:                 case Beginning:                 case Start:                 case EndZ:                 case End:                  case Nullmark:                 case Setmark:                 case Getmark:                 case Setjump:                 case Backjump:                 case Forejump:                 case Stop:                      return 1;                  case One:                 case Notone:                 case Multi:                 case Ref:                 case Testref:                   case Goto:                 case Nullcount:                 case Setcount:                 case Lazybranch:                 case Branchmark:                 case Lazybranchmark:                 case Prune:                 case Set:                      return 2;                  case Capturemark:                 case Branchcount:                 case Lazybranchcount:                  case Onerep:                 case Notonerep:                 case Oneloop:                 case Notoneloop:                 case Onelazy:                 case Notonelazy:                 case Setlazy:                 case Setrep:                 case Setloop:                      return 3;                  default:                      throw MakeException("");             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCode.cs,OpcodeSize,The following statement contains a magic number: switch (Opcode) {                 case Nothing:                 case Bol:                 case Eol:                 case Boundary:                 case Nonboundary:                 case ECMABoundary:                 case NonECMABoundary:                 case Beginning:                 case Start:                 case EndZ:                 case End:                  case Nullmark:                 case Setmark:                 case Getmark:                 case Setjump:                 case Backjump:                 case Forejump:                 case Stop:                      return 1;                  case One:                 case Notone:                 case Multi:                 case Ref:                 case Testref:                   case Goto:                 case Nullcount:                 case Setcount:                 case Lazybranch:                 case Branchmark:                 case Lazybranchmark:                 case Prune:                 case Set:                      return 2;                  case Capturemark:                 case Branchcount:                 case Lazybranchcount:                  case Onerep:                 case Notonerep:                 case Oneloop:                 case Notoneloop:                 case Onelazy:                 case Notonelazy:                 case Setlazy:                 case Setrep:                 case Setloop:                      return 3;                  default:                      throw MakeException("");             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,AddBacktrackNote,The following statement contains a magic number: BacktrackNote[] newnotes = new BacktrackNote[_notes == null ? 16 : _notes.Length * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,AddBacktrackNote,The following statement contains a magic number: BacktrackNote[] newnotes = new BacktrackNote[_notes == null ? 16 : _notes.Length * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,Ldc,The following statement contains a magic number: i <= 127 && i >= -128
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,Ldc,The following statement contains a magic number: i <= 127 && i >= -128
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,Goto,The following statement contains a magic number: Ldc(_trackcount * 4);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,Goto,The following statement contains a magic number: Ldc(_trackcount * 3);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateOneCode,The following statement contains a magic number: switch (_regexopcode) {                 case RegexCode.Stop:                     //: return;                     Mvlocfld(_textposV' _textposF);       // update _textpos                     Ret();                     break;                  case RegexCode.Nothing:                     //: break Backward;                     Back();                     break;                  case RegexCode.Goto:                     //: Goto(Operand(0));                     Goto(Operand(0));                     break;                  case RegexCode.Testref:                     //: if (!_match.IsMatched(Operand(0)))                     //:     break Backward;                     Ldthis();                     Ldc(Operand(0));                     Callvirt(_ismatchedM);                     BrfalseFar(_backtrack);                     break;                  case RegexCode.Lazybranch:                     //: Track(Textpos());                     PushTrack(_textposV);                     Track();                     break;                  case RegexCode.Lazybranch | RegexCode.Back:                     //: Trackframe(1);                     //: Textto(Tracked(0));                     //: Goto(Operand(0));                     PopTrack();                     Stloc(_textposV);                     Goto(Operand(0));                     break;                  case RegexCode.Nullmark:                     //: Stack(-1);                     //: Track();                     ReadyPushStack();                     Ldc(-1);                     DoPush();                     TrackUnique(stackpop);                     break;                  case RegexCode.Setmark:                     //: Stack(Textpos());                     //: Track();                     PushStack(_textposV);                     TrackUnique(stackpop);                     break;                  case RegexCode.Nullmark | RegexCode.Back:                 case RegexCode.Setmark | RegexCode.Back:                     //: Stackframe(1);                     //: break Backward;                     PopDiscardStack();                     Back();                     break;                  case RegexCode.Getmark:                     //: Stackframe(1);                     //: Track(Stacked(0));                     //: Textto(Stacked(0));                     ReadyPushTrack();                     PopStack();                     Dup();                     Stloc(_textposV);                     DoPush();                      Track();                     break;                  case RegexCode.Getmark | RegexCode.Back:                     //: Trackframe(1);                     //: Stack(Tracked(0));                     //: break Backward;                     ReadyPushStack();                     PopTrack();                     DoPush();                     Back();                     break;                  case RegexCode.Capturemark:                     //: if (!IsMatched(Operand(1)))                     //:     break Backward;                     //: Stackframe(1);                     //: if (Operand(1) != -1)                     //:     TransferCapture(Operand(0)' Operand(1)' Stacked(0)' Textpos());                     //: else                     //:     Capture(Operand(0)' Stacked(0)' Textpos());                     //: Track(Stacked(0));                      //: Stackframe(1);                     //: Capture(Operand(0)' Stacked(0)' Textpos());                     //: Track(Stacked(0));                      if (Operand(1) != -1) {                         Ldthis();                         Ldc(Operand(1));                         Callvirt(_ismatchedM);                         BrfalseFar(_backtrack);                     }                      PopStack();                     Stloc(_tempV);                      if (Operand(1) != -1) {                         Ldthis();                         Ldc(Operand(0));                         Ldc(Operand(1));                         Ldloc(_tempV);                         Ldloc(_textposV);                         Callvirt(_transferM);                     }                     else {                         Ldthis();                         Ldc(Operand(0));                         Ldloc(_tempV);                         Ldloc(_textposV);                         Callvirt(_captureM);                     }                      PushTrack(_tempV);                      if (Operand(0) != -1 && Operand(1) != -1)                         TrackUnique(capback2);                     else                         TrackUnique(capback);                      break;                   case RegexCode.Capturemark | RegexCode.Back:                     //: Trackframe(1);                     //: Stack(Tracked(0));                     //: Uncapture();                     //: if (Operand(0) != -1 && Operand(1) != -1)                     //:     Uncapture();                     //: break Backward;                     ReadyPushStack();                     PopTrack();                     DoPush();                     Ldthis();                     Callvirt(_uncaptureM);                     if (Operand(0) != -1 && Operand(1) != -1) {                         Ldthis();                         Callvirt(_uncaptureM);                     }                     Back();                     break;                  case RegexCode.Branchmark:                     //: Stackframe(1);                     //:                      //: if (Textpos() != Stacked(0))                     //: {                                   // Nonempty match -> loop now                     //:     Track(Stacked(0)' Textpos());   // Save old mark' textpos                     //:     Stack(Textpos());               // Make new mark                     //:     Goto(Operand(0));               // Loop                     //: }                     //: else                     //: {                                   // Empty match -> straight now                     //:     Track2(Stacked(0));             // Save old mark                     //:     Advance(1);                     // Straight                     //: }                     //: continue Forward;                     {                         LocalBuilder mark = _tempV;                         Label      l1   = DefineLabel();                          PopStack();                         Dup();                         Stloc(mark);                            // Stacked(0) -> temp                         PushTrack(mark);                         Ldloc(_textposV);                         Beq(l1);                                // mark == textpos -> branch                          // (matched != 0)                          PushTrack(_textposV);                         PushStack(_textposV);                         Track();                         Goto(Operand(0));                       // Goto(Operand(0))                          // else                          MarkLabel(l1);                         TrackUnique2(branchmarkback2);                         break;                     }                  case RegexCode.Branchmark | RegexCode.Back:                     //: Trackframe(2);                     //: Stackframe(1);                     //: Textto(Tracked(1));                     // Recall position                     //: Track2(Tracked(0));                     // Save old mark                     //: Advance(1);                     PopTrack();                     Stloc(_textposV);                     PopStack();                     Pop();                     // track spot 0 is already in place                     TrackUnique2(branchmarkback2);                     Advance();                     break;                  case RegexCode.Branchmark | RegexCode.Back2:                     //: Trackframe(1);                     //: Stack(Tracked(0));                      // Recall old mark                     //: break Backward;                         // Backtrack                     ReadyPushStack();                     PopTrack();                     DoPush();                     Back();                     break;                   case RegexCode.Lazybranchmark:                     //: StackPop();                     //: int oldMarkPos = StackPeek();                     //:                      //: if (Textpos() != oldMarkPos) {         // Nonempty match -> next loop                     //: {                                   // Nonempty match -> next loop                     //:     if (oldMarkPos != -1)                     //:         Track(Stacked(0)' Textpos());   // Save old mark' textpos                     //:     else                     //:         TrackPush(Textpos()' Textpos());                        //: }                     //: else                     //: {                                   // Empty match -> no loop                     //:     Track2(Stacked(0));             // Save old mark                     //: }                     //: Advance(1);                     //: continue Forward;                     {                         LocalBuilder mark = _tempV;                         Label      l1   = DefineLabel();                         Label      l2   = DefineLabel();                         Label      l3   = DefineLabel();                          PopStack();                         Dup();                         Stloc(mark);                      // Stacked(0) -> temp                          // if (oldMarkPos != -1)                         Ldloc(mark);                         Ldc(-1);                         Beq(l2);                                // mark == -1 -> branch                             PushTrack(mark);                             Br(l3);                         // else                             MarkLabel(l2);                             PushTrack(_textposV);                         MarkLabel(l3);                                                      // if (Textpos() != mark)                         Ldloc(_textposV);                         Beq(l1);                                // mark == textpos -> branch                             PushTrack(_textposV);                             Track();                             Br(AdvanceLabel());                 // Advance (near)                         // else                             MarkLabel(l1);                             ReadyPushStack();                   // push the current textPos on the stack.  							        // May be ignored by 'back2' or used by a true empty match.                             Ldloc(mark);                                                      DoPush();                             TrackUnique2(lazybranchmarkback2);                          break;                     }                  case RegexCode.Lazybranchmark | RegexCode.Back:                     //: Trackframe(2);                     //: Track2(Tracked(0));                     // Save old mark                     //: Stack(Textpos());                       // Make new mark                     //: Textto(Tracked(1));                     // Recall position                     //: Goto(Operand(0));                       // Loop                      PopTrack();                     Stloc(_textposV);                     PushStack(_textposV);                     TrackUnique2(lazybranchmarkback2);                     Goto(Operand(0));                     break;                  case RegexCode.Lazybranchmark | RegexCode.Back2:                     //: Stackframe(1);                     //: Trackframe(1);                     //: Stack(Tracked(0));                  // Recall old mark                     //: break Backward;                     ReadyReplaceStack(0);                     PopTrack();                     DoReplace();                     Back();                     break;                  case RegexCode.Nullcount:                     //: Stack(-1' Operand(0));                     //: Track();                     ReadyPushStack();                     Ldc(-1);                     DoPush();                     ReadyPushStack();                     Ldc(Operand(0));                     DoPush();                     TrackUnique(stackpop2);                     break;                  case RegexCode.Setcount:                     //: Stack(Textpos()' Operand(0));                     //: Track();                     PushStack(_textposV);                     ReadyPushStack();                     Ldc(Operand(0));                     DoPush();                     TrackUnique(stackpop2);                     break;                   case RegexCode.Nullcount | RegexCode.Back:                 case RegexCode.Setcount | RegexCode.Back:                     //: Stackframe(2);                     //: break Backward;                     PopDiscardStack(2);                     Back();                     break;                   case RegexCode.Branchcount:                     //: Stackframe(2);                     //: int mark = Stacked(0);                     //: int count = Stacked(1);                     //:                      //: if (count >= Operand(1) || Textpos() == mark && count >= 0)                     //: {                                   // Max loops or empty match -> straight now                     //:     Track2(mark' count);            // Save old mark' count                     //:     Advance(2);                     // Straight                     //: }                     //: else                     //: {                                   // Nonempty match -> count+loop now                     //:     Track(mark);                    // remember mark                     //:     Stack(Textpos()' count + 1);    // Make new mark' incr count                     //:     Goto(Operand(0));               // Loop                     //: }                     //: continue Forward;                     {                         LocalBuilder count = _tempV;                         LocalBuilder mark  = _temp2V;                         Label      l1    = DefineLabel();                         Label      l2    = DefineLabel();                          PopStack();                         Stloc(count);                           // count -> temp                         PopStack();                         Dup();                         Stloc(mark);                            // mark -> temp2                         PushTrack(mark);                          Ldloc(_textposV);                         Bne(l1);                                // mark != textpos -> l1                         Ldloc(count);                         Ldc(0);                         Bge(l2);                                // count >= 0 && mark == textpos -> l2                          MarkLabel(l1);                         Ldloc(count);                         Ldc(Operand(1));                         Bge(l2);                                // count >= Operand(1) -> l2                          // else                         PushStack(_textposV);                         ReadyPushStack();                         Ldloc(count);                           // mark already on track                         Ldc(1);                         Add();                         DoPush();                         Track();                         Goto(Operand(0));                          // if (count >= Operand(1) || Textpos() == mark)                         MarkLabel(l2);                         PushTrack(count);                       // mark already on track                         TrackUnique2(branchcountback2);                         break;                     }                  case RegexCode.Branchcount | RegexCode.Back:                     //: Trackframe(1);                     //: Stackframe(2);                     //: if (Stacked(1) > 0)                     // Positive -> can go straight                     //: {                     //:     Textto(Stacked(0));                 // Zap to mark                     //:     Track2(Tracked(0)' Stacked(1) - 1); // Save old mark' old count                     //:     Advance(2);                         // Straight                     //:     continue Forward;                     //: }                     //: Stack(Tracked(0)' Stacked(1) - 1);      // recall old mark' old count                     //: break Backward;                     {                          LocalBuilder count = _tempV;                         Label      l1    = DefineLabel();                         PopStack();                         Ldc(1);                         Sub();                         Dup();                         Stloc(count);                         Ldc(0);                         Blt(l1);                          // if (count >= 0)                         PopStack();                         Stloc(_textposV);                         PushTrack(count);                       // Tracked(0) is alredy on the track                         TrackUnique2(branchcountback2);                         Advance();                          // else                         MarkLabel(l1);                         ReadyReplaceStack(0);                         PopTrack();                         DoReplace();                         PushStack(count);                         Back();                         break;                     }                  case RegexCode.Branchcount | RegexCode.Back2:                     //: Trackframe(2);                     //: Stack(Tracked(0)' Tracked(1));      // Recall old mark' old count                     //: break Backward;                     // Backtrack                      PopTrack();                     Stloc(_tempV);                     ReadyPushStack();                     PopTrack();                     DoPush();                     PushStack(_tempV);                     Back();                     break;                  case RegexCode.Lazybranchcount:                     //: Stackframe(2);                     //: int mark = Stacked(0);                     //: int count = Stacked(1);                     //:                     //: if (count < 0)                     //: {                                   // Negative count -> loop now                     //:     Track2(mark);                   // Save old mark                     //:     Stack(Textpos()' count + 1);    // Make new mark' incr count                     //:     Goto(Operand(0));               // Loop                     //: }                     //: else                     //: {                                   // Nonneg count or empty match -> straight now                     //:     Track(mark' count' Textpos());  // Save mark' count' position                     //: }                     {                         LocalBuilder count = _tempV;                         LocalBuilder mark  = _temp2V;                         Label      l1    = DefineLabel(); #pragma warning disable 219                         Label      l2    = DefineLabel();                         Label      l3    = _labels[NextCodepos()]; #pragma warning restore 219                          PopStack();                         Stloc(count);                           // count -> temp                         PopStack();                         Stloc(mark);                            // mark -> temp2                          Ldloc(count);                         Ldc(0);                         Bge(l1);                                // count >= 0 -> l1                          // if (count < 0)                         PushTrack(mark);                         PushStack(_textposV);                         ReadyPushStack();                         Ldloc(count);                         Ldc(1);                         Add();                         DoPush();                         TrackUnique2(lazybranchcountback2);                         Goto(Operand(0));                          // else                         MarkLabel(l1);                         PushTrack(mark);                         PushTrack(count);                         PushTrack(_textposV);                         Track();                         break;                     }                  case RegexCode.Lazybranchcount | RegexCode.Back:                     //: Trackframe(3);                     //: int mark = Tracked(0);                     //: int textpos = Tracked(2);                     //: if (Tracked(1) < Operand(1) && textpos != mark)                     //: {                                       // Under limit and not empty match -> loop                     //:     Textto(Tracked(2));                 // Recall position                     //:     Stack(Textpos()' Tracked(1) + 1);   // Make new mark' incr count                     //:     Track2(Tracked(0));                 // Save old mark                     //:     Goto(Operand(0));                   // Loop                     //:     continue Forward;                     //: }                     //: else                     //: {                     //:     Stack(Tracked(0)' Tracked(1));      // Recall old mark' count                     //:     break Backward;                     // backtrack                     //: }                     {                         Label       l1 = DefineLabel();                         LocalBuilder  cV = _tempV;                         PopTrack();                         Stloc(_textposV);                         PopTrack();                         Dup();                         Stloc(cV);                         Ldc(Operand(1));                         Bge(l1);                                // Tracked(1) >= Operand(1) -> l1                          Ldloc(_textposV);                         TopTrack();                         Beq(l1);                                // textpos == mark -> l1                          PushStack(_textposV);                         ReadyPushStack();                         Ldloc(cV);                         Ldc(1);                         Add();                         DoPush();                         TrackUnique2(lazybranchcountback2);                         Goto(Operand(0));                          MarkLabel(l1);                         ReadyPushStack();                         PopTrack();                         DoPush();                         PushStack(cV);                         Back();                         break;                     }                  case RegexCode.Lazybranchcount | RegexCode.Back2:                     // <                          ReadyReplaceStack(1);                     PopTrack();                     DoReplace();                     ReadyReplaceStack(0);                     TopStack();                     Ldc(1);                     Sub();                     DoReplace();                     Back();                     break;                   case RegexCode.Setjump:                     //: Stack(Trackpos()' Crawlpos());                     //: Track();                     ReadyPushStack();                     Ldthisfld(_trackF);                     Ldlen();                     Ldloc(_trackposV);                     Sub();                     DoPush();                     ReadyPushStack();                     Ldthis();                     Callvirt(_crawlposM);                     DoPush();                     TrackUnique(stackpop2);                     break;                  case RegexCode.Setjump | RegexCode.Back:                     //: Stackframe(2);                     PopDiscardStack(2);                     Back();                     break;                   case RegexCode.Backjump:                     //: Stackframe(2);                     //: Trackto(Stacked(0));                     //: while (Crawlpos() != Stacked(1))                     //:     Uncapture();                     //: break Backward;                     {                         Label      l1    = DefineLabel();                         Label      l2    = DefineLabel();                          PopStack();                         Ldthisfld(_trackF);                         Ldlen();                         PopStack();                         Sub();                         Stloc(_trackposV);                         Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Beq(l2);                          MarkLabel(l1);                         Ldthis();                         Callvirt(_uncaptureM);                         Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Bne(l1);                          MarkLabel(l2);                         Pop();                         Back();                         break;                     }                  case RegexCode.Forejump:                     //: Stackframe(2);                     //: Trackto(Stacked(0));                     //: Track(Stacked(1));                     PopStack();                     Stloc(_tempV);                     Ldthisfld(_trackF);                     Ldlen();                     PopStack();                     Sub();                     Stloc(_trackposV);                     PushTrack(_tempV);                     TrackUnique(forejumpback);                     break;                  case RegexCode.Forejump | RegexCode.Back:                     //: Trackframe(1);                     //: while (Crawlpos() != Tracked(0))                     //:     Uncapture();                     //: break Backward;                     {                         Label      l1    = DefineLabel();                         Label      l2    = DefineLabel();                          PopTrack();                          Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Beq(l2);                          MarkLabel(l1);                         Ldthis();                         Callvirt(_uncaptureM);                         Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Bne(l1);                          MarkLabel(l2);                         Pop();                         Back();                         break;                     }                  case RegexCode.Bol:                     //: if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                     //:     break Backward;                     {                         Label      l1    = _labels[NextCodepos()];                         Ldloc(_textposV);                         Ldloc(_textbegV);                         Ble(l1);                         Leftchar();                         Ldc((int)'\n');                         BneFar(_backtrack);                         break;                     }                  case RegexCode.Eol:                     //: if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                     //:     break Backward;                     {                         Label      l1    = _labels[NextCodepos()];                         Ldloc(_textposV);                         Ldloc(_textendV);                         Bge(l1);                         Rightchar();                         Ldc((int)'\n');                         BneFar(_backtrack);                         break;                     }                  case RegexCode.Boundary:                 case RegexCode.Nonboundary:                     //: if (!IsBoundary(Textpos()' _textbeg' _textend))                     //:     break Backward;                     Ldthis();                     Ldloc(_textposV);                     Ldloc(_textbegV);                     Ldloc(_textendV);                     Callvirt(_isboundaryM);                     if (Code() == RegexCode.Boundary)                         BrfalseFar(_backtrack);                     else                         BrtrueFar(_backtrack);                     break;                  case RegexCode.ECMABoundary:                 case RegexCode.NonECMABoundary:                     //: if (!IsECMABoundary(Textpos()' _textbeg' _textend))                     //:     break Backward;                     Ldthis();                     Ldloc(_textposV);                     Ldloc(_textbegV);                     Ldloc(_textendV);                     Callvirt(_isECMABoundaryM);                     if (Code() == RegexCode.ECMABoundary)                         BrfalseFar(_backtrack);                     else                         BrtrueFar(_backtrack);                     break;                  case RegexCode.Beginning:                     //: if (Leftchars() > 0)                     //:    break Backward;                     Ldloc(_textposV);                     Ldloc(_textbegV);                     BgtFar(_backtrack);                     break;                  case RegexCode.Start:                     //: if (Textpos() != Textstart())                     //:    break Backward;                     Ldloc(_textposV);                     Ldthisfld(_textstartF);                     BneFar(_backtrack);                     break;                  case RegexCode.EndZ:                     //: if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                     //:    break Backward;                     Ldloc(_textposV);                     Ldloc(_textendV);                     Ldc(1);                     Sub();                     BltFar(_backtrack);                     Ldloc(_textposV);                     Ldloc(_textendV);                     Bge(_labels[NextCodepos()]);                     Rightchar();                     Ldc((int)'\n');                     BneFar(_backtrack);                     break;                  case RegexCode.End:                     //: if (Rightchars() > 0)                     //:    break Backward;                     Ldloc(_textposV);                     Ldloc(_textendV);                     BltFar(_backtrack);                     break;                  case RegexCode.One:                 case RegexCode.Notone:                 case RegexCode.Set:                 case RegexCode.One      | RegexCode.Rtl:                 case RegexCode.Notone   | RegexCode.Rtl:                 case RegexCode.Set      | RegexCode.Rtl:                 case RegexCode.One      | RegexCode.Ci:                 case RegexCode.Notone   | RegexCode.Ci:                 case RegexCode.Set      | RegexCode.Ci:                 case RegexCode.One      | RegexCode.Ci  | RegexCode.Rtl:                 case RegexCode.Notone   | RegexCode.Ci  | RegexCode.Rtl:                 case RegexCode.Set      | RegexCode.Ci  | RegexCode.Rtl:                      //: if (Rightchars() < 1 || Rightcharnext() != (char)Operand(0))                     //:    break Backward;                     Ldloc(_textposV);                      if (!IsRtl()) {                         Ldloc(_textendV);                         BgeFar(_backtrack);                         Rightcharnext();                     }                     else {                         Ldloc(_textbegV);                         BleFar(_backtrack);                         Leftcharnext();                     }                      if (IsCi())                         CallToLower();                      if (Code() == RegexCode.Set) {                          Ldstr(_strings[Operand(0)]);                         Call(_charInSetM);                          BrfalseFar(_backtrack);                     }                     else {                         Ldc(Operand(0));                         if (Code() == RegexCode.One)                             BneFar(_backtrack);                         else                             BeqFar(_backtrack);                     }                     break;                  case RegexCode.Multi:                 case RegexCode.Multi | RegexCode.Ci:                     //                     // <                           //: String Str = _strings[Operand(0)];                     //: int i' c;                     //: if (Rightchars() < (c = Str.Length))                     //:     break Backward;                     //: for (i = 0; c > 0; i++' c--)                     //:     if (Str[i] != Rightcharnext())                     //:         break Backward;                     {                         int i;                         String str;                          str = _strings[Operand(0)];                          Ldc(str.Length);                         Ldloc(_textendV);                         Ldloc(_textposV);                         Sub();                         BgtFar(_backtrack);                          // unroll the string                         for (i = 0; i < str.Length; i++) {                             Ldloc(_textV);                             Ldloc(_textposV);                             if (i != 0) {                                 Ldc(i);                                 Add();                             }                             Callvirt(_getcharM);                             if (IsCi())                                 CallToLower();                                                          Ldc((int)str[i]);                             BneFar(_backtrack);                         }                          Ldloc(_textposV);                         Ldc(str.Length);                         Add();                         Stloc(_textposV);                         break;                     }                   case RegexCode.Multi | RegexCode.Rtl:                 case RegexCode.Multi | RegexCode.Ci  | RegexCode.Rtl:                     //: String Str = _strings[Operand(0)];                     //: int c;                     //: if (Leftchars() < (c = Str.Length))                     //:     break Backward;                     //: while (c > 0)                     //:     if (Str[--c] != Leftcharnext())                     //:         break Backward;                     {                         int i;                         String str;                          str = _strings[Operand(0)];                          Ldc(str.Length);                         Ldloc(_textposV);                         Ldloc(_textbegV);                         Sub();                         BgtFar(_backtrack);                          // unroll the string                         for (i = str.Length; i > 0;) {                             i--;                             Ldloc(_textV);                             Ldloc(_textposV);                             Ldc(str.Length - i);                             Sub();                             Callvirt(_getcharM);                             if (IsCi())                              {                                 CallToLower();                             }                             Ldc((int)str[i]);                             BneFar(_backtrack);                         }                          Ldloc(_textposV);                         Ldc(str.Length);                         Sub();                         Stloc(_textposV);                          break;                     }                  case RegexCode.Ref:                 case RegexCode.Ref | RegexCode.Rtl:                 case RegexCode.Ref | RegexCode.Ci:                 case RegexCode.Ref | RegexCode.Ci | RegexCode.Rtl:                     //: int capnum = Operand(0);                     //: int j' c;                     //: if (!_match.IsMatched(capnum)) {                     //:     if (!RegexOptions.ECMAScript)                     //:         break Backward;                     //: } else {                     //:     if (Rightchars() < (c = _match.MatchLength(capnum)))                     //:         break Backward;                     //:     for (j = _match.MatchIndex(capnum); c > 0; j++' c--)                     //:         if (CharAt(j) != Rightcharnext())                     //:             break Backward;                     //: }                     {                         LocalBuilder lenV     = _tempV;                         LocalBuilder indexV   = _temp2V;                         Label      l1       = DefineLabel();                          Ldthis();                         Ldc(Operand(0));                         Callvirt(_ismatchedM);                         if ((_options & RegexOptions.ECMAScript) != 0)                             Brfalse(AdvanceLabel());                         else                             BrfalseFar(_backtrack); // !IsMatched() -> back                          Ldthis();                         Ldc(Operand(0));                         Callvirt(_matchlengthM);                         Dup();                         Stloc(lenV);                         if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         BgtFar(_backtrack);         // Matchlength() > Rightchars() -> back                          Ldthis();                         Ldc(Operand(0));                         Callvirt(_matchindexM);                         if (!IsRtl()) {                             Ldloc(lenV);                             Add(IsRtl());                         }                         Stloc(indexV);              // index += len                          Ldloc(_textposV);                         Ldloc(lenV);                         Add(IsRtl());                         Stloc(_textposV);           // texpos += len                          MarkLabel(l1);                         Ldloc(lenV);                         Ldc(0);                         Ble(AdvanceLabel());                         Ldloc(_textV);                         Ldloc(indexV);                         Ldloc(lenV);                         if (IsRtl()) {                             Ldc(1);                             Sub();                             Dup();                             Stloc(lenV);                         }                         Sub(IsRtl());                         Callvirt(_getcharM);                         if (IsCi())                             CallToLower();                                                  Ldloc(_textV);                         Ldloc(_textposV);                         Ldloc(lenV);                         if (!IsRtl()) {                             Dup();                             Ldc(1);                             Sub();                             Stloc(lenV);                         }                         Sub(IsRtl());                         Callvirt(_getcharM);                         if (IsCi())                             CallToLower();                                                  Beq(l1);                         Back();                         break;                     }                   case RegexCode.Onerep:                 case RegexCode.Notonerep:                 case RegexCode.Setrep:                 case RegexCode.Onerep | RegexCode.Rtl:                 case RegexCode.Notonerep | RegexCode.Rtl:                 case RegexCode.Setrep | RegexCode.Rtl:                 case RegexCode.Onerep | RegexCode.Ci:                 case RegexCode.Notonerep | RegexCode.Ci:                 case RegexCode.Setrep | RegexCode.Ci:                 case RegexCode.Onerep | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Notonerep | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Setrep | RegexCode.Ci | RegexCode.Rtl:                     //: int c = Operand(1);                     //: if (Rightchars() < c)                     //:     break Backward;                     //: char ch = (char)Operand(0);                     //: while (c-- > 0)                     //:     if (Rightcharnext() != ch)                     //:         break Backward;                     {                         LocalBuilder lenV = _tempV;                         Label      l1   = DefineLabel();                          int c = Operand(1);                          if (c == 0)                             break;                          Ldc(c);                         if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         BgtFar(_backtrack);         // Matchlength() > Rightchars() -> back                          Ldloc(_textposV);                         Ldc(c);                         Add(IsRtl());                         Stloc(_textposV);           // texpos += len                          Ldc(c);                         Stloc(lenV);                          MarkLabel(l1);                         Ldloc(_textV);                         Ldloc(_textposV);                         Ldloc(lenV);                         if (IsRtl()) {                             Ldc(1);                             Sub();                             Dup();                             Stloc(lenV);                             Add();                         }                         else {                             Dup();                             Ldc(1);                             Sub();                             Stloc(lenV);                             Sub();                         }                         Callvirt(_getcharM);                         if (IsCi())                             CallToLower();                                                  if (Code() == RegexCode.Setrep) {                             Ldstr(_strings[Operand(0)]);                             Call(_charInSetM);                              BrfalseFar(_backtrack);                         }                         else {                             Ldc(Operand(0));                             if (Code() == RegexCode.Onerep)                                 BneFar(_backtrack);                             else                                 BeqFar(_backtrack);                         }                         Ldloc(lenV);                         Ldc(0);                         if (Code() == RegexCode.Setrep)                             BgtFar(l1);                         else                             Bgt(l1);                         break;                     }                   case RegexCode.Oneloop:                 case RegexCode.Notoneloop:                 case RegexCode.Setloop:                 case RegexCode.Oneloop | RegexCode.Rtl:                 case RegexCode.Notoneloop | RegexCode.Rtl:                 case RegexCode.Setloop | RegexCode.Rtl:                 case RegexCode.Oneloop | RegexCode.Ci:                 case RegexCode.Notoneloop | RegexCode.Ci:                 case RegexCode.Setloop | RegexCode.Ci:                 case RegexCode.Oneloop | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Notoneloop | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Setloop | RegexCode.Ci | RegexCode.Rtl:                     //: int c = Operand(1);                     //: if (c > Rightchars())                     //:     c = Rightchars();                     //: char ch = (char)Operand(0);                     //: int i;                     //: for (i = c; i > 0; i--)                     //: {                     //:     if (Rightcharnext() != ch)                     //:     {                     //:         Leftnext();                     //:         break;                     //:     }                     //: }                     //: if (c > i)                     //:     Track(c - i - 1' Textpos() - 1);                      {                         LocalBuilder cV   = _tempV;                         LocalBuilder lenV = _temp2V;                         Label      l1   = DefineLabel();                         Label      l2   = DefineLabel();                          int c = Operand(1);                          if (c == 0)                             break;                         if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         if (c != Int32.MaxValue) {                             Label l4 = DefineLabel();                             Dup();                             Ldc(c);                             Blt(l4);                             Pop();                             Ldc(c);                             MarkLabel(l4);                         }                         Dup();                         Stloc(lenV);                         Ldc(1);                         Add();                         Stloc(cV);                          MarkLabel(l1);                         Ldloc(cV);                         Ldc(1);                         Sub();                         Dup();                         Stloc(cV);                         Ldc(0);                         if (Code() == RegexCode.Setloop)                             BleFar(l2);                         else                             Ble(l2);                          if (IsRtl())                             Leftcharnext();                         else                             Rightcharnext();                         if (IsCi())                              CallToLower();                                                  if (Code() == RegexCode.Setloop) {                             Ldstr(_strings[Operand(0)]);                             Call(_charInSetM);                              BrtrueFar(l1);                         }                         else {                             Ldc(Operand(0));                             if (Code() == RegexCode.Oneloop)                                 Beq(l1);                             else                                 Bne(l1);                         }                          Ldloc(_textposV);                         Ldc(1);                         Sub(IsRtl());                         Stloc(_textposV);                          MarkLabel(l2);                         Ldloc(lenV);                         Ldloc(cV);                         Ble(AdvanceLabel());                          ReadyPushTrack();                         Ldloc(lenV);                         Ldloc(cV);                         Sub();                         Ldc(1);                         Sub();                         DoPush();                          ReadyPushTrack();                         Ldloc(_textposV);                         Ldc(1);                         Sub(IsRtl());                         DoPush();                          Track();                         break;                     }                  case RegexCode.Oneloop | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Back:                 case RegexCode.Oneloop | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Oneloop | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Oneloop | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                     //: Trackframe(2);                     //: int i   = Tracked(0);                     //: int pos = Tracked(1);                     //: Textto(pos);                     //: if (i > 0)                     //:     Track(i - 1' pos - 1);                     //: Advance(2);                     PopTrack();                     Stloc(_textposV);                     PopTrack();                     Stloc(_tempV);                     Ldloc(_tempV);                     Ldc(0);                     BleFar(AdvanceLabel());                     ReadyPushTrack();                     Ldloc(_tempV);                     Ldc(1);                     Sub();                     DoPush();                     ReadyPushTrack();                     Ldloc(_textposV);                     Ldc(1);                     Sub(IsRtl());                     DoPush();                     Trackagain();                     Advance();                     break;                  case RegexCode.Onelazy:                 case RegexCode.Notonelazy:                 case RegexCode.Setlazy:                 case RegexCode.Onelazy | RegexCode.Rtl:                 case RegexCode.Notonelazy | RegexCode.Rtl:                 case RegexCode.Setlazy | RegexCode.Rtl:                 case RegexCode.Onelazy | RegexCode.Ci:                 case RegexCode.Notonelazy | RegexCode.Ci:                 case RegexCode.Setlazy | RegexCode.Ci:                 case RegexCode.Onelazy | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Notonelazy | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Setlazy | RegexCode.Ci | RegexCode.Rtl:                     //: int c = Operand(1);                     //: if (c > Rightchars())                     //:     c = Rightchars();                     //: if (c > 0)                     //:     Track(c - 1' Textpos());                     {                         LocalBuilder cV   = _tempV;                          int c = Operand(1);                          if (c == 0)                             break;                          if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         if (c != Int32.MaxValue) {                             Label l4 = DefineLabel();                             Dup();                             Ldc(c);                             Blt(l4);                             Pop();                             Ldc(c);                             MarkLabel(l4);                         }                         Dup();                         Stloc(cV);                         Ldc(0);                         Ble(AdvanceLabel());                         ReadyPushTrack();                         Ldloc(cV);                         Ldc(1);                         Sub();                         DoPush();                         PushTrack(_textposV);                         Track();                         break;                     }                  case RegexCode.Onelazy | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Back:                 case RegexCode.Onelazy | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Onelazy | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Onelazy | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                     //: Trackframe(2);                     //: int pos = Tracked(1);                     //: Textto(pos);                     //: if (Rightcharnext() != (char)Operand(0))                     //:     break Backward;                     //: int i = Tracked(0);                     //: if (i > 0)                     //:     Track(i - 1' pos + 1);                      PopTrack();                     Stloc(_textposV);                     PopTrack();                     Stloc(_temp2V);                      if (!IsRtl())                         Rightcharnext();                     else                         Leftcharnext();                      if (IsCi())                         CallToLower();                      if (Code() == RegexCode.Setlazy) {                         Ldstr(_strings[Operand(0)]);                         Call(_charInSetM);                          BrfalseFar(_backtrack);                     }                     else {                         Ldc(Operand(0));                         if (Code() == RegexCode.Onelazy)                             BneFar(_backtrack);                         else                             BeqFar(_backtrack);                     }                      Ldloc(_temp2V);                     Ldc(0);                     BleFar(AdvanceLabel());                     ReadyPushTrack();                     Ldloc(_temp2V);                     Ldc(1);                     Sub();                     DoPush();                     PushTrack(_textposV);                     Trackagain();                     Advance();                     break;                  default: 				throw new NotImplementedException();             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCompiler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCompiler.cs,GenerateOneCode,The following statement contains a magic number: switch (_regexopcode) {                 case RegexCode.Stop:                     //: return;                     Mvlocfld(_textposV' _textposF);       // update _textpos                     Ret();                     break;                  case RegexCode.Nothing:                     //: break Backward;                     Back();                     break;                  case RegexCode.Goto:                     //: Goto(Operand(0));                     Goto(Operand(0));                     break;                  case RegexCode.Testref:                     //: if (!_match.IsMatched(Operand(0)))                     //:     break Backward;                     Ldthis();                     Ldc(Operand(0));                     Callvirt(_ismatchedM);                     BrfalseFar(_backtrack);                     break;                  case RegexCode.Lazybranch:                     //: Track(Textpos());                     PushTrack(_textposV);                     Track();                     break;                  case RegexCode.Lazybranch | RegexCode.Back:                     //: Trackframe(1);                     //: Textto(Tracked(0));                     //: Goto(Operand(0));                     PopTrack();                     Stloc(_textposV);                     Goto(Operand(0));                     break;                  case RegexCode.Nullmark:                     //: Stack(-1);                     //: Track();                     ReadyPushStack();                     Ldc(-1);                     DoPush();                     TrackUnique(stackpop);                     break;                  case RegexCode.Setmark:                     //: Stack(Textpos());                     //: Track();                     PushStack(_textposV);                     TrackUnique(stackpop);                     break;                  case RegexCode.Nullmark | RegexCode.Back:                 case RegexCode.Setmark | RegexCode.Back:                     //: Stackframe(1);                     //: break Backward;                     PopDiscardStack();                     Back();                     break;                  case RegexCode.Getmark:                     //: Stackframe(1);                     //: Track(Stacked(0));                     //: Textto(Stacked(0));                     ReadyPushTrack();                     PopStack();                     Dup();                     Stloc(_textposV);                     DoPush();                      Track();                     break;                  case RegexCode.Getmark | RegexCode.Back:                     //: Trackframe(1);                     //: Stack(Tracked(0));                     //: break Backward;                     ReadyPushStack();                     PopTrack();                     DoPush();                     Back();                     break;                  case RegexCode.Capturemark:                     //: if (!IsMatched(Operand(1)))                     //:     break Backward;                     //: Stackframe(1);                     //: if (Operand(1) != -1)                     //:     TransferCapture(Operand(0)' Operand(1)' Stacked(0)' Textpos());                     //: else                     //:     Capture(Operand(0)' Stacked(0)' Textpos());                     //: Track(Stacked(0));                      //: Stackframe(1);                     //: Capture(Operand(0)' Stacked(0)' Textpos());                     //: Track(Stacked(0));                      if (Operand(1) != -1) {                         Ldthis();                         Ldc(Operand(1));                         Callvirt(_ismatchedM);                         BrfalseFar(_backtrack);                     }                      PopStack();                     Stloc(_tempV);                      if (Operand(1) != -1) {                         Ldthis();                         Ldc(Operand(0));                         Ldc(Operand(1));                         Ldloc(_tempV);                         Ldloc(_textposV);                         Callvirt(_transferM);                     }                     else {                         Ldthis();                         Ldc(Operand(0));                         Ldloc(_tempV);                         Ldloc(_textposV);                         Callvirt(_captureM);                     }                      PushTrack(_tempV);                      if (Operand(0) != -1 && Operand(1) != -1)                         TrackUnique(capback2);                     else                         TrackUnique(capback);                      break;                   case RegexCode.Capturemark | RegexCode.Back:                     //: Trackframe(1);                     //: Stack(Tracked(0));                     //: Uncapture();                     //: if (Operand(0) != -1 && Operand(1) != -1)                     //:     Uncapture();                     //: break Backward;                     ReadyPushStack();                     PopTrack();                     DoPush();                     Ldthis();                     Callvirt(_uncaptureM);                     if (Operand(0) != -1 && Operand(1) != -1) {                         Ldthis();                         Callvirt(_uncaptureM);                     }                     Back();                     break;                  case RegexCode.Branchmark:                     //: Stackframe(1);                     //:                      //: if (Textpos() != Stacked(0))                     //: {                                   // Nonempty match -> loop now                     //:     Track(Stacked(0)' Textpos());   // Save old mark' textpos                     //:     Stack(Textpos());               // Make new mark                     //:     Goto(Operand(0));               // Loop                     //: }                     //: else                     //: {                                   // Empty match -> straight now                     //:     Track2(Stacked(0));             // Save old mark                     //:     Advance(1);                     // Straight                     //: }                     //: continue Forward;                     {                         LocalBuilder mark = _tempV;                         Label      l1   = DefineLabel();                          PopStack();                         Dup();                         Stloc(mark);                            // Stacked(0) -> temp                         PushTrack(mark);                         Ldloc(_textposV);                         Beq(l1);                                // mark == textpos -> branch                          // (matched != 0)                          PushTrack(_textposV);                         PushStack(_textposV);                         Track();                         Goto(Operand(0));                       // Goto(Operand(0))                          // else                          MarkLabel(l1);                         TrackUnique2(branchmarkback2);                         break;                     }                  case RegexCode.Branchmark | RegexCode.Back:                     //: Trackframe(2);                     //: Stackframe(1);                     //: Textto(Tracked(1));                     // Recall position                     //: Track2(Tracked(0));                     // Save old mark                     //: Advance(1);                     PopTrack();                     Stloc(_textposV);                     PopStack();                     Pop();                     // track spot 0 is already in place                     TrackUnique2(branchmarkback2);                     Advance();                     break;                  case RegexCode.Branchmark | RegexCode.Back2:                     //: Trackframe(1);                     //: Stack(Tracked(0));                      // Recall old mark                     //: break Backward;                         // Backtrack                     ReadyPushStack();                     PopTrack();                     DoPush();                     Back();                     break;                   case RegexCode.Lazybranchmark:                     //: StackPop();                     //: int oldMarkPos = StackPeek();                     //:                      //: if (Textpos() != oldMarkPos) {         // Nonempty match -> next loop                     //: {                                   // Nonempty match -> next loop                     //:     if (oldMarkPos != -1)                     //:         Track(Stacked(0)' Textpos());   // Save old mark' textpos                     //:     else                     //:         TrackPush(Textpos()' Textpos());                        //: }                     //: else                     //: {                                   // Empty match -> no loop                     //:     Track2(Stacked(0));             // Save old mark                     //: }                     //: Advance(1);                     //: continue Forward;                     {                         LocalBuilder mark = _tempV;                         Label      l1   = DefineLabel();                         Label      l2   = DefineLabel();                         Label      l3   = DefineLabel();                          PopStack();                         Dup();                         Stloc(mark);                      // Stacked(0) -> temp                          // if (oldMarkPos != -1)                         Ldloc(mark);                         Ldc(-1);                         Beq(l2);                                // mark == -1 -> branch                             PushTrack(mark);                             Br(l3);                         // else                             MarkLabel(l2);                             PushTrack(_textposV);                         MarkLabel(l3);                                                      // if (Textpos() != mark)                         Ldloc(_textposV);                         Beq(l1);                                // mark == textpos -> branch                             PushTrack(_textposV);                             Track();                             Br(AdvanceLabel());                 // Advance (near)                         // else                             MarkLabel(l1);                             ReadyPushStack();                   // push the current textPos on the stack.  							        // May be ignored by 'back2' or used by a true empty match.                             Ldloc(mark);                                                      DoPush();                             TrackUnique2(lazybranchmarkback2);                          break;                     }                  case RegexCode.Lazybranchmark | RegexCode.Back:                     //: Trackframe(2);                     //: Track2(Tracked(0));                     // Save old mark                     //: Stack(Textpos());                       // Make new mark                     //: Textto(Tracked(1));                     // Recall position                     //: Goto(Operand(0));                       // Loop                      PopTrack();                     Stloc(_textposV);                     PushStack(_textposV);                     TrackUnique2(lazybranchmarkback2);                     Goto(Operand(0));                     break;                  case RegexCode.Lazybranchmark | RegexCode.Back2:                     //: Stackframe(1);                     //: Trackframe(1);                     //: Stack(Tracked(0));                  // Recall old mark                     //: break Backward;                     ReadyReplaceStack(0);                     PopTrack();                     DoReplace();                     Back();                     break;                  case RegexCode.Nullcount:                     //: Stack(-1' Operand(0));                     //: Track();                     ReadyPushStack();                     Ldc(-1);                     DoPush();                     ReadyPushStack();                     Ldc(Operand(0));                     DoPush();                     TrackUnique(stackpop2);                     break;                  case RegexCode.Setcount:                     //: Stack(Textpos()' Operand(0));                     //: Track();                     PushStack(_textposV);                     ReadyPushStack();                     Ldc(Operand(0));                     DoPush();                     TrackUnique(stackpop2);                     break;                   case RegexCode.Nullcount | RegexCode.Back:                 case RegexCode.Setcount | RegexCode.Back:                     //: Stackframe(2);                     //: break Backward;                     PopDiscardStack(2);                     Back();                     break;                   case RegexCode.Branchcount:                     //: Stackframe(2);                     //: int mark = Stacked(0);                     //: int count = Stacked(1);                     //:                      //: if (count >= Operand(1) || Textpos() == mark && count >= 0)                     //: {                                   // Max loops or empty match -> straight now                     //:     Track2(mark' count);            // Save old mark' count                     //:     Advance(2);                     // Straight                     //: }                     //: else                     //: {                                   // Nonempty match -> count+loop now                     //:     Track(mark);                    // remember mark                     //:     Stack(Textpos()' count + 1);    // Make new mark' incr count                     //:     Goto(Operand(0));               // Loop                     //: }                     //: continue Forward;                     {                         LocalBuilder count = _tempV;                         LocalBuilder mark  = _temp2V;                         Label      l1    = DefineLabel();                         Label      l2    = DefineLabel();                          PopStack();                         Stloc(count);                           // count -> temp                         PopStack();                         Dup();                         Stloc(mark);                            // mark -> temp2                         PushTrack(mark);                          Ldloc(_textposV);                         Bne(l1);                                // mark != textpos -> l1                         Ldloc(count);                         Ldc(0);                         Bge(l2);                                // count >= 0 && mark == textpos -> l2                          MarkLabel(l1);                         Ldloc(count);                         Ldc(Operand(1));                         Bge(l2);                                // count >= Operand(1) -> l2                          // else                         PushStack(_textposV);                         ReadyPushStack();                         Ldloc(count);                           // mark already on track                         Ldc(1);                         Add();                         DoPush();                         Track();                         Goto(Operand(0));                          // if (count >= Operand(1) || Textpos() == mark)                         MarkLabel(l2);                         PushTrack(count);                       // mark already on track                         TrackUnique2(branchcountback2);                         break;                     }                  case RegexCode.Branchcount | RegexCode.Back:                     //: Trackframe(1);                     //: Stackframe(2);                     //: if (Stacked(1) > 0)                     // Positive -> can go straight                     //: {                     //:     Textto(Stacked(0));                 // Zap to mark                     //:     Track2(Tracked(0)' Stacked(1) - 1); // Save old mark' old count                     //:     Advance(2);                         // Straight                     //:     continue Forward;                     //: }                     //: Stack(Tracked(0)' Stacked(1) - 1);      // recall old mark' old count                     //: break Backward;                     {                          LocalBuilder count = _tempV;                         Label      l1    = DefineLabel();                         PopStack();                         Ldc(1);                         Sub();                         Dup();                         Stloc(count);                         Ldc(0);                         Blt(l1);                          // if (count >= 0)                         PopStack();                         Stloc(_textposV);                         PushTrack(count);                       // Tracked(0) is alredy on the track                         TrackUnique2(branchcountback2);                         Advance();                          // else                         MarkLabel(l1);                         ReadyReplaceStack(0);                         PopTrack();                         DoReplace();                         PushStack(count);                         Back();                         break;                     }                  case RegexCode.Branchcount | RegexCode.Back2:                     //: Trackframe(2);                     //: Stack(Tracked(0)' Tracked(1));      // Recall old mark' old count                     //: break Backward;                     // Backtrack                      PopTrack();                     Stloc(_tempV);                     ReadyPushStack();                     PopTrack();                     DoPush();                     PushStack(_tempV);                     Back();                     break;                  case RegexCode.Lazybranchcount:                     //: Stackframe(2);                     //: int mark = Stacked(0);                     //: int count = Stacked(1);                     //:                     //: if (count < 0)                     //: {                                   // Negative count -> loop now                     //:     Track2(mark);                   // Save old mark                     //:     Stack(Textpos()' count + 1);    // Make new mark' incr count                     //:     Goto(Operand(0));               // Loop                     //: }                     //: else                     //: {                                   // Nonneg count or empty match -> straight now                     //:     Track(mark' count' Textpos());  // Save mark' count' position                     //: }                     {                         LocalBuilder count = _tempV;                         LocalBuilder mark  = _temp2V;                         Label      l1    = DefineLabel(); #pragma warning disable 219                         Label      l2    = DefineLabel();                         Label      l3    = _labels[NextCodepos()]; #pragma warning restore 219                          PopStack();                         Stloc(count);                           // count -> temp                         PopStack();                         Stloc(mark);                            // mark -> temp2                          Ldloc(count);                         Ldc(0);                         Bge(l1);                                // count >= 0 -> l1                          // if (count < 0)                         PushTrack(mark);                         PushStack(_textposV);                         ReadyPushStack();                         Ldloc(count);                         Ldc(1);                         Add();                         DoPush();                         TrackUnique2(lazybranchcountback2);                         Goto(Operand(0));                          // else                         MarkLabel(l1);                         PushTrack(mark);                         PushTrack(count);                         PushTrack(_textposV);                         Track();                         break;                     }                  case RegexCode.Lazybranchcount | RegexCode.Back:                     //: Trackframe(3);                     //: int mark = Tracked(0);                     //: int textpos = Tracked(2);                     //: if (Tracked(1) < Operand(1) && textpos != mark)                     //: {                                       // Under limit and not empty match -> loop                     //:     Textto(Tracked(2));                 // Recall position                     //:     Stack(Textpos()' Tracked(1) + 1);   // Make new mark' incr count                     //:     Track2(Tracked(0));                 // Save old mark                     //:     Goto(Operand(0));                   // Loop                     //:     continue Forward;                     //: }                     //: else                     //: {                     //:     Stack(Tracked(0)' Tracked(1));      // Recall old mark' count                     //:     break Backward;                     // backtrack                     //: }                     {                         Label       l1 = DefineLabel();                         LocalBuilder  cV = _tempV;                         PopTrack();                         Stloc(_textposV);                         PopTrack();                         Dup();                         Stloc(cV);                         Ldc(Operand(1));                         Bge(l1);                                // Tracked(1) >= Operand(1) -> l1                          Ldloc(_textposV);                         TopTrack();                         Beq(l1);                                // textpos == mark -> l1                          PushStack(_textposV);                         ReadyPushStack();                         Ldloc(cV);                         Ldc(1);                         Add();                         DoPush();                         TrackUnique2(lazybranchcountback2);                         Goto(Operand(0));                          MarkLabel(l1);                         ReadyPushStack();                         PopTrack();                         DoPush();                         PushStack(cV);                         Back();                         break;                     }                  case RegexCode.Lazybranchcount | RegexCode.Back2:                     // <                          ReadyReplaceStack(1);                     PopTrack();                     DoReplace();                     ReadyReplaceStack(0);                     TopStack();                     Ldc(1);                     Sub();                     DoReplace();                     Back();                     break;                   case RegexCode.Setjump:                     //: Stack(Trackpos()' Crawlpos());                     //: Track();                     ReadyPushStack();                     Ldthisfld(_trackF);                     Ldlen();                     Ldloc(_trackposV);                     Sub();                     DoPush();                     ReadyPushStack();                     Ldthis();                     Callvirt(_crawlposM);                     DoPush();                     TrackUnique(stackpop2);                     break;                  case RegexCode.Setjump | RegexCode.Back:                     //: Stackframe(2);                     PopDiscardStack(2);                     Back();                     break;                   case RegexCode.Backjump:                     //: Stackframe(2);                     //: Trackto(Stacked(0));                     //: while (Crawlpos() != Stacked(1))                     //:     Uncapture();                     //: break Backward;                     {                         Label      l1    = DefineLabel();                         Label      l2    = DefineLabel();                          PopStack();                         Ldthisfld(_trackF);                         Ldlen();                         PopStack();                         Sub();                         Stloc(_trackposV);                         Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Beq(l2);                          MarkLabel(l1);                         Ldthis();                         Callvirt(_uncaptureM);                         Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Bne(l1);                          MarkLabel(l2);                         Pop();                         Back();                         break;                     }                  case RegexCode.Forejump:                     //: Stackframe(2);                     //: Trackto(Stacked(0));                     //: Track(Stacked(1));                     PopStack();                     Stloc(_tempV);                     Ldthisfld(_trackF);                     Ldlen();                     PopStack();                     Sub();                     Stloc(_trackposV);                     PushTrack(_tempV);                     TrackUnique(forejumpback);                     break;                  case RegexCode.Forejump | RegexCode.Back:                     //: Trackframe(1);                     //: while (Crawlpos() != Tracked(0))                     //:     Uncapture();                     //: break Backward;                     {                         Label      l1    = DefineLabel();                         Label      l2    = DefineLabel();                          PopTrack();                          Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Beq(l2);                          MarkLabel(l1);                         Ldthis();                         Callvirt(_uncaptureM);                         Dup();                         Ldthis();                         Callvirt(_crawlposM);                         Bne(l1);                          MarkLabel(l2);                         Pop();                         Back();                         break;                     }                  case RegexCode.Bol:                     //: if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                     //:     break Backward;                     {                         Label      l1    = _labels[NextCodepos()];                         Ldloc(_textposV);                         Ldloc(_textbegV);                         Ble(l1);                         Leftchar();                         Ldc((int)'\n');                         BneFar(_backtrack);                         break;                     }                  case RegexCode.Eol:                     //: if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                     //:     break Backward;                     {                         Label      l1    = _labels[NextCodepos()];                         Ldloc(_textposV);                         Ldloc(_textendV);                         Bge(l1);                         Rightchar();                         Ldc((int)'\n');                         BneFar(_backtrack);                         break;                     }                  case RegexCode.Boundary:                 case RegexCode.Nonboundary:                     //: if (!IsBoundary(Textpos()' _textbeg' _textend))                     //:     break Backward;                     Ldthis();                     Ldloc(_textposV);                     Ldloc(_textbegV);                     Ldloc(_textendV);                     Callvirt(_isboundaryM);                     if (Code() == RegexCode.Boundary)                         BrfalseFar(_backtrack);                     else                         BrtrueFar(_backtrack);                     break;                  case RegexCode.ECMABoundary:                 case RegexCode.NonECMABoundary:                     //: if (!IsECMABoundary(Textpos()' _textbeg' _textend))                     //:     break Backward;                     Ldthis();                     Ldloc(_textposV);                     Ldloc(_textbegV);                     Ldloc(_textendV);                     Callvirt(_isECMABoundaryM);                     if (Code() == RegexCode.ECMABoundary)                         BrfalseFar(_backtrack);                     else                         BrtrueFar(_backtrack);                     break;                  case RegexCode.Beginning:                     //: if (Leftchars() > 0)                     //:    break Backward;                     Ldloc(_textposV);                     Ldloc(_textbegV);                     BgtFar(_backtrack);                     break;                  case RegexCode.Start:                     //: if (Textpos() != Textstart())                     //:    break Backward;                     Ldloc(_textposV);                     Ldthisfld(_textstartF);                     BneFar(_backtrack);                     break;                  case RegexCode.EndZ:                     //: if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                     //:    break Backward;                     Ldloc(_textposV);                     Ldloc(_textendV);                     Ldc(1);                     Sub();                     BltFar(_backtrack);                     Ldloc(_textposV);                     Ldloc(_textendV);                     Bge(_labels[NextCodepos()]);                     Rightchar();                     Ldc((int)'\n');                     BneFar(_backtrack);                     break;                  case RegexCode.End:                     //: if (Rightchars() > 0)                     //:    break Backward;                     Ldloc(_textposV);                     Ldloc(_textendV);                     BltFar(_backtrack);                     break;                  case RegexCode.One:                 case RegexCode.Notone:                 case RegexCode.Set:                 case RegexCode.One      | RegexCode.Rtl:                 case RegexCode.Notone   | RegexCode.Rtl:                 case RegexCode.Set      | RegexCode.Rtl:                 case RegexCode.One      | RegexCode.Ci:                 case RegexCode.Notone   | RegexCode.Ci:                 case RegexCode.Set      | RegexCode.Ci:                 case RegexCode.One      | RegexCode.Ci  | RegexCode.Rtl:                 case RegexCode.Notone   | RegexCode.Ci  | RegexCode.Rtl:                 case RegexCode.Set      | RegexCode.Ci  | RegexCode.Rtl:                      //: if (Rightchars() < 1 || Rightcharnext() != (char)Operand(0))                     //:    break Backward;                     Ldloc(_textposV);                      if (!IsRtl()) {                         Ldloc(_textendV);                         BgeFar(_backtrack);                         Rightcharnext();                     }                     else {                         Ldloc(_textbegV);                         BleFar(_backtrack);                         Leftcharnext();                     }                      if (IsCi())                         CallToLower();                      if (Code() == RegexCode.Set) {                          Ldstr(_strings[Operand(0)]);                         Call(_charInSetM);                          BrfalseFar(_backtrack);                     }                     else {                         Ldc(Operand(0));                         if (Code() == RegexCode.One)                             BneFar(_backtrack);                         else                             BeqFar(_backtrack);                     }                     break;                  case RegexCode.Multi:                 case RegexCode.Multi | RegexCode.Ci:                     //                     // <                           //: String Str = _strings[Operand(0)];                     //: int i' c;                     //: if (Rightchars() < (c = Str.Length))                     //:     break Backward;                     //: for (i = 0; c > 0; i++' c--)                     //:     if (Str[i] != Rightcharnext())                     //:         break Backward;                     {                         int i;                         String str;                          str = _strings[Operand(0)];                          Ldc(str.Length);                         Ldloc(_textendV);                         Ldloc(_textposV);                         Sub();                         BgtFar(_backtrack);                          // unroll the string                         for (i = 0; i < str.Length; i++) {                             Ldloc(_textV);                             Ldloc(_textposV);                             if (i != 0) {                                 Ldc(i);                                 Add();                             }                             Callvirt(_getcharM);                             if (IsCi())                                 CallToLower();                                                          Ldc((int)str[i]);                             BneFar(_backtrack);                         }                          Ldloc(_textposV);                         Ldc(str.Length);                         Add();                         Stloc(_textposV);                         break;                     }                   case RegexCode.Multi | RegexCode.Rtl:                 case RegexCode.Multi | RegexCode.Ci  | RegexCode.Rtl:                     //: String Str = _strings[Operand(0)];                     //: int c;                     //: if (Leftchars() < (c = Str.Length))                     //:     break Backward;                     //: while (c > 0)                     //:     if (Str[--c] != Leftcharnext())                     //:         break Backward;                     {                         int i;                         String str;                          str = _strings[Operand(0)];                          Ldc(str.Length);                         Ldloc(_textposV);                         Ldloc(_textbegV);                         Sub();                         BgtFar(_backtrack);                          // unroll the string                         for (i = str.Length; i > 0;) {                             i--;                             Ldloc(_textV);                             Ldloc(_textposV);                             Ldc(str.Length - i);                             Sub();                             Callvirt(_getcharM);                             if (IsCi())                              {                                 CallToLower();                             }                             Ldc((int)str[i]);                             BneFar(_backtrack);                         }                          Ldloc(_textposV);                         Ldc(str.Length);                         Sub();                         Stloc(_textposV);                          break;                     }                  case RegexCode.Ref:                 case RegexCode.Ref | RegexCode.Rtl:                 case RegexCode.Ref | RegexCode.Ci:                 case RegexCode.Ref | RegexCode.Ci | RegexCode.Rtl:                     //: int capnum = Operand(0);                     //: int j' c;                     //: if (!_match.IsMatched(capnum)) {                     //:     if (!RegexOptions.ECMAScript)                     //:         break Backward;                     //: } else {                     //:     if (Rightchars() < (c = _match.MatchLength(capnum)))                     //:         break Backward;                     //:     for (j = _match.MatchIndex(capnum); c > 0; j++' c--)                     //:         if (CharAt(j) != Rightcharnext())                     //:             break Backward;                     //: }                     {                         LocalBuilder lenV     = _tempV;                         LocalBuilder indexV   = _temp2V;                         Label      l1       = DefineLabel();                          Ldthis();                         Ldc(Operand(0));                         Callvirt(_ismatchedM);                         if ((_options & RegexOptions.ECMAScript) != 0)                             Brfalse(AdvanceLabel());                         else                             BrfalseFar(_backtrack); // !IsMatched() -> back                          Ldthis();                         Ldc(Operand(0));                         Callvirt(_matchlengthM);                         Dup();                         Stloc(lenV);                         if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         BgtFar(_backtrack);         // Matchlength() > Rightchars() -> back                          Ldthis();                         Ldc(Operand(0));                         Callvirt(_matchindexM);                         if (!IsRtl()) {                             Ldloc(lenV);                             Add(IsRtl());                         }                         Stloc(indexV);              // index += len                          Ldloc(_textposV);                         Ldloc(lenV);                         Add(IsRtl());                         Stloc(_textposV);           // texpos += len                          MarkLabel(l1);                         Ldloc(lenV);                         Ldc(0);                         Ble(AdvanceLabel());                         Ldloc(_textV);                         Ldloc(indexV);                         Ldloc(lenV);                         if (IsRtl()) {                             Ldc(1);                             Sub();                             Dup();                             Stloc(lenV);                         }                         Sub(IsRtl());                         Callvirt(_getcharM);                         if (IsCi())                             CallToLower();                                                  Ldloc(_textV);                         Ldloc(_textposV);                         Ldloc(lenV);                         if (!IsRtl()) {                             Dup();                             Ldc(1);                             Sub();                             Stloc(lenV);                         }                         Sub(IsRtl());                         Callvirt(_getcharM);                         if (IsCi())                             CallToLower();                                                  Beq(l1);                         Back();                         break;                     }                   case RegexCode.Onerep:                 case RegexCode.Notonerep:                 case RegexCode.Setrep:                 case RegexCode.Onerep | RegexCode.Rtl:                 case RegexCode.Notonerep | RegexCode.Rtl:                 case RegexCode.Setrep | RegexCode.Rtl:                 case RegexCode.Onerep | RegexCode.Ci:                 case RegexCode.Notonerep | RegexCode.Ci:                 case RegexCode.Setrep | RegexCode.Ci:                 case RegexCode.Onerep | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Notonerep | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Setrep | RegexCode.Ci | RegexCode.Rtl:                     //: int c = Operand(1);                     //: if (Rightchars() < c)                     //:     break Backward;                     //: char ch = (char)Operand(0);                     //: while (c-- > 0)                     //:     if (Rightcharnext() != ch)                     //:         break Backward;                     {                         LocalBuilder lenV = _tempV;                         Label      l1   = DefineLabel();                          int c = Operand(1);                          if (c == 0)                             break;                          Ldc(c);                         if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         BgtFar(_backtrack);         // Matchlength() > Rightchars() -> back                          Ldloc(_textposV);                         Ldc(c);                         Add(IsRtl());                         Stloc(_textposV);           // texpos += len                          Ldc(c);                         Stloc(lenV);                          MarkLabel(l1);                         Ldloc(_textV);                         Ldloc(_textposV);                         Ldloc(lenV);                         if (IsRtl()) {                             Ldc(1);                             Sub();                             Dup();                             Stloc(lenV);                             Add();                         }                         else {                             Dup();                             Ldc(1);                             Sub();                             Stloc(lenV);                             Sub();                         }                         Callvirt(_getcharM);                         if (IsCi())                             CallToLower();                                                  if (Code() == RegexCode.Setrep) {                             Ldstr(_strings[Operand(0)]);                             Call(_charInSetM);                              BrfalseFar(_backtrack);                         }                         else {                             Ldc(Operand(0));                             if (Code() == RegexCode.Onerep)                                 BneFar(_backtrack);                             else                                 BeqFar(_backtrack);                         }                         Ldloc(lenV);                         Ldc(0);                         if (Code() == RegexCode.Setrep)                             BgtFar(l1);                         else                             Bgt(l1);                         break;                     }                   case RegexCode.Oneloop:                 case RegexCode.Notoneloop:                 case RegexCode.Setloop:                 case RegexCode.Oneloop | RegexCode.Rtl:                 case RegexCode.Notoneloop | RegexCode.Rtl:                 case RegexCode.Setloop | RegexCode.Rtl:                 case RegexCode.Oneloop | RegexCode.Ci:                 case RegexCode.Notoneloop | RegexCode.Ci:                 case RegexCode.Setloop | RegexCode.Ci:                 case RegexCode.Oneloop | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Notoneloop | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Setloop | RegexCode.Ci | RegexCode.Rtl:                     //: int c = Operand(1);                     //: if (c > Rightchars())                     //:     c = Rightchars();                     //: char ch = (char)Operand(0);                     //: int i;                     //: for (i = c; i > 0; i--)                     //: {                     //:     if (Rightcharnext() != ch)                     //:     {                     //:         Leftnext();                     //:         break;                     //:     }                     //: }                     //: if (c > i)                     //:     Track(c - i - 1' Textpos() - 1);                      {                         LocalBuilder cV   = _tempV;                         LocalBuilder lenV = _temp2V;                         Label      l1   = DefineLabel();                         Label      l2   = DefineLabel();                          int c = Operand(1);                          if (c == 0)                             break;                         if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         if (c != Int32.MaxValue) {                             Label l4 = DefineLabel();                             Dup();                             Ldc(c);                             Blt(l4);                             Pop();                             Ldc(c);                             MarkLabel(l4);                         }                         Dup();                         Stloc(lenV);                         Ldc(1);                         Add();                         Stloc(cV);                          MarkLabel(l1);                         Ldloc(cV);                         Ldc(1);                         Sub();                         Dup();                         Stloc(cV);                         Ldc(0);                         if (Code() == RegexCode.Setloop)                             BleFar(l2);                         else                             Ble(l2);                          if (IsRtl())                             Leftcharnext();                         else                             Rightcharnext();                         if (IsCi())                              CallToLower();                                                  if (Code() == RegexCode.Setloop) {                             Ldstr(_strings[Operand(0)]);                             Call(_charInSetM);                              BrtrueFar(l1);                         }                         else {                             Ldc(Operand(0));                             if (Code() == RegexCode.Oneloop)                                 Beq(l1);                             else                                 Bne(l1);                         }                          Ldloc(_textposV);                         Ldc(1);                         Sub(IsRtl());                         Stloc(_textposV);                          MarkLabel(l2);                         Ldloc(lenV);                         Ldloc(cV);                         Ble(AdvanceLabel());                          ReadyPushTrack();                         Ldloc(lenV);                         Ldloc(cV);                         Sub();                         Ldc(1);                         Sub();                         DoPush();                          ReadyPushTrack();                         Ldloc(_textposV);                         Ldc(1);                         Sub(IsRtl());                         DoPush();                          Track();                         break;                     }                  case RegexCode.Oneloop | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Back:                 case RegexCode.Oneloop | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Oneloop | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Oneloop | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notoneloop | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setloop | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                     //: Trackframe(2);                     //: int i   = Tracked(0);                     //: int pos = Tracked(1);                     //: Textto(pos);                     //: if (i > 0)                     //:     Track(i - 1' pos - 1);                     //: Advance(2);                     PopTrack();                     Stloc(_textposV);                     PopTrack();                     Stloc(_tempV);                     Ldloc(_tempV);                     Ldc(0);                     BleFar(AdvanceLabel());                     ReadyPushTrack();                     Ldloc(_tempV);                     Ldc(1);                     Sub();                     DoPush();                     ReadyPushTrack();                     Ldloc(_textposV);                     Ldc(1);                     Sub(IsRtl());                     DoPush();                     Trackagain();                     Advance();                     break;                  case RegexCode.Onelazy:                 case RegexCode.Notonelazy:                 case RegexCode.Setlazy:                 case RegexCode.Onelazy | RegexCode.Rtl:                 case RegexCode.Notonelazy | RegexCode.Rtl:                 case RegexCode.Setlazy | RegexCode.Rtl:                 case RegexCode.Onelazy | RegexCode.Ci:                 case RegexCode.Notonelazy | RegexCode.Ci:                 case RegexCode.Setlazy | RegexCode.Ci:                 case RegexCode.Onelazy | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Notonelazy | RegexCode.Ci | RegexCode.Rtl:                 case RegexCode.Setlazy | RegexCode.Ci | RegexCode.Rtl:                     //: int c = Operand(1);                     //: if (c > Rightchars())                     //:     c = Rightchars();                     //: if (c > 0)                     //:     Track(c - 1' Textpos());                     {                         LocalBuilder cV   = _tempV;                          int c = Operand(1);                          if (c == 0)                             break;                          if (!IsRtl()) {                             Ldloc(_textendV);                             Ldloc(_textposV);                         }                         else {                             Ldloc(_textposV);                             Ldloc(_textbegV);                         }                         Sub();                         if (c != Int32.MaxValue) {                             Label l4 = DefineLabel();                             Dup();                             Ldc(c);                             Blt(l4);                             Pop();                             Ldc(c);                             MarkLabel(l4);                         }                         Dup();                         Stloc(cV);                         Ldc(0);                         Ble(AdvanceLabel());                         ReadyPushTrack();                         Ldloc(cV);                         Ldc(1);                         Sub();                         DoPush();                         PushTrack(_textposV);                         Track();                         break;                     }                  case RegexCode.Onelazy | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Back:                 case RegexCode.Onelazy | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Onelazy | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Ci | RegexCode.Back:                 case RegexCode.Onelazy | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Notonelazy | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                 case RegexCode.Setlazy | RegexCode.Ci | RegexCode.Rtl | RegexCode.Back:                     //: Trackframe(2);                     //: int pos = Tracked(1);                     //: Textto(pos);                     //: if (Rightcharnext() != (char)Operand(0))                     //:     break Backward;                     //: int i = Tracked(0);                     //: if (i > 0)                     //:     Track(i - 1' pos + 1);                      PopTrack();                     Stloc(_textposV);                     PopTrack();                     Stloc(_temp2V);                      if (!IsRtl())                         Rightcharnext();                     else                         Leftcharnext();                      if (IsCi())                         CallToLower();                      if (Code() == RegexCode.Setlazy) {                         Ldstr(_strings[Operand(0)]);                         Call(_charInSetM);                          BrfalseFar(_backtrack);                     }                     else {                         Ldc(Operand(0));                         if (Code() == RegexCode.Onelazy)                             BneFar(_backtrack);                         else                             BeqFar(_backtrack);                     }                      Ldloc(_temp2V);                     Ldc(0);                     BleFar(AdvanceLabel());                     ReadyPushTrack();                     Ldloc(_temp2V);                     Ldc(1);                     Sub();                     DoPush();                     PushTrack(_textposV);                     Trackagain();                     Advance();                     break;                  default: 				throw new NotImplementedException();             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,RegexFCD,The following statement contains a magic number: _fcStack = new RegexFC[32];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,RegexFCD,The following statement contains a magic number: _intStack = new int[32];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,PushInt,The following statement contains a magic number: int [] expanded = new int[_intDepth * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexFCD,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexFCD.cs,PushFC,The following statement contains a magic number: RegexFC[] expanded = new RegexFC[_fcDepth * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexInterpreter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexInterpreter.cs,Go,The following statement contains a magic number: switch (Operator()) {                     case RegexCode.Stop:                         return;                      case RegexCode.Nothing:                         break;                      case RegexCode.Goto:                         Goto(Operand(0));                         continue;                      case RegexCode.Testref:                         if (!IsMatched(Operand(0)))                             break;                         Advance(1);                         continue;                      case RegexCode.Lazybranch:                         TrackPush(Textpos());                         Advance(1);                         continue;                      case RegexCode.Lazybranch | RegexCode.Back:                         TrackPop();                         Textto(TrackPeek());                         Goto(Operand(0));                         continue;                      case RegexCode.Setmark:                         StackPush(Textpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Nullmark:                         StackPush(-1);                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setmark | RegexCode.Back:                     case RegexCode.Nullmark | RegexCode.Back:                         StackPop();                         break;                      case RegexCode.Getmark:                         StackPop();                         TrackPush(StackPeek());                         Textto(StackPeek());                         Advance();                         continue;                      case RegexCode.Getmark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         break;                      case RegexCode.Capturemark:                         if (Operand(1) != -1 && !IsMatched(Operand(1)))                             break;                         StackPop();                         if (Operand(1) != -1)                             TransferCapture(Operand(0)' Operand(1)' StackPeek()' Textpos());                         else                             Capture(Operand(0)' StackPeek()' Textpos());                         TrackPush(StackPeek());                          Advance(2);                          continue;                      case RegexCode.Capturemark | RegexCode.Back:                         TrackPop();                         StackPush(TrackPeek());                         Uncapture();                         if (Operand(0) != -1 && Operand(1) != -1)                             Uncapture();                          break;                      case RegexCode.Branchmark:                         {                             int matched;                             StackPop();                              matched = Textpos() - StackPeek();                              if (matched != 0) {                     // Nonempty match -> loop now                                 TrackPush(StackPeek()' Textpos());  // Save old mark' textpos                                 StackPush(Textpos());               // Make new mark                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Empty match -> straight now                                 TrackPush2(StackPeek());            // Save old mark                                 Advance(1);                         // Straight                             }                             continue;                         }                      case RegexCode.Branchmark | RegexCode.Back:                         TrackPop(2);                         StackPop();                         Textto(TrackPeek(1));                       // Recall position                         TrackPush2(TrackPeek());                    // Save old mark                         Advance(1);                                 // Straight                         continue;                      case RegexCode.Branchmark | RegexCode.Back2:                         TrackPop();                         StackPush(TrackPeek());                     // Recall old mark                         break;                                      // Backtrack                      case RegexCode.Lazybranchmark:                         {                             // We hit this the first time through a lazy loop and after each                              // successful match of the inner expression.  It simply continues                             // on and doesn't loop.                              StackPop();                              int oldMarkPos = StackPeek();                              if (Textpos() != oldMarkPos) {              // Nonempty match -> try to loop again by going to 'back' state                                 if (oldMarkPos != -1)                                     TrackPush(oldMarkPos' Textpos());   // Save old mark' textpos                                 else                                     TrackPush(Textpos()' Textpos());                                }                             else {                                 // The inner expression found an empty match' so we'll go directly to 'back2' if we                                 // backtrack.  In this case' we need to push something on the stack' since back2 pops.                                 // However' in the case of ()+? or similar' this empty match may be legitimate' so push the text                                  // position associated with that empty match.                                 StackPush(oldMarkPos);                                  TrackPush2(StackPeek());                // Save old mark                             }                             Advance(1);                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back:                         {                             // After the first time' Lazybranchmark | RegexCode.Back occurs                             // with each iteration of the loop' and therefore with every attempted                             // match of the inner expression.  We'll try to match the inner expression'                              // then go back to Lazybranchmark if successful.  If the inner expression                              // failes' we go to Lazybranchmark | RegexCode.Back2                             int pos;                              TrackPop(2);                             pos = TrackPeek(1);                             TrackPush2(TrackPeek());                // Save old mark                             StackPush(pos);                         // Make new mark                             Textto(pos);                            // Recall position                             Goto(Operand(0));                       // Loop                             continue;                         }                      case RegexCode.Lazybranchmark | RegexCode.Back2:                         // The lazy loop has failed.  We'll do a true backtrack and                          // start over before the lazy loop.                          StackPop();                         TrackPop();                         StackPush(TrackPeek());                      // Recall old mark                         break;                      case RegexCode.Setcount:                         StackPush(Textpos()' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Nullcount:                         StackPush(-1' Operand(0));                         TrackPush();                         Advance(1);                         continue;                      case RegexCode.Setcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Nullcount | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Branchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                             int matched = Textpos() - mark;                              if (count >= Operand(1) || (matched == 0 && count >= 0)) {                                   // Max loops or empty match -> straight now                                 TrackPush2(mark' count);            // Save old mark' count                                 Advance(2);                         // Straight                             }                             else {                                  // Nonempty match -> count+loop now                                 TrackPush(mark);                    // remember mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             continue;                         }                      case RegexCode.Branchcount | RegexCode.Back:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (= current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         if (StackPeek(1) > 0) {                         // Positive -> can go straight                             Textto(StackPeek());                        // Zap to mark                             TrackPush2(TrackPeek()' StackPeek(1) - 1);  // Save old mark' old count                             Advance(2);                                 // Straight                             continue;                         }                         StackPush(TrackPeek()' StackPeek(1) - 1);       // recall old mark' old count                         break;                      case RegexCode.Branchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         //  1: Previous count                         TrackPop(2);                         StackPush(TrackPeek()' TrackPeek(1));           // Recall old mark' old count                         break;                                          // Backtrack                       case RegexCode.Lazybranchcount:                         // StackPush:                         //  0: Mark                         //  1: Count                         {                             StackPop(2);                             int mark = StackPeek();                             int count = StackPeek(1);                              if (count < 0) {                        // Negative count -> loop now                                 TrackPush2(mark);                   // Save old mark                                 StackPush(Textpos()' count + 1);    // Make new mark' incr count                                 Goto(Operand(0));                   // Loop                             }                             else {                                  // Nonneg count -> straight now                                 TrackPush(mark' count' Textpos());  // Save mark' count' position                                 Advance(2);                         // Straight                             }                             continue;                         }                      case RegexCode.Lazybranchcount | RegexCode.Back:                         // TrackPush:                         //  0: Mark                         //  1: Count                         //  2: Textpos                         {                             TrackPop(3);                             int mark = TrackPeek();                             int textpos = TrackPeek(2);                              if (TrackPeek(1) < Operand(1) && textpos != mark) { // Under limit and not empty match -> loop                                 Textto(textpos);                            // Recall position                                 StackPush(textpos' TrackPeek(1) + 1);       // Make new mark' incr count                                 TrackPush2(mark);                           // Save old mark                                 Goto(Operand(0));                           // Loop                                 continue;                             }                             else {                                          // Max loops or empty match -> backtrack                                 StackPush(TrackPeek()' TrackPeek(1));       // Recall old mark' count                                 break;                                      // backtrack                             }                         }                      case RegexCode.Lazybranchcount | RegexCode.Back2:                         // TrackPush:                         //  0: Previous mark                         // StackPush:                         //  0: Mark (== current pos' discarded)                         //  1: Count                         TrackPop();                         StackPop(2);                         StackPush(TrackPeek()' StackPeek(1) - 1);   // Recall old mark' count                         break;                                      // Backtrack                      case RegexCode.Setjump:                         StackPush(Trackpos()' Crawlpos());                         TrackPush();                         Advance();                         continue;                      case RegexCode.Setjump | RegexCode.Back:                         StackPop(2);                         break;                      case RegexCode.Backjump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                          while (Crawlpos() != StackPeek(1))                             Uncapture();                          break;                      case RegexCode.Forejump:                         // StackPush:                         //  0: Saved trackpos                         //  1: Crawlpos                         StackPop(2);                         Trackto(StackPeek());                         TrackPush(StackPeek(1));                         Advance();                         continue;                      case RegexCode.Forejump | RegexCode.Back:                         // TrackPush:                         //  0: Crawlpos                         TrackPop();                          while (Crawlpos() != TrackPeek())                             Uncapture();                          break;                      case RegexCode.Bol:                         if (Leftchars() > 0 && CharAt(Textpos() - 1) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Eol:                         if (Rightchars() > 0 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.Boundary:                         if (!IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Nonboundary:                         if (IsBoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.ECMABoundary:                         if (!IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.NonECMABoundary:                         if (IsECMABoundary(Textpos()' runtextbeg' runtextend))                             break;                         Advance();                         continue;                      case RegexCode.Beginning:                         if (Leftchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.Start:                         if (Textpos() != Textstart())                             break;                         Advance();                         continue;                      case RegexCode.EndZ:                         if (Rightchars() > 1 || Rightchars() == 1 && CharAt(Textpos()) != '\n')                             break;                         Advance();                         continue;                      case RegexCode.End:                         if (Rightchars() > 0)                             break;                         Advance();                         continue;                      case RegexCode.One:                         if (Forwardchars() < 1 || Forwardcharnext() != (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Notone:                         if (Forwardchars() < 1 || Forwardcharnext() == (char)Operand(0))                             break;                          Advance(1);                         continue;                      case RegexCode.Set:                         if (Forwardchars() < 1 || !RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                             break;                          Advance(1);                         continue;                      case RegexCode.Multi:                         {                             if (!Stringmatch(runstrings[Operand(0)]))                                 break;                              Advance(1);                             continue;                         }                      case RegexCode.Ref:                         {                             int capnum = Operand(0);                              if (IsMatched(capnum)) {                                 if (!Refmatch(MatchIndex(capnum)' MatchLength(capnum)))                                     break;                             } else {                                 if ((runregex.roptions & RegexOptions.ECMAScript) == 0)                                     break;                             }                              Advance(1);                             continue;                         }                      case RegexCode.Onerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() != ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Notonerep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              char ch = (char)Operand(0);                              while (c-- > 0)                                 if (Forwardcharnext() == ch)                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Setrep:                         {                             int c = Operand(1);                              if (Forwardchars() < c)                                 break;                              String set = runstrings[Operand(0)];                              while (c-- > 0)                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set))                                     goto BreakBackward;                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() != ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notoneloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              char ch = (char)Operand(0);                             int i;                              for (i = c; i > 0; i--) {                                 if (Forwardcharnext() == ch) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              String set = runstrings[Operand(0)];                             int i;                              for (i = c; i > 0; i--) {                                 if (!RegexCharClass.CharInClass(Forwardcharnext()' set)) {                                     Backwardnext();                                     break;                                 }                             }                              if (c > i)                                 TrackPush(c - i - 1' Textpos() - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Oneloop | RegexCode.Back:                     case RegexCode.Notoneloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setloop | RegexCode.Back:                         {                             TrackPop(2);                             int i   = TrackPeek();                             int pos = TrackPeek(1);                              Textto(pos);                              if (i > 0)                                 TrackPush(i - 1' pos - Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy:                     case RegexCode.Notonelazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy:                         {                             int c = Operand(1);                              if (c > Forwardchars())                                 c = Forwardchars();                              if (c > 0)                                 TrackPush(c - 1' Textpos());                              Advance(2);                             continue;                         }                      case RegexCode.Onelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() != (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Notonelazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (Forwardcharnext() == (char)Operand(0))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      case RegexCode.Setlazy | RegexCode.Back:                         {                             TrackPop(2);                             int pos = TrackPeek(1);                             Textto(pos);                              if (!RegexCharClass.CharInClass(Forwardcharnext()' runstrings[Operand(0)]))                                 break;                              int i = TrackPeek();                              if (i > 0)                                 TrackPush(i - 1' pos + Bump());                              Advance(2);                             continue;                         }                      default: 					throw new NotImplementedException();                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,GroupToStringImpl,The following statement contains a magic number: return _text.Substring(matches[(c - 1) * 2]' matches[(c * 2) - 1]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,GroupToStringImpl,The following statement contains a magic number: return _text.Substring(matches[(c - 1) * 2]' matches[(c * 2) - 1]);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: _matches[cap] = new int[2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: int[] newmatches = new int[capcount * 8];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: j < capcount * 2
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: capcount * 2 + 2 > _matches[cap].Length
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: capcount * 2 + 2 > _matches[cap].Length
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: _matches[cap][capcount * 2] = start;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,AddMatch,The following statement contains a magic number: _matches[cap][capcount * 2 + 1] = len;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,BalanceMatch,The following statement contains a magic number: target = capcount * 2 - 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,BalanceMatch,The following statement contains a magic number: target = capcount * 2 - 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,BalanceMatch,The following statement contains a magic number: target = -3 - _matches[cap][target];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,BalanceMatch,The following statement contains a magic number: target -= 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,IsMatched,The following statement contains a magic number: return cap < _matchcount.Length && _matchcount[cap] > 0 && _matches[cap][_matchcount[cap] * 2 - 1] != (-3 + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,IsMatched,The following statement contains a magic number: return cap < _matchcount.Length && _matchcount[cap] > 0 && _matches[cap][_matchcount[cap] * 2 - 1] != (-3 + 1);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,MatchIndex,The following statement contains a magic number: int i = _matches[cap][_matchcount[cap] * 2 - 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,MatchIndex,The following statement contains a magic number: int i = _matches[cap][_matchcount[cap] * 2 - 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,MatchIndex,The following statement contains a magic number: return _matches[cap][-3 - i];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,MatchLength,The following statement contains a magic number: int i = _matches[cap][_matchcount[cap] * 2 - 1];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,MatchLength,The following statement contains a magic number: return _matches[cap][-3 - i];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,Tidy,The following statement contains a magic number: limit = _matchcount[cap] * 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,Match,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexMatch.cs,Tidy,The following statement contains a magic number: _matchcount[cap] = j / 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,ReduceRep,The following statement contains a magic number: u._m == 0 && child._m > 1 || child._n < child._m * 2
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexNode.cs,AddChild,The following statement contains a magic number: _children = new List<RegexNode>(4);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The following statement contains a magic number: switch (ch = MoveRightGetChar()) {                     case ':':                         NodeType = RegexNode.Group;                         break;                      case '=':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Require;                         break;                      case '!':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Prevent;                         break;                      case '>':                         NodeType = RegexNode.Greedy;                         break;                      case '\'':                         close = '\'';                         goto case '<';                         // fallthrough                      case '<':                         if (CharsRight() == 0)                             goto BreakRecognize;                          switch (ch = MoveRightGetChar()) {                             case '=':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Require;                                 break;                              case '!':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Prevent;                                 break;                              default:                                 MoveLeft();                                 int capnum = -1;                                 int uncapnum = -1;                                 bool proceed = false;                                  // grab part before -                                  if (ch >= '0' && ch <= '9') {                                     capnum = ScanDecimal();                                      if (!IsCaptureSlot(capnum))                                         capnum = -1;                                      // check if we have bogus characters after the number                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                     if (capnum == 0)                                         throw MakeException("");                                 }                                 else if (RegexCharClass.IsWordChar(ch)) {                                     String capname = ScanCapname();                                      if (IsCaptureName(capname))                                         capnum = CaptureSlotFromName(capname);                                      // check if we have bogus character after the name                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                 }                                 else if (ch == '-') {                                     proceed = true;                                 }                                 else {                                     // bad group name - starts with something other than a word character and isn't a number                                     throw MakeException("");                                 }                                  // grab part after - if any                                  if ((capnum != -1 || proceed == true) && CharsRight() > 0 && RightChar() == '-') {                                     MoveRight();                                     ch = RightChar();                                      if (ch >= '0' && ch <= '9') {                                         uncapnum = ScanDecimal();                                                                                  if (!IsCaptureSlot(uncapnum))                                             throw MakeException("");                                                                                  // check if we have bogus characters after the number                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else if (RegexCharClass.IsWordChar(ch)) {                                         String uncapname = ScanCapname();                                          if (IsCaptureName(uncapname))                                             uncapnum = CaptureSlotFromName(uncapname);                                         else                                             throw MakeException("");                                          // check if we have bogus character after the name                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else {                                         // bad group name - starts with something other than a word character and isn't a number                                         throw MakeException("");                                     }                                 }                                  // actually make the node                                  if ((capnum != -1 || uncapnum != -1) && CharsRight() > 0 && MoveRightGetChar() == close) {                                     return new RegexNode(RegexNode.Capture' _options' capnum' uncapnum);                                 }                                 goto BreakRecognize;                         }                         break;                      case '(':                          // alternation construct (?(...) | )                                           int parenPos = Textpos();                         if (CharsRight() > 0)   	                         {                             ch = RightChar();                                  // check if the alternation condition is a backref                             if (ch >= '0' && ch <= '9') {                                 int capnum = ScanDecimal();                                 if (CharsRight() > 0 && MoveRightGetChar() == ')') {                                     if (IsCaptureSlot(capnum))                                         return new RegexNode(RegexNode.Testref' _options' capnum);                                     else                                         throw MakeException("");                                 }                                 else                                     throw MakeException("");                                  }                             else if (RegexCharClass.IsWordChar(ch)) {                                 String capname = ScanCapname();                                      if (IsCaptureName(capname) && CharsRight() > 0 && MoveRightGetChar() == ')')                                     return new RegexNode(RegexNode.Testref' _options' CaptureSlotFromName(capname));                             }                         }                         // not a backref                         NodeType = RegexNode.Testgroup;                         Textto(parenPos - 1);       // jump to the start of the parentheses                         _ignoreNextParen = true;    // but make sure we don't try to capture the insides                          int charsRight = CharsRight();                         if (charsRight >= 3 && RightChar(1) == '?') {                             char rightchar2 = RightChar(2);                             // disallow comments in the condition                             if (rightchar2 == '#')                                 throw MakeException("");                              // disallow named capture group (?<..>..) in the condition                             if (rightchar2 == '\'' )                                  throw MakeException("");                             else {                                 if (charsRight >=4 && (rightchar2 == '<' && RightChar(3) != '!' && RightChar(3) != '='))                                     throw MakeException("");                             }                         }                                                      break;                       default:                         MoveLeft();                          NodeType = RegexNode.Group;                         ScanOptions();                         if (CharsRight() == 0)                             goto BreakRecognize;                          if ((ch = MoveRightGetChar()) == ')')                             return null;                          if (ch != ':')                             goto BreakRecognize;                         break;                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The following statement contains a magic number: switch (ch = MoveRightGetChar()) {                     case ':':                         NodeType = RegexNode.Group;                         break;                      case '=':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Require;                         break;                      case '!':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Prevent;                         break;                      case '>':                         NodeType = RegexNode.Greedy;                         break;                      case '\'':                         close = '\'';                         goto case '<';                         // fallthrough                      case '<':                         if (CharsRight() == 0)                             goto BreakRecognize;                          switch (ch = MoveRightGetChar()) {                             case '=':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Require;                                 break;                              case '!':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Prevent;                                 break;                              default:                                 MoveLeft();                                 int capnum = -1;                                 int uncapnum = -1;                                 bool proceed = false;                                  // grab part before -                                  if (ch >= '0' && ch <= '9') {                                     capnum = ScanDecimal();                                      if (!IsCaptureSlot(capnum))                                         capnum = -1;                                      // check if we have bogus characters after the number                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                     if (capnum == 0)                                         throw MakeException("");                                 }                                 else if (RegexCharClass.IsWordChar(ch)) {                                     String capname = ScanCapname();                                      if (IsCaptureName(capname))                                         capnum = CaptureSlotFromName(capname);                                      // check if we have bogus character after the name                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                 }                                 else if (ch == '-') {                                     proceed = true;                                 }                                 else {                                     // bad group name - starts with something other than a word character and isn't a number                                     throw MakeException("");                                 }                                  // grab part after - if any                                  if ((capnum != -1 || proceed == true) && CharsRight() > 0 && RightChar() == '-') {                                     MoveRight();                                     ch = RightChar();                                      if (ch >= '0' && ch <= '9') {                                         uncapnum = ScanDecimal();                                                                                  if (!IsCaptureSlot(uncapnum))                                             throw MakeException("");                                                                                  // check if we have bogus characters after the number                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else if (RegexCharClass.IsWordChar(ch)) {                                         String uncapname = ScanCapname();                                          if (IsCaptureName(uncapname))                                             uncapnum = CaptureSlotFromName(uncapname);                                         else                                             throw MakeException("");                                          // check if we have bogus character after the name                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else {                                         // bad group name - starts with something other than a word character and isn't a number                                         throw MakeException("");                                     }                                 }                                  // actually make the node                                  if ((capnum != -1 || uncapnum != -1) && CharsRight() > 0 && MoveRightGetChar() == close) {                                     return new RegexNode(RegexNode.Capture' _options' capnum' uncapnum);                                 }                                 goto BreakRecognize;                         }                         break;                      case '(':                          // alternation construct (?(...) | )                                           int parenPos = Textpos();                         if (CharsRight() > 0)   	                         {                             ch = RightChar();                                  // check if the alternation condition is a backref                             if (ch >= '0' && ch <= '9') {                                 int capnum = ScanDecimal();                                 if (CharsRight() > 0 && MoveRightGetChar() == ')') {                                     if (IsCaptureSlot(capnum))                                         return new RegexNode(RegexNode.Testref' _options' capnum);                                     else                                         throw MakeException("");                                 }                                 else                                     throw MakeException("");                                  }                             else if (RegexCharClass.IsWordChar(ch)) {                                 String capname = ScanCapname();                                      if (IsCaptureName(capname) && CharsRight() > 0 && MoveRightGetChar() == ')')                                     return new RegexNode(RegexNode.Testref' _options' CaptureSlotFromName(capname));                             }                         }                         // not a backref                         NodeType = RegexNode.Testgroup;                         Textto(parenPos - 1);       // jump to the start of the parentheses                         _ignoreNextParen = true;    // but make sure we don't try to capture the insides                          int charsRight = CharsRight();                         if (charsRight >= 3 && RightChar(1) == '?') {                             char rightchar2 = RightChar(2);                             // disallow comments in the condition                             if (rightchar2 == '#')                                 throw MakeException("");                              // disallow named capture group (?<..>..) in the condition                             if (rightchar2 == '\'' )                                  throw MakeException("");                             else {                                 if (charsRight >=4 && (rightchar2 == '<' && RightChar(3) != '!' && RightChar(3) != '='))                                     throw MakeException("");                             }                         }                                                      break;                       default:                         MoveLeft();                          NodeType = RegexNode.Group;                         ScanOptions();                         if (CharsRight() == 0)                             goto BreakRecognize;                          if ((ch = MoveRightGetChar()) == ')')                             return null;                          if (ch != ':')                             goto BreakRecognize;                         break;                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The following statement contains a magic number: switch (ch = MoveRightGetChar()) {                     case ':':                         NodeType = RegexNode.Group;                         break;                      case '=':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Require;                         break;                      case '!':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Prevent;                         break;                      case '>':                         NodeType = RegexNode.Greedy;                         break;                      case '\'':                         close = '\'';                         goto case '<';                         // fallthrough                      case '<':                         if (CharsRight() == 0)                             goto BreakRecognize;                          switch (ch = MoveRightGetChar()) {                             case '=':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Require;                                 break;                              case '!':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Prevent;                                 break;                              default:                                 MoveLeft();                                 int capnum = -1;                                 int uncapnum = -1;                                 bool proceed = false;                                  // grab part before -                                  if (ch >= '0' && ch <= '9') {                                     capnum = ScanDecimal();                                      if (!IsCaptureSlot(capnum))                                         capnum = -1;                                      // check if we have bogus characters after the number                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                     if (capnum == 0)                                         throw MakeException("");                                 }                                 else if (RegexCharClass.IsWordChar(ch)) {                                     String capname = ScanCapname();                                      if (IsCaptureName(capname))                                         capnum = CaptureSlotFromName(capname);                                      // check if we have bogus character after the name                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                 }                                 else if (ch == '-') {                                     proceed = true;                                 }                                 else {                                     // bad group name - starts with something other than a word character and isn't a number                                     throw MakeException("");                                 }                                  // grab part after - if any                                  if ((capnum != -1 || proceed == true) && CharsRight() > 0 && RightChar() == '-') {                                     MoveRight();                                     ch = RightChar();                                      if (ch >= '0' && ch <= '9') {                                         uncapnum = ScanDecimal();                                                                                  if (!IsCaptureSlot(uncapnum))                                             throw MakeException("");                                                                                  // check if we have bogus characters after the number                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else if (RegexCharClass.IsWordChar(ch)) {                                         String uncapname = ScanCapname();                                          if (IsCaptureName(uncapname))                                             uncapnum = CaptureSlotFromName(uncapname);                                         else                                             throw MakeException("");                                          // check if we have bogus character after the name                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else {                                         // bad group name - starts with something other than a word character and isn't a number                                         throw MakeException("");                                     }                                 }                                  // actually make the node                                  if ((capnum != -1 || uncapnum != -1) && CharsRight() > 0 && MoveRightGetChar() == close) {                                     return new RegexNode(RegexNode.Capture' _options' capnum' uncapnum);                                 }                                 goto BreakRecognize;                         }                         break;                      case '(':                          // alternation construct (?(...) | )                                           int parenPos = Textpos();                         if (CharsRight() > 0)   	                         {                             ch = RightChar();                                  // check if the alternation condition is a backref                             if (ch >= '0' && ch <= '9') {                                 int capnum = ScanDecimal();                                 if (CharsRight() > 0 && MoveRightGetChar() == ')') {                                     if (IsCaptureSlot(capnum))                                         return new RegexNode(RegexNode.Testref' _options' capnum);                                     else                                         throw MakeException("");                                 }                                 else                                     throw MakeException("");                                  }                             else if (RegexCharClass.IsWordChar(ch)) {                                 String capname = ScanCapname();                                      if (IsCaptureName(capname) && CharsRight() > 0 && MoveRightGetChar() == ')')                                     return new RegexNode(RegexNode.Testref' _options' CaptureSlotFromName(capname));                             }                         }                         // not a backref                         NodeType = RegexNode.Testgroup;                         Textto(parenPos - 1);       // jump to the start of the parentheses                         _ignoreNextParen = true;    // but make sure we don't try to capture the insides                          int charsRight = CharsRight();                         if (charsRight >= 3 && RightChar(1) == '?') {                             char rightchar2 = RightChar(2);                             // disallow comments in the condition                             if (rightchar2 == '#')                                 throw MakeException("");                              // disallow named capture group (?<..>..) in the condition                             if (rightchar2 == '\'' )                                  throw MakeException("");                             else {                                 if (charsRight >=4 && (rightchar2 == '<' && RightChar(3) != '!' && RightChar(3) != '='))                                     throw MakeException("");                             }                         }                                                      break;                       default:                         MoveLeft();                          NodeType = RegexNode.Group;                         ScanOptions();                         if (CharsRight() == 0)                             goto BreakRecognize;                          if ((ch = MoveRightGetChar()) == ')')                             return null;                          if (ch != ':')                             goto BreakRecognize;                         break;                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The following statement contains a magic number: switch (ch = MoveRightGetChar()) {                     case ':':                         NodeType = RegexNode.Group;                         break;                      case '=':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Require;                         break;                      case '!':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Prevent;                         break;                      case '>':                         NodeType = RegexNode.Greedy;                         break;                      case '\'':                         close = '\'';                         goto case '<';                         // fallthrough                      case '<':                         if (CharsRight() == 0)                             goto BreakRecognize;                          switch (ch = MoveRightGetChar()) {                             case '=':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Require;                                 break;                              case '!':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Prevent;                                 break;                              default:                                 MoveLeft();                                 int capnum = -1;                                 int uncapnum = -1;                                 bool proceed = false;                                  // grab part before -                                  if (ch >= '0' && ch <= '9') {                                     capnum = ScanDecimal();                                      if (!IsCaptureSlot(capnum))                                         capnum = -1;                                      // check if we have bogus characters after the number                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                     if (capnum == 0)                                         throw MakeException("");                                 }                                 else if (RegexCharClass.IsWordChar(ch)) {                                     String capname = ScanCapname();                                      if (IsCaptureName(capname))                                         capnum = CaptureSlotFromName(capname);                                      // check if we have bogus character after the name                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                 }                                 else if (ch == '-') {                                     proceed = true;                                 }                                 else {                                     // bad group name - starts with something other than a word character and isn't a number                                     throw MakeException("");                                 }                                  // grab part after - if any                                  if ((capnum != -1 || proceed == true) && CharsRight() > 0 && RightChar() == '-') {                                     MoveRight();                                     ch = RightChar();                                      if (ch >= '0' && ch <= '9') {                                         uncapnum = ScanDecimal();                                                                                  if (!IsCaptureSlot(uncapnum))                                             throw MakeException("");                                                                                  // check if we have bogus characters after the number                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else if (RegexCharClass.IsWordChar(ch)) {                                         String uncapname = ScanCapname();                                          if (IsCaptureName(uncapname))                                             uncapnum = CaptureSlotFromName(uncapname);                                         else                                             throw MakeException("");                                          // check if we have bogus character after the name                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else {                                         // bad group name - starts with something other than a word character and isn't a number                                         throw MakeException("");                                     }                                 }                                  // actually make the node                                  if ((capnum != -1 || uncapnum != -1) && CharsRight() > 0 && MoveRightGetChar() == close) {                                     return new RegexNode(RegexNode.Capture' _options' capnum' uncapnum);                                 }                                 goto BreakRecognize;                         }                         break;                      case '(':                          // alternation construct (?(...) | )                                           int parenPos = Textpos();                         if (CharsRight() > 0)   	                         {                             ch = RightChar();                                  // check if the alternation condition is a backref                             if (ch >= '0' && ch <= '9') {                                 int capnum = ScanDecimal();                                 if (CharsRight() > 0 && MoveRightGetChar() == ')') {                                     if (IsCaptureSlot(capnum))                                         return new RegexNode(RegexNode.Testref' _options' capnum);                                     else                                         throw MakeException("");                                 }                                 else                                     throw MakeException("");                                  }                             else if (RegexCharClass.IsWordChar(ch)) {                                 String capname = ScanCapname();                                      if (IsCaptureName(capname) && CharsRight() > 0 && MoveRightGetChar() == ')')                                     return new RegexNode(RegexNode.Testref' _options' CaptureSlotFromName(capname));                             }                         }                         // not a backref                         NodeType = RegexNode.Testgroup;                         Textto(parenPos - 1);       // jump to the start of the parentheses                         _ignoreNextParen = true;    // but make sure we don't try to capture the insides                          int charsRight = CharsRight();                         if (charsRight >= 3 && RightChar(1) == '?') {                             char rightchar2 = RightChar(2);                             // disallow comments in the condition                             if (rightchar2 == '#')                                 throw MakeException("");                              // disallow named capture group (?<..>..) in the condition                             if (rightchar2 == '\'' )                                  throw MakeException("");                             else {                                 if (charsRight >=4 && (rightchar2 == '<' && RightChar(3) != '!' && RightChar(3) != '='))                                     throw MakeException("");                             }                         }                                                      break;                       default:                         MoveLeft();                          NodeType = RegexNode.Group;                         ScanOptions();                         if (CharsRight() == 0)                             goto BreakRecognize;                          if ((ch = MoveRightGetChar()) == ')')                             return null;                          if (ch != ':')                             goto BreakRecognize;                         break;                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanGroupOpen,The following statement contains a magic number: switch (ch = MoveRightGetChar()) {                     case ':':                         NodeType = RegexNode.Group;                         break;                      case '=':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Require;                         break;                      case '!':                         _options &= ~(RegexOptions.RightToLeft);                         NodeType = RegexNode.Prevent;                         break;                      case '>':                         NodeType = RegexNode.Greedy;                         break;                      case '\'':                         close = '\'';                         goto case '<';                         // fallthrough                      case '<':                         if (CharsRight() == 0)                             goto BreakRecognize;                          switch (ch = MoveRightGetChar()) {                             case '=':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Require;                                 break;                              case '!':                                 if (close == '\'')                                     goto BreakRecognize;                                  _options |= RegexOptions.RightToLeft;                                 NodeType = RegexNode.Prevent;                                 break;                              default:                                 MoveLeft();                                 int capnum = -1;                                 int uncapnum = -1;                                 bool proceed = false;                                  // grab part before -                                  if (ch >= '0' && ch <= '9') {                                     capnum = ScanDecimal();                                      if (!IsCaptureSlot(capnum))                                         capnum = -1;                                      // check if we have bogus characters after the number                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                     if (capnum == 0)                                         throw MakeException("");                                 }                                 else if (RegexCharClass.IsWordChar(ch)) {                                     String capname = ScanCapname();                                      if (IsCaptureName(capname))                                         capnum = CaptureSlotFromName(capname);                                      // check if we have bogus character after the name                                     if (CharsRight() > 0 && !(RightChar() == close || RightChar() == '-'))                                         throw MakeException("");                                 }                                 else if (ch == '-') {                                     proceed = true;                                 }                                 else {                                     // bad group name - starts with something other than a word character and isn't a number                                     throw MakeException("");                                 }                                  // grab part after - if any                                  if ((capnum != -1 || proceed == true) && CharsRight() > 0 && RightChar() == '-') {                                     MoveRight();                                     ch = RightChar();                                      if (ch >= '0' && ch <= '9') {                                         uncapnum = ScanDecimal();                                                                                  if (!IsCaptureSlot(uncapnum))                                             throw MakeException("");                                                                                  // check if we have bogus characters after the number                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else if (RegexCharClass.IsWordChar(ch)) {                                         String uncapname = ScanCapname();                                          if (IsCaptureName(uncapname))                                             uncapnum = CaptureSlotFromName(uncapname);                                         else                                             throw MakeException("");                                          // check if we have bogus character after the name                                         if (CharsRight() > 0 && RightChar() != close)                                             throw MakeException("");                                     }                                     else {                                         // bad group name - starts with something other than a word character and isn't a number                                         throw MakeException("");                                     }                                 }                                  // actually make the node                                  if ((capnum != -1 || uncapnum != -1) && CharsRight() > 0 && MoveRightGetChar() == close) {                                     return new RegexNode(RegexNode.Capture' _options' capnum' uncapnum);                                 }                                 goto BreakRecognize;                         }                         break;                      case '(':                          // alternation construct (?(...) | )                                           int parenPos = Textpos();                         if (CharsRight() > 0)   	                         {                             ch = RightChar();                                  // check if the alternation condition is a backref                             if (ch >= '0' && ch <= '9') {                                 int capnum = ScanDecimal();                                 if (CharsRight() > 0 && MoveRightGetChar() == ')') {                                     if (IsCaptureSlot(capnum))                                         return new RegexNode(RegexNode.Testref' _options' capnum);                                     else                                         throw MakeException("");                                 }                                 else                                     throw MakeException("");                                  }                             else if (RegexCharClass.IsWordChar(ch)) {                                 String capname = ScanCapname();                                      if (IsCaptureName(capname) && CharsRight() > 0 && MoveRightGetChar() == ')')                                     return new RegexNode(RegexNode.Testref' _options' CaptureSlotFromName(capname));                             }                         }                         // not a backref                         NodeType = RegexNode.Testgroup;                         Textto(parenPos - 1);       // jump to the start of the parentheses                         _ignoreNextParen = true;    // but make sure we don't try to capture the insides                          int charsRight = CharsRight();                         if (charsRight >= 3 && RightChar(1) == '?') {                             char rightchar2 = RightChar(2);                             // disallow comments in the condition                             if (rightchar2 == '#')                                 throw MakeException("");                              // disallow named capture group (?<..>..) in the condition                             if (rightchar2 == '\'' )                                  throw MakeException("");                             else {                                 if (charsRight >=4 && (rightchar2 == '<' && RightChar(3) != '!' && RightChar(3) != '='))                                     throw MakeException("");                             }                         }                                                      break;                       default:                         MoveLeft();                          NodeType = RegexNode.Group;                         ScanOptions();                         if (CharsRight() == 0)                             goto BreakRecognize;                          if ((ch = MoveRightGetChar()) == ')')                             return null;                          if (ch != ':')                             goto BreakRecognize;                         break;                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanBasicBackslash,The following statement contains a magic number: CharsRight() >= 2
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanDollar,The following statement contains a magic number: newcapnum = newcapnum * 10 + digit;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanOctal,The following statement contains a magic number: c = 3;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanOctal,The following statement contains a magic number: i *= 8;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanOctal,The following statement contains a magic number: c > 0 && (uint)(d = RightChar() - '0') <= 7
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanDecimal,The following statement contains a magic number: i *= 10;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanDecimal,The following statement contains a magic number: CharsRight() > 0 && (uint)(d = (char)(RightChar() - '0')) <= 9
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,HexDigit,The following statement contains a magic number: (uint)(d = ch - '0') <= 9
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,HexDigit,The following statement contains a magic number: (uint)(d = ch - 'a') <= 5
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,HexDigit,The following statement contains a magic number: (uint)(d = ch - 'A') <= 5
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanCharEscape,The following statement contains a magic number: switch (ch) {                 case 'x':                     return ScanHex(2);                 case 'u':                     return ScanHex(4);                 case 'a':                     return '\u0007';                 case 'b':                     return '\b';                 case 'e':                     return '\u001B';                 case 'f':                     return '\f';                 case 'n':                     return '\n';                 case 'r':                     return '\r';                 case 't':                     return '\t';                 case 'v':                     return '\u000B';                 case 'c':                     return ScanControl();                 default:                     if (!UseOptionE() && RegexCharClass.IsWordChar(ch))                         throw MakeException("");                     return ch;             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanCharEscape,The following statement contains a magic number: switch (ch) {                 case 'x':                     return ScanHex(2);                 case 'u':                     return ScanHex(4);                 case 'a':                     return '\u0007';                 case 'b':                     return '\b';                 case 'e':                     return '\u001B';                 case 'f':                     return '\f';                 case 'n':                     return '\n';                 case 'r':                     return '\r';                 case 't':                     return '\t';                 case 'v':                     return '\u000B';                 case 'c':                     return ScanControl();                 default:                     if (!UseOptionE() && RegexCharClass.IsWordChar(ch))                         throw MakeException("");                     return ch;             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ParseProperty,The following statement contains a magic number: CharsRight() < 3
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,CountCaptures,The following statement contains a magic number: switch (ch) {                     case '\\':                         if (CharsRight() > 0)                             MoveRight();                         break;                      case '#':                         if (UseOptionX()) {                             MoveLeft();                             ScanBlank();                         }                         break;                      case '[':                         ScanCharClass(false' true);                         break;                      case ')':                         if (!EmptyOptionsStack())                             PopOptions();                         break;                      case '(':                         if (CharsRight() >= 2 && RightChar(1) == '#' && RightChar() == '?') {                             MoveLeft();                             ScanBlank();                         }                          else {                                                          PushOptions();                             if (CharsRight() > 0 && RightChar() == '?') {                                 // we have (?...                                 MoveRight();                                  if (CharsRight() > 1 && (RightChar() == '<' || RightChar() == '\'')) {                                     // named group: (?<... or (?'...                                      MoveRight();                                     ch = RightChar();                                      if (ch != '0' && RegexCharClass.IsWordChar(ch)) {                                         //if (_ignoreNextParen)                                          //    throw MakeException("");                                         if (ch >= '1' && ch <= '9')                                              NoteCaptureSlot(ScanDecimal()' pos);                                         else                                              NoteCaptureName(ScanCapname()' pos);                                     }                                 }                                 else {                                     // (?...                                      // get the options if it's an option construct (?cimsx-cimsx...)                                     ScanOptions();                                      if (CharsRight() > 0) {                                         if (RightChar() == ')') {                                             // (?cimsx-cimsx)                                             MoveRight();                                             PopKeepOptions();                                         }                                         else if (RightChar() == '(') {                                             // alternation construct: (?(foo)yes|no)                                             // ignore the next paren so we don't capture the condition                                             _ignoreNextParen = true;                                              // break from here so we don't reset _ignoreNextParen                                             break;                                         }                                     }                                 }                             }                             else {                                 if (!UseOptionN() && !_ignoreNextParen)                                     NoteCaptureSlot(_autocap++' pos);                             }                         }                          _ignoreNextParen = false;                         break;                 }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,AddGroup,The following statement contains a magic number: _group.Type() == RegexNode.Testref && _group.ChildCount() > 2 || _group.ChildCount() > 3
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,AddGroup,The following statement contains a magic number: _group.Type() == RegexNode.Testref && _group.ChildCount() > 2 || _group.ChildCount() > 3
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,Scan,The following statement contains a magic number: this.timeout = this.ignoreTimeout                                     ? (Int32) Regex.InfiniteMatchTimeout.TotalMilliseconds                                     : (Int32) (timeout.TotalMilliseconds + 0.5);
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: int tracksize = runtrackcount * 8;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: int stacksize = runtrackcount * 8;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: tracksize = 32;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: tracksize < 32
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: stacksize = 16;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: stacksize < 16
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: runcrawl = new int [32];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,InitMatch,The following statement contains a magic number: runcrawlpos = 32;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,EnsureStorage,The following statement contains a magic number: runstackpos < runtrackcount * 4
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,EnsureStorage,The following statement contains a magic number: runtrackpos < runtrackcount * 4
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,DoubleTrack,The following statement contains a magic number: newtrack = new int [runtrack.Length * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,DoubleStack,The following statement contains a magic number: newstack = new int [runstack.Length * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexRunner.cs,DoubleCrawl,The following statement contains a magic number: newcrawl = new int [runcrawl.Length * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,RegexWriter,The following statement contains a magic number: _intStack = new int[32];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,RegexWriter,The following statement contains a magic number: _emitted = new int[32];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,PushInt,The following statement contains a magic number: int [] expanded = new int[_depth * 2];
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,Emit,The following statement contains a magic number: _count += 2;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,Emit,The following statement contains a magic number: _count += 3;
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following statement contains a magic number: switch (nodetype) {                 case RegexNode.Concatenate | BeforeChild:                 case RegexNode.Concatenate | AfterChild:                 case RegexNode.Empty:                     break;                  case RegexNode.Alternate | BeforeChild:                     if (CurIndex < node._children.Count - 1) {                         PushInt(CurPos());                         Emit(RegexCode.Lazybranch' 0);                     }                     break;                  case RegexNode.Alternate | AfterChild: {                          if (CurIndex < node._children.Count - 1) {                             int LBPos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(LBPos' CurPos());                         }                         else {                             int I;                             for (I = 0; I < CurIndex; I++) {                                 PatchJump(PopInt()' CurPos());                             }                         }                         break;                     }                  case RegexNode.Testref | BeforeChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             Emit(RegexCode.Testref' MapCapnum(node._m));                             Emit(RegexCode.Forejump);                             break;                     }                     break;                  case RegexNode.Testref | AfterChild:                     switch (CurIndex) {                         case 0: {                                 int Branchpos = PopInt();                                 PushInt(CurPos());                                 Emit(RegexCode.Goto' 0);                                 PatchJump(Branchpos' CurPos());                                 Emit(RegexCode.Forejump);                                 if (node._children.Count > 1)                                     break;                                 // else fallthrough                                 goto case 1;                             }                         case 1:                             PatchJump(PopInt()' CurPos());                             break;                     }                     break;                  case RegexNode.Testgroup | BeforeChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             Emit(RegexCode.Setmark);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             break;                     }                     break;                  case RegexNode.Testgroup | AfterChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                             break;                         case 1:                              int Branchpos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(Branchpos' CurPos());                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                              if (node._children.Count > 2)                                 break;                             // else fallthrough                             goto case 2;                         case 2:                             PatchJump(PopInt()' CurPos());                             break;                     }                     break;                  case RegexNode.Loop | BeforeChild:                 case RegexNode.Lazyloop | BeforeChild:                      if (node._n < Int32.MaxValue || node._m > 1)                         Emit(node._m == 0 ? RegexCode.Nullcount : RegexCode.Setcount' node._m == 0 ? 0 : 1 - node._m);                     else                         Emit(node._m == 0 ? RegexCode.Nullmark : RegexCode.Setmark);                      if (node._m == 0) {                         PushInt(CurPos());                         Emit(RegexCode.Goto' 0);                     }                     PushInt(CurPos());                     break;                  case RegexNode.Loop | AfterChild:                 case RegexNode.Lazyloop | AfterChild: {                         int StartJumpPos = CurPos();                         int Lazy = (nodetype - (RegexNode.Loop | AfterChild));                          if (node._n < Int32.MaxValue || node._m > 1)                             Emit(RegexCode.Branchcount + Lazy' PopInt()' node._n == Int32.MaxValue ? Int32.MaxValue : node._n - node._m);                         else                             Emit(RegexCode.Branchmark + Lazy' PopInt());                          if (node._m == 0)                             PatchJump(PopInt()' StartJumpPos);                     }                     break;                  case RegexNode.Group | BeforeChild:                 case RegexNode.Group | AfterChild:                     break;                  case RegexNode.Capture | BeforeChild:                     Emit(RegexCode.Setmark);                     break;                  case RegexNode.Capture | AfterChild:                     Emit(RegexCode.Capturemark' MapCapnum(node._m)' MapCapnum(node._n));                     break;                  case RegexNode.Require | BeforeChild:                     // NOTE: the following line causes lookahead/lookbehind to be                     // NON-BACKTRACKING. It can be commented out with (*)                     Emit(RegexCode.Setjump);                       Emit(RegexCode.Setmark);                     break;                  case RegexNode.Require | AfterChild:                     Emit(RegexCode.Getmark);                      // NOTE: the following line causes lookahead/lookbehind to be                     // NON-BACKTRACKING. It can be commented out with (*)                     Emit(RegexCode.Forejump);                      break;                  case RegexNode.Prevent | BeforeChild:                     Emit(RegexCode.Setjump);                     PushInt(CurPos());                     Emit(RegexCode.Lazybranch' 0);                     break;                  case RegexNode.Prevent | AfterChild:                     Emit(RegexCode.Backjump);                     PatchJump(PopInt()' CurPos());                     Emit(RegexCode.Forejump);                     break;                  case RegexNode.Greedy | BeforeChild:                     Emit(RegexCode.Setjump);                     break;                  case RegexNode.Greedy | AfterChild:                     Emit(RegexCode.Forejump);                     break;                  case RegexNode.One:                 case RegexNode.Notone:                     Emit(node._type | bits' (int)node._ch);                     break;                  case RegexNode.Notoneloop:                 case RegexNode.Notonelazy:                 case RegexNode.Oneloop:                 case RegexNode.Onelazy:                     if (node._m > 0)                         Emit(((node._type == RegexNode.Oneloop || node._type == RegexNode.Onelazy) ?                               RegexCode.Onerep : RegexCode.Notonerep) | bits' (int)node._ch' node._m);                     if (node._n > node._m)                         Emit(node._type | bits' (int)node._ch' node._n == Int32.MaxValue ?                              Int32.MaxValue : node._n - node._m);                     break;                  case RegexNode.Setloop:                 case RegexNode.Setlazy:                     if (node._m > 0)                         Emit(RegexCode.Setrep | bits' StringCode(node._str)' node._m);                     if (node._n > node._m)                         Emit(node._type | bits' StringCode(node._str)'                               (node._n == Int32.MaxValue) ? Int32.MaxValue : node._n - node._m);                     break;                  case RegexNode.Multi:                     Emit(node._type | bits' StringCode(node._str));                     break;                  case RegexNode.Set:                     Emit(node._type | bits' StringCode(node._str));                     break;                  case RegexNode.Ref:                     Emit(node._type | bits' MapCapnum(node._m));                     break;                  case RegexNode.Nothing:                 case RegexNode.Bol:                 case RegexNode.Eol:                 case RegexNode.Boundary:                 case RegexNode.Nonboundary:                 case RegexNode.ECMABoundary:                 case RegexNode.NonECMABoundary:                 case RegexNode.Beginning:                 case RegexNode.Start:                 case RegexNode.EndZ:                 case RegexNode.End:                     Emit(node._type);                     break;                  default:                     throw MakeException("");             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following statement contains a magic number: switch (nodetype) {                 case RegexNode.Concatenate | BeforeChild:                 case RegexNode.Concatenate | AfterChild:                 case RegexNode.Empty:                     break;                  case RegexNode.Alternate | BeforeChild:                     if (CurIndex < node._children.Count - 1) {                         PushInt(CurPos());                         Emit(RegexCode.Lazybranch' 0);                     }                     break;                  case RegexNode.Alternate | AfterChild: {                          if (CurIndex < node._children.Count - 1) {                             int LBPos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(LBPos' CurPos());                         }                         else {                             int I;                             for (I = 0; I < CurIndex; I++) {                                 PatchJump(PopInt()' CurPos());                             }                         }                         break;                     }                  case RegexNode.Testref | BeforeChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             Emit(RegexCode.Testref' MapCapnum(node._m));                             Emit(RegexCode.Forejump);                             break;                     }                     break;                  case RegexNode.Testref | AfterChild:                     switch (CurIndex) {                         case 0: {                                 int Branchpos = PopInt();                                 PushInt(CurPos());                                 Emit(RegexCode.Goto' 0);                                 PatchJump(Branchpos' CurPos());                                 Emit(RegexCode.Forejump);                                 if (node._children.Count > 1)                                     break;                                 // else fallthrough                                 goto case 1;                             }                         case 1:                             PatchJump(PopInt()' CurPos());                             break;                     }                     break;                  case RegexNode.Testgroup | BeforeChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             Emit(RegexCode.Setmark);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             break;                     }                     break;                  case RegexNode.Testgroup | AfterChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                             break;                         case 1:                              int Branchpos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(Branchpos' CurPos());                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                              if (node._children.Count > 2)                                 break;                             // else fallthrough                             goto case 2;                         case 2:                             PatchJump(PopInt()' CurPos());                             break;                     }                     break;                  case RegexNode.Loop | BeforeChild:                 case RegexNode.Lazyloop | BeforeChild:                      if (node._n < Int32.MaxValue || node._m > 1)                         Emit(node._m == 0 ? RegexCode.Nullcount : RegexCode.Setcount' node._m == 0 ? 0 : 1 - node._m);                     else                         Emit(node._m == 0 ? RegexCode.Nullmark : RegexCode.Setmark);                      if (node._m == 0) {                         PushInt(CurPos());                         Emit(RegexCode.Goto' 0);                     }                     PushInt(CurPos());                     break;                  case RegexNode.Loop | AfterChild:                 case RegexNode.Lazyloop | AfterChild: {                         int StartJumpPos = CurPos();                         int Lazy = (nodetype - (RegexNode.Loop | AfterChild));                          if (node._n < Int32.MaxValue || node._m > 1)                             Emit(RegexCode.Branchcount + Lazy' PopInt()' node._n == Int32.MaxValue ? Int32.MaxValue : node._n - node._m);                         else                             Emit(RegexCode.Branchmark + Lazy' PopInt());                          if (node._m == 0)                             PatchJump(PopInt()' StartJumpPos);                     }                     break;                  case RegexNode.Group | BeforeChild:                 case RegexNode.Group | AfterChild:                     break;                  case RegexNode.Capture | BeforeChild:                     Emit(RegexCode.Setmark);                     break;                  case RegexNode.Capture | AfterChild:                     Emit(RegexCode.Capturemark' MapCapnum(node._m)' MapCapnum(node._n));                     break;                  case RegexNode.Require | BeforeChild:                     // NOTE: the following line causes lookahead/lookbehind to be                     // NON-BACKTRACKING. It can be commented out with (*)                     Emit(RegexCode.Setjump);                       Emit(RegexCode.Setmark);                     break;                  case RegexNode.Require | AfterChild:                     Emit(RegexCode.Getmark);                      // NOTE: the following line causes lookahead/lookbehind to be                     // NON-BACKTRACKING. It can be commented out with (*)                     Emit(RegexCode.Forejump);                      break;                  case RegexNode.Prevent | BeforeChild:                     Emit(RegexCode.Setjump);                     PushInt(CurPos());                     Emit(RegexCode.Lazybranch' 0);                     break;                  case RegexNode.Prevent | AfterChild:                     Emit(RegexCode.Backjump);                     PatchJump(PopInt()' CurPos());                     Emit(RegexCode.Forejump);                     break;                  case RegexNode.Greedy | BeforeChild:                     Emit(RegexCode.Setjump);                     break;                  case RegexNode.Greedy | AfterChild:                     Emit(RegexCode.Forejump);                     break;                  case RegexNode.One:                 case RegexNode.Notone:                     Emit(node._type | bits' (int)node._ch);                     break;                  case RegexNode.Notoneloop:                 case RegexNode.Notonelazy:                 case RegexNode.Oneloop:                 case RegexNode.Onelazy:                     if (node._m > 0)                         Emit(((node._type == RegexNode.Oneloop || node._type == RegexNode.Onelazy) ?                               RegexCode.Onerep : RegexCode.Notonerep) | bits' (int)node._ch' node._m);                     if (node._n > node._m)                         Emit(node._type | bits' (int)node._ch' node._n == Int32.MaxValue ?                              Int32.MaxValue : node._n - node._m);                     break;                  case RegexNode.Setloop:                 case RegexNode.Setlazy:                     if (node._m > 0)                         Emit(RegexCode.Setrep | bits' StringCode(node._str)' node._m);                     if (node._n > node._m)                         Emit(node._type | bits' StringCode(node._str)'                               (node._n == Int32.MaxValue) ? Int32.MaxValue : node._n - node._m);                     break;                  case RegexNode.Multi:                     Emit(node._type | bits' StringCode(node._str));                     break;                  case RegexNode.Set:                     Emit(node._type | bits' StringCode(node._str));                     break;                  case RegexNode.Ref:                     Emit(node._type | bits' MapCapnum(node._m));                     break;                  case RegexNode.Nothing:                 case RegexNode.Bol:                 case RegexNode.Eol:                 case RegexNode.Boundary:                 case RegexNode.Nonboundary:                 case RegexNode.ECMABoundary:                 case RegexNode.NonECMABoundary:                 case RegexNode.Beginning:                 case RegexNode.Start:                 case RegexNode.EndZ:                 case RegexNode.End:                     Emit(node._type);                     break;                  default:                     throw MakeException("");             }
Magic Number,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following statement contains a magic number: switch (nodetype) {                 case RegexNode.Concatenate | BeforeChild:                 case RegexNode.Concatenate | AfterChild:                 case RegexNode.Empty:                     break;                  case RegexNode.Alternate | BeforeChild:                     if (CurIndex < node._children.Count - 1) {                         PushInt(CurPos());                         Emit(RegexCode.Lazybranch' 0);                     }                     break;                  case RegexNode.Alternate | AfterChild: {                          if (CurIndex < node._children.Count - 1) {                             int LBPos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(LBPos' CurPos());                         }                         else {                             int I;                             for (I = 0; I < CurIndex; I++) {                                 PatchJump(PopInt()' CurPos());                             }                         }                         break;                     }                  case RegexNode.Testref | BeforeChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             Emit(RegexCode.Testref' MapCapnum(node._m));                             Emit(RegexCode.Forejump);                             break;                     }                     break;                  case RegexNode.Testref | AfterChild:                     switch (CurIndex) {                         case 0: {                                 int Branchpos = PopInt();                                 PushInt(CurPos());                                 Emit(RegexCode.Goto' 0);                                 PatchJump(Branchpos' CurPos());                                 Emit(RegexCode.Forejump);                                 if (node._children.Count > 1)                                     break;                                 // else fallthrough                                 goto case 1;                             }                         case 1:                             PatchJump(PopInt()' CurPos());                             break;                     }                     break;                  case RegexNode.Testgroup | BeforeChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             Emit(RegexCode.Setmark);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             break;                     }                     break;                  case RegexNode.Testgroup | AfterChild:                     switch (CurIndex) {                         case 0:                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                             break;                         case 1:                              int Branchpos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(Branchpos' CurPos());                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                              if (node._children.Count > 2)                                 break;                             // else fallthrough                             goto case 2;                         case 2:                             PatchJump(PopInt()' CurPos());                             break;                     }                     break;                  case RegexNode.Loop | BeforeChild:                 case RegexNode.Lazyloop | BeforeChild:                      if (node._n < Int32.MaxValue || node._m > 1)                         Emit(node._m == 0 ? RegexCode.Nullcount : RegexCode.Setcount' node._m == 0 ? 0 : 1 - node._m);                     else                         Emit(node._m == 0 ? RegexCode.Nullmark : RegexCode.Setmark);                      if (node._m == 0) {                         PushInt(CurPos());                         Emit(RegexCode.Goto' 0);                     }                     PushInt(CurPos());                     break;                  case RegexNode.Loop | AfterChild:                 case RegexNode.Lazyloop | AfterChild: {                         int StartJumpPos = CurPos();                         int Lazy = (nodetype - (RegexNode.Loop | AfterChild));                          if (node._n < Int32.MaxValue || node._m > 1)                             Emit(RegexCode.Branchcount + Lazy' PopInt()' node._n == Int32.MaxValue ? Int32.MaxValue : node._n - node._m);                         else                             Emit(RegexCode.Branchmark + Lazy' PopInt());                          if (node._m == 0)                             PatchJump(PopInt()' StartJumpPos);                     }                     break;                  case RegexNode.Group | BeforeChild:                 case RegexNode.Group | AfterChild:                     break;                  case RegexNode.Capture | BeforeChild:                     Emit(RegexCode.Setmark);                     break;                  case RegexNode.Capture | AfterChild:                     Emit(RegexCode.Capturemark' MapCapnum(node._m)' MapCapnum(node._n));                     break;                  case RegexNode.Require | BeforeChild:                     // NOTE: the following line causes lookahead/lookbehind to be                     // NON-BACKTRACKING. It can be commented out with (*)                     Emit(RegexCode.Setjump);                       Emit(RegexCode.Setmark);                     break;                  case RegexNode.Require | AfterChild:                     Emit(RegexCode.Getmark);                      // NOTE: the following line causes lookahead/lookbehind to be                     // NON-BACKTRACKING. It can be commented out with (*)                     Emit(RegexCode.Forejump);                      break;                  case RegexNode.Prevent | BeforeChild:                     Emit(RegexCode.Setjump);                     PushInt(CurPos());                     Emit(RegexCode.Lazybranch' 0);                     break;                  case RegexNode.Prevent | AfterChild:                     Emit(RegexCode.Backjump);                     PatchJump(PopInt()' CurPos());                     Emit(RegexCode.Forejump);                     break;                  case RegexNode.Greedy | BeforeChild:                     Emit(RegexCode.Setjump);                     break;                  case RegexNode.Greedy | AfterChild:                     Emit(RegexCode.Forejump);                     break;                  case RegexNode.One:                 case RegexNode.Notone:                     Emit(node._type | bits' (int)node._ch);                     break;                  case RegexNode.Notoneloop:                 case RegexNode.Notonelazy:                 case RegexNode.Oneloop:                 case RegexNode.Onelazy:                     if (node._m > 0)                         Emit(((node._type == RegexNode.Oneloop || node._type == RegexNode.Onelazy) ?                               RegexCode.Onerep : RegexCode.Notonerep) | bits' (int)node._ch' node._m);                     if (node._n > node._m)                         Emit(node._type | bits' (int)node._ch' node._n == Int32.MaxValue ?                              Int32.MaxValue : node._n - node._m);                     break;                  case RegexNode.Setloop:                 case RegexNode.Setlazy:                     if (node._m > 0)                         Emit(RegexCode.Setrep | bits' StringCode(node._str)' node._m);                     if (node._n > node._m)                         Emit(node._type | bits' StringCode(node._str)'                               (node._n == Int32.MaxValue) ? Int32.MaxValue : node._n - node._m);                     break;                  case RegexNode.Multi:                     Emit(node._type | bits' StringCode(node._str));                     break;                  case RegexNode.Set:                     Emit(node._type | bits' StringCode(node._str));                     break;                  case RegexNode.Ref:                     Emit(node._type | bits' MapCapnum(node._m));                     break;                  case RegexNode.Nothing:                 case RegexNode.Bol:                 case RegexNode.Eol:                 case RegexNode.Boundary:                 case RegexNode.Nonboundary:                 case RegexNode.ECMABoundary:                 case RegexNode.NonECMABoundary:                 case RegexNode.Beginning:                 case RegexNode.Start:                 case RegexNode.EndZ:                 case RegexNode.End:                     Emit(node._type);                     break;                  default:                     throw MakeException("");             }
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateCompletionTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateCompletionTextEditorExtension.cs,HandleCodeCompletionAsync,The following statement contains a magic number: completionContext.TriggerOffset > 1 && char.IsLetterOrDigit (Editor.GetCharAt (completionContext.TriggerOffset - 2))
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.vbox4.Spacing = 6;
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.vbox5.Spacing = 6;
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.textview1.WrapMode = ((global::Gtk.WrapMode)(2));
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.textview1.PixelsBelowLines = 6;
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.textview1.PixelsInsideWrap = 3;
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Editor.TextMate,TextMateBundleOptionsPanelWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.TextMate\TextMateBundleOptionsPanelWidget.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,Reallocate,The following statement contains a magic number: var contentWidth = (Controller.DefaultPageSize.Width > 0 ? Controller.DefaultPageSize.Width : 660);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: buttonFrame.Padding = 20;
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: cancelButton.MinWidth = Math.Max (s.Width + 16' 100);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: cancelButton.MinWidth = Math.Max (s.Width + 16' 100);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: backButton.MinWidth = Math.Max (s.Width + 16' 100);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: backButton.MinWidth = Math.Max (s.Width + 16' 100);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: nextButton.MinWidth = Math.Max (s.Width + 16' 100);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: nextButton.MinWidth = Math.Max (s.Width + 16' 100);
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,WizardDialog,The following statement contains a magic number: statusImage.MarginRight = 6;
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleNextButtonClicked,The following statement contains a magic number: await Task.WhenAny (currentTransitionTask' Task.Delay (200' cancelTransitionRequest.Token)).ConfigureAwait (false) != currentTransitionTask
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleBackButtonClicked,The following statement contains a magic number: await Task.WhenAny (currentTransitionTask' Task.Delay (200' cancelTransitionRequest.Token)).ConfigureAwait (false) != currentTransitionTask
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,StartWorkingSpinner,The following statement contains a magic number: Runtime.RunInMainThread (() => { 				if (statusIconAnimation != null) 					StopWorkingSpinner ();  				if (animatedStatusIcon != null) { 					statusImage.Image = animatedStatusIcon.FirstFrame.WithAlpha (0.4).ToBitmap (); 					statusIconAnimation = animatedStatusIcon.StartAnimation (p => { 						statusImage.Image = p.WithAlpha (0.4).ToBitmap (); 					}); 				} else { 					statusImage.Image = ImageService.GetIcon ("md-spinner-Button"' Gtk.IconSize.Button); 				} 			});
Magic Number,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,StartWorkingSpinner,The following statement contains a magic number: Runtime.RunInMainThread (() => { 				if (statusIconAnimation != null) 					StopWorkingSpinner ();  				if (animatedStatusIcon != null) { 					statusImage.Image = animatedStatusIcon.FirstFrame.WithAlpha (0.4).ToBitmap (); 					statusIconAnimation = animatedStatusIcon.StartAnimation (p => { 						statusImage.Image = p.WithAlpha (0.4).ToBitmap (); 					}); 				} else { 					statusImage.Image = ImageService.GetIcon ("md-spinner-Button"' Gtk.IconSize.Button); 				} 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,SetupBuildOutput,The following statement contains a magic number: box.PackStart (pathBar' true' true' 2);
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The following statement contains a magic number: Xwt.Toolkit.Load (ToolkitType.Gtk).Invoke (() => { 				showDiagnosticsButton = new CheckBox (GettextCatalog.GetString ("Diagnostic log verbosity")); 				showDiagnosticsButton.HeightRequest = 17; 				showDiagnosticsButton.Accessible.Identifier = "BuildOutputWidget.ShowDiagnosticsButton"; 				showDiagnosticsButton.TooltipText = GettextCatalog.GetString ("Show full (diagnostics enabled) or reduced log"); 				showDiagnosticsButton.Accessible.Description = GettextCatalog.GetString ("Diagnostic log verbosity"); 				showDiagnosticsButton.Clicked += (sender' e) => ProcessLogs (showDiagnosticsButton.Active);  				saveButton = new Button (GettextCatalog.GetString ("Save")); 				saveButton.HeightRequest = 17; 				saveButton.Accessible.Identifier = "BuildOutputWidget.SaveButton"; 				saveButton.TooltipText = GettextCatalog.GetString ("Save build output"); 				saveButton.Accessible.Description = GettextCatalog.GetString ("Save build output");  				saveButton.Clicked += SaveButtonClickedAsync;  				searchEntry = new SearchEntry (); 				searchEntry.Accessible.SetLabel (GettextCatalog.GetString ("Search")); 				searchEntry.Accessible.Name = "BuildOutputWidget.Search"; 				searchEntry.Accessible.Description = GettextCatalog.GetString ("Search the build log"); 				searchEntry.WidthRequest = 200; 				searchEntry.Entry.HeightRequest = 17; 				searchEntry.Visible = true; 				searchEntry.EmptyMessage = GettextCatalog.GetString ("Search Build Output");  				resultInformLabel = new Label (); 				resultInformLabel.HeightRequest = 17; 				searchEntry.AddLabelWidget ((Gtk.Label)resultInformLabel.ToGtkWidget ());  				searchEntry.Entry.Changed += FindFirst; 				searchEntry.Entry.Activated += FindNext;  				buttonSearchBackward = new Button (); 				buttonSearchForward = new Button (); 				buttonSearchBackward.Clicked += FindPrevious; 				buttonSearchForward.Clicked += FindNext; 				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true)); 				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true)); 				buttonSearchForward.HeightRequest = buttonSearchBackward.HeightRequest = 17; 				SetSearchButtonsSensitivity (false); 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The following statement contains a magic number: Xwt.Toolkit.Load (ToolkitType.Gtk).Invoke (() => { 				showDiagnosticsButton = new CheckBox (GettextCatalog.GetString ("Diagnostic log verbosity")); 				showDiagnosticsButton.HeightRequest = 17; 				showDiagnosticsButton.Accessible.Identifier = "BuildOutputWidget.ShowDiagnosticsButton"; 				showDiagnosticsButton.TooltipText = GettextCatalog.GetString ("Show full (diagnostics enabled) or reduced log"); 				showDiagnosticsButton.Accessible.Description = GettextCatalog.GetString ("Diagnostic log verbosity"); 				showDiagnosticsButton.Clicked += (sender' e) => ProcessLogs (showDiagnosticsButton.Active);  				saveButton = new Button (GettextCatalog.GetString ("Save")); 				saveButton.HeightRequest = 17; 				saveButton.Accessible.Identifier = "BuildOutputWidget.SaveButton"; 				saveButton.TooltipText = GettextCatalog.GetString ("Save build output"); 				saveButton.Accessible.Description = GettextCatalog.GetString ("Save build output");  				saveButton.Clicked += SaveButtonClickedAsync;  				searchEntry = new SearchEntry (); 				searchEntry.Accessible.SetLabel (GettextCatalog.GetString ("Search")); 				searchEntry.Accessible.Name = "BuildOutputWidget.Search"; 				searchEntry.Accessible.Description = GettextCatalog.GetString ("Search the build log"); 				searchEntry.WidthRequest = 200; 				searchEntry.Entry.HeightRequest = 17; 				searchEntry.Visible = true; 				searchEntry.EmptyMessage = GettextCatalog.GetString ("Search Build Output");  				resultInformLabel = new Label (); 				resultInformLabel.HeightRequest = 17; 				searchEntry.AddLabelWidget ((Gtk.Label)resultInformLabel.ToGtkWidget ());  				searchEntry.Entry.Changed += FindFirst; 				searchEntry.Entry.Activated += FindNext;  				buttonSearchBackward = new Button (); 				buttonSearchForward = new Button (); 				buttonSearchBackward.Clicked += FindPrevious; 				buttonSearchForward.Clicked += FindNext; 				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true)); 				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true)); 				buttonSearchForward.HeightRequest = buttonSearchBackward.HeightRequest = 17; 				SetSearchButtonsSensitivity (false); 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The following statement contains a magic number: Xwt.Toolkit.Load (ToolkitType.Gtk).Invoke (() => { 				showDiagnosticsButton = new CheckBox (GettextCatalog.GetString ("Diagnostic log verbosity")); 				showDiagnosticsButton.HeightRequest = 17; 				showDiagnosticsButton.Accessible.Identifier = "BuildOutputWidget.ShowDiagnosticsButton"; 				showDiagnosticsButton.TooltipText = GettextCatalog.GetString ("Show full (diagnostics enabled) or reduced log"); 				showDiagnosticsButton.Accessible.Description = GettextCatalog.GetString ("Diagnostic log verbosity"); 				showDiagnosticsButton.Clicked += (sender' e) => ProcessLogs (showDiagnosticsButton.Active);  				saveButton = new Button (GettextCatalog.GetString ("Save")); 				saveButton.HeightRequest = 17; 				saveButton.Accessible.Identifier = "BuildOutputWidget.SaveButton"; 				saveButton.TooltipText = GettextCatalog.GetString ("Save build output"); 				saveButton.Accessible.Description = GettextCatalog.GetString ("Save build output");  				saveButton.Clicked += SaveButtonClickedAsync;  				searchEntry = new SearchEntry (); 				searchEntry.Accessible.SetLabel (GettextCatalog.GetString ("Search")); 				searchEntry.Accessible.Name = "BuildOutputWidget.Search"; 				searchEntry.Accessible.Description = GettextCatalog.GetString ("Search the build log"); 				searchEntry.WidthRequest = 200; 				searchEntry.Entry.HeightRequest = 17; 				searchEntry.Visible = true; 				searchEntry.EmptyMessage = GettextCatalog.GetString ("Search Build Output");  				resultInformLabel = new Label (); 				resultInformLabel.HeightRequest = 17; 				searchEntry.AddLabelWidget ((Gtk.Label)resultInformLabel.ToGtkWidget ());  				searchEntry.Entry.Changed += FindFirst; 				searchEntry.Entry.Activated += FindNext;  				buttonSearchBackward = new Button (); 				buttonSearchForward = new Button (); 				buttonSearchBackward.Clicked += FindPrevious; 				buttonSearchForward.Clicked += FindNext; 				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true)); 				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true)); 				buttonSearchForward.HeightRequest = buttonSearchBackward.HeightRequest = 17; 				SetSearchButtonsSensitivity (false); 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The following statement contains a magic number: Xwt.Toolkit.Load (ToolkitType.Gtk).Invoke (() => { 				showDiagnosticsButton = new CheckBox (GettextCatalog.GetString ("Diagnostic log verbosity")); 				showDiagnosticsButton.HeightRequest = 17; 				showDiagnosticsButton.Accessible.Identifier = "BuildOutputWidget.ShowDiagnosticsButton"; 				showDiagnosticsButton.TooltipText = GettextCatalog.GetString ("Show full (diagnostics enabled) or reduced log"); 				showDiagnosticsButton.Accessible.Description = GettextCatalog.GetString ("Diagnostic log verbosity"); 				showDiagnosticsButton.Clicked += (sender' e) => ProcessLogs (showDiagnosticsButton.Active);  				saveButton = new Button (GettextCatalog.GetString ("Save")); 				saveButton.HeightRequest = 17; 				saveButton.Accessible.Identifier = "BuildOutputWidget.SaveButton"; 				saveButton.TooltipText = GettextCatalog.GetString ("Save build output"); 				saveButton.Accessible.Description = GettextCatalog.GetString ("Save build output");  				saveButton.Clicked += SaveButtonClickedAsync;  				searchEntry = new SearchEntry (); 				searchEntry.Accessible.SetLabel (GettextCatalog.GetString ("Search")); 				searchEntry.Accessible.Name = "BuildOutputWidget.Search"; 				searchEntry.Accessible.Description = GettextCatalog.GetString ("Search the build log"); 				searchEntry.WidthRequest = 200; 				searchEntry.Entry.HeightRequest = 17; 				searchEntry.Visible = true; 				searchEntry.EmptyMessage = GettextCatalog.GetString ("Search Build Output");  				resultInformLabel = new Label (); 				resultInformLabel.HeightRequest = 17; 				searchEntry.AddLabelWidget ((Gtk.Label)resultInformLabel.ToGtkWidget ());  				searchEntry.Entry.Changed += FindFirst; 				searchEntry.Entry.Activated += FindNext;  				buttonSearchBackward = new Button (); 				buttonSearchForward = new Button (); 				buttonSearchBackward.Clicked += FindPrevious; 				buttonSearchForward.Clicked += FindNext; 				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true)); 				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true)); 				buttonSearchForward.HeightRequest = buttonSearchBackward.HeightRequest = 17; 				SetSearchButtonsSensitivity (false); 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The following statement contains a magic number: Xwt.Toolkit.Load (ToolkitType.Gtk).Invoke (() => { 				showDiagnosticsButton = new CheckBox (GettextCatalog.GetString ("Diagnostic log verbosity")); 				showDiagnosticsButton.HeightRequest = 17; 				showDiagnosticsButton.Accessible.Identifier = "BuildOutputWidget.ShowDiagnosticsButton"; 				showDiagnosticsButton.TooltipText = GettextCatalog.GetString ("Show full (diagnostics enabled) or reduced log"); 				showDiagnosticsButton.Accessible.Description = GettextCatalog.GetString ("Diagnostic log verbosity"); 				showDiagnosticsButton.Clicked += (sender' e) => ProcessLogs (showDiagnosticsButton.Active);  				saveButton = new Button (GettextCatalog.GetString ("Save")); 				saveButton.HeightRequest = 17; 				saveButton.Accessible.Identifier = "BuildOutputWidget.SaveButton"; 				saveButton.TooltipText = GettextCatalog.GetString ("Save build output"); 				saveButton.Accessible.Description = GettextCatalog.GetString ("Save build output");  				saveButton.Clicked += SaveButtonClickedAsync;  				searchEntry = new SearchEntry (); 				searchEntry.Accessible.SetLabel (GettextCatalog.GetString ("Search")); 				searchEntry.Accessible.Name = "BuildOutputWidget.Search"; 				searchEntry.Accessible.Description = GettextCatalog.GetString ("Search the build log"); 				searchEntry.WidthRequest = 200; 				searchEntry.Entry.HeightRequest = 17; 				searchEntry.Visible = true; 				searchEntry.EmptyMessage = GettextCatalog.GetString ("Search Build Output");  				resultInformLabel = new Label (); 				resultInformLabel.HeightRequest = 17; 				searchEntry.AddLabelWidget ((Gtk.Label)resultInformLabel.ToGtkWidget ());  				searchEntry.Entry.Changed += FindFirst; 				searchEntry.Entry.Activated += FindNext;  				buttonSearchBackward = new Button (); 				buttonSearchForward = new Button (); 				buttonSearchBackward.Clicked += FindPrevious; 				buttonSearchForward.Clicked += FindNext; 				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true)); 				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true)); 				buttonSearchForward.HeightRequest = buttonSearchBackward.HeightRequest = 17; 				SetSearchButtonsSensitivity (false); 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,Initialize,The following statement contains a magic number: Xwt.Toolkit.Load (ToolkitType.Gtk).Invoke (() => { 				showDiagnosticsButton = new CheckBox (GettextCatalog.GetString ("Diagnostic log verbosity")); 				showDiagnosticsButton.HeightRequest = 17; 				showDiagnosticsButton.Accessible.Identifier = "BuildOutputWidget.ShowDiagnosticsButton"; 				showDiagnosticsButton.TooltipText = GettextCatalog.GetString ("Show full (diagnostics enabled) or reduced log"); 				showDiagnosticsButton.Accessible.Description = GettextCatalog.GetString ("Diagnostic log verbosity"); 				showDiagnosticsButton.Clicked += (sender' e) => ProcessLogs (showDiagnosticsButton.Active);  				saveButton = new Button (GettextCatalog.GetString ("Save")); 				saveButton.HeightRequest = 17; 				saveButton.Accessible.Identifier = "BuildOutputWidget.SaveButton"; 				saveButton.TooltipText = GettextCatalog.GetString ("Save build output"); 				saveButton.Accessible.Description = GettextCatalog.GetString ("Save build output");  				saveButton.Clicked += SaveButtonClickedAsync;  				searchEntry = new SearchEntry (); 				searchEntry.Accessible.SetLabel (GettextCatalog.GetString ("Search")); 				searchEntry.Accessible.Name = "BuildOutputWidget.Search"; 				searchEntry.Accessible.Description = GettextCatalog.GetString ("Search the build log"); 				searchEntry.WidthRequest = 200; 				searchEntry.Entry.HeightRequest = 17; 				searchEntry.Visible = true; 				searchEntry.EmptyMessage = GettextCatalog.GetString ("Search Build Output");  				resultInformLabel = new Label (); 				resultInformLabel.HeightRequest = 17; 				searchEntry.AddLabelWidget ((Gtk.Label)resultInformLabel.ToGtkWidget ());  				searchEntry.Entry.Changed += FindFirst; 				searchEntry.Entry.Activated += FindNext;  				buttonSearchBackward = new Button (); 				buttonSearchForward = new Button (); 				buttonSearchBackward.Clicked += FindPrevious; 				buttonSearchForward.Clicked += FindNext; 				buttonSearchForward.TooltipText = GettextCatalog.GetString ("Find next {0}"' GetShortcut (SearchCommands.FindNext' true)); 				buttonSearchBackward.TooltipText = GettextCatalog.GetString ("Find previous {0}"' GetShortcut (SearchCommands.FindPrevious' true)); 				buttonSearchForward.HeightRequest = buttonSearchBackward.HeightRequest = 17; 				SetSearchButtonsSensitivity (false); 			});
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,CreatePathWidget,The following statement contains a magic number: window.FixedRowHeight = 22;
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputWidget.cs,CreatePathWidget,The following statement contains a magic number: window.MaxVisibleRows = 14;
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputNodeExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputNode.cs,GetDurationAsString,The following statement contains a magic number: var value = Math.Round ((duration.Seconds + duration.Milliseconds / 1000d)' precision);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorBackgroundColor = Color.FromBytes (245' 109' 79' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorBackgroundColor = Color.FromBytes (245' 109' 79' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorBackgroundColor = Color.FromBytes (245' 109' 79' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorBackgroundColor = Color.FromBytes (245' 109' 79' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorLineBackgroundColor = Color.FromBytes (245' 109' 79' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorLineBackgroundColor = Color.FromBytes (245' 109' 79' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorLineBackgroundColor = Color.FromBytes (245' 109' 79' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellErrorLineBackgroundColor = Color.FromBytes (245' 109' 79' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningBackgroundColor = Color.FromBytes (241' 196' 15' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningBackgroundColor = Color.FromBytes (241' 196' 15' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningBackgroundColor = Color.FromBytes (241' 196' 15' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningBackgroundColor = Color.FromBytes (241' 196' 15' 20);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningLineBackgroundColor = Color.FromBytes (241' 196' 15' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningLineBackgroundColor = Color.FromBytes (241' 196' 15' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningLineBackgroundColor = Color.FromBytes (241' 196' 15' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,Styles,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,LoadStyles,The following statement contains a magic number: CellWarningLineBackgroundColor = Color.FromBytes (241' 196' 15' 100);
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawLine,The following statement contains a magic number: ctx.SetLineWidth (2);
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeDuration,The following statement contains a magic number: textStartX += size.Width + 10;
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The following statement contains a magic number: status.TaskLinkRenderRectangle.X = lastErrorPanelStartX + 5;
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The following statement contains a magic number: textStartX += ImageSize + 2;
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The following statement contains a magic number: textStartX += ImageSize + 2;
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawNodeInformation,The following statement contains a magic number: DrawText (ctx' cellArea' textStartX' buildOutputNode.WarningCount.ToString ()' padding' defaultFont' 10' trimming: TextTrimming.Word);
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawImage,The following statement contains a magic number: DrawImage (ctx' cellArea' image' x' imageSize' isSelected' (cellArea.Height / 2 - imageSize / 2));
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,DrawImage,The following statement contains a magic number: DrawImage (ctx' cellArea' image' x' imageSize' isSelected' (cellArea.Height / 2 - imageSize / 2));
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnGetRequiredSize,The following statement contains a magic number: maxLayoutWidth = minWidth - ((ImageSize - 3) + ImageSize + ImagePadding + DefaultInformationContainerWidth);
Magic Number,MonoDevelop.Ide.BuildOutputView,BuildOutputTreeCellView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,OnGetRequiredSize,The following statement contains a magic number: var height = Math.Max (textSize.Height + 2 * status.LayoutYPadding' DefaultRowHeight);
Magic Number,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,Reload,The following statement contains a magic number: LayoutYPadding = (CollapsedRowHeight - CollapsedLayoutHeight) * .5;
Magic Number,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,Reload,The following statement contains a magic number: ExpanderYPadding = (CollapsedRowHeight - BuildExpandIcon.Height) * .5;
Magic Number,MonoDevelop.Ide.BuildOutputView,ViewStatus,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputTreeCellView.cs,Reload,The following statement contains a magic number: IconYPadding = (CollapsedRowHeight - ImageSize) * .5;
Magic Number,MonoDevelop.Ide.Gui.Documents,DocumentController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentController.cs,ScheduleModelSynchronization,The following statement contains a magic number: modelSynchronizationCallback = Xwt.Application.TimeoutInvoke (1000' () => { 						if (!disposed && Model != null && shown && !hasFocus) 							Model.Synchronize ().Ignore (); 						modelSynchronizationCallback = null; 						return false; 					});
Magic Number,MonoDevelop.Ide.Gui.Documents,DocumentManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Documents\DocumentManager.cs,GetStoredMemento,The following statement contains a magic number: string fileName = file.ToString ().Substring (3).Replace ('/'' '.').Replace ('\\'' '.').Replace (System.IO.Path.DirectorySeparatorChar' '.');
Magic Number,MonoDevelop.Ide.Gui.Shell,GtkDocumentToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,GtkDocumentToolbar,The following statement contains a magic number: box.Spacing = 3;
Magic Number,MonoDevelop.Ide.Gui.Shell,GtkDocumentToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,GtkDocumentToolbar,The following statement contains a magic number: al.LeftPadding = 5;
Magic Number,MonoDevelop.Ide.Gui.Shell,GtkDocumentToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,GtkDocumentToolbar,The following statement contains a magic number: al.TopPadding = 4;
Magic Number,MonoDevelop.Ide.Gui.Shell,GtkDocumentToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,GtkDocumentToolbar,The following statement contains a magic number: al.BottomPadding = 4;
Magic Number,MonoDevelop.Ide.Gui.Shell,GtkDocumentToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,Add,The following statement contains a magic number: int defaultPadding = 3;
Magic Number,MonoDevelop.Ide.Gui.Shell,ToolbarBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (0.5' Allocation.Height - 0.5);
Magic Number,MonoDevelop.Ide.Gui.Shell,ToolbarBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\GtkDocumentToolbar.cs,OnExposeEvent,The following statement contains a magic number: ctx.MoveTo (0.5' Allocation.Height - 0.5);
Duplicate Code,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnExposeEvent,The method contains a code clone-set at the following line numbers (starting from the method definition): ((49' 69)' (114' 134))
Missing Default,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,KeyToString,The following switch statement is missing a default case: switch (key) { 			case Gdk.Key.Next: 				return "Page_Down"; 			case Gdk.Key.L1: 				return "F11"; 			case Gdk.Key.L2: 				return "F12"; 			}
Missing Default,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,KeyToDisplayLabel,The following switch statement is missing a default case: switch (key) { 			case Gdk.Key.Page_Down: 			//Gdk.Key.Next: 				return "Page Down"; 			case Gdk.Key.Page_Up: 			//case Gdk.Key.Prior: 				return "Page Up"; 			}
Missing Default,MonoDevelop.Components.Commands,KeyBindingManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingManager.cs,AppleMapKeyToSymbol,The following switch statement is missing a default case: switch (key) { 			case Gdk.Key.Escape: 				return '⎋'; 			case Gdk.Key.Tab: 				return '⇥'; 			case Gdk.Key.Caps_Lock: 				return '⇪'; 			case Gdk.Key.Shift_L: 			case Gdk.Key.Shift_R: 				return '⇧'; 			case Gdk.Key.Control_L: 			case Gdk.Key.Control_R: 				return '⌃'; 			case Gdk.Key.BackSpace: 				return '⌫'; 			case Gdk.Key.Delete: 				return '⌦'; 			case Gdk.Key.Home: 				return '\u2196';    // ↖ 				//return '\u21F1';  // ⇱ 				//return '⇱'; 			case Gdk.Key.End: 				return '\u2198';    // ↘ 				//return '\u21F2';  // ⇲ 				//return '⇲'; 			case Gdk.Key.Page_Up: 				return '⇞'; 			case Gdk.Key.Page_Down: 				return '⇟'; 			case Gdk.Key.Up: 				return '↑'; 			case Gdk.Key.Down: 				return '↓'; 			case Gdk.Key.Left: 				return '←'; 			case Gdk.Key.Right: 				return '→'; 			case Gdk.Key.Clear: 				return '⌧'; 			case Gdk.Key.Num_Lock: 				return '⇭'; 			case Gdk.Key.Return: 				return '⏎'; 			case Gdk.Key.space: 				return '␣'; 			case Gdk.Key.Meta_L: 			case Gdk.Key.Meta_R: 				return '⌘'; 			case Gdk.Key.Alt_L: 			case Gdk.Key.Alt_R: 				return '⌥'; 			}
Missing Default,MonoDevelop.Components.Commands,KeyBindingSet,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Commands\KeyBindingSet.cs,LoadScheme,The following switch statement is missing a default case: switch (reader.LocalName) { 					case "scheme": 						// this is the beginning of the next scheme 						return true; 					case "binding": 						command = reader.GetAttribute (commandAttr); 						binding = reader.GetAttribute (shortcutAttr);  						if (string.IsNullOrEmpty (command)) 							continue;  						if (!string.IsNullOrEmpty (binding)) 							binding = KeyBindingManager.FixChordSeparators (binding);  						string pbind; 						if (parent?.bindings != null && parent.bindings.TryGetValue (command' out pbind)) { 							if (binding == pbind) 								continue; 						} 						 						bindings.Add (command' binding); 						 						break; 					}
Missing Default,MonoDevelop.Ide.Commands,DefaultStringTagProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Commands\CustomStringTagProvider.cs,GetTagValue,The following switch statement is missing a default case: switch (tag) { 				case "FILEPATH": 					if (wb.ActiveDocument != null) 						return !wb.ActiveDocument.IsFile ? String.Empty : wb.ActiveDocument.Name; 					return null;  				case "FILEDIR": 					if (wb.ActiveDocument != null) 						return !wb.ActiveDocument.IsFile ? FilePath.Empty : wb.ActiveDocument.FileName.ParentDirectory; 					return null;  				case "FILENAME": 					if (wb.ActiveDocument != null) 						return !wb.ActiveDocument.IsFile ? String.Empty : wb.ActiveDocument.FileName.FileName; 					return null;  				case "FILENAMEPREFIX": 					if (wb.ActiveDocument != null) 						return !wb.ActiveDocument.IsFile ? String.Empty : wb.ActiveDocument.FileName.FileNameWithoutExtension; 					return null;  				case "FILEEXT": 					if (wb.ActiveDocument != null) 						return !wb.ActiveDocument.IsFile ? String.Empty : wb.ActiveDocument.FileName.Extension; 					return null; 					 				case "CURLINE": {  					if (wb.ActiveDocument?.GetContent<ITextView> (true) is ITextView view) {  						var pos = view.Caret.Position.BufferPosition; 						return pos.Snapshot.GetLineNumberFromPosition (pos.Position) + 1;  					} 					return null; 				} 					 				case "CURCOLUMN": {  					if (wb.ActiveDocument?.GetContent<ITextView> (true) is ITextView view) {  						var pos = view.Caret.Position.BufferPosition; 						var line = pos.Snapshot.GetLineFromPosition (pos.Position); 						return pos.Position - line.Start.Position + 1;  					}  					return null;  				} 					 				case "CUROFFSET": {  					if (wb.ActiveDocument?.GetContent<ITextView> (true) is ITextView view) {  						return view.Caret.Position.BufferPosition.Position;  					}  					return null;  				} 					 				case "CURTEXT": {  					if (wb.ActiveDocument?.GetContent<ITextView> (true) is ITextView view) {  						return view.Selection.IsEmpty? "" : view.Selection.SelectedSpans[0].GetText ();  					} 					return null; 				} 					 				case "EDITORTEXT": {  					if (wb.ActiveDocument?.GetContent<ITextView> (true) is ITextView view) {  						return view.TextBuffer.CurrentSnapshot.GetText ();  					} 					return null; 				} 					 				case "STARTUPPATH": 					return AppDomain.CurrentDomain.BaseDirectory; 					 				case "CONFIGDIR": 					return UserProfile.Current.ConfigDir; 				 				case "DATADIR": 					return UserProfile.Current.UserDataRoot; 				 				case "LOGDIR": 					return UserProfile.Current.LogDir; 			}
Missing Default,MonoDevelop.Ide.TypeSystem,TypeSystemService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\TypeSystemService.cs,OutputTrackingExtensionChanged,The following switch statement is missing a default case: switch (args.Change) { 			case ExtensionChange.Add: 				AddOutputTrackingNode (node); 				break; 			case ExtensionChange.Remove: 				outputTrackedProjects.Remove (node); 				break; 			}
Missing Default,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,Ambience,The following switch statement is missing a default case: switch (args.Change) { 					case ExtensionChange.Add: 						tooltipProviders.Add ((AmbienceTooltipProvider)node.CreateInstance ()); 						break; 					case ExtensionChange.Remove: 						tooltipProviders.Remove ((AmbienceTooltipProvider)node.CreateInstance ()); 						break; 					}
Missing Default,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,BreakLines,The following switch statement is missing a default case: switch (ch) { 				case '<': 					inTag = true; 					break; 				case '>': 					inTag = false; 					break; 				case '&': 					inAmp = true; 					break; 				case ';': 					inAmp = false; 					break; 				case '\n': 					lineLength = 0; 					break; 				case '\r': 					lineLength = 0; 					break; 				}
Missing Default,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,UnescapeText,The following switch statement is missing a default case: switch (entity) { 					case "lt": 						sb.Append ('<'); 						break; 					case "gt": 						sb.Append ('>'); 						break; 					case "amp": 						sb.Append ('&'); 						break; 					case "apos": 						sb.Append ('\''); 						break; 					case "quot": 						sb.Append ('"'); 						break; 					}
Missing Default,MonoDevelop.Ide.TypeSystem,Ambience,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\Ambience.cs,GetDocumentationMarkup,The following switch statement is missing a default case: switch (xml.Name.ToLower ()) { 						case "para": 							ret.Append (options.FormatBody (ParseBody (member' xml' xml.Name' options))); 							if (summaryEnd < 0) 								summaryEnd = ret.Length; 							break; 						case "member": 						case "summary": 							var summary = options.FormatBody (ParseBody (member' xml' xml.Name' options)); 							if (!IsEmptyDocumentation (summary)) { 								//							ret.AppendLine (GetHeading ("Summary:"' options)); 								ret.Append (summary); 								if (summaryEnd < 0) 									summaryEnd = ret.Length; 							} 							break; 						case "remarks": 							if (string.IsNullOrEmpty (options.HighlightParameter)) { 								ret.AppendLine (options.FormatHeading (GettextCatalog.GetString ("Remarks:"))); 								ret.Append (options.FormatBody (ParseBody (member' xml' xml.Name' options))); 								if (summaryEnd < 0) 									summaryEnd = ret.Length; 							} else { 								options.FormatBody (ParseBody (member' xml' xml.Name' options)); 							} 							break; 						// skip <example>-nodes 						case "example": 							xml.Skip (); 							xml.Skip (); 							break; 						case "exception": 							exceptionCount++; 							if (options.SmallText) 								exceptions.Append ("<small>"); 							exceptions.Append ("<b>"); 							exceptions.Append (EscapeText (xml ["cref"])); 							exceptions.Append (": "); 							exceptions.Append ("</b>"); 							if (options.SmallText) 								exceptions.Append ("</small>");  							exceptions.AppendLine (options.FormatBody (ParseBody (member' xml' xml.Name' options))); 							break; 						case "returns": 							if (string.IsNullOrEmpty (options.HighlightParameter)) { 								ret.AppendLine (options.FormatHeading (GettextCatalog.GetString ("Returns:"))); 								ret.Append (options.FormatBody (ParseBody (member' xml' xml.Name' options))); 							} else { 								options.FormatBody (ParseBody (member' xml' xml.Name' options)); 							} 							break; 						case "param": 							string paramName = xml.GetAttribute ("name") != null ? xml ["name"].Trim () : "";  							var body = options.FormatBody (ParseBody (member' xml' xml.Name' options)); 							if (!IsEmptyDocumentation (body)) { 								paramCount++; 								parameterBuilder.Append ("<i>"); 								if (options.HighlightParameter == paramName) 									parameterBuilder.Append ("<b>"); 								if (options.SmallText) 									parameterBuilder.Append ("<small>"); 								parameterBuilder.Append (EscapeText (paramName)); 								if (options.SmallText) 									parameterBuilder.Append ("</small>"); 								if (options.HighlightParameter == paramName) 									parameterBuilder.Append ("</b>"); 								parameterBuilder.Append (":</i> "); 								parameterBuilder.Append (body); 							} else { 								return null; 							} 							break; 						case "value": 							ret.AppendLine (options.FormatHeading (GettextCatalog.GetString ("Value:"))); 							ret.AppendLine (options.FormatBody (ParseBody (member' xml' xml.Name' options))); 							break; 						case "seealso": 							if (string.IsNullOrEmpty (options.HighlightParameter)) { 								ret.Append (options.FormatHeading (GettextCatalog.GetString ("See also:"))); 								ret.Append (" "); 								ret.Append (EscapeText (xml ["cref"])); 								ret.Append (EscapeText (xml ["langword"])); 							} 							break; 						}
Missing Default,MonoDevelop.Ide.TypeSystem,CodeGenerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\CodeGenerator.cs,CodeGenerator,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					AddGenerator (node); 					break; 				case ExtensionChange.Remove: 					RemoveGenerator (node); 					break; 				}
Missing Default,MonoDevelop.Ide.TypeSystem,MonoDocDocumentationProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDocDocumentationProvider.cs,GetDocumentation,The following switch statement is missing a default case: switch (idString[0]) { 				case 'T': 					doc = helpTree.GetHelpXml (idString); 					if (doc == null) 						return null; 					return doc.SelectSingleNode ("/Type/Docs").OuterXml; 				case 'M': 					var openIdx = idString.LastIndexOf ('('); 					var idx = idString.LastIndexOf ('.'' openIdx < 0 ? idString.Length - 1 : openIdx); 					var typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					string memberName; 					if (openIdx < 0) { 						memberName = idString.Substring (idx + 1); 						var xmlNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 						return xmlNode?.OuterXml; 					} 					string parameterString = idString.Substring (openIdx + 1' idString.Length - openIdx - 2); 					var parameterTypes = parameterString.Split (new [] { ''' }' StringSplitOptions.RemoveEmptyEntries); 					memberName = idString.Substring (idx + 1' openIdx - idx - 1); 					foreach (var o in doc.SelectNodes ("/Type/Members/Member[@MemberName='" + memberName + "']")) { 						var curNode = o as XmlElement; 						if (curNode == null) 							continue; 						var paramList = curNode.SelectNodes ("Parameters/*"); 						if (paramList.Count == 0) 							continue; 						if (parameterTypes.Length != paramList.Count) 							continue; 						bool matched = true; 						for (int i = 0; i < parameterTypes.Length; i++) { 							if (!CompareNames (parameterTypes [i]' paramList [i].Attributes ["Type"].Value)) { 								matched = false; 								break; 							} 						} 						if (matched) 							return curNode.SelectSingleNode ("Docs")?.OuterXml; 					} 					return null; 				case 'P': 				case 'F': 				case 'E': 					idx = idString.LastIndexOf ('.'' idString.Length - 1 ); 					typeId = "T:" + idString.Substring (2' idx - 2); 					doc = helpTree.GetHelpXml (typeId); 					if (doc == null) 						return null; 					memberName = idString.Substring (idx + 1); 					var memberNode = doc.SelectSingleNode ("/Type/Members/Member[@MemberName='" + memberName + "']/Docs"); 					return memberNode?.OuterXml; 				}
Missing Default,MonoDevelop.Ide.TypeSystem,NR5CompatibiltyExtensions,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\NR5CompatibiltyExtensions.cs,GetReturnType,The following switch statement is missing a default case: switch (symbol.Kind) { 			case SymbolKind.Field: 				var field = (IFieldSymbol)symbol; 				return field.Type; 			case SymbolKind.Method: 				var method = (IMethodSymbol)symbol; 				if (method.MethodKind == MethodKind.Constructor) 					return method.ContainingType; 				return method.ReturnType; 			case SymbolKind.Property: 				var property = (IPropertySymbol)symbol; 				return property.Type; 			case SymbolKind.Event: 				var evt = (IEventSymbol)symbol; 				return evt.Type; 			case SymbolKind.Parameter: 				var param = (IParameterSymbol)symbol; 				return param.Type; 			case SymbolKind.Local: 				var local = (ILocalSymbol)symbol; 				return local.Type; 			}
Missing Default,MonoDevelop.Ide.TypeSystem,MonoDevelopRuleSetManager,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.TypeSystem\MonoDevelopRuleSetManager.cs,ConvertDiagnostic,The following switch statement is missing a default case: switch (severity) { 			case DiagnosticSeverity.Hidden: 				return ReportDiagnostic.Hidden; 			case DiagnosticSeverity.Info: 				return ReportDiagnostic.Info; 			case DiagnosticSeverity.Warning: 				return ReportDiagnostic.Warn; 			case DiagnosticSeverity.Error: 				return ReportDiagnostic.Error; 			}
Missing Default,MonoDevelop.Ide,MimeTypeCatalog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\MimeTypeCatalog.cs,MimeTypeCatalog,The following switch statement is missing a default case: switch (args.Change) {  					case ExtensionChange.Add:  						// initialize child nodes.  						mimeTypeNode.ChildNodes.GetEnumerator ();  						newList.Add (mimeTypeNode);  						break;  					case ExtensionChange.Remove:  						newList.Remove (mimeTypeNode);  						break;  					}
Missing Default,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,CanJumpToDeclaration,The following switch statement is missing a default case: switch (symbol.Kind) { 			case Microsoft.CodeAnalysis.SymbolKind.Local: 			case Microsoft.CodeAnalysis.SymbolKind.Parameter: 			case Microsoft.CodeAnalysis.SymbolKind.NamedType: 			case Microsoft.CodeAnalysis.SymbolKind.Method: 			case Microsoft.CodeAnalysis.SymbolKind.Field: 			case Microsoft.CodeAnalysis.SymbolKind.Property: 			case Microsoft.CodeAnalysis.SymbolKind.Event: 			case Microsoft.CodeAnalysis.SymbolKind.Label: 			case Microsoft.CodeAnalysis.SymbolKind.TypeParameter: 			case Microsoft.CodeAnalysis.SymbolKind.RangeVariable: 				return true; 			}
Missing Default,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,ShowErrorsPadIfNecessary,The following switch statement is missing a default case: switch (IdeApp.Preferences.ShowErrorPadAfterBuild.Value) { 				case BuildResultStates.Always: 					if (!errorsPad.Visible) 						errorsPad.IsOpenedAutomatically = true; 					errorsPad.Visible = true; 					errorsPad.BringToFront (); 					break; 				case BuildResultStates.OnErrors: 					if (IdeServices.TaskService.Errors.Any (task => task.Severity == TaskSeverity.Error)) 						goto case BuildResultStates.Always; 					break; 				case BuildResultStates.OnErrorsOrWarnings: 					if (IdeServices.TaskService.Errors.Any (task => task.Severity == TaskSeverity.Error || task.Severity == TaskSeverity.Warning)) 						goto case BuildResultStates.Always; 					break; 				}
Missing Default,MonoDevelop.Ide,ProjectOperations,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ProjectOperations.SolutionItemBuildBatch.cs,BuildDone,The following switch statement is missing a default case: switch (IdeApp.Preferences.JumpToFirstErrorOrWarning.Value) { 					case JumpToFirst.Error: 						jumpTask = tasks.FirstOrDefault (t => t.Severity == TaskSeverity.Error && TaskStore.IsProjectTaskFileInternal (t)); 						break; 					case JumpToFirst.ErrorOrWarning: 						jumpTask = tasks.FirstOrDefault (t => (t.Severity == TaskSeverity.Error || t.Severity == TaskSeverity.Warning) && TaskStore.IsProjectTaskFileInternal (t)); 						break; 					}
Missing Default,MonoDevelop.Ide,DocumentList,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui\DocumentSwitcher.cs,OnKeyPressEvent,The following switch statement is missing a default case: switch (accels [0].Key) { 					case Gdk.Key.space: 					case Gdk.Key.KP_Space: 						RightItem (true); 						break; 					case Gdk.Key.Left: 					case Gdk.Key.KP_Left: 						LeftItem (); 						break; 					case Gdk.Key.Right: 					case Gdk.Key.KP_Right: 						RightItem (); 						break; 					case Gdk.Key.Up: 					case Gdk.Key.KP_Up: 						PrevItem (false); 						break; 					case Gdk.Key.Down: 					case Gdk.Key.KP_Down: 						NextItem (false); 						break; 					case Gdk.Key.Tab: 						if ((accels [0].Modifier & ModifierType.ShiftMask) == 0) 							NextItem (true); 						else 							PrevItem (true); 						break; 					case Gdk.Key.Return: 					case Gdk.Key.KP_Enter: 					case Gdk.Key.ISO_Enter: 						OnRequestClose (new RequestActionEventArgs (true)); 						break; 					case Gdk.Key.Escape: 						OnRequestClose (new RequestActionEventArgs (false)); 					break; 				}
Missing Default,MonoDevelop.Ide,RootWorkspace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\RootWorkspace.cs,AllowReload,The following switch statement is missing a default case: switch (prc) { 				case ProjectReloadCapability.None: 					if (hasNoFiles && hasUnsaved) 						msg = GettextCatalog.GetString ("WARNING: Some documents may need to be closed' and unsaved data will be lost. You will be asked to save the unsaved documents."); 					else if (hasNoFiles) 						msg = GettextCatalog.GetString ("WARNING: Some documents may need to be reloaded or closed' and unsaved data will be lost. You will be asked to save the unsaved documents."); 					else if (hasUnsaved) 						msg = GettextCatalog.GetString ("WARNING: Some files may need to be reloaded' and unsaved data will be lost. You will be asked to save the unsaved files."); 					else 						goto case ProjectReloadCapability.UnsavedData; 					break; 					 				case ProjectReloadCapability.UnsavedData: 					msg = GettextCatalog.GetString ("Some files may need to be reloaded' and editing status for those files (such as the undo queue) will be lost."); 					break; 			}
Missing Default,MonoDevelop.Ide,ImageService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide\ImageService.cs,ImageService,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					if (!iconStock.ContainsKey (iconCodon.StockId)) { 						iconStock [iconCodon.StockId] = new List<StockIconCodon> ();  						foreach (var imageId in iconCodon.GetImageIds ()) {  							imageIdToStockId[imageId] = iconCodon.StockId;  						} 					} 					iconStock[iconCodon.StockId].Add (iconCodon); 					break; 				}
Missing Default,MonoDevelop.Ide.Gui,DefaultWorkbench,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Shell\DefaultWorkbench.cs,FilterWindowKeypress,The following switch statement is missing a default case: switch (evnt.Key) { 				case Gdk.Key.KP_1: 				case Gdk.Key.Key_1: 					SwitchToDocument (0); 					return true; 				case Gdk.Key.KP_2: 				case Gdk.Key.Key_2: 					SwitchToDocument (1); 					return true; 				case Gdk.Key.KP_3: 				case Gdk.Key.Key_3: 					SwitchToDocument (2); 					return true; 				case Gdk.Key.KP_4: 				case Gdk.Key.Key_4: 					SwitchToDocument (3); 					return true; 				case Gdk.Key.KP_5: 				case Gdk.Key.Key_5: 					SwitchToDocument (4); 					return true; 				case Gdk.Key.KP_6: 				case Gdk.Key.Key_6: 					SwitchToDocument (5); 					return true; 				case Gdk.Key.KP_7: 				case Gdk.Key.Key_7: 					SwitchToDocument (6); 					return true; 				case Gdk.Key.KP_8: 				case Gdk.Key.Key_8: 					SwitchToDocument (7); 					return true; 				case Gdk.Key.KP_9: 				case Gdk.Key.Key_9: 					SwitchToDocument (8); 					return true; 				case Gdk.Key.KP_0: 				case Gdk.Key.Key_0: 					SwitchToDocument (9); 					return true; 				}
Missing Default,MonoDevelop.Ide.ExternalTools,ExternalToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.ExternalTools\ExternalToolService.cs,LoadTools,The following switch statement is missing a default case: switch (reader.LocalName) { 						case Node: 							string fileVersion = reader.GetAttribute (VersionAttribute); 							if (fileVersion != Version)  								return null; 							break; 						case ExternalTool.Node: 							result.Add (ExternalTool.Read (reader)); 							break; 						}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,FillVariables,The following switch statement is missing a default case: switch (name) { 					case "end": 						result.CaretEndOffset = sb.Length; 						break; 					case "selected": 						if (!string.IsNullOrEmpty (context.SelectedText)) { 							string indent = GetIndent (sb); 							string selection = Reindent (context.SelectedText' indent); 							sb.Append (selection); 						} 						break; 					case "TM_CURRENT_LINE": 						sb.Append (context.Editor.CaretLine); 						break; 					case "TM_CURRENT_WORD": 						sb.Append (""); 						break; 					case "TM_FILENAME": 						sb.Append (context.Editor.FileName); 						break; 					case "TM_FILEPATH": 						sb.Append (Path.GetDirectoryName (context.Editor.FileName)); 						break; 					case "TM_FULLNAME": 						sb.Append (AuthorInformation.Default.Name); 						break; 					case "TM_LINE_INDEX": 						sb.Append (context.Editor.CaretColumn - 1); 						break; 					case "TM_LINE_NUMBER": 						sb.Append (context.Editor.CaretLine); 						break; 					case "TM_SOFT_TABS": 						sb.Append (context.Editor.Options.TabsToSpaces ? "YES" : "NO"); // Note: these strings need no translation. 						break; 					case "TM_TAB_SIZE": 						sb.Append (context.Editor.Options.TabSize); 						break; 					}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) { 				case HeaderNode: 					XmlReadHelper.ReadList (reader' HeaderNode' delegate () { 						switch (reader.LocalName) { 						case GroupNode: 							result.Group = reader.ReadElementContentAsString (); 							return true; 						case VersionNode: 							result.Version = reader.ReadElementContentAsString (); 							return true; 						case MimeNode: 							result.MimeType = reader.ReadElementContentAsString (); 							return true; 						case ContextNode: 							result.CodeTemplateContext = (CodeTemplateContext)Enum.Parse (typeof (CodeTemplateContext)' reader.ReadElementContentAsString ()); 							return true; 						case ShortcutNode: 							result.Shortcut = reader.ReadElementContentAsString (); 							return true; 						case DescriptionNode: 							result.Description = reader.ReadElementContentAsString (); 							return true; 						case TemplateTypeNode: 							result.CodeTemplateType = (CodeTemplateType)Enum.Parse (typeof (CodeTemplateType)' reader.ReadElementContentAsString ()); 							return true; 						} 						return false; 					}); 					return true; 				case VariablesNode: 					XmlReadHelper.ReadList (reader' VariablesNode' delegate () { 						//Console.WriteLine ("var:" + reader.LocalName); 						switch (reader.LocalName) { 						case CodeTemplateVariable.Node: 							var var = CodeTemplateVariable.Read (reader); 							result.variableDecarations [var.Name] = var; 							return true; 						} 						return false; 					}); 					return true; 				case CodeNode: 					result.Code = reader.ReadElementContentAsString (); 					return true; 				}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) { 						case GroupNode: 							result.Group = reader.ReadElementContentAsString (); 							return true; 						case VersionNode: 							result.Version = reader.ReadElementContentAsString (); 							return true; 						case MimeNode: 							result.MimeType = reader.ReadElementContentAsString (); 							return true; 						case ContextNode: 							result.CodeTemplateContext = (CodeTemplateContext)Enum.Parse (typeof (CodeTemplateContext)' reader.ReadElementContentAsString ()); 							return true; 						case ShortcutNode: 							result.Shortcut = reader.ReadElementContentAsString (); 							return true; 						case DescriptionNode: 							result.Description = reader.ReadElementContentAsString (); 							return true; 						case TemplateTypeNode: 							result.CodeTemplateType = (CodeTemplateType)Enum.Parse (typeof (CodeTemplateType)' reader.ReadElementContentAsString ()); 							return true; 						}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplate,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplate.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) { 						case CodeTemplateVariable.Node: 							var var = CodeTemplateVariable.Read (reader); 							result.variableDecarations [var.Name] = var; 							return true; 						}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,CodeTemplateService,The following switch statement is missing a default case: switch (args.Change) { 					case ExtensionChange.Add: 						using (XmlReader reader = codon.Open ()) { 							LoadTemplates (reader).ForEach (t => templates.Add (t)); 						} 						break; 					}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,ConvertVariable,The following switch statement is missing a default case: switch (textmateVariable) { 			case "SELECTION": 			case "TM_SELECTED_TEXT": 				return "$selected$"; 			case "TM_CURRENT_LINE": 			case "TM_CURRENT_WORD": 			case "TM_FILENAME": 			case "TM_FILEPATH": 			case "TM_FULLNAME": 			case "TM_LINE_INDEX": 			case "TM_LINE_NUMBER": 			case "TM_SOFT_TABS": 			case "TM_TAB_SIZE": 				return "$" + textmateVariable + "$"; 			}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplateService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateService.cs,LoadTemplates,The following switch statement is missing a default case: switch (reader.LocalName) { 						case Node: 							string fileVersion = reader.GetAttribute (VersionAttribute); 							if (fileVersion != Version) { 								LoggingService.LogError ($"CodeTemplateService: unsupported fileVersion ({fileVersion})' supported is: {Version}"); 								return result; 							} 							break; 						case CodeTemplate.Node: 							result.Add (CodeTemplate.Read (reader)); 							break; 						}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplateVariable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateVariable.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) { 				case DefaultNode: 					result.Default = reader.ReadElementContentAsString (); 					return true; 				case TooltipNode: 					result.ToolTip = reader.ReadElementContentAsString (); 					return true; 				case ValuesNode: 					XmlReadHelper.ReadList (reader' ValuesNode' delegate () { 						switch (reader.LocalName) { 						case ValueNode: 							string icon = reader.GetAttribute (iconAttribute); 							string val  = reader.ReadElementContentAsString (); 							result.Values.Add (new CodeTemplateVariableValue (val' icon)); 							return true; 						} 						return false; 					}); 					return true; 				case FunctionNode: 					result.Function = reader.ReadElementContentAsString (); 					return true; 				}
Missing Default,MonoDevelop.Ide.CodeTemplates,CodeTemplateVariable,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\CodeTemplateVariable.cs,Read,The following switch statement is missing a default case: switch (reader.LocalName) { 						case ValueNode: 							string icon = reader.GetAttribute (iconAttribute); 							string val  = reader.ReadElementContentAsString (); 							result.Values.Add (new CodeTemplateVariableValue (val' icon)); 							return true; 						}
Missing Default,MonoDevelop.Ide.CodeTemplates,ExpansionObject,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeTemplates\ExpansionObject.cs,RunFunction,The following switch statement is missing a default case: switch (name) { 			case "GetCollections": 				return GetCollections (); 			case "GetCurrentClassName": 				return new CodeTemplateListDataProvider (GetCurrentClassName ()); 			case "GetConstructorModifier": 				return new CodeTemplateListDataProvider (GetConstructorModifier ()); 			case "GetSimpleTypeName": 				return new CodeTemplateListDataProvider (GetSimpleTypeName (match.Groups[2].Value.Trim ('"'))); 			case "GetLengthProperty": 				return new CodeTemplateListDataProvider (GetLengthProperty (callback' match.Groups == null || match.Groups.Count < 3 ? null : match.Groups[2].Value.Trim ('"'))); 			case "GetComponentTypeOf": 				return new CodeTemplateListDataProvider (GetComponentTypeOf (callback' match.Groups[2].Value.Trim ('"'))); 			}
Missing Default,MonoDevelop.Ide.Templates,SolutionDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\SolutionDescriptor.cs,CreateSolutionDescriptor,The following switch statement is missing a default case: switch (xmlNodeElement.Name) {                     case "Project":                         solutionDescriptor.entryDescriptors.Add ( 							ProjectDescriptor.CreateProjectDescriptor (xmlNodeElement' baseDirectory));                         break;                     case "CombineEntry":                     case "SolutionItem":                         solutionDescriptor.entryDescriptors.Add ( 							SolutionItemDescriptor.CreateDescriptor (addin' xmlNodeElement));                         break;                     }
Missing Default,MonoDevelop.Ide.Templates,ClrVersionFileTemplateCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\ClrVersionFileTemplateCondition.cs,ShouldEnableFor,The following switch statement is missing a default case: switch (condition) { 				case ClrVersionCondition.Equal: 					return (pver == clrVersion); 				case ClrVersionCondition.NotEqual: 					return (pver != clrVersion); 				case ClrVersionCondition.GreaterThan: 					return (pver > clrVersion); 				case ClrVersionCondition.GreaterThanOrEqual: 					return (pver >= clrVersion); 				case ClrVersionCondition.LessThan: 					return (pver < clrVersion); 				case ClrVersionCondition.LessThanOrEqual: 					return (pver <= clrVersion);							 				}
Missing Default,MonoDevelop.Ide.Templates,PartialTypeFileTemplateCondition,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\PartialTypeFileTemplateCondition.cs,ShouldEnableFor,The following switch statement is missing a default case: switch (filter) { 			case PartialTypeRequirement.None: 				return true; 			case PartialTypeRequirement.Unsupported: 				return (supported == false); 			case PartialTypeRequirement.Supported: 				return (supported == true); 			case PartialTypeRequirement.Disabled: 				return (enabled == false);	 			case PartialTypeRequirement.Enabled: 				return (enabled == true); 			}
Missing Default,MonoDevelop.Ide.Templates,MicrosoftTemplateEngineProjectTemplatingProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Templates\MicrosoftTemplateEngineProjectTemplatingProvider.cs,ProcessTemplate,The following switch statement is missing a default case: switch (postAction.ActionId.ToString ().ToUpper ()) { 				case "84C0DA21-51C8-4541-9940-6CA19AF04EE6": 					if (postAction.Args.TryGetValue ("files"' out var files)) 						foreach (var fi in files.Split (';')) 							if (int.TryParse (fi.Trim ()' out var i)) 								filesToOpen.Add (Path.Combine (config.ProjectLocation' GetPath (result.ResultInfo.PrimaryOutputs [i]))); 					break; 				case "D396686C-DE0E-4DE6-906D-291CD29FC5DE": 					//TODO: Load project files 					break; 				}
Missing Default,MonoDevelop.Ide.Gui.Content,TextEditorResolverService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\ITextEditorResolver.cs,TextEditorResolverService,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					providers.Add ((TextEditorResolverProviderCodon) args.ExtensionNode); 					break; 				case ExtensionChange.Remove: 					providers.Remove ((TextEditorResolverProviderCodon) args.ExtensionNode); 					break; 				}
Missing Default,MonoDevelop.Ide.Gui.Content,TextStylePolicy,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Content\TextStylePolicy.cs,GetEolMarker,The following switch statement is missing a default case: switch (eolMarker) { 			case EolMarker.Mac: 				return "\r"; 			case EolMarker.Unix: 				return "\n"; 			case EolMarker.Windows: 				return "\r\n"; 			}
Missing Default,MonoDevelop.Ide.Gui.Components,NodeState,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\NodeState.cs,ReadFrom,The following switch statement is missing a default case: switch (reader.LocalName) { 				case "Option": 					if (result.Options == null)  						result.Options = new Dictionary<string' bool> (); 					result.Options [reader.GetAttribute ("id")] = bool.Parse (reader.GetAttribute ("value")); 					return true; 				case "Node": 					if (result.ChildrenState == null) 						result.ChildrenState = new List<NodeState> (); 					result.ChildrenState.Add ((NodeState)ReadFrom (reader)); 					return true; 				}
Missing Default,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,InitSearchWidget,The following switch statement is missing a default case: switch (args.Event.Key) { 				case Gdk.Key.Escape: 					HideSearchBox (); 					break; 				}
Missing Default,MonoDevelop.Ide.Gui.Components,LogView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,InitSearchWidget,The following switch statement is missing a default case: switch (args.Event.Key) { 				case Gdk.Key.Escape: 					HideSearchBox (); 					break; 				}
Missing Default,MonoDevelop.Ide.Gui.Components,LogTextView,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\LogView.cs,TryExtractFileAndLine,The following switch statement is missing a default case: switch (state) { 					case 0: // search line number start 						if (ch == '.') 							state = 1; 						else if (ch >= '0' && ch <= '9') { 							state = 1; 							goto case 1; 						} else if (!char.IsWhiteSpace (ch)) 							return false; 						break; 					case 1: // read line number 						if (ch >= '0' && ch <= '9') { 							line += (ch - '0') * mult; 							mult *= 10; 						} else if (ch == ' ' || char.IsLetter (ch)) { 							state = 2; 						} else if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else 							return false; 						break; 					case 2: // search file name end 						if (ch == ':') { 							state = 3; 							fileNameStart = fileNameEnd = i; 						} else if (ch != ' ' && !char.IsLetter (ch)) 							return false; 						break; 					case 3: // search file name start 						if (ch == ' ') { 							if (lineText [i + 1] == '/' ||  // unix style start 							    (char.IsLetter (lineText [i + 1]) && lineText [i + 2] == ':' && lineText [i + 3] == '\\') // windows style start 							   ) 								fileNameStart = i + 1; 						} 						break; 					}
Missing Default,MonoDevelop.Ide.Gui.Components,XwtInfoBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Components\InfoBar.cs,XwtInfoBar,The following switch statement is missing a default case: switch (item.Kind) 				{ 				case InfoBarItemKind.Button: 					var btn = new InfoBarButton { 						Label = item.Title' 						LabelColor = Styles.NotificationBar.ButtonLabelColor' 						Style = ButtonStyle.Normal'  						MinWidth = 77' 					};  					btn.AddAction (item.Action); 					if (item.CloseAfter) 						btn.AddAction (() => Dispose ()); 					toAdd = btn; 					break; 				// Creates a clickable hyperlink 				case InfoBarItemKind.Hyperlink: 					var link = new InfoBarLink { 						Text = item.Title' 					}; 					link.AddAction (item.Action); 					if (item.CloseAfter) 						link.AddAction (() => Dispose ()); 					toAdd = link; 					break; 				// We only have 1 close button' we attach all close actions to it 				case InfoBarItemKind.Close: 					closeButton.AddAction (item.Action); 					break; 				}
Missing Default,MonoDevelop.Ide.CodeFormatting,CodeFormatterService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeFormatting\CodeFormatterService.cs,FormatterExtHandler,The following switch statement is missing a default case: switch (args.Change) { 			case ExtensionChange.Add: 				nodes.Add ((CodeFormatterExtensionNode) args.ExtensionNode); 				break; 			case ExtensionChange.Remove: 				nodes.Remove ((CodeFormatterExtensionNode) args.ExtensionNode); 				break; 			}
Missing Default,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,HandleScopeChanged,The following switch statement is missing a default case: switch ((SearchScope)comboboxScope.Active) { 			case SearchScope.WholeWorkspace: 				HideDirectoryPathUI (); 				ShowFileMaskUI (); 				break; 			case SearchScope.CurrentProject: 				HideDirectoryPathUI (); 				ShowFileMaskUI (); 				break; 			case SearchScope.AllOpenFiles: 				HideDirectoryPathUI (); 				ShowFileMaskUI (); 				break; 			case SearchScope.Directories: 				ShowDirectoryPathUI (); 				ShowFileMaskUI (); 				break; 			case SearchScope.CurrentDocument: 				HideDirectoryPathUI (); 				HideFileMaskUI (); 				break; 			case SearchScope.Selection: 				HideDirectoryPathUI (); 				HideFileMaskUI (); 				break; 			}
Missing Default,MonoDevelop.Ide.FindInFiles,FindInFilesDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.FindInFiles\FindInFilesDialog.cs,UpdateSensitivity,The following switch statement is missing a default case: switch ((SearchScope)comboboxScope.Active) { 			case SearchScope.WholeWorkspace: 				isSensitive = IdeApp.Workspace.IsOpen; 				break; 			case SearchScope.CurrentProject: 				isSensitive = IdeApp.ProjectOperations.CurrentSelectedProject != null; 				break; 			case SearchScope.AllOpenFiles: 				isSensitive = IdeApp.Workbench.Documents.Count > 0; 				break; 			case SearchScope.Directories: 				isSensitive = true; 				break; 			case SearchScope.CurrentDocument: 				isSensitive = IdeApp.Workbench.ActiveDocument != null; 				break; 			case SearchScope.Selection: 				isSensitive = IdeApp.Workbench.ActiveDocument != null; 				break; 			}
Missing Default,MonoDevelop.Ide.Execution,CustomExecutionModeManagerDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Execution\CustomExecutionModeManagerDialog.cs,Fill,The following switch statement is missing a default case: switch (mode.Scope) { 					case CustomModeScope.Project: scope = GettextCatalog.GetString ("Current project"); break; 					case CustomModeScope.Solution: scope = GettextCatalog.GetString ("Current solution"); break; 					case CustomModeScope.Global: scope = GettextCatalog.GetString ("All solutions"); break; 				}
Missing Default,MonoDevelop.Ide.CustomTools,CustomToolService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CustomTools\CustomToolService.cs,CustomToolService,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					if (nodes.ContainsKey (node.Name)) 						LoggingService.LogError ("Duplicate custom tool name '{0}'"' node.Name); 					else 						nodes.Add (node.Name' node); 					break; 				case ExtensionChange.Remove: 					nodes.Remove (node.Name); 					break; 				}
Missing Default,MonoDevelop.Components,FixedWidthWrapLabel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\FixedWidthWrapLabel.cs,breakText,The following switch statement is missing a default case: switch (c) { 					case '<': 						inMarkup = true; 						sb.Append (c); 						continue; 					case '>': 						inMarkup = false; 						sb.Append (c); 						continue; 					case '&': 						inEntity = true; 						sb.Append (c); 						continue; 					case ';': 						if (inEntity) { 							inEntity = false; 							sb.Append (c); 							continue; 						} 						break; 					}
Missing Default,MonoDevelop.Components,PathBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PathBar.cs,OnFocused,The following switch statement is missing a default case: switch (direction) { 			case DirectionType.TabForward: 			case DirectionType.Right: 				if (!alreadyHaveFocus) { 					focusedPathIndex = 0; 				} else { 					focusedPathIndex++;  					if (focusedPathIndex >= leftPath.Length + rightPath.Length) { 						ret = false; 					} 				} 				break;  			case DirectionType.TabBackward: 			case DirectionType.Left: 				if (!alreadyHaveFocus) { 					focusedPathIndex = leftPath.Length + rightPath.Length - 1; 				} else { 					focusedPathIndex--;  					if (focusedPathIndex < 0) { 						ret = false; 					} 				} 				break; 			}
Missing Default,MonoDevelop.Components,Tabstrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Tabstrip.cs,OnFocused,The following switch statement is missing a default case: switch (direction) { 			case DirectionType.TabForward: 			case DirectionType.Right: 				do { 					newFocusedTab++; 				} while (newFocusedTab < tabs.Count && !tabs [newFocusedTab].Visible);  				if (newFocusedTab >= tabs.Count) { 					newFocusedTab = -1; 					ret = false; 				} 				break;  			case DirectionType.TabBackward: 			case DirectionType.Left: 				if (newFocusedTab <= -1) { 					newFocusedTab = tabs.Count; 				}  				do { 					newFocusedTab--; 				} while (newFocusedTab >= 0 && !tabs [newFocusedTab].Visible);  				if (newFocusedTab < 0) { 					newFocusedTab = -1; 					ret = false; 				} 				break; 			}
Missing Default,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following switch statement is missing a default case: switch ((PopupPosition)(intPos & 0x0f)) { 			case PopupPosition.Top: 				if (caret.Bottom + request.Height > geometry.Bottom) 					intPos = (intPos & 0xf0) | (int)PopupPosition.Bottom; 				break; 			case PopupPosition.Bottom: 				if (caret.Top - request.Height < geometry.X) 					intPos = (intPos & 0xf0) | (int)PopupPosition.Top; 				break; 			case PopupPosition.Right: 				if (caret.X - request.Width < geometry.X) 					intPos = (intPos & 0xf0) | (int)PopupPosition.Left; 				break; 			case PopupPosition.Left: 				if (caret.Right + request.Width > geometry.Right) 					intPos = (intPos & 0xf0) | (int)PopupPosition.Right; 				break; 			}
Missing Default,MonoDevelop.Components,PopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\PopoverWindow.cs,RepositionWindow,The following switch statement is missing a default case: switch ((PopupPosition)((int)position & 0x0f)) { 			case PopupPosition.Top: 				y = caret.Bottom + 1; 				break; 			case PopupPosition.Bottom: 				y = caret.Y - request.Height; break; 			case PopupPosition.Right: 				x = caret.X - request.Width; break; 			case PopupPosition.Left: 				x = caret.Right + 1; break; 			}
Missing Default,MonoDevelop.Components,TooltipPopoverWindow,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\TooltipPopoverWindow.cs,UpdateLabel,The following switch statement is missing a default case: switch (severity.Value) { 					case TaskSeverity.Information: 					case TaskSeverity.Comment: 						label.TextColor = Styles.PopoverWindow.InformationTextColor; 						label.Accessible.Title = GettextCatalog.GetString ("Information Message"); 						break; 					case TaskSeverity.Error: 						label.TextColor = Styles.PopoverWindow.ErrorTextColor; 						label.Accessible.Title = GettextCatalog.GetString ("Error Message"); 						break; 					case TaskSeverity.Warning: 						label.TextColor = Styles.PopoverWindow.WarningTextColor; 						label.Accessible.Title = GettextCatalog.GetString ("Warning Message"); 						break; 				}
Missing Default,MonoDevelop.Components,GtkWorkarounds,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\GtkWorkarounds.cs,KeysForMod,The following switch statement is missing a default case: switch (mod) { 			case Gdk.ModifierType.ControlMask: 				return new Gdk.Key [] { Gdk.Key.Control_R' Gdk.Key.Control_L }; 			case Gdk.ModifierType.Mod1Mask: 				return new Gdk.Key [] { Gdk.Key.Alt_R' Gdk.Key.Alt_L }; 			case Gdk.ModifierType.ShiftMask: 				return new Gdk.Key [] { Gdk.Key.Shift_R' Gdk.Key.Shift_L }; 			case Gdk.ModifierType.MetaMask: 				// Just in case we get both of the modifiers 			case Gdk.ModifierType.Mod2Mask | Gdk.ModifierType.MetaMask: 				return new Gdk.Key [] { Gdk.Key.Meta_R' Gdk.Key.Meta_L }; 			}
Missing Default,MonoDevelop.Components,InformationPopoverWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InformationPopoverWidget.cs,GetSeverityIcon,The following switch statement is missing a default case: switch (severity) { 			case TaskSeverity.Error: 				return ImageService.GetIcon ("md-error"' Gtk.IconSize.Menu); 			case TaskSeverity.Warning: 				return ImageService.GetIcon ("md-warning"' Gtk.IconSize.Menu); 			}
Missing Default,MonoDevelop.Components,InformationPopoverWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\InformationPopoverWidget.cs,GetAccessibilityDescription,The following switch statement is missing a default case: switch (severity) { 			case TaskSeverity.Error: 				return GettextCatalog.GetString ("Error Icon"); 			case TaskSeverity.Warning: 				return GettextCatalog.GetString ("Warning Icon"); 			}
Missing Default,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,RepositionWindow,The following switch statement is missing a default case: switch ((PopupPosition)(intPos & 0x0f)) { 				case PopupPosition.Top: 					if (currentRect.Bottom + request.Height > geometry.Bottom) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Bottom; 					break; 				case PopupPosition.Bottom: 					if (currentRect.Top - request.Height < geometry.Y) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Top; 					break; 				case PopupPosition.Right: 					if (currentRect.X - request.Width < geometry.X) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Left; 					break; 				case PopupPosition.Left: 					if (currentRect.Right + request.Width > geometry.Right) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Right; 					break; 				}
Missing Default,MonoDevelop.Components,XwtPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtPopup.cs,RepositionWindow,The following switch statement is missing a default case: switch ((PopupPosition)((int)position & 0x0f)) { 			case PopupPosition.Top: 				y = currentRect.Bottom + 1; 				break; 			case PopupPosition.Bottom: 				y = currentRect.Y - request.Height; break; 			case PopupPosition.Right: 				x = currentRect.X - request.Width; break; 			case PopupPosition.Left: 				x = currentRect.Right + 1; break; 			}
Missing Default,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following switch statement is missing a default case: switch ((PopupPosition)(intPos & 0x0f)) { 				case PopupPosition.Top: 					if (currentRect.Bottom + request.Height > geometry.Bottom) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Bottom; 					break; 				case PopupPosition.Bottom: 					if (currentRect.Top - request.Height < geometry.Y) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Top; 					break; 				case PopupPosition.Right: 					if (currentRect.X - request.Width < geometry.X) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Left; 					break; 				case PopupPosition.Left: 					if (currentRect.Right + request.Width > geometry.Right) 						intPos = (intPos & 0xf0) | (int)PopupPosition.Right; 					break; 				}
Missing Default,MonoDevelop.Components,XwtThemedPopup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components\Xwt\XwtThemedPopup.cs,RepositionWindow,The following switch statement is missing a default case: switch ((PopupPosition)((int)position & 0x0f)) { 			case PopupPosition.Top: 				y = currentRect.Bottom + 1; 				break; 			case PopupPosition.Bottom: 				y = currentRect.Y - request.Height; break; 			case PopupPosition.Right: 				x = currentRect.X - request.Width; break; 			case PopupPosition.Left: 				x = currentRect.Right + 1; break; 			}
Missing Default,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MoveNext,The following switch statement is missing a default case: switch (scale) { 				case 0: current = current.AddSeconds (1); break; 				case 1: current = current.AddSeconds (15); break; 				case 2: current = current.AddMinutes (1); break; 				case 3: current = current.AddMinutes (15); break; 				case 4: current = current.AddHours (1); break; 				case 5: current = current.AddDays (1); break; 				case 6: current = current.AddMonths (1); break; 				case 7: current = current.AddYears (1); break; 			}
Missing Default,MonoDevelop.Components.Chart,DateTimeTickEnumerator,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Chart\DateTimeAxis.cs,MovePrevious,The following switch statement is missing a default case: switch (scale) { 				case 0: current = current.AddSeconds (-1); break; 				case 1: current = current.AddSeconds (-15); break; 				case 2: current = current.AddMinutes (-1); break; 				case 3: current = current.AddMinutes (-15); break; 				case 4: current = current.AddHours (-1); break; 				case 5: current = current.AddDays (-1); break; 				case 6: current = current.AddMonths (-1); break; 				case 7: current = current.AddYears (-1); break; 			}
Missing Default,MonoDevelop.Components.Theming,GtkColors,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Theming\GtkColors.cs,RefreshColors,The following switch statement is missing a default case: switch ((GtkColorClass)c) { 						case GtkColorClass.Light: 							color = widget.Style.LightColors[s]; 							break; 						case GtkColorClass.Mid: 							color = widget.Style.MidColors[s]; 							break; 						case GtkColorClass.Dark: 							color = widget.Style.DarkColors[s]; 							break; 						case GtkColorClass.Base: 							color = widget.Style.BaseColors[s]; 							break; 						case GtkColorClass.Text: 							color = widget.Style.TextColors[s]; 							break; 						case GtkColorClass.Background: 							color = widget.Style.Backgrounds[s]; 							break; 						case GtkColorClass.Foreground: 							color = widget.Style.Foregrounds[s]; 							break; 						}
Missing Default,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,The following switch statement is missing a default case: switch (pos) { 			case PositionType.Left: cframe.SetMargins (0' 0' 1' 1); break; 			case PositionType.Right: cframe.SetMargins (0' 0' 1' 1); break; 			case PositionType.Top: cframe.SetMargins (1' 1' 0' 0); break; 			case PositionType.Bottom: cframe.SetMargins (1' 1' 0' 0); break; 			}
Missing Default,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,AutoHideBox,The following switch statement is missing a default case: switch (pos) { 				case PositionType.Left: cframe.SetPadding (0' 0' 0' 4); gripSize = 4; break; 				case PositionType.Right: cframe.SetPadding (0' 0' 4' 0); gripSize = 4; break; 				}
Missing Default,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateShow,The following switch statement is missing a default case: switch (position) { 			case PositionType.Left: 				Width += 1 + (targetSize - Width) / 3; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Right: 				Width += 1 + (targetSize - Width) / 3; 				X = - Width; 				if (Width < targetSize) 					return true; 				break; 			case PositionType.Top: 				Height += 1 + (targetSize - Height) / 3; 				if (Height < targetSize) 					return true; 				break; 			case PositionType.Bottom: 				Height += 1 + (targetSize - Height) / 3; 				Y = - Height; 				if (Height < targetSize) 					return true; 				break; 			}
Missing Default,MonoDevelop.Components.Docking,AutoHideBox,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,RunAnimateHide,The following switch statement is missing a default case: switch (position) { 			case PositionType.Left: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					return true; 				} 				break; 			} 			case PositionType.Right: { 				int ns = Width - 1 - Width / 3; 				if (ns > 0) { 					Width = ns; 					X = - ns; 					return true; 				} 				break; 			} 			case PositionType.Top: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					return true; 				} 				break; 			} 			case PositionType.Bottom: { 				int ns = Height - 1 - Height / 3; 				if (ns > 0) { 					Height = ns; 					Y = - ns; 					return true; 				} 				break; 			} 			}
Missing Default,MonoDevelop.Components.Docking,ScrollableContainer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\AutoHideBox.cs,OnSizeAllocated,The following switch statement is missing a default case: switch (expandPos) { 				case PositionType.Bottom: 					alloc = new Rectangle (alloc.X' alloc.Y' alloc.Width' targetSize); 					break; 				case PositionType.Top: 					alloc = new Rectangle (alloc.X' alloc.Y - targetSize + alloc.Height' alloc.Width' targetSize); 					break; 				case PositionType.Right: 					alloc = new Rectangle (alloc.X' alloc.Y' targetSize' alloc.Height); 					break; 				case PositionType.Left: 					alloc = new Rectangle (alloc.X - targetSize + alloc.Width' alloc.Y' targetSize' alloc.Height); 					break; 				}
Missing Default,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,OnSizeAllocated,The following switch statement is missing a default case: switch (Position) { 				case PositionType.Left: allocation.Width--; break; 				case PositionType.Right: allocation.X++; allocation.Width--; break; 				case PositionType.Top: allocation.Height--; break; 				case PositionType.Bottom: allocation.Y++; allocation.Height--; break; 				}
Missing Default,MonoDevelop.Components.Docking,DockBar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockBar.cs,OnExposeEvent,The following switch statement is missing a default case: switch (Position) { 					case PositionType.Left:ctx.MoveTo (alloc.X + alloc.Width - 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Right: ctx.MoveTo (alloc.X + 0.5' alloc.Y); ctx.RelLineTo (0' Allocation.Height); break; 					case PositionType.Top: ctx.MoveTo (alloc.X' alloc.Y + alloc.Height + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					case PositionType.Bottom: ctx.MoveTo (alloc.X' alloc.Y + 0.5); ctx.RelLineTo (Allocation.Width' 0); break; 					}
Missing Default,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,ExtractDockBar,The following switch statement is missing a default case: switch (pos) { 				case PositionType.Left: db.OriginalBar = dockBarLeft; dockBarLeft = db; break; 				case PositionType.Top: db.OriginalBar = dockBarTop; dockBarTop = db; break; 				case PositionType.Right: db.OriginalBar = dockBarRight; dockBarRight = db; break; 				case PositionType.Bottom: db.OriginalBar = dockBarBottom; dockBarBottom = db; break; 			}
Missing Default,MonoDevelop.Components.Docking,DockFrame,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockFrame.cs,GetDockBar,The following switch statement is missing a default case: switch (pos) { 				case Gtk.PositionType.Top: return dockBarTop; 				case Gtk.PositionType.Bottom: return dockBarBottom; 				case Gtk.PositionType.Left: return dockBarLeft; 				case Gtk.PositionType.Right: return dockBarRight; 			}
Missing Default,MonoDevelop.Components.Docking,DockGroup,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroup.cs,DrawSeparators,The following switch statement is missing a default case: switch (oper) { 					case DrawSeparatorOperation.CollectAreas: 						if (Frame.ShadedSeparators) 							areasList.Add (new Gdk.Rectangle (x' y' hw' hh)); 						break; 					case DrawSeparatorOperation.Invalidate: 						Frame.Container.QueueDrawArea (x' y' hw' hh); 						break; 					case DrawSeparatorOperation.Draw: 						Frame.Container.GdkWindow.DrawRectangle (hgc' true' x' y' hw' hh); 						break; 					case DrawSeparatorOperation.Allocate: 						Frame.Container.AllocateSplitter (this' n' new Gdk.Rectangle (x' y' hw' hh)); 						break; 					}
Missing Default,MonoDevelop.Components.Docking,DockGroupItem,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockGroupItem.cs,SetBarDocPosition,The following switch statement is missing a default case: switch (barDocPosition) { 						case PositionType.Left: barDocPosition = PositionType.Right; break; 						case PositionType.Right: barDocPosition = PositionType.Left; break; 						case PositionType.Top: barDocPosition = PositionType.Bottom; break; 						case PositionType.Bottom: barDocPosition = PositionType.Top; break; 					}
Missing Default,MonoDevelop.Components.Docking,DockItemToolbar,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemToolbar.cs,UpdateAccessibilityLabel,The following switch statement is missing a default case: switch (position) { 			case DockPositionType.Bottom: 				name = Core.GettextCatalog.GetString ("Bottom {0} pad toolbar"' parentItem.Label); 				break;  			case DockPositionType.Left: 				name = Core.GettextCatalog.GetString ("Left {0} pad toolbar"' parentItem.Label); 				break;  			case DockPositionType.Right: 				name = Core.GettextCatalog.GetString ("Right {0} pad toolbar"' parentItem.Label); 				break;  			case DockPositionType.Top: 				name = Core.GettextCatalog.GetString ("Top {0} pad toolbar"' parentItem.Label); 				break; 			}
Missing Default,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,MoveFocusToWidget,The following switch statement is missing a default case: switch (widget) { 			case FocusWidget.Widget: 				GrabFocus (); 				currentFocus = null; 				return true;  			case FocusWidget.DockButton: 				currentFocus = btnDock; 				return btnDock.ChildFocus (direction);  			case FocusWidget.CloseButton: 				currentFocus = btnClose; 				return btnClose.ChildFocus (direction);  			case FocusWidget.None: 				break; 			}
Missing Default,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (widget) { 			case FocusWidget.CloseButton: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					return FocusWidget.None;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					if (btnDock.Image != null) { 						nextSite = FocusWidget.DockButton; 					} else { 						nextSite = FocusWidget.Widget; 					} 					return nextSite; 				}  				break;  			case FocusWidget.DockButton: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					return btnClose.Image == null ? FocusWidget.None : FocusWidget.CloseButton;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					return FocusWidget.Widget; 				}  				break;  			case FocusWidget.Widget: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					if (btnDock.Image != null) { 						nextSite = FocusWidget.DockButton; 					} else if (btnClose.Image != null) { 						nextSite = FocusWidget.CloseButton; 					} else { 						nextSite = FocusWidget.None; 					} 					return nextSite;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					return FocusWidget.None; 				}  				break; 			case FocusWidget.None: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					return FocusWidget.Widget;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					if (btnClose.Image != null) { 						nextSite = FocusWidget.CloseButton; 					} else if (btnDock.Image != null) { 						nextSite = FocusWidget.DockButton; 					} else { 						nextSite = FocusWidget.Widget; 					} 					return nextSite; 				}  				break; 			}
Missing Default,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					return FocusWidget.None;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					if (btnDock.Image != null) { 						nextSite = FocusWidget.DockButton; 					} else { 						nextSite = FocusWidget.Widget; 					} 					return nextSite; 				}
Missing Default,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					return btnClose.Image == null ? FocusWidget.None : FocusWidget.CloseButton;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					return FocusWidget.Widget; 				}
Missing Default,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					if (btnDock.Image != null) { 						nextSite = FocusWidget.DockButton; 					} else if (btnClose.Image != null) { 						nextSite = FocusWidget.CloseButton; 					} else { 						nextSite = FocusWidget.None; 					} 					return nextSite;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					return FocusWidget.None; 				}
Missing Default,MonoDevelop.Components.Docking,DockItemTitleTab,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.Docking\DockItemTitleTab.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 				case DirectionType.Down: 					return FocusWidget.Widget;  				case DirectionType.TabBackward: 				case DirectionType.Left: 				case DirectionType.Up: 					if (btnClose.Image != null) { 						nextSite = FocusWidget.CloseButton; 					} else if (btnDock.Image != null) { 						nextSite = FocusWidget.DockButton; 					} else { 						nextSite = FocusWidget.Widget; 					} 					return nextSite; 				}
Missing Default,MonoDevelop.Ide.CodeCompletion,RoslynCompletionData,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\RoslynCompletionData.cs,IsCommitCharacter,The following switch statement is missing a default case: switch (rule.Kind) { 				case CharacterSetModificationKind.Add: 					if (rule.Characters.Contains (keyChar)) 						return true; 					continue; 				case CharacterSetModificationKind.Remove: 					if (rule.Characters.Contains (keyChar)) 						return false; 					continue; 				case CharacterSetModificationKind.Replace: 					return rule.Characters.Contains (keyChar); 				}
Missing Default,MonoDevelop.Ide.CodeCompletion,CompletionController,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.CodeCompletion\CompletionController.cs,PostProcessKey,The following switch statement is missing a default case: switch (descriptor.SpecialKey) { 			case SpecialKey.BackSpace: 				ResetSizes (); 				UpdateWordSelection (); 				return KeyActions.Process; 			}
Missing Default,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,SignalRefChange,The following switch statement is missing a default case: switch (refInfo.ReferenceType) { 						case ReferenceType.Package: 							SystemAssembly systemAssembly = store.GetValue(iter' ColAssembly) as SystemAssembly; 							if ((refInfo.Reference == systemAssembly.FullName) && (refInfo.Package == systemAssembly.Package) ) 								found = true; 							break; 						case ReferenceType.Project: 							var path = (FilePath)(string) store.GetValue (iter' ColFullName); 							var project = refInfo.ResolveProject (configureProject.ParentSolution); 							if (project != null && path.CanonicalPath == project.FileName.CanonicalPath) 								found = true; 							break; 						case ReferenceType.Assembly: 							var file = (FilePath)(string) store.GetValue (iter' ColFullName); 							if (file.CanonicalPath == refInfo.HintPath.CanonicalPath) 								found = true; 							break; 						}
Missing Default,MonoDevelop.Ide.Projects,PackageReferencePanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects\PackageReferencePanel.cs,AddReference,The following switch statement is missing a default case: switch (rt) { 				case ReferenceType.Package: 					selectDialog.AddReference (ProjectReference.CreateAssemblyReference ((SystemAssembly)store.GetValue (iter' ColAssembly))); 					break; 				case ReferenceType.Assembly: 					selectDialog.AddReference (ProjectReference.CreateAssemblyFileReference (fullName)); 					break; 				case ReferenceType.Project: 					selectDialog.AddReference (ProjectReference.CreateProjectReference (fullName)); 					break; 				}
Missing Default,MonoDevelop.Ide.Fonts,FontService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Fonts\FontService.cs,OnInitialize,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					fontDescriptions.Add (codon); 					break; 				case ExtensionChange.Remove: 					fontDescriptions.Remove (codon); 					if (loadedFonts.ContainsKey (codon.Name)) 						loadedFonts.Remove (codon.Name); 					break; 				}
Missing Default,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,GetIcon,The following switch statement is missing a default case: switch (icon) { 			case OperationIcon.Stop: 				return State ==  StateType.Insensitive ? iconStopDisabled : iconStopNormal; 			case OperationIcon.Run: 				return State ==  StateType.Insensitive ? iconRunDisabled : iconRunNormal; 			case OperationIcon.Build: 				return State ==  StateType.Insensitive ? iconBuildDisabled : iconBuildNormal; 			}
Missing Default,MonoDevelop.Components.MainToolbar,RoundButton,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoundButton.cs,DrawBackground,The following switch statement is missing a default case: switch (state) { 			case StateType.Insensitive: 				img = btnInactive; break; 			case StateType.Prelight: 				img = btnHover; break; 			case StateType.Selected: 				img = btnPressed; break; 			}
Missing Default,MonoDevelop.Components.MainToolbar,SearchPopupWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupWindow.cs,ProcessKey,The following switch statement is missing a default case: switch (key) { 			case Xwt.Key.Up: 				if (state.HasFlag (Xwt.ModifierKeys.Command)) 					goto case Xwt.Key.PageUp; 				if (state.HasFlag (Xwt.ModifierKeys.Control)) 					SelectFirstCategory (); 				else 					SelectItemUp (); 				return true; 			case Xwt.Key.Down: 				if (state.HasFlag (Xwt.ModifierKeys.Command)) 					goto case Xwt.Key.PageDown; 				if (state.HasFlag (Xwt.ModifierKeys.Control)) 					SelectLastCatgory (); 				else 					SelectItemDown (); 				return true; 			case (Xwt.Key)Gdk.Key.KP_Page_Down: 			case Xwt.Key.PageDown: 				SelectNextCategory (); 				return true; 			case (Xwt.Key)Gdk.Key.KP_Page_Up: 			case Xwt.Key.PageUp: 				SelectPrevCategory (); 				return true; 			case Xwt.Key.Return: 				OnItemActivated (EventArgs.Empty); 				return true; 			}
Missing Default,MonoDevelop.Components.MainToolbar,SearchPopupSearchPattern,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\SearchPopupSearchPattern.cs,ParsePattern,The following switch statement is missing a default case: switch (foundTags) { 			case 1: 				pattern = parts [0]; 				break; 			case 2: 				if (!string.IsNullOrEmpty (parts[1]) && TryParseLineColumn (parts[1]' ref lineNumber' ref column)) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 				} else { 					tag = parts [0]; 					pattern = parts [1]; 				} 				break; 			case 3: 				if (IsNumber (parts [1]) && IsNumber (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'" + parts[2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} else if (IsNumber (parts [1]) && string.IsNullOrEmpty (parts [2])) { 					if (!string.IsNullOrEmpty (parts [0])) 						pattern = parts [0]; 					if (!TryParseLineColumn (parts [1] + "'0"' ref lineNumber' ref column)) 						lineNumber = 0; 				} else { 					tag = parts [0]; 					pattern = parts [1] ?? ""; 					if (!TryParseLineColumn (parts [2]' ref lineNumber' ref column)) 						lineNumber = 0; 				} 				break; 			case 4: 				tag = parts [0]; 				pattern = parts [1]; 				if (!TryParseLineColumn (parts [2] +"'"+parts[3]' ref lineNumber' ref column)) 					lineNumber = 0; 				break; 			}
Missing Default,MonoDevelop.Components.MainToolbar,RoslynSearchCategory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.MainToolbar\RoslynSearchCategory.cs,GetTagKinds,The following switch statement is missing a default case: switch (tag) {  			case "type":  			case "t":  				return typeKinds;  			case "class":  				return classKinds; 			case "struct":  				return structKinds;  			case "interface":  				return interfaceKinds; 			case "delegate":  				return delegateKinds; 			case "member":  			case "m": 				return memberKinds;  			case "method":  				return methodKinds;  			case "property":  				return propertyKinds;  			case "field":  				return fieldKinds;  			case "event":  				return eventKinds;  			}
Missing Default,MonoDevelop.Ide.Editor,TextEditor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditor.cs,TextEditor,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					allProviders.Add (extNode); 					break; 				case ExtensionChange.Remove: 					allProviders.Remove (extNode); 					break; 				}
Missing Default,MonoDevelop.Ide.Editor,TextEditorFactory,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\TextEditorFactory.cs,TextEditorFactory,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					if (currentFactory == null) 						currentFactory = (ITextEditorFactory)args.ExtensionObject; 					break; 				}
Missing Default,MonoDevelop.Ide.Editor,DynamicAbbrevHandler,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor\Commands\DynamicAbbrevHandler.cs,Run,The following switch statement is missing a default case: switch (curState) { 			case AbbrevState.SearchBackward: 				while (offset > 0) { 					if (IsMatchAt (editor' offset' abbrevWord)) { 						int endOffset = SearchEndPos (offset' editor); 						string curWord = editor.GetTextBetween (offset' endOffset); 						if (foundWords.Contains (curWord)) { 							offset--; 							continue; 						} 						foundWords.Add (curWord); 						ReplaceWord (editor' curWord); 						lastStartOffset = offset - 1; 						return; 					} 					offset--; 				} 				offset = editor.CaretOffset; 				curState = AbbrevState.SearchForward; 				goto case AbbrevState.SearchForward; 			case AbbrevState.SearchForward: 				while (offset < editor.Length) { 					if (IsMatchAt (editor' offset' abbrevWord)) { 						int endOffset = SearchEndPos (offset' editor); 						string curWord = editor.GetTextBetween (offset' endOffset); 						if (foundWords.Contains (curWord)) { 							offset++; 							continue; 						} 						foundWords.Add (curWord); 						ReplaceWord (editor' curWord); 						lastStartOffset = offset + 1; 						return; 					} 					offset++; 				} 				curState = AbbrevState.SearchOtherBuffers; 				goto case AbbrevState.SearchOtherBuffers; 			case AbbrevState.SearchOtherBuffers: 				foreach (Document curDoc in IdeApp.Workbench.Documents) { 					var otherView = curDoc.GetContent<TextEditor> (); 					if (curDoc == doc || otherView == null) 						continue; 					for (int i = 0; i < otherView.Length; i++) { 						if (IsMatchAt (otherView' i' abbrevWord)) { 							int endOffset = SearchEndPos (i' otherView); 							string curWord = otherView.GetTextBetween (i' endOffset); 							if (foundWords.Contains (curWord)) 								continue; 							foundWords.Add (curWord); 						} 					} 				} 				curState = AbbrevState.CycleThroughFoundWords; 				goto case AbbrevState.CycleThroughFoundWords; 			case AbbrevState.CycleThroughFoundWords: 				int index = foundWords.IndexOf (editor.GetTextAt (lastInsertPos' editor.CaretOffset - lastInsertPos)); 				if (index < 0) 					break; 				startOffset = offset; 				offset = startOffset + foundWords[index].Length; 				index = (index + foundWords.Count + 1) % foundWords.Count; 				ReplaceWord (editor' foundWords[index]); 				break; 			}
Missing Default,MonoDevelop.Ide.Editor.Extension,KeyDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\KeyDescriptor.cs,ConvertKey,The following switch statement is missing a default case: switch (key) { 			case Xwt.Key.BackSpace: 				return SpecialKey.BackSpace; 			case Xwt.Key.Tab: 			case Xwt.Key.NumPadTab: 				return SpecialKey.Tab; 			case Xwt.Key.Return: 			case Xwt.Key.NumPadEnter: 				return SpecialKey.Return; 			case Xwt.Key.Escape: 				return SpecialKey.Escape; 			case Xwt.Key.Space: 			case Xwt.Key.NumPadSpace: 				return SpecialKey.Space; 			case Xwt.Key.PageUp: 				return SpecialKey.PageUp; 			case Xwt.Key.PageDown: 				return SpecialKey.PageDown; 			case Xwt.Key.End: 			case Xwt.Key.NumPadEnd: 				return SpecialKey.End; 			case Xwt.Key.Home: 			case Xwt.Key.NumPadHome: 				return SpecialKey.Home; 			case Xwt.Key.Left: 			case Xwt.Key.NumPadLeft: 				return SpecialKey.Left; 			case Xwt.Key.Up: 			case Xwt.Key.NumPadUp: 				return SpecialKey.Up; 			case Xwt.Key.Right: 			case Xwt.Key.NumPadRight: 				return SpecialKey.Right; 			case Xwt.Key.Down: 			case Xwt.Key.NumPadDown: 				return SpecialKey.Down; 			case Xwt.Key.Delete: 			case Xwt.Key.NumPadDelete: 				return SpecialKey.Delete; 			}
Missing Default,MonoDevelop.Ide.Editor.Extension,KeyDescriptor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\KeyDescriptor.cs,ConvertKey,The following switch statement is missing a default case: switch (key) { 			case Gdk.Key.BackSpace: 				return SpecialKey.BackSpace; 			case Gdk.Key.Tab: 			case Gdk.Key.KP_Tab: 			case Gdk.Key.ISO_Left_Tab: 				return SpecialKey.Tab; 			case Gdk.Key.Return: 			case Gdk.Key.KP_Enter: 			case Gdk.Key.ISO_Enter: 				return SpecialKey.Return; 			case Gdk.Key.Escape: 				return SpecialKey.Escape; 			case Gdk.Key.space: 			case Gdk.Key.KP_Space: 				return SpecialKey.Space; 			case Gdk.Key.Page_Up: 			case Gdk.Key.KP_Page_Up: 				return SpecialKey.PageUp; 			case Gdk.Key.Page_Down: 			case Gdk.Key.KP_Page_Down: 				return SpecialKey.PageDown; 			case Gdk.Key.End: 			case Gdk.Key.KP_End: 				return SpecialKey.End; 			case Gdk.Key.Home: 			case Gdk.Key.KP_Home: 				return SpecialKey.Home; 			case Gdk.Key.Left: 			case Gdk.Key.KP_Left: 				return SpecialKey.Left; 			case Gdk.Key.Up: 			case Gdk.Key.KP_Up: 				return SpecialKey.Up; 			case Gdk.Key.Right: 			case Gdk.Key.KP_Right: 				return SpecialKey.Right; 			case Gdk.Key.Down: 			case Gdk.Key.KP_Down: 				return SpecialKey.Down; 			case Gdk.Key.Delete: 			case Gdk.Key.KP_Delete: 				return SpecialKey.Delete; 			}
Missing Default,MonoDevelop.Ide.Editor.Extension,BraceMatcherTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\BraceMatcherTextEditorExtension.cs,BraceMatcherTextEditorExtension,The following switch statement is missing a default case: switch (args.Change) { 				case ExtensionChange.Add: 					var matcher = (AbstractBraceMatcher)node.CreateInstance (); 					matcher.MimeType = node.MimeType; 					braceMatcher.Add (matcher); 					break; 				case ExtensionChange.Remove: 					var toRemove = braceMatcher.FirstOrDefault (m => m.MimeType == node.MimeType); 					if (toRemove != null) 						braceMatcher.Remove (toRemove); 					break; 				}
Missing Default,MonoDevelop.Ide.Editor.Extension,FoldingTextEditorExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Extension\FoldingTextEditorExtension.cs,UpdateFoldings,The following switch statement is missing a default case: switch (region.Type) { 						case FoldType.Member: 							type = FoldingType.TypeMember; 							break; 						case FoldType.Type: 							type = FoldingType.TypeDefinition; 							break; 						case FoldType.UserRegion: 							type = FoldingType.Region; 							setFolded = DefaultSourceEditorOptions.Instance.DefaultRegionsFolding; 							folded = true; 							break; 						case FoldType.Comment: 							type = FoldingType.Comment; 							setFolded = DefaultSourceEditorOptions.Instance.DefaultCommentFolding; 							folded = true; 							break; 						case FoldType.CommentInsideMember: 							type = FoldingType.Comment; 							setFolded = DefaultSourceEditorOptions.Instance.DefaultCommentFolding; 							folded = false; 							break; 						case FoldType.Undefined: 							setFolded = true; 							folded = region.IsFoldedByDefault; 							break; 						}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,LoadFile,The following switch statement is missing a default case: switch (format) { 						case JSonFormat.OldSyntaxTheme: 							var oldThemeProvider = AbstractThemeProvider.CreateProvider (EditorThemeFormat.XamarinStudio' styleName' getStreamProvider); 							bundle.Add (oldThemeProvider); 							return oldThemeProvider; 						case JSonFormat.TextMateJsonSyntax:  							var syntaxProvider = AbstractSyntaxHighlightingDefinitionProvider.CreateProvider (SyntaxHighlightingDefinitionFormat.TextMateJson' styleName' scopeName' fileTypes' getStreamProvider);  							bundle.Add (syntaxProvider); 							return syntaxProvider; 						}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,SyntaxHighlightingService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\SyntaxHighlightingService.cs,AddStyle,The following switch statement is missing a default case: switch (format) { 					case JSonFormat.OldSyntaxTheme: 						var oldThemeProvider = AbstractThemeProvider.CreateProvider (EditorThemeFormat.XamarinStudio' styleName' () => provider); 						builtInBundle.Add (oldThemeProvider); 						break; 					case JSonFormat.TextMateJsonSyntax:  						var syntaxProvider = AbstractSyntaxHighlightingDefinitionProvider.CreateProvider (SyntaxHighlightingDefinitionFormat.TextMateJson' styleName' scopeName' fileTypes' () => provider);  						builtInBundle.Add (syntaxProvider); 						break; 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadInteger,The following switch statement is missing a default case: switch (CurrentType) { 					case PlistType.integer: 						return ReadBigEndianInteger ((int)Math.Pow (2' currentLength)); 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadReal,The following switch statement is missing a default case: switch (CurrentType) { 					case PlistType.real: 						switch (bytes.Length) { 						case 4: 							return (double)BitConverter.ToSingle (bytes' 0); 						case 8: 							return BitConverter.ToDouble (bytes' 0); 						} 						throw new NotSupportedException (bytes.Length + "-byte real"); 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadReal,The following switch statement is missing a default case: switch (bytes.Length) { 						case 4: 							return (double)BitConverter.ToSingle (bytes' 0); 						case 8: 							return BitConverter.ToDouble (bytes' 0); 						}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadString,The following switch statement is missing a default case: switch (CurrentType) { 					case PlistType.@string: // ASCII 						bytes = new byte [currentLength]; 						stream.Read (bytes' 0' bytes.Length); 						return Encoding.ASCII.GetString (bytes); 					case PlistType.wideString: //CFBinaryPList.c: Unicode string...big-endian 2-byte uint16_t 						bytes = new byte [currentLength * 2]; 						stream.Read (bytes' 0' bytes.Length); 						return Encoding.BigEndianUnicode.GetString (bytes); 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianInteger,The following switch statement is missing a default case: switch (numBytes) { 					case 1: 						return (long)bytes [0]; 					case 2: 						return (long)BitConverter.ToInt16 (bytes' 0); 					case 4: 						return (long)BitConverter.ToInt32 (bytes' 0); 					case 8: 						return BitConverter.ToInt64 (bytes' 0); 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadBigEndianUInteger,The following switch statement is missing a default case: switch (numBytes) { 					case 1: 						return (ulong)bytes [0]; 					case 2: 						return (ulong)BitConverter.ToUInt16 (bytes' 0); 					case 4: 						return (ulong)BitConverter.ToUInt32 (bytes' 0); 					case 8: 						return BitConverter.ToUInt64 (bytes' 0); 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Context,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,MakeObjectRefs,The following switch statement is missing a default case: switch (pobj.Type) {  						case PObjectType.Array: 							foreach (var child in (PArray)obj) 								MakeObjectRefs (child' ref count); 							break; 						case PObjectType.Dictionary: 							foreach (var child in (PDictionary)obj) 								MakeObjectRefs (child.Key' ref count); 							foreach (var child in (PDictionary)obj) 								MakeObjectRefs (child.Value' ref count); 							break; 						}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,ReadWriteContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,ReadObject,The following switch statement is missing a default case: switch (CurrentType) { 				case PlistType.@true: 				case PlistType.@false: 					return new PBoolean (ReadBool ()); 				case PlistType.fill: 					ReadObjectHead (); 					return ReadObject ();  				case PlistType.integer: 					return new PNumber ((int)ReadInteger ()); //FIXME: should PNumber handle 64-bit values? ReadInteger can if necessary 				case PlistType.real: 					return new PReal (ReadReal ());    //FIXME: we should probably make PNumber take floating point as well as ints  				case PlistType.date: 					return new PDate (ReadDate ()); 				case PlistType.data: 					return new PData (ReadData ());  				case PlistType.@string: 				case PlistType.wideString: 					return new PString (ReadString ());  				case PlistType.array: 					var array = new PArray (); 					ReadArray (array); 					return array;  				case PlistType.dict: 					var dict = new PDictionary (); 					ReadDict (dict); 					return dict; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,ReadWriteContext,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\PObject.cs,WriteObject,The following switch statement is missing a default case: switch (value.Type) { 				case PObjectType.Boolean: 					Write ((PBoolean)value); 					return; 				case PObjectType.Number: 					Write ((PNumber)value); 					return; 				case PObjectType.Real: 					Write ((PReal)value); 					return; 				case PObjectType.Date: 					Write ((PDate)value); 					return; 				case PObjectType.Data: 					Write ((PData)value); 					return; 				case PObjectType.String: 					Write ((PString)value); 					return; 				case PObjectType.Array: 					Write ((PArray)value); 					return; 				case PObjectType.Dictionary: 					Write ((PDictionary)value); 					return; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadHighlighting,The following switch statement is missing a default case: switch (((YamlScalarNode)entry.Key).Value) { 				case "variables": 					foreach (var captureEntry in ((YamlMappingNode)entry.Value).Children) { 						variables [((YamlScalarNode)captureEntry.Key).Value] = ((YamlScalarNode)captureEntry.Value).Value; 					} 					break; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadHighlighting,The following switch statement is missing a default case: switch (((YamlScalarNode)entry.Key).Value) { 				case "name": 					name = ((YamlScalarNode)entry.Value).Value; 					break; 				case "file_extensions": 					foreach (var nn in entry.Value.AllNodes.OfType<YamlScalarNode> ()) { 						extensions.Add ("." + nn.Value); 					} 					break; 				case "scope": 					scope = ((YamlScalarNode)entry.Value).Value; 					break; 				case "hidden": 					try { 						hidden = bool.Parse (((YamlScalarNode)entry.Value).Value); 					} catch (Exception e) { 						LoggingService.LogError ("Error while parsing hidden flag of " + name' e); 					} 					break; 				case "first_line_match": 					firstLineMatch = CompileRegex (((YamlScalarNode)entry.Value).Value); 					break; 				case "contexts": 					foreach (var contextMapping in ((YamlMappingNode)entry.Value).Children) { 						contexts.Add (ReadContext (contextMapping' variables)); 					} 					break; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadMatch,The following switch statement is missing a default case: switch (((YamlScalarNode)entry.Key).Value) { 				case "match": 					match = CompileRegex (ReplaceVariables (((YamlScalarNode)entry.Value).Value' variables)); 					break; 				case "scope": 					ParseScopes (scope' ((YamlScalarNode)entry.Value).Value); 					break; 				case "captures": 					foreach (var captureEntry in ((YamlMappingNode)entry.Value).Children) { 						captures.Add ( 							Tuple.Create ( 								int.Parse (((YamlScalarNode)captureEntry.Key).Value)' 								((YamlScalarNode)captureEntry.Value).Value 							) 						); 					} 					break; 				case "push": 					push = ReadContextReference (entry.Value' variables); 					break; 				case "with_prototype": 					withPrototype = ReadContextReference (entry.Value' variables); 					break; 				case "pop": 					// according to the spec the only accepted value 					pop = true; 					break; 				case "set": 					set = ReadContextReference (entry.Value' variables); 					break; 				case "syntax": 					// ? 					break; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,CompileRegex,The following switch statement is missing a default case: switch (ch) { 				case '+': 					if (readPlusQuantifier) 						continue; 					if (readStarQuantifier) { 						continue; 					} 					readPlusQuantifier = true; 					break; 				case '*': 					if (readStarQuantifier) 						continue; 					if (curClass != null) 						break; 					if (readPlusQuantifier && result.Length > 0) { 						result.Length--; 						if (!recordGroupName && groupStack.Count > 0 && groupStack.Peek ().groupContent.Length > 0) { 							groupStack.Peek ().groupContent.Length--; 						} 					}  					readStarQuantifier = true; 					break; 				case '\\': 					if (curClass != null) { 						escape = !escape; 						goto addChar; 					} 					if (escape) 						break; 					if (i + 1 >= regex.Length) 						break; 					var next = regex [i + 1]; 					if (next == 'h') { 						result.Append ("[0-9a-fA-F]"); 						i++; 						continue; 					} 					if (next == 'H') { 						result.Append ("[^0-9a-fA-F]"); 						i++; 						continue; 					} 					if (next == 'p') { 						i++; 						readCharacterProperty = true; 						readCharPropertyIdentifier = false; 						continue; 					} 					if (next == 'g') { 						i++; 						replaceGroup = true; 						readGroupName = true; 						continue; 					} 					escape = true; 					goto addChar; 				case '(': 					if (escape) 						break; 					groupStack.Push (new Group(groupNumber.ToString ())); 					groupNumber++; 					skipRecordChar = true; 					break; 				case '>': 					recordGroupName = false; 					if (replaceGroup) { 						result.Append ("\\k<"); 						result.Append (curGroupName.ToString ()); 						result.Append (">");  						replaceGroup = false; 						curGroupName.Length = 0; 						continue; 					} 					if (groupStack.Count > 0) 						groupStack.Peek ().Id = curGroupName.ToString (); 					skipRecordChar = true; 					curGroupName.Length = 0; 					break; 				case '<': 					if (readGroupName) { 						readGroupName = false; 						var nextChar = regex [i + 1]; 						if (nextChar == '=' || nextChar == '!') { 							replaceGroup = false; 							break; 						} 						recordGroupName = true; 					} 					break; 				case '?': 					if (curClass != null) 						break; 					if (groupStack.Count > 0 && result[result.Length - 1] == '(') { 						readGroupName = true; 						groupNumber--; 						skipRecordChar = true; 					} 					if (i + 1 >= regex.Length) 						break; 					next = regex [i + 1]; 					if (next == '+' || next == '*') { 						result.Append ("*"); 						i++; 						continue; 					} 					break; 				case ')': 					if (escape) 						break; 					if (groupStack.Count > 0) 						groups.Add (groupStack.Pop ()); 					break; 				case '[': 					if (escape) 						break; 					characterClassLevel++; 					if (curClass == null) { 						curClass = new CharacterClass (); 						continue; 					} 					break; 				case ']': 					if (escape) 						break; 					if (characterClassLevel > 0) { 						characterClassLevel--; 						if (characterClassLevel == 0) { 							var cg = curClass.Generate (); 							result.Append (cg); 							if (!recordGroupName && groupStack.Count > 0) 								groupStack.Peek ().groupContent.Append (cg); 							curClass = null; 							continue; 						} 					} 					break; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,Sublime3Format,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\Formats\Sublime3Format.cs,ReadSnippet,The following switch statement is missing a default case: switch (reader.LocalName) { 					case "content": 						if (reader.Read ()) 							content = reader.Value; 						break; 					case "tabTrigger": 						if (reader.Read ()) 							tabTrigger = reader.Value; 						break; 					case "scope": 						if (reader.Read ()) 							scopes.Add (StackMatchExpression.Parse (reader.Value)); 						break; 					case "description": 						if (reader.Read ()) 							name = reader.Value; 						break; 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,StackMatchExpression,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\StackMatchExpression.cs,Parse,The following switch statement is missing a default case: switch (ch) { 				case ' ': 					if (sb.Length > 0) 						exprStack.Push (CreateMatchExpression (sb)); 					lastChar = ch; 					continue; 				case '(': 					stackStack.Push (exprStack); 					exprStack = new Stack<StackMatchExpression> (); 					lastChar = ch; 					continue; 				case ')': 					if (sb.Length > 0) 						exprStack.Push (CreateMatchExpression (sb)); 					ShrinkStack (exprStack); 					var newStack = stackStack.Pop (); 					newStack.Push (exprStack.Peek ()); 					exprStack = newStack; 					lastChar = ch; 					continue; 				case ''': 				case '|': 					if (sb.Length > 0) 						exprStack.Push (CreateMatchExpression (sb)); 					ShrinkStack (exprStack); 					exprStack.Push (new OrExpression (exprStack.Pop ())); ; 					lastChar = ch; 					continue; 				case '-': 					if (lastChar != ' ') 						break; 					if (sb.Length > 0) 						exprStack.Push (CreateMatchExpression (sb)); 					ShrinkStack (exprStack); 					exprStack.Push (new MinusExpression (exprStack.Pop ())); ; 					lastChar = ch; 					continue; 				}
Missing Default,MonoDevelop.Ide.Editor.Highlighting,VisualStudioThemeProvider,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\IEditorThemeProvider.cs,LoadTheme,The following switch statement is missing a default case: switch (e.Reason) { 					case StyleImportException.ImportFailReason.Unknown: 						LoggingService.LogWarning ("Unknown error in theme file : " + file' e); 						break; 					case StyleImportException.ImportFailReason.NoValidColorsFound: 						LoggingService.LogWarning ("No colors defined in vssettings : " + file' e); 						break; 					}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,MoveFocusToWidget,The following switch statement is missing a default case: switch (widget) { 			case FocusWidget.BackButton: 				currentFocus = PreviousButton; 				return PreviousButton.ChildFocus (direction);  			case FocusWidget.NextButton: 				currentFocus = NextButton; 				return NextButton.ChildFocus (direction);  			case FocusWidget.MenuButton: 				currentFocus = DropDownButton; 				return DropDownButton.ChildFocus (direction);  			case FocusWidget.Tabs: 			case FocusWidget.TabCloseButton: 				GrabFocus (); 				currentFocus = null; 				QueueDraw (); 				return true;  			case FocusWidget.None: 				break; 			}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (widget) { 			case FocusWidget.BackButton: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (notebook.Tabs.Count > 0) { 						currentFocusTab = 0; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					return FocusWidget.None; 				} 				break;  			case FocusWidget.NextButton: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (notebook.Tabs.Count > 0) { 						currentFocusTab = 0; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					} else { 						return FocusWidget.None; 					} 				} 				break;  			case FocusWidget.Tabs: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					currentFocusCloseButton = true; 					return FocusWidget.TabCloseButton; 					/* 					if (currentFocusTab < notebook.Tabs.Count - 1) { 						currentFocusTab++; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					} 					*/  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (currentFocusTab > 0) { 						currentFocusTab--; 						currentFocusCloseButton = true; 						return FocusWidget.TabCloseButton; 					} else if (NextButton.Sensitive && NextButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.NextButton; 					} else if (PreviousButton.Sensitive && PreviousButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.BackButton; 					} else { 						currentFocusTab = -1; 						return FocusWidget.None; 					} 				} 				break;  			case FocusWidget.TabCloseButton: 				currentFocusCloseButton = false; 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (currentFocusTab < notebook.Tabs.Count - 1) { 						currentFocusTab++; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					return FocusWidget.Tabs; 				} 				break;  			case FocusWidget.MenuButton: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					return FocusWidget.None;  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (notebook.Tabs.Count > 0) { 						currentFocusTab = notebook.Tabs.Count - 1; 						currentFocusCloseButton = true; 						return FocusWidget.TabCloseButton; 					} else if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					} else { 						return FocusWidget.None; 					} 				} 				break;  			case FocusWidget.None: 				switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					}else if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (notebook.Tabs.Count > 0) { 						currentFocusTab = 0; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else if (notebook.Tabs.Count > 0) { 						currentFocusTab = notebook.Tabs.Count - 1; 						currentFocusCloseButton = true; 						return FocusWidget.TabCloseButton; 					} else if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					} else { 						return FocusWidget.None; 					} 				} 				break; 			}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (notebook.Tabs.Count > 0) { 						currentFocusTab = 0; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					return FocusWidget.None; 				}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (notebook.Tabs.Count > 0) { 						currentFocusTab = 0; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					} else { 						return FocusWidget.None; 					} 				}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					currentFocusCloseButton = true; 					return FocusWidget.TabCloseButton; 					/* 					if (currentFocusTab < notebook.Tabs.Count - 1) { 						currentFocusTab++; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					} 					*/  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (currentFocusTab > 0) { 						currentFocusTab--; 						currentFocusCloseButton = true; 						return FocusWidget.TabCloseButton; 					} else if (NextButton.Sensitive && NextButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.NextButton; 					} else if (PreviousButton.Sensitive && PreviousButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.BackButton; 					} else { 						currentFocusTab = -1; 						return FocusWidget.None; 					} 				}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (currentFocusTab < notebook.Tabs.Count - 1) { 						currentFocusTab++; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						currentFocusTab = -1; 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					return FocusWidget.Tabs; 				}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					return FocusWidget.None;  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (notebook.Tabs.Count > 0) { 						currentFocusTab = notebook.Tabs.Count - 1; 						currentFocusCloseButton = true; 						return FocusWidget.TabCloseButton; 					} else if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					} else { 						return FocusWidget.None; 					} 				}
Missing Default,MonoDevelop.Components.DockNotebook,TabStrip,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Components.DockNotebook\TabStrip.cs,GetNextWidgetToFocus,The following switch statement is missing a default case: switch (direction) { 				case DirectionType.TabForward: 				case DirectionType.Right: 					if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					}else if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (notebook.Tabs.Count > 0) { 						currentFocusTab = 0; 						return FocusWidget.Tabs; 					} else if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else { 						return FocusWidget.None; 					}  				case DirectionType.TabBackward: 				case DirectionType.Left: 					if (DropDownButton.Sensitive && DropDownButton.Visible) { 						return FocusWidget.MenuButton; 					} else if (notebook.Tabs.Count > 0) { 						currentFocusTab = notebook.Tabs.Count - 1; 						currentFocusCloseButton = true; 						return FocusWidget.TabCloseButton; 					} else if (NextButton.Sensitive && NextButton.Visible) { 						return FocusWidget.NextButton; 					} else if (PreviousButton.Sensitive && PreviousButton.Visible) { 						return FocusWidget.BackButton; 					} else { 						return FocusWidget.None; 					} 				}
Missing Default,MonoDevelop.Ide.Editor.Util,SimpleReadonlyDocument,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Util\SimpleReadonlyDocument.cs,NextDelimiter,The following switch statement is missing a default case: switch (*p) { 					case NewLine.CR: 						char* nextp = p + 1; 						if (nextp < endPtr && *nextp == NewLine.LF) 							return new Delimiter ((int)(p - start)' UnicodeNewline.CRLF); 						return new Delimiter ((int)(p - start)' UnicodeNewline.CR); 					case NewLine.LF: 						return new Delimiter ((int)(p - start)' UnicodeNewline.LF); 					case NewLine.NEL: 						return new Delimiter ((int)(p - start)' UnicodeNewline.NEL); 					//case NewLine.VT: 					//	return new Delimiter ((int)(p - start)' UnicodeNewline.VT); 					//case NewLine.FF: 					//	return new Delimiter ((int)(p - start)' UnicodeNewline.FF); 					case NewLine.LS: 						return new Delimiter ((int)(p - start)' UnicodeNewline.LS); 					case NewLine.PS: 						return new Delimiter ((int)(p - start)' UnicodeNewline.PS); 					}
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexCharClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexCharClass.cs,AddLowercaseRange,The following switch statement is missing a default case: switch (lc._lcOp) {                     case LowercaseSet:                         chMinT = (char)lc._data;                         chMaxT = (char)lc._data;                         break;                     case LowercaseAdd:                         chMinT += (char)lc._data;                         chMaxT += (char)lc._data;                         break;                     case LowercaseBor:                         chMinT |= (char)1;                         chMaxT |= (char)1;                         break;                     case LowercaseBad:                         chMinT += (char)(chMinT & 1);                         chMaxT += (char)(chMaxT & 1);                         break;                 }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,Escape,The following switch statement is missing a default case: switch (ch) {                             case '\n':                                 ch = 'n';                                 break;                             case '\r':                                 ch = 'r';                                 break;                             case '\t':                                 ch = 't';                                 break;                             case '\f':                                 ch = 'f';                                 break;                         }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,ScanDollar,The following switch statement is missing a default case: switch (ch) {                     case '$':                         MoveRight();                         return new RegexNode(RegexNode.One' _options' '$');                      case '&':                         capnum = 0;                         break;                      case '`':                         capnum = RegexReplacement.LeftPortion;                         break;                      case '\'':                         capnum = RegexReplacement.RightPortion;                         break;                      case '+':                         capnum = RegexReplacement.LastGroup;                         break;                      case '_':                         capnum = RegexReplacement.WholeString;                         break;                 }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexParser,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexParser.cs,CountCaptures,The following switch statement is missing a default case: switch (ch) {                     case '\\':                         if (CharsRight() > 0)                             MoveRight();                         break;                      case '#':                         if (UseOptionX()) {                             MoveLeft();                             ScanBlank();                         }                         break;                      case '[':                         ScanCharClass(false' true);                         break;                      case ')':                         if (!EmptyOptionsStack())                             PopOptions();                         break;                      case '(':                         if (CharsRight() >= 2 && RightChar(1) == '#' && RightChar() == '?') {                             MoveLeft();                             ScanBlank();                         }                          else {                                                          PushOptions();                             if (CharsRight() > 0 && RightChar() == '?') {                                 // we have (?...                                 MoveRight();                                  if (CharsRight() > 1 && (RightChar() == '<' || RightChar() == '\'')) {                                     // named group: (?<... or (?'...                                      MoveRight();                                     ch = RightChar();                                      if (ch != '0' && RegexCharClass.IsWordChar(ch)) {                                         //if (_ignoreNextParen)                                          //    throw MakeException("");                                         if (ch >= '1' && ch <= '9')                                              NoteCaptureSlot(ScanDecimal()' pos);                                         else                                              NoteCaptureName(ScanCapname()' pos);                                     }                                 }                                 else {                                     // (?...                                      // get the options if it's an option construct (?cimsx-cimsx...)                                     ScanOptions();                                      if (CharsRight() > 0) {                                         if (RightChar() == ')') {                                             // (?cimsx-cimsx)                                             MoveRight();                                             PopKeepOptions();                                         }                                         else if (RightChar() == '(') {                                             // alternation construct: (?(foo)yes|no)                                             // ignore the next paren so we don't capture the condition                                             _ignoreNextParen = true;                                              // break from here so we don't reset _ignoreNextParen                                             break;                                         }                                     }                                 }                             }                             else {                                 if (!UseOptionN() && !_ignoreNextParen)                                     NoteCaptureSlot(_autocap++' pos);                             }                         }                          _ignoreNextParen = false;                         break;                 }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,ReplacementImpl,The following switch statement is missing a default case: switch (-Specials - 1 - r) { // special insertion patterns                         case LeftPortion:                             sb.Append(match.GetLeftSubstring());                             break;                         case RightPortion:                             sb.Append(match.GetRightSubstring());                             break;                         case LastGroup:                             sb.Append(match.LastGroupToStringImpl());                             break;                         case WholeString:                             sb.Append(match.GetOriginalString());                             break;                     }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexReplacement,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexReplacement.cs,ReplacementImplRTL,The following switch statement is missing a default case: switch (-Specials - 1 - r) { // special insertion patterns                         case LeftPortion: 						al.Add(match.GetLeftSubstring().ToString ());                             break;                         case RightPortion: 						al.Add(match.GetRightSubstring().ToString ());                             break;                         case LastGroup:                             al.Add(match.LastGroupToStringImpl());                             break;                         case WholeString: 						al.Add(match.GetOriginalString().ToString ());                             break;                     }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following switch statement is missing a default case: switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             Emit(RegexCode.Testref' MapCapnum(node._m));                             Emit(RegexCode.Forejump);                             break;                     }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following switch statement is missing a default case: switch (CurIndex) {                         case 0: {                                 int Branchpos = PopInt();                                 PushInt(CurPos());                                 Emit(RegexCode.Goto' 0);                                 PatchJump(Branchpos' CurPos());                                 Emit(RegexCode.Forejump);                                 if (node._children.Count > 1)                                     break;                                 // else fallthrough                                 goto case 1;                             }                         case 1:                             PatchJump(PopInt()' CurPos());                             break;                     }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following switch statement is missing a default case: switch (CurIndex) {                         case 0:                             Emit(RegexCode.Setjump);                             Emit(RegexCode.Setmark);                             PushInt(CurPos());                             Emit(RegexCode.Lazybranch' 0);                             break;                     }
Missing Default,MonoDevelop.Ide.Editor.Highlighting.RegexEngine,RegexWriter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Editor.Highlighting\RegexEngine\RegexWriter.cs,EmitFragment,The following switch statement is missing a default case: switch (CurIndex) {                         case 0:                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                             break;                         case 1:                              int Branchpos = PopInt();                             PushInt(CurPos());                             Emit(RegexCode.Goto' 0);                             PatchJump(Branchpos' CurPos());                             Emit(RegexCode.Getmark);                             Emit(RegexCode.Forejump);                              if (node._children.Count > 2)                                 break;                             // else fallthrough                             goto case 2;                         case 2:                             PatchJump(PopInt()' CurPos());                             break;                     }
Missing Default,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleControllerPropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) { 				case nameof (Controller.Title): Dialog.Title = Controller.Title; break; 				// FIXME: Gtk dialogs don't support ThemedImage 				//case nameof (Controller.Icon): Dialog.Icon = Controller.Icon.WithSize (IconSize.Large); break; 				case nameof (Controller.CurrentPage): CurrentPage = Controller.CurrentPage; break; 				case nameof (Controller.CanGoBack): backButton.Visible = Controller.CanGoBack; break; 				case nameof (Controller.RightSideWidget): Reallocate (); break; 				case nameof (Controller.DefaultPageSize): Reallocate (); break; 			}
Missing Default,MonoDevelop.Ide.Gui.Wizard,WizardDialog,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Gui.Wizard\WizardDialog.cs,HandleCurrentPagePropertyChanged,The following switch statement is missing a default case: switch (e.PropertyName) { 			case nameof (CurrentPage.PageTitle): header.Title = !string.IsNullOrEmpty (currentPage.PageTitle) ? currentPage.PageTitle : Controller.Title; break; 			case nameof (CurrentPage.PageSubtitle): header.Subtitle = currentPage.PageSubtitle; break; 			case nameof (CurrentPage.PageIcon): header.Image = currentPage.PageIcon ?? Controller.Icon; break; 			case nameof (CurrentPage.NextButtonLabel): 				if (!string.IsNullOrEmpty (currentPage.NextButtonLabel)) 					nextButton.Label = currentPage.NextButtonLabel; 				else 					nextButton.Label = Controller.CurrentPageIsLast ? GettextCatalog.GetString ("Finish") : GettextCatalog.GetString ("Next"); 				break; 			case nameof (CurrentPage.CanGoNext): nextButton.Sensitive = currentPage.CanGoNext; break; 			case nameof (CurrentPage.CanGoBack): backButton.Sensitive = currentPage.CanGoBack; break; 			}
Missing Default,MonoDevelop.Ide.BuildOutputView,BuildOutputProgressMonitor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutput.cs,OnWriteLogObject,The following switch statement is missing a default case: switch (logObject) { 			case BuildSessionStartedEvent pspe: 				if (File.Exists (pspe.LogFile)) { 					binlogSessions [pspe.SessionId] = pspe.LogFile; 				} else { 					currentCustomProject = new BuildOutputProcessor (pspe.LogFile' false); 					currentCustomProject.AddNode (BuildOutputNodeType.Project' 					                              GettextCatalog.GetString ("Custom project")' 					                              GettextCatalog.GetString ("Custom project started building")' 					                              true' pspe.TimeStamp); 				}  				BuildOutput.RaiseProjectStarted (); 				break; 			case BuildSessionFinishedEvent psfe: 				if (currentCustomProject != null) { 					currentCustomProject.EndCurrentNode (null' psfe.TimeStamp); 					BuildOutput.AddProcessor (currentCustomProject); 					currentCustomProject = null; 				} else if (binlogSessions.TryGetValue (psfe.SessionId' out string logFile)) { 					BuildOutput.Load (logFile' true); 					binlogSessions.Remove (psfe.SessionId); 				}  				BuildOutput.RaiseProjectFinished (); 				BuildOutput.RaiseOutputChanged (); 				break; 			}
Missing Default,MonoDevelop.Ide.BuildOutputView,MSBuildOutputProcessor,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\MSBuildOutputProcessor.cs,ProcessMessageEvent,The following switch statement is missing a default case: switch (e.Message[0]) { 			case 'S': 				if (e.Message.StartsWith (SkippingTargetMessagePrefix' StringComparison.Ordinal)) { 					// "Skipping target ..." messages 					if (e.Message [SkippingTargetMessagePrefix.Length] == '"') { 						int nextQuoteIndex = e.Message.IndexOf ('"'' SkippingTargetMessagePrefix.Length + 1); 						if (nextQuoteIndex >= 0) { 							if (processor.CurrentNode.NodeType == BuildOutputNodeType.Target && 							    e.Message.IndexOf (processor.CurrentNode.Message' 							                       SkippingTargetMessagePrefix.Length + 1' 							                       nextQuoteIndex - 1 - SkippingTargetMessagePrefix.Length' 							                       StringComparison.Ordinal) == SkippingTargetMessagePrefix.Length + 1) { 								processor.CurrentNode.NodeType = BuildOutputNodeType.TargetSkipped; 								return; 							} 						} 					} 				} 				break; 			case 'T': 				if (e.Message.StartsWith (TaskParameterMessagePrefix' StringComparison.Ordinal)) { 					// Task parameters are added to a special folder 					if (ProcessTaskParameter (processor' e' stringPool)) { 						return; 					} 				} else if (e.Message.StartsWith (TargetMessagePrefix' StringComparison.Ordinal)) { 					// "Target ... skipped" messages 					int nextQuoteIndex = e.Message.IndexOf ('"'' TargetMessagePrefix.Length + 1); 					if (nextQuoteIndex >= 0) { 						if (e.Message.IndexOf (SkippedSuffix' nextQuoteIndex + 1' SkippedSuffix.Length' StringComparison.Ordinal) == nextQuoteIndex + 1) { 							processor.AddNode (BuildOutputNodeType.TargetSkipped' 							                   stringPool.Add (e.Message' TargetMessagePrefix.Length' nextQuoteIndex - TargetMessagePrefix.Length)' 							                   stringPool.Add (e.Message)' 							                   false' 							                   e.Timestamp); 							return; 						} 					} 				} 				break; 			}
Missing Default,MonoDevelop.Ide.BuildOutputView,BuildOutputNode,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.BuildOutputView\BuildOutputNode.cs,GetImage,The following switch statement is missing a default case: switch (NodeType) { 			case BuildOutputNodeType.Build: 				return Resources.BuildIcon; 			case BuildOutputNodeType.BuildSummary: 				return HasErrors ? Resources.TaskFailedIcon : Resources.TargetIcon; 			case BuildOutputNodeType.Error: 				return Resources.ErrorIconSmall; 			case BuildOutputNodeType.Parameters: 				return Resources.FolderIcon; 			case BuildOutputNodeType.Project: 				return Resources.ProjectIcon; 			case BuildOutputNodeType.Target: 			case BuildOutputNodeType.TargetSkipped: 				return Resources.TargetIcon; 			case BuildOutputNodeType.Task: 				return HasErrors ? Resources.TaskFailedIcon : Resources.TaskSuccessIcon; 			case BuildOutputNodeType.Warning: 				return Resources.WarningIconSmall; 			}
Missing Default,MonoDevelop.Ide.RoslynServices,MonoDevelopNotificationService,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\MonoDevelopNotificationServiceFactory.cs,GetSeverityIcon,The following switch statement is missing a default case: switch (severity) 				{ 				case NotificationSeverity.Error: 					return Gui.Stock.Error; 				case NotificationSeverity.Information: 					return Gui.Stock.Information; 				case NotificationSeverity.Warning: 					return Gui.Stock.Warning; 				}
Missing Default,MonoDevelop.Ide.RoslynServices,RoslynLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.RoslynServices\RoslynLogger.cs,IsEnabled,The following switch statement is missing a default case: switch (functionId) { 			case FunctionId.BKTree_ExceptionInCacheRead: 			case FunctionId.StorageDatabase_Exceptions: 			case FunctionId.SymbolTreeInfo_ExceptionInCacheRead: 			case FunctionId.Extension_Exception: 				return true; 			}
Missing Default,MonoDevelop.Ide.Projects.FileNesting,NestingRule,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Ide\MonoDevelop.Ide.Projects.FileNesting\NestingRule.cs,GetParentFile,The following switch statement is missing a default case: switch (Kind) { 			case NestingRuleKind.AddedExtension: 				// This is the simplest rules' and applies to all files' if we find a file 				// with the same name minus the extension' that's the parent. 				parentFile = inDirectory.Combine (inputFile.FilePath.FileNameWithoutExtension); 				return CheckParentForFile (inputFile' parentFile' inDirectory);  			case NestingRuleKind.AllExtensions: 				if (AppliesTo == AllFilesWildcard || AppliesTo == inputExtension) { 					foreach (var pt in patterns) { 						parentFile = inDirectory.Combine ($"{Path.GetFileNameWithoutExtension (inputFile.FilePath)}{pt}"); 						var parent = CheckParentForFile (inputFile' parentFile' inDirectory); 						if (parent != null) 							return parent; 					} 				} 				break;  			case NestingRuleKind.ExtensionToExtension: 				if (inputExtension == AppliesTo) { 					foreach (var pt in patterns) { 						parentFile = inDirectory.Combine ($"{Path.GetFileNameWithoutExtension (inputFile.FilePath)}{pt}"); 						var parent = CheckParentForFile (inputFile' parentFile' inDirectory); 						if (parent != null) 							return parent; 					} 				} 				break;  			case NestingRuleKind.FileSuffixToExtension: 				string inputFileString = inputFile.FilePath; 				if (inputFileString.EndsWith (AppliesTo' StringComparison.OrdinalIgnoreCase)) { 					int suffixPosition = inputFileString.Length - AppliesTo.Length; 					foreach (var pt in patterns) { 						parentFile = inputFileString.Remove (suffixPosition' AppliesTo.Length).Insert (suffixPosition' pt); 						var parent = CheckParentForFile (inputFile' parentFile' inDirectory); 						if (parent != null) 							return parent; 					} 				} 				break;  			case NestingRuleKind.FileToFile: 				if (AppliesTo == Path.GetFileName (inputFile.FilePath)) { 					foreach (var pt in patterns) { 						parentFile = inDirectory.Combine (pt); 						var parent = CheckParentForFile (inputFile' parentFile' inDirectory); 						if (parent != null) 							return parent; 					} 				} 				break;  			case NestingRuleKind.PathSegment: 				if (AppliesTo == AllFilesWildcard || AppliesTo == inputExtension) { 					foreach (var pt in patterns) { 						// Search for $filename.$extension for $filename.$path_segment.$extension 						parentFile = inDirectory.Combine ($"{Path.GetFileNameWithoutExtension (Path.GetFileNameWithoutExtension (inputFile.FilePath))}{inputExtension}"); 						var parent = CheckParentForFile (inputFile' parentFile' inDirectory); 						if (parent != null) 							return parent; 					} 				} 				break;  			}
