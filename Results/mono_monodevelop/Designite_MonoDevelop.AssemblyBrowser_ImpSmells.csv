Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AssemblyBrowserWidget,The method has 132 lines of code.
Complex Method,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SkipChildren,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,FormatText,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,OutputNode,Cyclomatic complexity of the method is 21
Complex Method,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,TransformDocumentation,Cyclomatic complexity of the method is 10
Complex Method,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AddProject,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.AssemblyBrowser,HelpExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\HelpExtensions.cs,GetMonodocDocumentation,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.AssemblyBrowser,SearchIdleRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.SearchIdleRunner.cs,DoFillStep,Cyclomatic complexity of the method is 33
Complex Method,MonoDevelop.AssemblyBrowser,ICSharpCodeStringFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\ICSharpCodeStringFormatter.cs,GetDisplayString,Cyclomatic complexity of the method is 8
Long Parameter List,MonoDevelop.AssemblyBrowser,MethodDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\MethodDefinitionNodeBuilder.cs,DecompileAsync,The method has 5 parameters. Parameters: data' assemblyLoader' decompile' settings' flags
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserDisplayBinding,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\DisplayBinding.cs,GetSupportedControllers,The length of the statement  "			if (modelDescriptor is AssemblyBrowserDescriptor || (modelDescriptor is FileDescriptor file && (file.FilePath.HasExtension (".dll") || file.FilePath.HasExtension (".exe"))))" is 173.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserDisplayBinding,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\DisplayBinding.cs,GetSupportedControllers,The length of the statement  "				yield return new DocumentControllerDescription (GettextCatalog.GetString ("Assembly Browser")' true' DocumentControllerRole.Tool);" is 130.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SkipChildren,The length of the statement  "			if (type != null && helpUrl.IndexOf (type.FullName' startIndex' Math.Min (endIndex - startIndex' type.FullName.Length)' StringComparison.Ordinal) == -1)" is 152.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SkipChildren,The length of the statement  "			if (@namespace != null && helpUrl.IndexOf (@namespace.Name' startIndex' Math.Min (endIndex - startIndex' @namespace.Name.Length)' StringComparison.Ordinal) == -1)" is 162.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SetReferencedSegments,The length of the statement  "				// FIXME: ILSpy sometimes gives reference segments for punctuation. See http://bugzilla.xamarin.com/show_bug.cgi?id=2918" is 120.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SetReferencedSegments,The length of the statement  "				var marker = TextMarkerFactory.CreateLinkMarker (inspectEditor' seg.Offset' seg.Length' delegate (LinkRequest request) {" is 120.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SetReferencedSegments,The length of the statement  "						// args.Button == 2 || (args.Button == 1 && (args.ModifierState & Gdk.ModifierType.ShiftMask) == Gdk.ModifierType.ShiftMask)" is 124.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AddReferenceByAssemblyName,The length of the statement  "			string assemblyFile = Runtime.SystemAssemblyService.DefaultAssemblyContext.GetAssemblyLocation (assemblyFullName' null);" is 120.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AddReferenceByFileName,The length of the statement  "						LoggingService.LogInfo ("AssemblyBrowser: Loaded duplicate assembly : " + fullName); // Write a log info in case that happens' shouldn't happen often." is 150.
Long Statement,MonoDevelop.AssemblyBrowser,DocumentationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\DocumentationPanel.cs,OnExposeEvent,The length of the statement  "			win.DrawRectangle (Style.BaseGC (string.IsNullOrEmpty (Markup) ? StateType.Insensitive : StateType.Normal)' true' evnt.Area);" is 125.
Long Statement,MonoDevelop.AssemblyBrowser,ColoredCSharpFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\ColoredCSharpFormatter.cs,WriteLocalReference,The length of the statement  "			ReferencedSegments.Add (new ReferenceSegment (sb.Length' text.Length' reference) { IsLocal = true' IsLocalTarget = isLocalTarget });" is 132.
Long Statement,MonoDevelop.AssemblyBrowser,ColoredCSharpFormatter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\ColoredCSharpFormatter.cs,MarkFoldEnd,The length of the statement  "			var seg = FoldSegmentFactory.CreateFoldSegment (doc' curFold.Item1' sb.Length - curFold.Item1' curFold.Item3' curFold.Item2);" is 125.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyReferenceFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\AssemblyReferenceFolderNodeBuilder.cs,BuildChildNodes,The length of the statement  "					//	ctx.AddChild (new Error (MonoDevelop.Core.GettextCatalog.GetString ("Error while loading:") + assemblyNameReference.FullName + "/" + e.Message)); " is 148.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyBrowserViewContent,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserViewContent.cs,OnTryReuseDocument,The length of the statement  "			if (modelDescriptor is FileDescriptor file && (file.FilePath.HasExtension (".dll") || file.FilePath.HasExtension (".exe"))) {" is 125.
Long Statement,MonoDevelop.AssemblyBrowser,HelpExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\HelpExtensions.cs,GetMonodocDocumentation,The length of the statement  "				var helpXml = IdeServices.HelpService.HelpTree != null ? IdeServices.HelpService.HelpTree.GetHelpXml (IdStringProvider.GetIdString (member)) : null;" is 148.
Long Statement,MonoDevelop.AssemblyBrowser,HelpExtension,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\HelpExtensions.cs,GetMonodocDocumentation,The length of the statement  "			var declaringXml = IdeServices.HelpService.HelpTree != null && member.DeclaringTypeDefinition != null ? IdeServices.HelpService.HelpTree.GetHelpXml (member.DeclaringTypeDefinition.GetIdString ()) : null;" is 203.
Long Statement,MonoDevelop.AssemblyBrowser,EventDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\EventDefinitionNodeBuilder.cs,DisassembleAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DisassembleAsync (data' rd => rd.DisassembleEvent (evt.ParentModule.PEFile' (System.Reflection.Metadata.EventDefinitionHandle)evt.MetadataToken));" is 181.
Long Statement,MonoDevelop.AssemblyBrowser,EventDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\EventDefinitionNodeBuilder.cs,DecompileAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DecompileAsync (data' MethodDefinitionNodeBuilder.GetAssemblyLoader (navigator)' b => b.Decompile (evt.MetadataToken)' flags: flags);" is 168.
Long Statement,MonoDevelop.AssemblyBrowser,FieldDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\FieldDefinitionNodeBuilder.cs,DisassembleAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DisassembleAsync (data' rd => rd.DisassembleField (field.ParentModule.PEFile' (System.Reflection.Metadata.FieldDefinitionHandle)field.MetadataToken));" is 185.
Long Statement,MonoDevelop.AssemblyBrowser,FieldDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\FieldDefinitionNodeBuilder.cs,DecompileAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DecompileAsync (data' MethodDefinitionNodeBuilder.GetAssemblyLoader (navigator)' b => b.Decompile (field.MetadataToken)' flags: flags);" is 170.
Long Statement,MonoDevelop.AssemblyBrowser,MethodDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\MethodDefinitionNodeBuilder.cs,GetDecompilerSettings,The length of the statement  "			var codePolicy = MonoDevelop.Projects.Policies.PolicyService.GetDefaultPolicy<MonoDevelop.CSharp.Formatting.CSharpFormattingPolicy> (types);" is 140.
Long Statement,MonoDevelop.AssemblyBrowser,MethodDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\MethodDefinitionNodeBuilder.cs,DecompileAsync,The length of the statement  "						TokenWriter tokenWriter = new TextTokenWriter (output' settings' csharpDecompiler.TypeSystem) { FoldBraces = settings.FoldBraces };" is 131.
Long Statement,MonoDevelop.AssemblyBrowser,MethodDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\MethodDefinitionNodeBuilder.cs,DecompileAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DecompileAsync (data' MethodDefinitionNodeBuilder.GetAssemblyLoader (navigator)' b => b.Decompile (cecilMethod.MetadataToken)' flags: flags);" is 176.
Long Statement,MonoDevelop.AssemblyBrowser,MethodDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\MethodDefinitionNodeBuilder.cs,DisassembleAsync,The length of the statement  "			return DisassembleAsync (data' rd => rd.DisassembleMethod (cecilMethod.ParentModule.PEFile' (System.Reflection.Metadata.MethodDefinitionHandle)cecilMethod.MetadataToken));" is 171.
Long Statement,MonoDevelop.AssemblyBrowser,PropertyDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\PropertyDefinitionNodeBuilder.cs,DisassembleAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DisassembleAsync (data' rd => rd.DisassembleProperty (property.ParentModule.PEFile' (System.Reflection.Metadata.PropertyDefinitionHandle)property.MetadataToken));" is 197.
Long Statement,MonoDevelop.AssemblyBrowser,PropertyDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\PropertyDefinitionNodeBuilder.cs,DecompileAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DecompileAsync (data' MethodDefinitionNodeBuilder.GetAssemblyLoader (navigator)' b => b.Decompile (property.MetadataToken)' flags: flags);" is 173.
Long Statement,MonoDevelop.AssemblyBrowser,TypeDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\TypeDefinitionNodeBuilder.cs,BuildChildNodes,The length of the statement  "			// sorting of child nodes. Avoid creating additional collection' as TreeBuilder does not optimize for ICollection implementors'" is 127.
Long Statement,MonoDevelop.AssemblyBrowser,TypeDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\TypeDefinitionNodeBuilder.cs,DisassembleAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DisassembleAsync (data' rd => rd.DisassembleType (type.ParentModule.PEFile' (System.Reflection.Metadata.TypeDefinitionHandle)type.MetadataToken));" is 181.
Long Statement,MonoDevelop.AssemblyBrowser,RoslynTypeNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Roslyn\RoslynTypeNodeBuilder.cs,BuildChildNodes,The length of the statement  "				return symbol is IMethodSymbol method && (method.MethodKind == MethodKind.PropertyGet || method.MethodKind == MethodKind.PropertySet);" is 134.
Long Statement,MonoDevelop.AssemblyBrowser,AssemblyNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\AssemblyNodeBuilder.cs,DecompileAsync,The length of the statement  "			return MethodDefinitionNodeBuilder.DecompileAsync (data' MethodDefinitionNodeBuilder.GetAssemblyLoader (navigator)' b => " is 120.
Complex Conditional,MonoDevelop.AssemblyBrowser,AssemblyBrowserDisplayBinding,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\DisplayBinding.cs,GetSupportedControllers,The conditional expression  "modelDescriptor is AssemblyBrowserDescriptor || (modelDescriptor is FileDescriptor file && (file.FilePath.HasExtension (".dll") || file.FilePath.HasExtension (".exe")))"  is complex.
Complex Conditional,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SetReferencedSegments,The conditional expression  "text != null && text.Length == 1 && !(char.IsLetter (text [0]) || text [0] == '…')"  is complex.
Complex Conditional,MonoDevelop.AssemblyBrowser,AssemblyNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\AssemblyNodeBuilder.cs,GetMarkup,The conditional expression  "def.Version.Build != 0 || def.Version.Revision != 0 || def.Version.Major != 0 || def.Version.Minor != 0"  is complex.
Virtual Method Call from Constructor,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AssemblyBrowserWidget,The constructor "AssemblyBrowserWidget" calls a virtual method "Build".
Empty Catch Block,MonoDevelop.AssemblyBrowser,AssemblyReferenceFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\AssemblyReferenceFolderNodeBuilder.cs,BuildChildNodes,The method has an empty catch block.
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AssemblyBrowserWidget,The following statement contains a magic number: searchentry1.WidthRequest = 200;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AssemblyBrowserWidget,The following statement contains a magic number: languageCombobox.Active = Math.Min (2' Math.Max (0' PropertyService.Get ("AssemblyBrowser.Language"' 0)));
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,AssemblyBrowserWidget,The following statement contains a magic number: hpaned1.Position = 271;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,HandleInspectEditorButtonPressEvent,The following statement contains a magic number: args.Event.Button != 3
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SkipChildren,The following statement contains a magic number: startIndex = 2;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,SkipChildren,The following statement contains a magic number: helpUrl.Length > 2 && helpUrl [1] == ':'
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following statement contains a magic number: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,GenerateOutput,The following statement contains a magic number: switch (this.languageCombobox.Active) { 			case 0: 				inspectEditor.Options = assemblyBrowserEditorOptions; 				this.inspectEditor.MimeType = "text/x-csharp"; 				builder.DecompileAsync (inspectEditor' nav' new DecompileFlags { PublicOnly = PublicApiOnly' MethodBodies = false }) 					.ContinueWith (l => SetReferencedSegments (l.Result)' Runtime.MainTaskScheduler).Ignore (); 				break; 			case 1: 				inspectEditor.Options = assemblyBrowserEditorOptions; 				this.inspectEditor.MimeType = "text/x-ilasm"; 				builder.DisassembleAsync (inspectEditor' nav) 					.ContinueWith (l => SetReferencedSegments (l.Result)' Runtime.MainTaskScheduler).Ignore (); 				break; 			case 2: 				inspectEditor.Options = assemblyBrowserEditorOptions; 				this.inspectEditor.MimeType = "text/x-csharp"; 				builder.DecompileAsync (inspectEditor' nav' new DecompileFlags { PublicOnly = PublicApiOnly' MethodBodies = true }) 					.ContinueWith (l => SetReferencedSegments (l.Result)' Runtime.MainTaskScheduler).Ignore (); 				break; 			default: 				inspectEditor.Options = assemblyBrowserEditorOptions; 				this.inspectEditor.Text = "Invalid combobox value: " + this.languageCombobox.Active; 				break; 			}
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,HPaneExpose,The following statement contains a magic number: this.hpaned1.Position = Math.Min (350' this.Allocation.Width * 2 / 3);
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,HPaneExpose,The following statement contains a magic number: this.hpaned1.Position = Math.Min (350' this.Allocation.Width * 2 / 3);
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,HPaneExpose,The following statement contains a magic number: this.hpaned1.Position = Math.Min (350' this.Allocation.Width * 2 / 3);
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 2;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.hpaned1.Position = 271;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.treeViewPlaceholder = new global::Gtk.Alignment(0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.treeViewPlaceholder = new global::Gtk.Alignment(0.5F' 0.5F' 1F' 1F);
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.vbox3.Spacing = 6;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.documentationScrolledWindow.Spacing = 6;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,Build,The following statement contains a magic number: this.searchWidget.Spacing = 6;
Magic Number,MonoDevelop.AssemblyBrowser,DocumentationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\DocumentationPanel.cs,OnExposeEvent,The following statement contains a magic number: x = (Allocation.Width - width) / 2;
Magic Number,MonoDevelop.AssemblyBrowser,DocumentationPanel,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\DocumentationPanel.cs,OnExposeEvent,The following statement contains a magic number: y = (Allocation.Height - height) / 2;
Magic Number,MonoDevelop.AssemblyBrowser,BaseTypeFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\BaseTypeFolderNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -100;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyReferenceFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\AssemblyReferenceFolderNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -200;
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyResourceFolderNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\AssemblyResourceFolderNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -100;
Magic Number,MonoDevelop.AssemblyBrowser,TypeDefinitionNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\TypeDefinitionNodeBuilder.cs,GetSortIndex,The following statement contains a magic number: return -50;
Magic Number,MonoDevelop.AssemblyBrowser,ProjectNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Roslyn\ProjectNodeBuilder.cs,BuildChildNodes,The following statement contains a magic number: var data = new List<NamespaceData> (32);
Magic Number,MonoDevelop.AssemblyBrowser,AssemblyNodeBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\TreeNodes\Cecil\AssemblyNodeBuilder.cs,BuildChildNodes,The following statement contains a magic number: var allNamespaces = new List<NamespaceData> (32);
Magic Number,MonoDevelop.AssemblyBrowser,SearchIdleRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.SearchIdleRunner.cs,IdleHandler,The following statement contains a magic number: !fillStepFinished && (memberList.Count - i > 50 || (Environment.TickCount - lastUpdateTick) > 2000)
Magic Number,MonoDevelop.AssemblyBrowser,SearchIdleRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.SearchIdleRunner.cs,IdleHandler,The following statement contains a magic number: !fillStepFinished && (memberList.Count - i > 50 || (Environment.TickCount - lastUpdateTick) > 2000)
Magic Number,MonoDevelop.AssemblyBrowser,SearchIdleRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.SearchIdleRunner.cs,IdleHandler,The following statement contains a magic number: j < 50 && i < memberList.Count
Missing Default,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,CreateColumns,The following switch statement is missing a default case: switch (searchMode) { 			case SearchMode.Member: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Member"); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Declaring Type")' crt = new Gtk.CellRendererText ()); 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.TypeAndMembers: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Results"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1;  				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Parent")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2;  				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			case SearchMode.Type: 				col = new TreeViewColumn (); 				col.Title = GettextCatalog.GetString ("Type"); 				crp = new CellRendererImage (); 				crt = new Gtk.CellRendererText (); 				col.PackStart (crp' false); 				col.PackStart (crt' true); 				col.SetCellDataFunc (crp' RenderImage); 				col.SetCellDataFunc (crt' RenderText); 				col.SortColumnId = 1; 				searchTreeview.AppendColumn (col); 				col.FixedWidth = 400; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true;  				col = searchTreeview.AppendColumn (GettextCatalog.GetString ("Namespace")' crt = new Gtk.CellRendererText ()); 				col.SetCellDataFunc (crt' RenderDeclaringTypeOrNamespace); 				col.SortColumnId = 2; 				col.FixedWidth = 300; 				col.Sizing = TreeViewColumnSizing.Fixed; 				col.Resizable = true; 				searchTreeview.Model = resultListStore; 				break; 			}
Missing Default,MonoDevelop.AssemblyBrowser,AssemblyBrowserWidget,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.cs,StartSearch,The following switch statement is missing a default case: switch (searchMode) { 			case SearchMode.Member: 				IdeApp.Workbench.StatusBar.BeginProgress (GettextCatalog.GetString ("Searching member...")); 				break; 			case SearchMode.Type: 				IdeApp.Workbench.StatusBar.BeginProgress (GettextCatalog.GetString ("Searching type...")); 				break; 			case SearchMode.TypeAndMembers: 		       	IdeApp.Workbench.StatusBar.BeginProgress (GettextCatalog.GetString ("Searching types and members...")); 				break; 			}
Missing Default,MonoDevelop.AssemblyBrowser,SearchIdleRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.AssemblyBrowser\MonoDevelop.AssemblyBrowser\AssemblyBrowserWidget.SearchIdleRunner.cs,DoFillStep,The following switch statement is missing a default case: switch (searchMode) { 				case SearchMode.Member: 					if (token.IsCancellationRequested) 						return; 					if (!type.IsPublic () && publicOnly) 						return; 					foreach (var member in type.Methods) { 						if (token.IsCancellationRequested) 							return; 						if (!member.IsPublic () && publicOnly) 							continue; 						if (matcher.IsMatch (member.Name)) 							memberList.Add (member); 					} 					foreach (var member in type.Fields) { 						if (token.IsCancellationRequested) 							return; 						if (!member.IsPublic () && publicOnly) 							continue; 						if (matcher.IsMatch (member.Name)) 							memberList.Add (member); 					} 					foreach (var member in type.Properties) { 						if (token.IsCancellationRequested) 							return; 						var accessor = member.Getter ?? member.Setter; 						if (!accessor.IsPublic () && publicOnly) 							continue; 						if (matcher.IsMatch (member.Name)) 							memberList.Add (member); 					} 					foreach (var member in type.Events) { 						if (token.IsCancellationRequested) 							return; 						var accessor = member.AddAccessor ?? member.RemoveAccessor; 						if (!accessor.IsPublic () && publicOnly) 							continue; 						if (matcher.IsMatch (member.Name)) 							memberList.Add (member); 					} 					break; 				case SearchMode.Type: 					if (!type.IsPublic () && publicOnly) 						return; 					if (type.Name == "<Module>") 						return; 					if (matcher.IsMatch (type.FullName)) 						memberList.Add (type); 					break; 				case SearchMode.TypeAndMembers: 					if (token.IsCancellationRequested) 						return; 					if (!type.IsPublic () && publicOnly) 						return; 					if (type.Name == "<Module>") 						return; 					if (matcher.IsMatch (type.FullName)) 						memberList.Add (type); 					goto case SearchMode.Member; 				}
