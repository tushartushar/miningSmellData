Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnInsertBreakEvent,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,GetExpressionCompletionData,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,CreateFrame,Cyclomatic complexity of the method is 8
Long Statement,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnRun,The length of the statement  "					console = Runtime.ProcessService.StartConsoleProcess (script' ""' "."' ExternalConsoleFactory.Instance.CreateConsole (true)' null);" is 131.
Long Statement,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,GetParameters,The length of the statement  "			GdbCommandResult res = session.RunCommand ("-stack-list-arguments"' "0"' frameIndex.ToString ()' frameIndex.ToString ());" is 121.
Long Statement,MonoDevelop.Debugger.Gdb,GdbDissassemblyBuffer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,GetLines,The length of the statement  "				ResultData data = session.RunCommand ("-data-disassemble"' "-s"' startAddr.ToString ()' "-e"' endAddr.ToString ()' "--"' "0");" is 126.
Empty Catch Block,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnRun,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnInsertBreakEvent,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,CreateFrame,The method has an empty catch block.
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnRun,The following statement contains a magic number: System.Threading.Thread.Sleep (100);
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnRun,The following statement contains a magic number: (DateTime.Now - tim).TotalSeconds > 10
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,OnDisassembleFile,The following statement contains a magic number: long addr = long.Parse (asm.GetValue ("address").Substring (2)' NumberStyles.HexNumber);
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,RunCommand,The following statement contains a magic number: !Monitor.Wait (syncLock' 4000)
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,InternalStop,The following statement contains a magic number: !Monitor.Wait (eventLock' 4000)
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,ProcessOutput,The following statement contains a magic number: switch (line [0]) { 				case '^': 					lock (syncLock) { 						lastResult = new GdbCommandResult (line); 						running = (lastResult.Status == CommandStatus.Running); 						Monitor.PulseAll (syncLock); 					} 					break; 					 				case '~': 				case '&': 					if (line.Length > 1 && line[1] == '"') 						line = line.Substring (2' line.Length - 5); 					ThreadPool.QueueUserWorkItem (delegate { 						OnTargetOutput (false' line + "\n"); 					}); 					break; 					 				case '*': 					GdbEvent ev; 					lock (eventLock) { 						running = false; 						ev = new GdbEvent (line); 						string ti = ev.GetValue ("thread-id"); 						if (ti != null && ti != "all") 							currentThread = activeThread = int.Parse (ti); 						Monitor.PulseAll (eventLock); 						if (internalStop) { 							internalStop = false; 							return; 						} 					} 					ThreadPool.QueueUserWorkItem (delegate { 						try { 							HandleEvent (ev); 						} catch (Exception ex) { 							Console.WriteLine (ex); 						} 					}); 					break; 			}
Magic Number,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,ProcessOutput,The following statement contains a magic number: switch (line [0]) { 				case '^': 					lock (syncLock) { 						lastResult = new GdbCommandResult (line); 						running = (lastResult.Status == CommandStatus.Running); 						Monitor.PulseAll (syncLock); 					} 					break; 					 				case '~': 				case '&': 					if (line.Length > 1 && line[1] == '"') 						line = line.Substring (2' line.Length - 5); 					ThreadPool.QueueUserWorkItem (delegate { 						OnTargetOutput (false' line + "\n"); 					}); 					break; 					 				case '*': 					GdbEvent ev; 					lock (eventLock) { 						running = false; 						ev = new GdbEvent (line); 						string ti = ev.GetValue ("thread-id"); 						if (ti != null && ti != "all") 							currentThread = activeThread = int.Parse (ti); 						Monitor.PulseAll (eventLock); 						if (internalStop) { 							internalStop = false; 							return; 						} 					} 					ThreadPool.QueueUserWorkItem (delegate { 						try { 							HandleEvent (ev); 						} catch (Exception ex) { 							Console.WriteLine (ex); 						} 					}); 					break; 			}
Magic Number,MonoDevelop.Debugger.Gdb,GdbDebuggerBackend,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSessionFactory.cs,IsExecutable,The following statement contains a magic number: char [] chars = new char [3];
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,GetExpressionCompletionData,The following statement contains a magic number: exp = exp.Substring (0' exp.Length - (pointer ? 2 : 1));
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,CreateFrame,The following statement contains a magic number: addr = long.Parse (sadr.Substring (2)' NumberStyles.HexNumber);
Magic Number,MonoDevelop.Debugger.Gdb,GdbBacktrace,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,Disassemble,The following statement contains a magic number: long addr = long.Parse (data.GetObject ("frame").GetValue ("addr").Substring (2)' NumberStyles.HexNumber);
Magic Number,MonoDevelop.Debugger.Gdb,GdbDissassemblyBuffer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbBacktrace.cs,GetLines,The following statement contains a magic number: long addr = long.Parse (aline.GetValue ("address").Substring (2)' NumberStyles.HexNumber);
Magic Number,MonoDevelop.Debugger.Gdb,GdbCommandResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbCommandResult.cs,GdbCommandResult,The following statement contains a magic number: ReadResults (line' 6);
Missing Default,MonoDevelop.Debugger.Gdb,GdbSession,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.Debugger.Gdb\GdbSession.cs,ProcessOutput,The following switch statement is missing a default case: switch (line [0]) { 				case '^': 					lock (syncLock) { 						lastResult = new GdbCommandResult (line); 						running = (lastResult.Status == CommandStatus.Running); 						Monitor.PulseAll (syncLock); 					} 					break; 					 				case '~': 				case '&': 					if (line.Length > 1 && line[1] == '"') 						line = line.Substring (2' line.Length - 5); 					ThreadPool.QueueUserWorkItem (delegate { 						OnTargetOutput (false' line + "\n"); 					}); 					break; 					 				case '*': 					GdbEvent ev; 					lock (eventLock) { 						running = false; 						ev = new GdbEvent (line); 						string ti = ev.GetValue ("thread-id"); 						if (ti != null && ti != "all") 							currentThread = activeThread = int.Parse (ti); 						Monitor.PulseAll (eventLock); 						if (internalStop) { 							internalStop = false; 							return; 						} 					} 					ThreadPool.QueueUserWorkItem (delegate { 						try { 							HandleEvent (ev); 						} catch (Exception ex) { 							Console.WriteLine (ex); 						} 					}); 					break; 			}
