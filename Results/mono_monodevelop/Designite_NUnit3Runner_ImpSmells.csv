Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteArray,The method has 104 lines of code.
Long Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,The method has 148 lines of code.
Complex Method,NUnit3Runner,EventListenerWrapper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.UnitTesting.NUnit\NUnit3Runner\EventListenerWrapper.cs,GetLocalTestResult,Cyclomatic complexity of the method is 17
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteValue,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteArray,Cyclomatic complexity of the method is 44
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadValue,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,Cyclomatic complexity of the method is 34
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,AppendArg,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ConvertToType,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.Execution,MessageListener,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,RegisterHandlers,Cyclomatic complexity of the method is 8
Long Parameter List,NUnit3Runner,NUnitTestRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.UnitTesting.NUnit\NUnit3Runner\NUnitTestRunner.cs,Run,The method has 7 parameters. Parameters: listener' nameFilter' path' suiteName' supportAssemblies' testRunnerType' testRunnerAssembly
Long Statement,NUnit3Runner,NUnitTestRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.UnitTesting.NUnit\NUnit3Runner\NUnitTestRunner.cs,Run,The length of the statement  "				var res = Run (listenerWrapper' r.NameFilter' r.Path' r.SuiteName' r.SupportAssemblies' r.TestRunnerType' r.TestRunnerAssembly);" is 128.
Long Statement,NUnit3Runner,NUnitTestRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.UnitTesting.NUnit\NUnit3Runner\NUnitTestRunner.cs,BuildTestInfo,The length of the statement  "			var children = test.ChildNodes.OfType<XmlElement> ().Where (e => e.LocalName == "test-suite" || e.LocalName == "test-case").ToArray ();" is 135.
Long Statement,NUnit3Runner,NUnitTestRunner,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.UnitTesting.NUnit\NUnit3Runner\NUnitTestRunner.cs,CurrentDomain_AssemblyResolve,The length of the statement  "			return AppDomain.CurrentDomain.GetAssemblies ().FirstOrDefault (a => AssemblyName.ReferenceMatchesDefinition (name' a.GetName ()));" is 131.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,IsSerializableType,The length of the statement  "			return Type.GetTypeCode (type) == System.TypeCode.Object && !type.IsArray && !typeof(IDictionary).IsAssignableFrom (type);" is 122.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadMessageData,The length of the statement  "				throw new InvalidOperationException ("Type '" + GetType ().FullName + "' can't be read from message data. The type must have the [MessageDataType] attribute applied to it");" is 173.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadMessageData,The length of the statement  "				throw new InvalidOperationException ("Type '" + type.FullName + "' can't be read from message data. The type must have the [MessageDataType] attribute applied to it");" is 167.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteMessageData,The length of the statement  "				throw new InvalidOperationException ("Type '" + instance.GetType ().FullName + "' can't be serialized. The type must have the [MessageDataType] attribute applied to it");" is 170.
Long Statement,MonoDevelop.Core.Execution,MessageListener,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,RegisterHandlers,The length of the statement  "			foreach (var m in target.GetType ().GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)) {" is 120.
Long Statement,MonoDevelop.Core.Execution,MessageListener,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,RegisterHandlers,The length of the statement  "						var ma = (MessageDataTypeAttribute) Attribute.GetCustomAttribute (pars [0].ParameterType' typeof (MessageDataTypeAttribute));" is 125.
Empty Catch Block,MonoDevelop.Core.Execution,RemoteProcessServer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemoteProcessServer.cs,Shutdown,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,RemoteProcessServer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemoteProcessServer.cs,Run,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,RemoteProcessServer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemoteProcessServer.cs,Run,The method has an empty catch block.
Missing Default,NUnit3Runner,EventListenerWrapper,C:\research\architectureSmells\repos\mono_monodevelop\main\src\addins\MonoDevelop.UnitTesting.NUnit\NUnit3Runner\EventListenerWrapper.cs,OnTestEvent,The following switch statement is missing a default case: switch (testEvent.Name) 			{ 				case "test-case": 				TestFinished (testEvent); 				break;  				case "test-suite": 				SuiteFinished (testEvent); 				break; 			}
Missing Default,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadValue,The following switch statement is missing a default case: switch ((TypeCode)t) { 			case TypeCode.Null: 				return null; 			case TypeCode.Array: 				return ReadArray (br); 			case TypeCode.Double: 				return br.ReadDouble (); 			case TypeCode.Byte: 				return br.ReadByte (); 			case TypeCode.Int16: 				return br.ReadInt16 (); 			case TypeCode.Int32: 				return br.ReadInt32 (); 			case TypeCode.Int64: 				return br.ReadInt64 (); 			case TypeCode.Single: 				return br.ReadSingle (); 			case TypeCode.String: 				return br.ReadString (); 			case TypeCode.Boolean: 				return br.ReadBoolean (); 			case TypeCode.DateTime: 				return new DateTime (br.ReadInt64 ()); 			case TypeCode.TimeSpan: 				return new TimeSpan (br.ReadInt64 ()); 			case TypeCode.Map: { 					var keys = (Array)ReadArray (br); 					var values = (Array)ReadArray (br); 					var dt = typeof (Dictionary<'>); 					var dictType = dt.MakeGenericType (keys.GetType ().GetElementType ()' values.GetType ().GetElementType ());  					var dict = (IDictionary)Activator.CreateInstance (dictType); 					for (int n = 0; n < keys.Length; n++) 						dict [keys.GetValue (n)] = values.GetValue (n); 					return dict; 				} 			}
Missing Default,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,The following switch statement is missing a default case: switch (type) { 				case TypeCode.Object: { 						var a = new object [count]; 						for (int n = 0; n < count; n++) 							a [n] = ReadValue (br); 						return a; 					} 				case TypeCode.Double: { 						var a = new double [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadDouble (); 						return a; 					} 				case TypeCode.Byte: { 						return br.ReadBytes (count); 					} 				case TypeCode.Int16: { 						var a = new short [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadInt16 (); 						return a; 					} 				case TypeCode.Int32: { 						var a = new int [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadInt32 (); 						return a; 					} 				case TypeCode.Int64: { 						var a = new long [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadInt64 (); 						return a; 					} 				case TypeCode.Single: { 						var a = new float [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadSingle (); 						return a; 					} 				case TypeCode.String: { 						var a = new string [count]; 						for (int n = 0; n < count; n++) { 							string s = br.ReadString (); 							if (s == NullString) 								s = null; 							a [n] = s; 						} 						return a; 					} 				case TypeCode.Boolean: { 						var a = new bool [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadBoolean (); 						return a; 					} 				case TypeCode.DateTime: { 						var a = new DateTime [count]; 						for (int n = 0; n < count; n++) 							a [n] = new DateTime (br.ReadInt64 ()); 						return a; 					} 				case TypeCode.TimeSpan: { 						var a = new TimeSpan [count]; 						for (int n = 0; n < count; n++) 							a [n] = new TimeSpan (br.ReadInt64 ()); 						return a; 					} 				}
Missing Default,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,The following switch statement is missing a default case: switch (type) { 				case TypeCode.Object: { 						var a = Array.CreateInstance (typeof (object)' lengths); 						new MultiDimensionalIterator (a).Fill (() => ReadValue (br)); 						return a; 				} 				case TypeCode.Double: { 						var a = Array.CreateInstance (typeof (double)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadDouble ()); 						return a; 					} 				case TypeCode.Byte: { 						var a = Array.CreateInstance (typeof (byte)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadByte ()); 						return a; 						//return br.ReadBytes (count); 					} 				case TypeCode.Int16: { 						var a = Array.CreateInstance (typeof (short)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadInt16 ()); 						return a; 					} 				case TypeCode.Int32: { 						var a = Array.CreateInstance (typeof (int)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadInt32 ()); 						return a; 					} 				case TypeCode.Int64: { 						var a = Array.CreateInstance (typeof (long)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadInt64 ()); 						return a; 					} 				case TypeCode.Single: { 						var a = Array.CreateInstance (typeof (float)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadSingle ()); 						return a; 					} 				case TypeCode.String: { 						var a = Array.CreateInstance (typeof (string)' lengths); 						new MultiDimensionalIterator (a).Fill (() => { 							string s = br.ReadString (); 							if (s == NullString) 								s = null; 							return s; 						}); 						return a; 					} 				case TypeCode.Boolean: { 						var a = Array.CreateInstance (typeof (bool)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadBoolean ()); 						return a; 					} 				case TypeCode.DateTime: { 						var a = Array.CreateInstance (typeof (DateTime)' lengths); 						new MultiDimensionalIterator (a).Fill (() => new DateTime (br.ReadInt64 ())); 						return a; 					} 				case TypeCode.TimeSpan: { 						var a = Array.CreateInstance (typeof (TimeSpan)' lengths); 						new MultiDimensionalIterator (a).Fill (() => new TimeSpan (br.ReadInt64 ())); 						return a; 					} 				}
