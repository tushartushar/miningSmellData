Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteArray,The method has 104 lines of code.
Long Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,The method has 148 lines of code.
Complex Method,MonoDevelop.Projects.MSBuild,TargetLogger,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\LocalLogger.cs,SubscribeEvents,Cyclomatic complexity of the method is 13
Complex Method,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,ConfigureProject,Cyclomatic complexity of the method is 8
Complex Method,MonoDevelop.Projects.MSBuild,MSBuildTargetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\MSBuildTargetResult.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteValue,Cyclomatic complexity of the method is 16
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteArray,Cyclomatic complexity of the method is 44
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadValue,Cyclomatic complexity of the method is 14
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,Cyclomatic complexity of the method is 34
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,AppendArg,Cyclomatic complexity of the method is 9
Complex Method,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ConvertToType,Cyclomatic complexity of the method is 11
Complex Method,MonoDevelop.Core.Execution,MessageListener,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,RegisterHandlers,Cyclomatic complexity of the method is 8
Long Parameter List,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,Run,The method has 9 parameters. Parameters: configurations' logWriter' verbosity' binLogFilePath' runTargets' evaluateItems' evaluateProperties' globalProperties' taskId
Long Parameter List,MonoDevelop.Projects.MSBuild,MSBuildTargetResult,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\MSBuildTargetResult.cs,MSBuildTargetResult,The method has 11 parameters. Parameters: projectFile' isWarning' subcategory' code' file' lineNumber' columnNumber' endLineNumber' endColumnNumber' message' helpKeyword
Long Statement,MonoDevelop.Projects.MSBuild,BuildEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\BuildEngine.cs,BeginBuildOperation,The length of the statement  "				engine.SetGlobalProperty ("CurrentSolutionConfigurationContents"' ProjectBuilder.GenerateSolutionConfigurationContents (configurations));" is 137.
Long Statement,MonoDevelop.Projects.MSBuild,BuildEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\BuildEngine.cs,RunProject,The length of the statement  "				var logger = msg.LogWriterId != -1 ? (IEngineLogWriter) new LogWriter (msg.LogWriterId' msg.EnabledLogEvents) : (IEngineLogWriter) new NullLogWriter ();" is 152.
Long Statement,MonoDevelop.Projects.MSBuild,BuildEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\BuildEngine.cs,RunProject,The length of the statement  "				var res = pb.Run (msg.Configurations' logger' msg.Verbosity' msg.BinLogFilePath' msg.RunTargets' msg.EvaluateItems' msg.EvaluateProperties' msg.GlobalProperties' msg.TaskId);" is 174.
Long Statement,MonoDevelop.Projects.MSBuild,BuildEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\BuildEngine.cs,BeginBuild,The length of the statement  "			var logger = msg.LogWriterId != -1 ? (IEngineLogWriter)new LogWriter (msg.LogWriterId' msg.EnabledLogEvents) : (IEngineLogWriter)new NullLogWriter ();" is 150.
Long Statement,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,SetupProject,The length of the statement  "				if (File.Exists (p.ImportedProject.FullPath) && p.ImportedProject.LastWriteTimeWhenRead != File.GetLastWriteTime (p.ImportedProject.FullPath))" is 142.
Long Statement,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,ConfigureProject,The length of the statement  "			if (firstConfigure || p.GetPropertyValue ("Configuration") != configuration || (p.GetPropertyValue ("Platform") ?? "") != (platform ?? "")) {" is 141.
Long Statement,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,ConfigureProject,The length of the statement  "			if (!buildEngine.BuildOperationStarted && this.file == file && p.GetPropertyValue ("CurrentSolutionConfigurationContents") != slnConfigContents) { " is 146.
Long Statement,MonoDevelop.Projects.MSBuild,MainClass,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\Main.cs,Main,The length of the statement  "			// Disable VBCSCompiler until it is reliable on mono. Currently leaves orphaned processes for VB projects taking up 100% CPU." is 125.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,IsSerializableType,The length of the statement  "			return Type.GetTypeCode (type) == System.TypeCode.Object && !type.IsArray && !typeof(IDictionary).IsAssignableFrom (type);" is 122.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadMessageData,The length of the statement  "				throw new InvalidOperationException ("Type '" + GetType ().FullName + "' can't be read from message data. The type must have the [MessageDataType] attribute applied to it");" is 173.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadMessageData,The length of the statement  "				throw new InvalidOperationException ("Type '" + type.FullName + "' can't be read from message data. The type must have the [MessageDataType] attribute applied to it");" is 167.
Long Statement,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,WriteMessageData,The length of the statement  "				throw new InvalidOperationException ("Type '" + instance.GetType ().FullName + "' can't be serialized. The type must have the [MessageDataType] attribute applied to it");" is 170.
Long Statement,MonoDevelop.Core.Execution,MessageListener,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,RegisterHandlers,The length of the statement  "			foreach (var m in target.GetType ().GetMethods (BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)) {" is 120.
Long Statement,MonoDevelop.Core.Execution,MessageListener,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,RegisterHandlers,The length of the statement  "						var ma = (MessageDataTypeAttribute) Attribute.GetCustomAttribute (pars [0].ParameterType' typeof (MessageDataTypeAttribute));" is 125.
Empty Catch Block,MonoDevelop.Projects.MSBuild,LoggerAdapter,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\LoggerAdapter.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,RemoteProcessServer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemoteProcessServer.cs,Shutdown,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,RemoteProcessServer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemoteProcessServer.cs,Run,The method has an empty catch block.
Empty Catch Block,MonoDevelop.Core.Execution,RemoteProcessServer,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\RemoteProcessServer.cs,Run,The method has an empty catch block.
Magic Number,MonoDevelop.Projects.MSBuild,BuildEngine,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\BuildEngine.cs,WatchProcess,The following statement contains a magic number: var t = new Thread (delegate () { 				while (true) { 					Thread.Sleep (1000); 					try { 						// Throws exception if process is not running. 						// When watching a .NET process from Mono' GetProcessById may 						// return the process with HasExited=true 						Process p = Process.GetProcessById (procId); 						if (p.HasExited) 							break; 					} 					catch { 						break; 					} 				} 				server.Shutdown (); 			});
Magic Number,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,UnescapeString,The following statement contains a magic number: str = str.Substring (0' i) + (char)c + str.Substring (i + 3);
Magic Number,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,UnescapeString,The following statement contains a magic number: int.TryParse (str.Substring (i + 1' 2)' System.Globalization.NumberStyles.HexNumber' null' out c)
Magic Number,MonoDevelop.Projects.MSBuild,ProjectBuilder,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Projects.Formats.MSBuild\MonoDevelop.Projects.MSBuild\ProjectBuilder.cs,UnescapeString,The following statement contains a magic number: i != -1 && i < str.Length - 2
Missing Default,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadValue,The following switch statement is missing a default case: switch ((TypeCode)t) { 			case TypeCode.Null: 				return null; 			case TypeCode.Array: 				return ReadArray (br); 			case TypeCode.Double: 				return br.ReadDouble (); 			case TypeCode.Byte: 				return br.ReadByte (); 			case TypeCode.Int16: 				return br.ReadInt16 (); 			case TypeCode.Int32: 				return br.ReadInt32 (); 			case TypeCode.Int64: 				return br.ReadInt64 (); 			case TypeCode.Single: 				return br.ReadSingle (); 			case TypeCode.String: 				return br.ReadString (); 			case TypeCode.Boolean: 				return br.ReadBoolean (); 			case TypeCode.DateTime: 				return new DateTime (br.ReadInt64 ()); 			case TypeCode.TimeSpan: 				return new TimeSpan (br.ReadInt64 ()); 			case TypeCode.Map: { 					var keys = (Array)ReadArray (br); 					var values = (Array)ReadArray (br); 					var dt = typeof (Dictionary<'>); 					var dictType = dt.MakeGenericType (keys.GetType ().GetElementType ()' values.GetType ().GetElementType ());  					var dict = (IDictionary)Activator.CreateInstance (dictType); 					for (int n = 0; n < keys.Length; n++) 						dict [keys.GetValue (n)] = values.GetValue (n); 					return dict; 				} 			}
Missing Default,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,The following switch statement is missing a default case: switch (type) { 				case TypeCode.Object: { 						var a = new object [count]; 						for (int n = 0; n < count; n++) 							a [n] = ReadValue (br); 						return a; 					} 				case TypeCode.Double: { 						var a = new double [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadDouble (); 						return a; 					} 				case TypeCode.Byte: { 						return br.ReadBytes (count); 					} 				case TypeCode.Int16: { 						var a = new short [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadInt16 (); 						return a; 					} 				case TypeCode.Int32: { 						var a = new int [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadInt32 (); 						return a; 					} 				case TypeCode.Int64: { 						var a = new long [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadInt64 (); 						return a; 					} 				case TypeCode.Single: { 						var a = new float [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadSingle (); 						return a; 					} 				case TypeCode.String: { 						var a = new string [count]; 						for (int n = 0; n < count; n++) { 							string s = br.ReadString (); 							if (s == NullString) 								s = null; 							a [n] = s; 						} 						return a; 					} 				case TypeCode.Boolean: { 						var a = new bool [count]; 						for (int n = 0; n < count; n++) 							a [n] = br.ReadBoolean (); 						return a; 					} 				case TypeCode.DateTime: { 						var a = new DateTime [count]; 						for (int n = 0; n < count; n++) 							a [n] = new DateTime (br.ReadInt64 ()); 						return a; 					} 				case TypeCode.TimeSpan: { 						var a = new TimeSpan [count]; 						for (int n = 0; n < count; n++) 							a [n] = new TimeSpan (br.ReadInt64 ()); 						return a; 					} 				}
Missing Default,MonoDevelop.Core.Execution,BinaryMessage,C:\research\architectureSmells\repos\mono_monodevelop\main\src\core\MonoDevelop.Core\MonoDevelop.Core.Execution\BinaryMessage.cs,ReadArray,The following switch statement is missing a default case: switch (type) { 				case TypeCode.Object: { 						var a = Array.CreateInstance (typeof (object)' lengths); 						new MultiDimensionalIterator (a).Fill (() => ReadValue (br)); 						return a; 				} 				case TypeCode.Double: { 						var a = Array.CreateInstance (typeof (double)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadDouble ()); 						return a; 					} 				case TypeCode.Byte: { 						var a = Array.CreateInstance (typeof (byte)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadByte ()); 						return a; 						//return br.ReadBytes (count); 					} 				case TypeCode.Int16: { 						var a = Array.CreateInstance (typeof (short)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadInt16 ()); 						return a; 					} 				case TypeCode.Int32: { 						var a = Array.CreateInstance (typeof (int)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadInt32 ()); 						return a; 					} 				case TypeCode.Int64: { 						var a = Array.CreateInstance (typeof (long)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadInt64 ()); 						return a; 					} 				case TypeCode.Single: { 						var a = Array.CreateInstance (typeof (float)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadSingle ()); 						return a; 					} 				case TypeCode.String: { 						var a = Array.CreateInstance (typeof (string)' lengths); 						new MultiDimensionalIterator (a).Fill (() => { 							string s = br.ReadString (); 							if (s == NullString) 								s = null; 							return s; 						}); 						return a; 					} 				case TypeCode.Boolean: { 						var a = Array.CreateInstance (typeof (bool)' lengths); 						new MultiDimensionalIterator (a).Fill (() => br.ReadBoolean ()); 						return a; 					} 				case TypeCode.DateTime: { 						var a = Array.CreateInstance (typeof (DateTime)' lengths); 						new MultiDimensionalIterator (a).Fill (() => new DateTime (br.ReadInt64 ())); 						return a; 					} 				case TypeCode.TimeSpan: { 						var a = Array.CreateInstance (typeof (TimeSpan)' lengths); 						new MultiDimensionalIterator (a).Fill (() => new TimeSpan (br.ReadInt64 ())); 						return a; 					} 				}
