Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,BMFont,Cyclomatic complexity of the method is 15
Complex Method,OpenGLTutorial16,ObjLoader,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjLoader,Cyclomatic complexity of the method is 14
Complex Method,OpenGLTutorial16,ObjLoader,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,LoadMaterials,Cyclomatic complexity of the method is 9
Complex Method,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,Cyclomatic complexity of the method is 11
Complex Method,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,Cyclomatic complexity of the method is 10
Complex Method,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,Cyclomatic complexity of the method is 9
Complex Method,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnRenderFrame,Cyclomatic complexity of the method is 8
Complex Method,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnKeyboardUp,Cyclomatic complexity of the method is 10
Long Parameter List,OpenGLTutorial16,Character,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,Character,The method has 5 parameters. Parameters: id' texturePosition' size' bearing' advance
Long Parameter List,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The method has 8 parameters. Parameters: split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList
Long Statement,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The length of the statement  "            return new FontVAO(program' new VBO<Vector3>(vertices)' new VBO<Vector2>(uvs)' new VBO<uint>(indices' BufferTarget.ElementArrayBuffer)); " is 136.
Long Statement,OpenGLTutorial16,ObjLoader,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,LoadMaterials,The length of the statement  "                // If the obj has just one material would not execute the ObjMaterial function up' so I added (if the there are lines still not processed' process them) " is 152.
Long Statement,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The length of the statement  "                int[] triangle = new int[] { int.Parse(indices[0]) - vertexOffset' int.Parse(indices[1]) - vertexOffset' int.Parse(indices[2]) - vertexOffset }; " is 144.
Long Statement,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,Main,The length of the statement  "            Glut.glutInitDisplayMode(Glut.GLUT_DOUBLE | Glut.GLUT_DEPTH | Glut.GLUT_ALPHA | Glut.GLUT_STENCIL | Glut.GLUT_MULTISAMPLE); " is 123.
Complex Conditional,OpenGLTutorial16,ObjLoader,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjLoader,The conditional expression  "(line[0] == 'o' && lines.Count != 0) || (line[0] == 'g' && objLines.Count != 0)"  is complex.
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: Vector3[] vertices = new Vector3[text.Length * 4];
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: Vector2[] uvs = new Vector2[text.Length * 4];
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uint[] indices = new uint[text.Length * 6];
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: vertices[i * 4 + 0] = new Vector3(xpos + ch.bearing.X' Height - ch.bearing.Y' 0);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: vertices[i * 4 + 1] = new Vector3(xpos + ch.bearing.X' Height - (ch.bearing.Y + ch.size.Y)' 0);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: vertices[i * 4 + 2] = new Vector3(xpos + ch.bearing.X + ch.size.X' Height - ch.bearing.Y' 0);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: vertices[i * 4 + 2] = new Vector3(xpos + ch.bearing.X + ch.size.X' Height - ch.bearing.Y' 0);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: vertices[i * 4 + 3] = new Vector3(xpos + ch.bearing.X + ch.size.X' Height - (ch.bearing.Y + ch.size.Y)' 0);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: vertices[i * 4 + 3] = new Vector3(xpos + ch.bearing.X + ch.size.X' Height - (ch.bearing.Y + ch.size.Y)' 0);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uvs[i * 4 + 0] = new Vector2(ch.texturePosition.X' ch.texturePosition.Y);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uvs[i * 4 + 1] = new Vector2(ch.texturePosition.X' bottomRight.Y);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uvs[i * 4 + 2] = new Vector2(bottomRight.X' ch.texturePosition.Y);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uvs[i * 4 + 2] = new Vector2(bottomRight.X' ch.texturePosition.Y);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uvs[i * 4 + 3] = new Vector2(bottomRight.X' bottomRight.Y);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: uvs[i * 4 + 3] = new Vector2(bottomRight.X' bottomRight.Y);
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 0] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 0] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 0] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 1] = i * 4 + 0;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 1] = i * 4 + 0;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 2] = i * 4 + 1;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 2] = i * 4 + 1;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 2] = i * 4 + 1;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 3] = i * 4 + 3;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 3] = i * 4 + 3;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 3] = i * 4 + 3;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 3] = i * 4 + 3;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 4] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 4] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 4] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 4] = i * 4 + 2;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 5] = i * 4 + 1;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 5] = i * 4 + 1;
Magic Number,OpenGLTutorial16,BMFont,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Font.cs,CreateString,The following statement contains a magic number: indices[i * 6 + 5] = i * 4 + 1;
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: this.Name = lines[0].Substring(7);
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following statement contains a magic number: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following statement contains a magic number: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: string[] indices = new string[] { split[1]' split[2]' split[3] };
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: string[] indices = new string[] { split[1]' split[2]' split[3] };
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: indices[1] = split[2].Substring(0' split[2].IndexOf("/"));
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: indices[1] = split[2].Substring(0' split[2].IndexOf("/"));
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: indices[2] = split[3].Substring(0' split[3].IndexOf("/"));
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: indices[2] = split[3].Substring(0' split[3].IndexOf("/"));
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: indices[2] = split[3].Substring(0' split[3].IndexOf("/"));
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: string[] uvs = new string[3];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: uvs[1] = split[2].Substring(split[2].IndexOf("/") + 1);
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: uvs[1] = split[2].Substring(split[2].IndexOf("/") + 1);
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: uvs[2] = split[3].Substring(split[3].IndexOf("/") + 1);
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: uvs[2] = split[3].Substring(split[3].IndexOf("/") + 1);
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: uvs[2] = split[3].Substring(split[3].IndexOf("/") + 1);
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: int[] triangle = new int[] { int.Parse(indices[0]) - vertexOffset' int.Parse(indices[1]) - vertexOffset' int.Parse(indices[2]) - vertexOffset };
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: unpackedUvs[triangle[2]] = uvList[int.Parse(uvs[2]) - uvOffset];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: unpackedUvs[triangle[2]] = uvList[int.Parse(uvs[2]) - uvOffset];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: unpackedUvs[triangle[2]] == Vector2.Zero
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,UnpackFace,The following statement contains a magic number: triangleList.Add((uint)triangle[2]);
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,CalculateNormals,The following statement contains a magic number: uint cornerA = elementData[i * 3];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,CalculateNormals,The following statement contains a magic number: uint cornerB = elementData[i * 3 + 1];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,CalculateNormals,The following statement contains a magic number: uint cornerC = elementData[i * 3 + 2];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,CalculateNormals,The following statement contains a magic number: uint cornerC = elementData[i * 3 + 2];
Magic Number,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,CalculateNormals,The following statement contains a magic number: i < elementData.Length / 3
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,Main,The following statement contains a magic number: camera = new Camera(new Vector3(0' 0' 50)' Quaternion.Identity);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,Main,The following statement contains a magic number: program["projection_matrix"].SetValue(Matrix4.CreatePerspectiveFieldOfView(0.45f' (float)width / height' 0.1f' 1000f));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,Main,The following statement contains a magic number: program["projection_matrix"].SetValue(Matrix4.CreatePerspectiveFieldOfView(0.45f' (float)width / height' 0.1f' 1000f));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,Main,The following statement contains a magic number: program["projection_matrix"].SetValue(Matrix4.CreatePerspectiveFieldOfView(0.45f' (float)width / height' 0.1f' 1000f));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,Main,The following statement contains a magic number: fontProgram["ortho_matrix"].SetValue(Matrix4.CreateOrthographic(width' height' 0' 1000));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnMove,The following statement contains a magic number: float yaw = (prevX - x) * 0.002f;
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnMove,The following statement contains a magic number: float pitch = (prevY - y) * 0.002f;
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnRenderFrame,The following statement contains a magic number: camera.MoveRelative(Vector3.UnitZ * deltaTime * 5);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnRenderFrame,The following statement contains a magic number: camera.MoveRelative(-Vector3.UnitZ * deltaTime * 5);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnRenderFrame,The following statement contains a magic number: camera.MoveRelative(-Vector3.UnitX * deltaTime * 5);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnRenderFrame,The following statement contains a magic number: camera.MoveRelative(Vector3.UnitX * deltaTime * 5);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnRenderFrame,The following statement contains a magic number: camera.MoveRelative(Vector3.UnitY * deltaTime * 3);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: program["projection_matrix"].SetValue(Matrix4.CreatePerspectiveFieldOfView(0.45f' (float)width / height' 0.1f' 1000f));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: program["projection_matrix"].SetValue(Matrix4.CreatePerspectiveFieldOfView(0.45f' (float)width / height' 0.1f' 1000f));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: program["projection_matrix"].SetValue(Matrix4.CreatePerspectiveFieldOfView(0.45f' (float)width / height' 0.1f' 1000f));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: fontProgram["ortho_matrix"].SetValue(Matrix4.CreateOrthographic(width' height' 0' 1000));
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: information.Position = new Vector2(-width / 2 + 10' height / 2 - font.Height - 10);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: information.Position = new Vector2(-width / 2 + 10' height / 2 - font.Height - 10);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: information.Position = new Vector2(-width / 2 + 10' height / 2 - font.Height - 10);
Magic Number,OpenGLTutorial16,Program,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\Program.cs,OnReshape,The following statement contains a magic number: information.Position = new Vector2(-width / 2 + 10' height / 2 - font.Height - 10);
Missing Default,OpenGLTutorial16,ObjMaterial,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjMaterial,The following switch statement is missing a default case: switch (split[0])                  {                      case "Ns": this.SpecularCoefficient = float.Parse(split[1]);                          break;                      case "Ka": this.Ambient = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Kd": this.Diffuse = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "Ks": this.Specular = new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3]));                          break;                      case "d": this.Transparency = float.Parse(split[1]);                          break;                      case "illum": this.Illumination = (IlluminationMode)int.Parse(split[1]);                          break;                      case "map_Kd": if (File.Exists(lines[i].Split(new char[] { ' ' }' 2)[1])) this.DiffuseMap = new Texture(lines[i].Split(new char[] { ' ' }' 2)[1]);                          break;                  }
Missing Default,OpenGLTutorial16,ObjObject,D:\research\architectureSmells\repos\giawa_opengl4tutorials\OpenGLTutorial16\OpenGLTutorial16\ObjLoader.cs,ObjObject,The following switch statement is missing a default case: switch (split[0])                  {                      case "o":                      case "g":                          this.Name = lines[i].Substring(2);                          break;                      case "v":                          vertexList.Add(new Vector3(float.Parse(split[1])' float.Parse(split[2])' float.Parse(split[3])));                          break;                      case "vt":                          uvList.Add(new Vector2(float.Parse(split[1])' float.Parse(split[2])));                          break;                      case "f":                          if (split.Length == 5)  // this is a quad' so split it up                          {                              string[] split1 = new string[] { split[0]' split[1]' split[2]' split[3] };                              UnpackFace(split1' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                                string[] split2 = new string[] { split[0]' split[1]' split[3]' split[4] };                              UnpackFace(split2' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          }                          else UnpackFace(split' vertexOffset' uvOffset' vertexList' uvList' triangleList' unpackedUvs' normalsList);                          break;                      case "usemtl":                          if (materials.ContainsKey(split[1])) Material = materials[split[1]];                          break;                  }
