Implementation smell,Namespace,Class,File,Method,Description
Complex Method,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,Cyclomatic complexity of the method is 8
Complex Method,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,Cyclomatic complexity of the method is 9
Complex Method,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,Cyclomatic complexity of the method is 10
Complex Method,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,Cyclomatic complexity of the method is 41
Complex Method,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,Cyclomatic complexity of the method is 8
Complex Method,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitIdentifier,Cyclomatic complexity of the method is 9
Long Parameter List,dbsc.Core.Antlr,ErrorListener,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\ErrorListener.cs,SyntaxError,The method has 6 parameters.
Long Parameter List,dbsc.Core.Antlr,ErrorListener,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\ErrorListener.cs,SyntaxError,The method has 6 parameters.
Long Identifier,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitPossiblyQualifiedTableLine,The length of the parameter customSelectWithLeadingWhitespace is 33.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitTableSpecificationList,The length of the statement  "	List<TableWithSchemaSpecificationWithCustomSelect> specifications = new List<TableWithSchemaSpecificationWithCustomSelect> (); " is 126.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitPossiblyQualifiedTableLine,The length of the statement  "			string fullMessage = ErrorListener.FormErrorMessage (InputFileName' context.CUSTOM_SELECT ().Symbol.Line' context.CUSTOM_SELECT ().Symbol.Column' message); " is 155.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitUnqualifiedTable,The length of the statement  "		return new TableWithSchemaSpecificationWithCustomSelect (schema: TableSpecificationFragment.Star' table: table' negated: negated' defaultSchemaIsCaseSensitive: false' customSelect: customSelect); " is 195.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitUnqualifiedTable,The length of the statement  "		return new TableWithSchemaSpecificationWithCustomSelect (schema: null' table: table' negated: negated' defaultSchemaIsCaseSensitive: false' customSelect: customSelect); " is 168.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitQualifiedTable,The length of the statement  "	return new TableWithSchemaSpecificationWithCustomSelect (schema' table' negated: negated' defaultSchemaIsCaseSensitive: false' customSelect: customSelect); " is 155.
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_UNENCLOSED_ID_sempred,The following statement contains a magic number: switch (predIndex) {  case 4:  	return Flavor == IdentifierSyntax.MySql;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_QUOTE_ENCLOSED_ID_sempred,The following statement contains a magic number: switch (predIndex) {  case 3:  	return Flavor == IdentifierSyntax.Postgres;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_UNENCLOSED_ID_NAME_sempred,The following statement contains a magic number: switch (predIndex) {  case 2:  	return Flavor == IdentifierSyntax.Postgres;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MONGO_ID_sempred,The following statement contains a magic number: switch (predIndex) {  case 7:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_BACKTICK_ID_sempred,The following statement contains a magic number: switch (predIndex) {  case 5:  	return Flavor == IdentifierSyntax.MySql;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_QUOTE_ID_sempred,The following statement contains a magic number: switch (predIndex) {  case 6:  	return Flavor == IdentifierSyntax.MySql;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 14;  		tableSpecificationLine ();  		State = 19;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == NEWLINE) {  			{  				{  					State = 15;  					Match (NEWLINE);  					State = 16;  					tableSpecificationLine ();  				}  			}  			State = 21;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 22;  		Match (Eof);  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 14;  		tableSpecificationLine ();  		State = 19;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == NEWLINE) {  			{  				{  					State = 15;  					Match (NEWLINE);  					State = 16;  					tableSpecificationLine ();  				}  			}  			State = 21;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 22;  		Match (Eof);  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 14;  		tableSpecificationLine ();  		State = 19;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == NEWLINE) {  			{  				{  					State = 15;  					Match (NEWLINE);  					State = 16;  					tableSpecificationLine ();  				}  			}  			State = 21;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 22;  		Match (Eof);  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 14;  		tableSpecificationLine ();  		State = 19;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == NEWLINE) {  			{  				{  					State = 15;  					Match (NEWLINE);  					State = 16;  					tableSpecificationLine ();  				}  			}  			State = 21;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 22;  		Match (Eof);  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 14;  		tableSpecificationLine ();  		State = 19;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == NEWLINE) {  			{  				{  					State = 15;  					Match (NEWLINE);  					State = 16;  					tableSpecificationLine ();  				}  			}  			State = 21;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 22;  		Match (Eof);  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 14;  		tableSpecificationLine ();  		State = 19;  		_errHandler.Sync (this);  		_la = _input.La (1);  		while (_la == NEWLINE) {  			{  				{  					State = 15;  					Match (NEWLINE);  					State = 16;  					tableSpecificationLine ();  				}  			}  			State = 21;  			_errHandler.Sync (this);  			_la = _input.La (1);  		}  		State = 22;  		Match (Eof);  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: State = 14;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: State = 19;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: while (_la == NEWLINE) {  	{  		{  			State = 15;  			Match (NEWLINE);  			State = 16;  			tableSpecificationLine ();  		}  	}  	State = 21;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: while (_la == NEWLINE) {  	{  		{  			State = 15;  			Match (NEWLINE);  			State = 16;  			tableSpecificationLine ();  		}  	}  	State = 21;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: while (_la == NEWLINE) {  	{  		{  			State = 15;  			Match (NEWLINE);  			State = 16;  			tableSpecificationLine ();  		}  	}  	State = 21;  	_errHandler.Sync (this);  	_la = _input.La (1);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: State = 15;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: State = 16;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: State = 21;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: State = 22;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: EnterRule (_localctx' 2' RULE_tableSpecificationLine);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  	State = 26;  	switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 24;  			possiblyQualifiedTableLine ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  	State = 26;  	switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 24;  			possiblyQualifiedTableLine ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  	State = 26;  	switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 24;  			possiblyQualifiedTableLine ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  	State = 26;  	switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 24;  			possiblyQualifiedTableLine ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: State = 26;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 24;  		possiblyQualifiedTableLine ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 24;  		possiblyQualifiedTableLine ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 24;  		possiblyQualifiedTableLine ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: State = 24;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: EnterRule (_localctx' 4' RULE_possiblyQualifiedTableLine);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 29;  		switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  		case 1:  			{  				State = 28;  				Match (NEGATER);  			}  			break;  		}  		State = 31;  		possiblyQualifiedTable ();  		State = 33;  		_la = _input.La (1);  		if (_la == CUSTOM_SELECT) {  			{  				State = 32;  				Match (CUSTOM_SELECT);  			}  		}  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 29;  		switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  		case 1:  			{  				State = 28;  				Match (NEGATER);  			}  			break;  		}  		State = 31;  		possiblyQualifiedTable ();  		State = 33;  		_la = _input.La (1);  		if (_la == CUSTOM_SELECT) {  			{  				State = 32;  				Match (CUSTOM_SELECT);  			}  		}  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 29;  		switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  		case 1:  			{  				State = 28;  				Match (NEGATER);  			}  			break;  		}  		State = 31;  		possiblyQualifiedTable ();  		State = 33;  		_la = _input.La (1);  		if (_la == CUSTOM_SELECT) {  			{  				State = 32;  				Match (CUSTOM_SELECT);  			}  		}  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 29;  		switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  		case 1:  			{  				State = 28;  				Match (NEGATER);  			}  			break;  		}  		State = 31;  		possiblyQualifiedTable ();  		State = 33;  		_la = _input.La (1);  		if (_la == CUSTOM_SELECT) {  			{  				State = 32;  				Match (CUSTOM_SELECT);  			}  		}  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 29;  		switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  		case 1:  			{  				State = 28;  				Match (NEGATER);  			}  			break;  		}  		State = 31;  		possiblyQualifiedTable ();  		State = 33;  		_la = _input.La (1);  		if (_la == CUSTOM_SELECT) {  			{  				State = 32;  				Match (CUSTOM_SELECT);  			}  		}  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 29;  		switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  		case 1:  			{  				State = 28;  				Match (NEGATER);  			}  			break;  		}  		State = 31;  		possiblyQualifiedTable ();  		State = 33;  		_la = _input.La (1);  		if (_la == CUSTOM_SELECT) {  			{  				State = 32;  				Match (CUSTOM_SELECT);  			}  		}  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: State = 29;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	{  		State = 28;  		Match (NEGATER);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	{  		State = 28;  		Match (NEGATER);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: State = 28;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: State = 31;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: State = 33;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: if (_la == CUSTOM_SELECT) {  	{  		State = 32;  		Match (CUSTOM_SELECT);  	}  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: State = 32;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: EnterRule (_localctx' 6' RULE_possiblyQualifiedTable);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  	State = 38;  	switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 35;  			unqualifiedTable ();  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 36;  			if (!(Flavor.TwoPartIdentifiersSupported ()))  				throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  			State = 37;  			qualifiedTable ();  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: State = 38;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: State = 35;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: State = 36;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: State = 37;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,unqualifiedTable,The following statement contains a magic number: EnterRule (_localctx' 8' RULE_unqualifiedTable);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,unqualifiedTable,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 40;  		identifier ();  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,unqualifiedTable,The following statement contains a magic number: State = 40;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: EnterRule (_localctx' 10' RULE_qualifiedTable);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 42;  		_localctx.schema = identifier ();  		State = 43;  		Match (T__0);  		State = 44;  		_localctx.table = identifier ();  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 42;  		_localctx.schema = identifier ();  		State = 43;  		Match (T__0);  		State = 44;  		_localctx.table = identifier ();  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: try {  	EnterOuterAlt (_localctx' 1);  	{  		State = 42;  		_localctx.schema = identifier ();  		State = 43;  		Match (T__0);  		State = 44;  		_localctx.table = identifier ();  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: State = 42;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: State = 43;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: State = 44;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterRule (_localctx' 12' RULE_identifier);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  	State = 62;  	switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  	case 1:  		EnterOuterAlt (_localctx' 1);  		{  			State = 46;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 47;  			Match (MS_UNENCLOSED_ID_NAME);  		}  		break;  	case 2:  		EnterOuterAlt (_localctx' 2);  		{  			State = 48;  			if (!(Flavor == IdentifierSyntax.SqlServer))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  			State = 49;  			Match (MS_BRACKET_ENCLOSED_ID);  		}  		break;  	case 3:  		EnterOuterAlt (_localctx' 3);  		{  			State = 50;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 51;  			Match (PG_UNENCLOSED_ID_NAME);  		}  		break;  	case 4:  		EnterOuterAlt (_localctx' 4);  		{  			State = 52;  			if (!(Flavor == IdentifierSyntax.Postgres))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  			State = 53;  			Match (PG_QUOTE_ENCLOSED_ID);  		}  		break;  	case 5:  		EnterOuterAlt (_localctx' 5);  		{  			State = 54;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 55;  			Match (MYSQL_UNENCLOSED_ID);  		}  		break;  	case 6:  		EnterOuterAlt (_localctx' 6);  		{  			State = 56;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 57;  			Match (MYSQL_BACKTICK_ID);  		}  		break;  	case 7:  		EnterOuterAlt (_localctx' 7);  		{  			State = 58;  			if (!(Flavor == IdentifierSyntax.MySql))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  			State = 59;  			Match (MYSQL_QUOTE_ID);  		}  		break;  	case 8:  		EnterOuterAlt (_localctx' 8);  		{  			State = 60;  			if (!(Flavor == IdentifierSyntax.Mongo))  				throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  			State = 61;  			Match (MONGO_ID);  		}  		break;  	}  } catch (RecognitionException re) {  	_localctx.exception = re;  	_errHandler.ReportError (this' re);  	_errHandler.Recover (this' re);  } finally {  	ExitRule ();  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 62;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 46;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 47;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 2);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 48;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 49;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 3);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 50;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 51;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 4);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 52;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 53;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 5);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 54;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 55;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 6);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 56;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 57;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 7);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 58;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 59;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterOuterAlt (_localctx' 8);  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 60;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: State = 61;  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 3:  	return possiblyQualifiedTable_sempred ((PossiblyQualifiedTableContext)_localctx' predIndex);  case 6:  	return identifier_sempred ((IdentifierContext)_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  case 3:  	return possiblyQualifiedTable_sempred ((PossiblyQualifiedTableContext)_localctx' predIndex);  case 6:  	return identifier_sempred ((IdentifierContext)_localctx' predIndex);  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following switch statement is missing a default case: switch (ruleIndex) {  case 1:  	return MS_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 2:  	return MS_BRACKET_ENCLOSED_ID_sempred (_localctx' predIndex);  case 3:  	return PG_UNENCLOSED_ID_NAME_sempred (_localctx' predIndex);  case 4:  	return PG_QUOTE_ENCLOSED_ID_sempred (_localctx' predIndex);  case 5:  	return MYSQL_UNENCLOSED_ID_sempred (_localctx' predIndex);  case 6:  	return MYSQL_BACKTICK_ID_sempred (_localctx' predIndex);  case 7:  	return MYSQL_QUOTE_ID_sempred (_localctx' predIndex);  case 8:  	return MONGO_ID_sempred (_localctx' predIndex);  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_UNENCLOSED_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 4:  	return Flavor == IdentifierSyntax.MySql;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_QUOTE_ENCLOSED_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 3:  	return Flavor == IdentifierSyntax.Postgres;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_UNENCLOSED_ID_NAME_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 2:  	return Flavor == IdentifierSyntax.Postgres;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MONGO_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 7:  	return Flavor == IdentifierSyntax.Mongo;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_BACKTICK_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 5:  	return Flavor == IdentifierSyntax.MySql;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MS_BRACKET_ENCLOSED_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_QUOTE_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 6:  	return Flavor == IdentifierSyntax.MySql;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MS_UNENCLOSED_ID_NAME_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 0:  	return Flavor == IdentifierSyntax.SqlServer;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 1' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 24;  		possiblyQualifiedTableLine ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  	}  	break;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 2' _ctx)) {  case 1:  	{  		State = 28;  		Match (NEGATER);  	}  	break;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 4' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 35;  		unqualifiedTable ();  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 36;  		if (!(Flavor.TwoPartIdentifiersSupported ()))  			throw new FailedPredicateException (this' "Flavor.TwoPartIdentifiersSupported()");  		State = 37;  		qualifiedTable ();  	}  	break;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following switch statement is missing a default case: switch (Interpreter.AdaptivePredict (_input' 5' _ctx)) {  case 1:  	EnterOuterAlt (_localctx' 1);  	{  		State = 46;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 47;  		Match (MS_UNENCLOSED_ID_NAME);  	}  	break;  case 2:  	EnterOuterAlt (_localctx' 2);  	{  		State = 48;  		if (!(Flavor == IdentifierSyntax.SqlServer))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.SqlServer");  		State = 49;  		Match (MS_BRACKET_ENCLOSED_ID);  	}  	break;  case 3:  	EnterOuterAlt (_localctx' 3);  	{  		State = 50;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 51;  		Match (PG_UNENCLOSED_ID_NAME);  	}  	break;  case 4:  	EnterOuterAlt (_localctx' 4);  	{  		State = 52;  		if (!(Flavor == IdentifierSyntax.Postgres))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Postgres");  		State = 53;  		Match (PG_QUOTE_ENCLOSED_ID);  	}  	break;  case 5:  	EnterOuterAlt (_localctx' 5);  	{  		State = 54;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 55;  		Match (MYSQL_UNENCLOSED_ID);  	}  	break;  case 6:  	EnterOuterAlt (_localctx' 6);  	{  		State = 56;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 57;  		Match (MYSQL_BACKTICK_ID);  	}  	break;  case 7:  	EnterOuterAlt (_localctx' 7);  	{  		State = 58;  		if (!(Flavor == IdentifierSyntax.MySql))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.MySql");  		State = 59;  		Match (MYSQL_QUOTE_ID);  	}  	break;  case 8:  	EnterOuterAlt (_localctx' 8);  	{  		State = 60;  		if (!(Flavor == IdentifierSyntax.Mongo))  			throw new FailedPredicateException (this' "Flavor == IdentifierSyntax.Mongo");  		State = 61;  		Match (MONGO_ID);  	}  	break;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,Sempred,The following switch statement is missing a default case: switch (ruleIndex) {  case 3:  	return possiblyQualifiedTable_sempred ((PossiblyQualifiedTableContext)_localctx' predIndex);  case 6:  	return identifier_sempred ((IdentifierContext)_localctx' predIndex);  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 1:  	return Flavor == IdentifierSyntax.SqlServer;  case 2:  	return Flavor == IdentifierSyntax.SqlServer;  case 3:  	return Flavor == IdentifierSyntax.Postgres;  case 4:  	return Flavor == IdentifierSyntax.Postgres;  case 5:  	return Flavor == IdentifierSyntax.MySql;  case 6:  	return Flavor == IdentifierSyntax.MySql;  case 7:  	return Flavor == IdentifierSyntax.MySql;  case 8:  	return Flavor == IdentifierSyntax.Mongo;  }  
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,F:\newReposMay17\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable_sempred,The following switch statement is missing a default case: switch (predIndex) {  case 0:  	return Flavor.TwoPartIdentifiersSupported ();  }  
