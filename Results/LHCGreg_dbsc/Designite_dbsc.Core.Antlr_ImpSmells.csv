Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,dbsc.Core.Antlr,ErrorListener,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\ErrorListener.cs,SyntaxError,The method has 6 parameters. Parameters: recognizer' offendingSymbol' line' charPositionInLine' msg' e
Long Parameter List,dbsc.Core.Antlr,ErrorListener,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\ErrorListener.cs,SyntaxError,The method has 6 parameters. Parameters: recognizer' offendingSymbol' line' charPositionInLine' msg' e
Long Identifier,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,,The length of the parameter RULE_possiblyQualifiedTableLine is 31.
Long Identifier,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitPossiblyQualifiedTableLine,The length of the parameter customSelectWithLeadingWhitespace is 33.
Long Statement,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The length of the statement  "				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()"); " is 126.
Long Statement,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The length of the statement  "				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer"); " is 126.
Long Statement,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The length of the statement  "				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer"); " is 126.
Long Statement,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The length of the statement  "				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres"); " is 124.
Long Statement,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The length of the statement  "				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres"); " is 124.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitTableSpecificationList,The length of the statement  "            List<TableWithSchemaSpecificationWithCustomSelect> specifications = new List<TableWithSchemaSpecificationWithCustomSelect>(); " is 125.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitPossiblyQualifiedTableLine,The length of the statement  "                    string fullMessage = ErrorListener.FormErrorMessage(InputFileName' context.CUSTOM_SELECT().Symbol.Line' context.CUSTOM_SELECT().Symbol.Column' message); " is 152.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitUnqualifiedTable,The length of the statement  "                return new TableWithSchemaSpecificationWithCustomSelect(schema: TableSpecificationFragment.Star' table: table' negated: negated' defaultSchemaIsCaseSensitive: false' customSelect: customSelect); " is 194.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitUnqualifiedTable,The length of the statement  "                return new TableWithSchemaSpecificationWithCustomSelect(schema: null' table: table' negated: negated' defaultSchemaIsCaseSensitive: false' customSelect: customSelect); " is 167.
Long Statement,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,VisitQualifiedTable,The length of the statement  "            return new TableWithSchemaSpecificationWithCustomSelect(schema' table' negated: negated' defaultSchemaIsCaseSensitive: false' customSelect: customSelect); " is 154.
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_UNENCLOSED_ID_sempred,The following statement contains a magic number: switch (predIndex) {  		case 4: return Flavor == IdentifierSyntax.MySql;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_QUOTE_ENCLOSED_ID_sempred,The following statement contains a magic number: switch (predIndex) {  		case 3: return Flavor == IdentifierSyntax.Postgres;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_UNENCLOSED_ID_NAME_sempred,The following statement contains a magic number: switch (predIndex) {  		case 2: return Flavor == IdentifierSyntax.Postgres;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MONGO_ID_sempred,The following statement contains a magic number: switch (predIndex) {  		case 7: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_BACKTICK_ID_sempred,The following statement contains a magic number: switch (predIndex) {  		case 5: return Flavor == IdentifierSyntax.MySql;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_QUOTE_ID_sempred,The following statement contains a magic number: switch (predIndex) {  		case 6: return Flavor == IdentifierSyntax.MySql;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 14; tableSpecificationLine();  			State = 19;  			_errHandler.Sync(this);  			_la = _input.La(1);  			while (_la==NEWLINE) {  				{  				{  				State = 15; Match(NEWLINE);  				State = 16; tableSpecificationLine();  				}  				}  				State = 21;  				_errHandler.Sync(this);  				_la = _input.La(1);  			}  			State = 22; Match(Eof);  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 14; tableSpecificationLine();  			State = 19;  			_errHandler.Sync(this);  			_la = _input.La(1);  			while (_la==NEWLINE) {  				{  				{  				State = 15; Match(NEWLINE);  				State = 16; tableSpecificationLine();  				}  				}  				State = 21;  				_errHandler.Sync(this);  				_la = _input.La(1);  			}  			State = 22; Match(Eof);  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 14; tableSpecificationLine();  			State = 19;  			_errHandler.Sync(this);  			_la = _input.La(1);  			while (_la==NEWLINE) {  				{  				{  				State = 15; Match(NEWLINE);  				State = 16; tableSpecificationLine();  				}  				}  				State = 21;  				_errHandler.Sync(this);  				_la = _input.La(1);  			}  			State = 22; Match(Eof);  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 14; tableSpecificationLine();  			State = 19;  			_errHandler.Sync(this);  			_la = _input.La(1);  			while (_la==NEWLINE) {  				{  				{  				State = 15; Match(NEWLINE);  				State = 16; tableSpecificationLine();  				}  				}  				State = 21;  				_errHandler.Sync(this);  				_la = _input.La(1);  			}  			State = 22; Match(Eof);  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 14; tableSpecificationLine();  			State = 19;  			_errHandler.Sync(this);  			_la = _input.La(1);  			while (_la==NEWLINE) {  				{  				{  				State = 15; Match(NEWLINE);  				State = 16; tableSpecificationLine();  				}  				}  				State = 21;  				_errHandler.Sync(this);  				_la = _input.La(1);  			}  			State = 22; Match(Eof);  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationList,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 14; tableSpecificationLine();  			State = 19;  			_errHandler.Sync(this);  			_la = _input.La(1);  			while (_la==NEWLINE) {  				{  				{  				State = 15; Match(NEWLINE);  				State = 16; tableSpecificationLine();  				}  				}  				State = 21;  				_errHandler.Sync(this);  				_la = _input.La(1);  			}  			State = 22; Match(Eof);  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: EnterRule(_localctx' 2' RULE_tableSpecificationLine);
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  			State = 26;  			switch ( Interpreter.AdaptivePredict(_input'1'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 24; possiblyQualifiedTableLine();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  			State = 26;  			switch ( Interpreter.AdaptivePredict(_input'1'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 24; possiblyQualifiedTableLine();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  			State = 26;  			switch ( Interpreter.AdaptivePredict(_input'1'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 24; possiblyQualifiedTableLine();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following statement contains a magic number: try {  			State = 26;  			switch ( Interpreter.AdaptivePredict(_input'1'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 24; possiblyQualifiedTableLine();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: EnterRule(_localctx' 4' RULE_possiblyQualifiedTableLine);
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 29;  			switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}  			State = 31; possiblyQualifiedTable();  			State = 33;  			_la = _input.La(1);  			if (_la==CUSTOM_SELECT) {  				{  				State = 32; Match(CUSTOM_SELECT);  				}  			}    			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 29;  			switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}  			State = 31; possiblyQualifiedTable();  			State = 33;  			_la = _input.La(1);  			if (_la==CUSTOM_SELECT) {  				{  				State = 32; Match(CUSTOM_SELECT);  				}  			}    			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 29;  			switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}  			State = 31; possiblyQualifiedTable();  			State = 33;  			_la = _input.La(1);  			if (_la==CUSTOM_SELECT) {  				{  				State = 32; Match(CUSTOM_SELECT);  				}  			}    			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 29;  			switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}  			State = 31; possiblyQualifiedTable();  			State = 33;  			_la = _input.La(1);  			if (_la==CUSTOM_SELECT) {  				{  				State = 32; Match(CUSTOM_SELECT);  				}  			}    			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 29;  			switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}  			State = 31; possiblyQualifiedTable();  			State = 33;  			_la = _input.La(1);  			if (_la==CUSTOM_SELECT) {  				{  				State = 32; Match(CUSTOM_SELECT);  				}  			}    			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 29;  			switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}  			State = 31; possiblyQualifiedTable();  			State = 33;  			_la = _input.La(1);  			if (_la==CUSTOM_SELECT) {  				{  				State = 32; Match(CUSTOM_SELECT);  				}  			}    			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: EnterRule(_localctx' 6' RULE_possiblyQualifiedTable);
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following statement contains a magic number: try {  			State = 38;  			switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,unqualifiedTable,The following statement contains a magic number: EnterRule(_localctx' 8' RULE_unqualifiedTable);
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,unqualifiedTable,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 40; identifier();  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: EnterRule(_localctx' 10' RULE_qualifiedTable);
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 42; _localctx.schema = identifier();  			State = 43; Match(T__0);  			State = 44; _localctx.table = identifier();  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 42; _localctx.schema = identifier();  			State = 43; Match(T__0);  			State = 44; _localctx.table = identifier();  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,qualifiedTable,The following statement contains a magic number: try {  			EnterOuterAlt(_localctx' 1);  			{  			State = 42; _localctx.schema = identifier();  			State = 43; Match(T__0);  			State = 44; _localctx.table = identifier();  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: EnterRule(_localctx' 12' RULE_identifier);
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following statement contains a magic number: try {  			State = 62;  			switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}  		}  		catch (RecognitionException re) {  			_localctx.exception = re;  			_errHandler.ReportError(this' re);  			_errHandler.Recover(this' re);  		}  		finally {  			ExitRule();  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 3: return possiblyQualifiedTable_sempred((PossiblyQualifiedTableContext)_localctx' predIndex);    		case 6: return identifier_sempred((IdentifierContext)_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,Sempred,The following statement contains a magic number: switch (ruleIndex) {  		case 3: return possiblyQualifiedTable_sempred((PossiblyQualifiedTableContext)_localctx' predIndex);    		case 6: return identifier_sempred((IdentifierContext)_localctx' predIndex);  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following statement contains a magic number: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Magic Number,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,ParseSqlServerBracketEnclosedIdentifier,The following statement contains a magic number: string withoutBrackets = rawText.Substring(1' rawText.Length - 2);
Magic Number,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,ParsePgQuoteEnclosedIdentifier,The following statement contains a magic number: string withoutQuotes = rawText.Substring(1' rawText.Length - 2);
Magic Number,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,ParseMySqlBacktickIdentifier,The following statement contains a magic number: string withoutBackticks = rawText.Substring(1' rawText.Length - 2);
Magic Number,dbsc.Core.Antlr,TableSpecificationListVisitor,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableWithSchemaSpecificationWithCustomSelectListVisitor.cs,ParseMySqlQuoteIdentifier,The following statement contains a magic number: string withoutQuotes = rawText.Substring(1' rawText.Length - 2);
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,Sempred,The following switch statement is missing a default case: switch (ruleIndex) {  		case 1 : return MS_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 2 : return MS_BRACKET_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 3 : return PG_UNENCLOSED_ID_NAME_sempred(_localctx' predIndex);    		case 4 : return PG_QUOTE_ENCLOSED_ID_sempred(_localctx' predIndex);    		case 5 : return MYSQL_UNENCLOSED_ID_sempred(_localctx' predIndex);    		case 6 : return MYSQL_BACKTICK_ID_sempred(_localctx' predIndex);    		case 7 : return MYSQL_QUOTE_ID_sempred(_localctx' predIndex);    		case 8 : return MONGO_ID_sempred(_localctx' predIndex);  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_UNENCLOSED_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 4: return Flavor == IdentifierSyntax.MySql;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_QUOTE_ENCLOSED_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 3: return Flavor == IdentifierSyntax.Postgres;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,PG_UNENCLOSED_ID_NAME_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 2: return Flavor == IdentifierSyntax.Postgres;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MONGO_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 7: return Flavor == IdentifierSyntax.Mongo;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_BACKTICK_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 5: return Flavor == IdentifierSyntax.MySql;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MS_BRACKET_ENCLOSED_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MYSQL_QUOTE_ID_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 6: return Flavor == IdentifierSyntax.MySql;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListLexer,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListLexer.cs,MS_UNENCLOSED_ID_NAME_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 0: return Flavor == IdentifierSyntax.SqlServer;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,tableSpecificationLine,The following switch statement is missing a default case: switch ( Interpreter.AdaptivePredict(_input'1'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 24; possiblyQualifiedTableLine();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				}  				break;  			}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTableLine,The following switch statement is missing a default case: switch ( Interpreter.AdaptivePredict(_input'2'_ctx) ) {  			case 1:  				{  				State = 28; Match(NEGATER);  				}  				break;  			}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable,The following switch statement is missing a default case: switch ( Interpreter.AdaptivePredict(_input'4'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 35; unqualifiedTable();  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 36;  				if (!(Flavor.TwoPartIdentifiersSupported())) throw new FailedPredicateException(this' "Flavor.TwoPartIdentifiersSupported()");  				State = 37; qualifiedTable();  				}  				break;  			}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier,The following switch statement is missing a default case: switch ( Interpreter.AdaptivePredict(_input'5'_ctx) ) {  			case 1:  				EnterOuterAlt(_localctx' 1);  				{  				State = 46;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 47; Match(MS_UNENCLOSED_ID_NAME);  				}  				break;    			case 2:  				EnterOuterAlt(_localctx' 2);  				{  				State = 48;  				if (!(Flavor == IdentifierSyntax.SqlServer)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.SqlServer");  				State = 49; Match(MS_BRACKET_ENCLOSED_ID);  				}  				break;    			case 3:  				EnterOuterAlt(_localctx' 3);  				{  				State = 50;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 51; Match(PG_UNENCLOSED_ID_NAME);  				}  				break;    			case 4:  				EnterOuterAlt(_localctx' 4);  				{  				State = 52;  				if (!(Flavor == IdentifierSyntax.Postgres)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Postgres");  				State = 53; Match(PG_QUOTE_ENCLOSED_ID);  				}  				break;    			case 5:  				EnterOuterAlt(_localctx' 5);  				{  				State = 54;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 55; Match(MYSQL_UNENCLOSED_ID);  				}  				break;    			case 6:  				EnterOuterAlt(_localctx' 6);  				{  				State = 56;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 57; Match(MYSQL_BACKTICK_ID);  				}  				break;    			case 7:  				EnterOuterAlt(_localctx' 7);  				{  				State = 58;  				if (!(Flavor == IdentifierSyntax.MySql)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.MySql");  				State = 59; Match(MYSQL_QUOTE_ID);  				}  				break;    			case 8:  				EnterOuterAlt(_localctx' 8);  				{  				State = 60;  				if (!(Flavor == IdentifierSyntax.Mongo)) throw new FailedPredicateException(this' "Flavor == IdentifierSyntax.Mongo");  				State = 61; Match(MONGO_ID);  				}  				break;  			}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,Sempred,The following switch statement is missing a default case: switch (ruleIndex) {  		case 3: return possiblyQualifiedTable_sempred((PossiblyQualifiedTableContext)_localctx' predIndex);    		case 6: return identifier_sempred((IdentifierContext)_localctx' predIndex);  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,identifier_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 1: return Flavor == IdentifierSyntax.SqlServer;    		case 2: return Flavor == IdentifierSyntax.SqlServer;    		case 3: return Flavor == IdentifierSyntax.Postgres;    		case 4: return Flavor == IdentifierSyntax.Postgres;    		case 5: return Flavor == IdentifierSyntax.MySql;    		case 6: return Flavor == IdentifierSyntax.MySql;    		case 7: return Flavor == IdentifierSyntax.MySql;    		case 8: return Flavor == IdentifierSyntax.Mongo;  		}
Missing Default,dbsc.Core.Antlr,TableSpecificationListParser,C:\repos\LHCGreg_dbsc\dbsc.Core.Antlr\TableSpecificationListParser.cs,possiblyQualifiedTable_sempred,The following switch statement is missing a default case: switch (predIndex) {  		case 0: return Flavor.TwoPartIdentifiersSupported();  		}
