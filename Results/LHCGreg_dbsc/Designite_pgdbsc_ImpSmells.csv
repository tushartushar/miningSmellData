Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,dbsc.Postgres,PgDbscDbConnection,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgDbscDbConnection.cs,ImportTable,The method has 5 parameters. Parameters: sourceConn' table' select' targetDbTransaction' sourceDbTransaction
Long Identifier,dbsc.Postgres,PgDbscCommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgDbscCommandLineArgs.cs,,The length of the parameter _importSpecificationOptionBundle is 32.
Long Identifier,dbsc.Postgres,PgImportOperation,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportOperation.cs,,The length of the parameter EnableConstraintTimeoutInSeconds is 32.
Long Statement,dbsc.Postgres,PgDbscCommandLineArgs,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgDbscCommandLineArgs.cs,GetImportSettings,The length of the statement  "                PgImportSettings importSettings = new PgImportSettings(sourceConnectionSettings' _importSpecificationOptionBundle.ImportTableSpecifications); " is 141.
Long Statement,dbsc.Postgres,PgDbscDbConnection,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgDbscDbConnection.cs,Position2LineNumber,The length of the statement  "            // the field value is a decimal ASCII integer' indicating an error cursor position as an index into the original query string. The first character has index 1' and positions are measured in characters not bytes. " is 211.
Long Statement,dbsc.Postgres,PgImportOperation,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportOperation.cs,PrepareTargetForImport,The length of the statement  "            // Disable foreign key constraints and primary key constraints temporarily by removing them' then recreating them after the import " is 130.
Long Statement,dbsc.Postgres,PgImportOperation,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportOperation.cs,PrepareTargetForImport,The length of the statement  "                string keySql = @"SELECT pg_constraint.conname' pg_constraint.contype' pg_namespace.nspname' pg_class.relname AS tablename' pg_get_constraintdef(pg_constraint.oid) AS def " is 170.
Long Statement,dbsc.Postgres,PgImportOperation,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportOperation.cs,PrepareTargetForImport,The length of the statement  "SELECT ind_schema.nspname AS index_schema' ind_more.relname AS index_name' pg_get_indexdef(ind.indexrelid) AS def FROM pg_index AS ind " is 134.
Long Statement,dbsc.Postgres,PgImportOperation,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportOperation.cs,DoImport,The length of the statement  "                        targetConn.ImportTable(sourceConn' tableAndRule.Table' importSelect' targetDbTransaction: targetTransaction' sourceDbTransaction: sourceTransaction); " is 149.
Long Statement,dbsc.Postgres,PgImportTableListParser,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportTableListParser.cs,Parse,The length of the statement  "            IList<TableWithSchemaSpecificationWithCustomSelect> result = parser.Parse(input' IdentifierSyntax.Postgres' allowCustomSelect' inputFileName); " is 142.
Long Statement,dbsc.Postgres,PgSourceDBOptionBundle,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgSourceDBOptionBundle.cs,AddToOptionSet,The length of the statement  "            optionSet.Add("sourceDbServer="' SourceDBOptionBundle.GetDefaultSourceDbServerOptionText()' arg => SourceDBServer = arg); " is 121.
Long Statement,dbsc.Postgres,PgSourceDBOptionBundle,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgSourceDBOptionBundle.cs,AddToOptionSet,The length of the statement  "            optionSet.Add("sourcePassword="' "Password to use to log in to the source database. If not specified' you will be prompted for your password unless the -sourceSSPI flag is specified."' arg => SourcePassword = arg); " is 214.
Long Statement,dbsc.Postgres,PgSourceDBOptionBundle,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgSourceDBOptionBundle.cs,AddToOptionSet,The length of the statement  "            optionSet.Add("sourceSSPI|sourceIntegratedSecurity"' "Use SSPI (Windows login) authentication with the source database."' argExistence => UseIntegratedSecurity = (argExistence != null)); " is 186.
Long Statement,dbsc.Postgres,PgTargetDBOptionBundle,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgTargetDBOptionBundle.cs,AddToOptionSet,The length of the statement  "            optionSet.Add("p|password="' "Password to use to log in to the target database. If not specified' you will be prompted for your password unless the -SSPI flag is specified."' arg => Password = arg); " is 198.
Long Statement,dbsc.Postgres,PgTargetDBOptionBundle,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgTargetDBOptionBundle.cs,AddToOptionSet,The length of the statement  "            optionSet.Add("SSPI|integratedSecurity"' "Use SSPI (Windows login) authentication with the target database."' argExistence => UseIntegratedSecurity = (argExistence != null)); " is 174.
Virtual Method Call from Constructor,dbsc.Postgres,PgUpdateSettings,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgUpdateSettings.cs,PgUpdateSettings,The constructor "PgUpdateSettings" calls a virtual method "Clone".
Magic Number,dbsc.Postgres,PgImportOperation,D:\research\architectureSmells\repos\LHCGreg_dbsc\pgdbsc\PgImportOperation.cs,PrepareTargetForImport,The following statement contains a magic number: Utils.DoTimedOperation("Removing foreign key and primary key constraints"' () =>              {                  string keySql = @"SELECT pg_constraint.conname' pg_constraint.contype' pg_namespace.nspname' pg_class.relname AS tablename' pg_get_constraintdef(pg_constraint.oid) AS def  FROM pg_constraint  JOIN pg_class ON pg_constraint.conrelid = pg_class.oid  JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid  WHERE (pg_constraint.contype = 'f' OR pg_constraint.contype = 'p')  AND pg_namespace.nspname NOT LIKE 'pg_%' AND pg_namespace.nspname <> 'information_schema'";                    List<ConstraintInfo> keys = targetConn.Query<ConstraintInfo>(keySql' targetTransaction).ToList();                    // Drop foreign keys first because they depend on primary keys                  foreach (ConstraintInfo key in keys.OrderBy(k => k.contype == 'f' ? 1 : 2))                  {                      string qualifiedTableName = PgDbscDbConnection.QuotePgIdentifier(key.nspname' key.tablename);                      string quotedConstraintName = PgDbscDbConnection.QuotePgIdentifier(key.conname);                      string dropSql = string.Format("ALTER TABLE {0} DROP CONSTRAINT {1}"' qualifiedTableName' quotedConstraintName);                      targetConn.ExecuteSql(dropSql' targetTransaction);                      string createSql = string.Format("ALTER TABLE {0} ADD {1}"' qualifiedTableName' key.def);                      if (key.contype == 'f')                          _fkCreationSql.Add(createSql);                      else                          _pkCreationSql.Add(createSql);                  }              });
