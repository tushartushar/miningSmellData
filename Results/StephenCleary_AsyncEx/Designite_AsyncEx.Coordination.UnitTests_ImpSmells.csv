Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,UnitTests,AsyncSemaphoreUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncSemaphoreUnitTests.cs,WaitAsync_Cancelled_DoesNotTakeSlot,The method has an empty catch block.
Magic Number,UnitTests,AsyncCountdownEventUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncCountdownEventUnitTests.cs,AddCount_IncrementsCount,The following statement contains a magic number: Assert.Equal(2' ce.CurrentCount);
Magic Number,UnitTests,AsyncCountdownEventUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncCountdownEventUnitTests.cs,AddCount_IncrementsCount,The following statement contains a magic number: ce.Signal(2);
Magic Number,UnitTests,AsyncCountdownEventUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncCountdownEventUnitTests.cs,Signal_Nonzero_IsNotCompleted,The following statement contains a magic number: var ce = new AsyncCountdownEvent(2);
Magic Number,UnitTests,AsyncCountdownEventUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncCountdownEventUnitTests.cs,Signal_PastZero_PulsesTask,The following statement contains a magic number: ce.Signal(2);
Magic Number,UnitTests,AsyncCountdownEventUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncCountdownEventUnitTests.cs,AddCount_PastZero_PulsesTask,The following statement contains a magic number: ce.AddCount(2);
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_NeverAwaited_DoesNotCallFunc,The following statement contains a magic number: Func<Task<int>> func = () =>              {                  throw new Exception();                  return Task.FromResult(13);              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithCallDirectFlag_CallsFuncDirectly,The following statement contains a magic number: Func<Task<int>> func = () =>              {                  funcThread = Thread.CurrentThread.ManagedThreadId;                  return Task.FromResult(13);              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_ByDefault_CallsFuncOnThreadPool,The following statement contains a magic number: Func<Task<int>> func = () =>              {                  funcThread = Thread.CurrentThread.ManagedThreadId;                  return Task.FromResult(13);              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_Start_CallsFunc,The following statement contains a magic number: Func<Task<int>> func = () =>              {                  tcs.SetResult(null);                  return Task.FromResult(13);              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_Await_ReturnsFuncValue,The following statement contains a magic number: Func<Task<int>> func = async () =>              {                  await Task.Yield();                  return 13;              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_Await_ReturnsFuncValue,The following statement contains a magic number: Assert.Equal(13' result);
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_MultipleAwaiters_OnlyInvokeFuncOnce,The following statement contains a magic number: Func<Task<int>> func = async () =>              {                  Interlocked.Increment(ref invokeCount);                  await tcs.Task;                  return 13;              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_MultipleAwaiters_OnlyInvokeFuncOnce,The following statement contains a magic number: Assert.True(results.SequenceEqual(new[] { 13' 13 }));
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_MultipleAwaiters_OnlyInvokeFuncOnce,The following statement contains a magic number: Assert.True(results.SequenceEqual(new[] { 13' 13 }));
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_FailureCachedByDefault,The following statement contains a magic number: Func<Task<int>> func = async () =>              {                  Interlocked.Increment(ref invokeCount);                  await Task.Yield();                  if (invokeCount == 1)                      throw new InvalidOperationException("Not today' punk.");                  return 13;              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithRetryOnFailure_DoesNotCacheFailure,The following statement contains a magic number: Func<Task<int>> func = async () =>              {                  Interlocked.Increment(ref invokeCount);                  await Task.Yield();                  if (invokeCount == 1)                      throw new InvalidOperationException("Not today' punk.");                  return 13;              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithRetryOnFailure_DoesNotCacheFailure,The following statement contains a magic number: Assert.Equal(13' await lazy);
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithRetryOnFailure_DoesNotCacheFailure,The following statement contains a magic number: Assert.Equal(2' invokeCount);
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithRetryOnFailure_DoesNotRetryOnSuccess,The following statement contains a magic number: Func<Task<int>> func = async () =>              {                  Interlocked.Increment(ref invokeCount);                  await Task.Yield();                  if (invokeCount == 1)                      throw new InvalidOperationException("Not today' punk.");                  return 13;              };
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithRetryOnFailure_DoesNotRetryOnSuccess,The following statement contains a magic number: Assert.Equal(13' await lazy);
Magic Number,UnitTests,AsyncLazyUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLazyUnitTests.cs,AsyncLazy_WithRetryOnFailure_DoesNotRetryOnSuccess,The following statement contains a magic number: Assert.Equal(2' invokeCount);
Magic Number,UnitTests,AsyncLockUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLockUnitTests.cs,AsyncLock_SupportsMultipleAsynchronousLocks,The following statement contains a magic number: await Task.Run(() =>              {                  var asyncLock = new AsyncLock();                  var cancellationTokenSource = new CancellationTokenSource();                  var cancellationToken = cancellationTokenSource.Token;                  var task1 = Task.Run(                      async () =>                      {                          while (!cancellationToken.IsCancellationRequested)                          {                              using (await asyncLock.LockAsync())                              {                                  Thread.Sleep(10);                              }                          }                      });                  var task2 = Task.Run(                      () =>                      {                          using (asyncLock.Lock())                          {                              Thread.Sleep(1000);                          }                      });                    task2.Wait();                  cancellationTokenSource.Cancel();                  task1.Wait();              });
Magic Number,UnitTests,AsyncLockUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncLockUnitTests.cs,AsyncLock_SupportsMultipleAsynchronousLocks,The following statement contains a magic number: await Task.Run(() =>              {                  var asyncLock = new AsyncLock();                  var cancellationTokenSource = new CancellationTokenSource();                  var cancellationToken = cancellationTokenSource.Token;                  var task1 = Task.Run(                      async () =>                      {                          while (!cancellationToken.IsCancellationRequested)                          {                              using (await asyncLock.LockAsync())                              {                                  Thread.Sleep(10);                              }                          }                      });                  var task2 = Task.Run(                      () =>                      {                          using (asyncLock.Lock())                          {                              Thread.Sleep(1000);                          }                      });                    task2.Wait();                  cancellationTokenSource.Cancel();                  task1.Wait();              });
Magic Number,UnitTests,AsyncMonitorUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncMonitorUnitTests.cs,PulseAll_ReleasesAllWaiters,The following statement contains a magic number: Assert.Equal(2' result);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithMaxCountSmallerThanCollectionCount_Throws,The following statement contains a magic number: AsyncAssert.Throws<ArgumentException>(() => new AsyncProducerConsumerQueue<int>(new[] { 3' 5 }' 1));
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithMaxCountSmallerThanCollectionCount_Throws,The following statement contains a magic number: AsyncAssert.Throws<ArgumentException>(() => new AsyncProducerConsumerQueue<int>(new[] { 3' 5 }' 1));
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithCollection_AddsItems,The following statement contains a magic number: var queue = new AsyncProducerConsumerQueue<int>(new[] { 3' 5' 7 });
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithCollection_AddsItems,The following statement contains a magic number: var queue = new AsyncProducerConsumerQueue<int>(new[] { 3' 5' 7 });
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithCollection_AddsItems,The following statement contains a magic number: var queue = new AsyncProducerConsumerQueue<int>(new[] { 3' 5' 7 });
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithCollection_AddsItems,The following statement contains a magic number: Assert.Equal(3' result1);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithCollection_AddsItems,The following statement contains a magic number: Assert.Equal(5' result2);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,ConstructorWithCollection_AddsItems,The following statement contains a magic number: Assert.Equal(7' result3);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_SpaceAvailable_EnqueuesItem,The following statement contains a magic number: await queue.EnqueueAsync(3);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_SpaceAvailable_EnqueuesItem,The following statement contains a magic number: Assert.Equal(3' result);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_CompleteAdding_ThrowsException,The following statement contains a magic number: await AsyncAssert.ThrowsAsync<InvalidOperationException>(() => queue.EnqueueAsync(3));
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,DequeueAsync_Empty_ItemAdded_Completes,The following statement contains a magic number: await queue.EnqueueAsync(13);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,DequeueAsync_Empty_ItemAdded_Completes,The following statement contains a magic number: Assert.Equal(13' result);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_Full_DoesNotComplete,The following statement contains a magic number: var queue = new AsyncProducerConsumerQueue<int>(new[] { 13 }' 1);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_Full_DoesNotComplete,The following statement contains a magic number: var task = queue.EnqueueAsync(7);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_SpaceAvailable_Completes,The following statement contains a magic number: var queue = new AsyncProducerConsumerQueue<int>(new[] { 13 }' 1);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_SpaceAvailable_Completes,The following statement contains a magic number: var task = queue.EnqueueAsync(7);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_Cancelled_Throws,The following statement contains a magic number: var queue = new AsyncProducerConsumerQueue<int>(new[] { 13 }' 1);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,EnqueueAsync_Cancelled_Throws,The following statement contains a magic number: var task = queue.EnqueueAsync(7' cts.Token);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,OutputAvailableAsync_ItemInQueue_ReturnsTrue,The following statement contains a magic number: queue.Enqueue(13);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,OutputAvailableAsync_ItemInQueueAndCompleted_ReturnsTrue,The following statement contains a magic number: queue.Enqueue(13);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: var producer = Task.Run(() =>              {                  queue.Enqueue(3);                  queue.Enqueue(13);                  queue.Enqueue(17);                  queue.CompleteAdding();              });
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: var producer = Task.Run(() =>              {                  queue.Enqueue(3);                  queue.Enqueue(13);                  queue.Enqueue(17);                  queue.CompleteAdding();              });
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: var producer = Task.Run(() =>              {                  queue.Enqueue(3);                  queue.Enqueue(13);                  queue.Enqueue(17);                  queue.CompleteAdding();              });
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: Assert.Equal(3' results.Count);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: Assert.Equal(3' results[0]);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: Assert.Equal(13' results[1]);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: Assert.Equal(17' results[2]);
Magic Number,UnitTests,AsyncProducerConsumerQueueUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncProducerConsumerQueueUnitTests.cs,StandardAsyncSingleConsumerCode,The following statement contains a magic number: Assert.Equal(17' results[2]);
Magic Number,UnitTests,AsyncReaderWriterLockUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncReaderWriterLockUnitTests.cs,LoadTest,The following statement contains a magic number: i != 1000
Magic Number,UnitTests,AsyncReaderWriterLockUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncReaderWriterLockUnitTests.cs,LoadTest,The following statement contains a magic number: i != 100
Magic Number,UnitTests,AsyncReaderWriterLockUnitTests,D:\research\architectureSmells\repos1\StephenCleary_AsyncEx\test\AsyncEx.Coordination.UnitTests\AsyncReaderWriterLockUnitTests.cs,LoadTest,The following statement contains a magic number: await Task.Delay(1000);
