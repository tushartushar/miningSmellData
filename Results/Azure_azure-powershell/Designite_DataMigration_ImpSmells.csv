Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewDataMigrationTask.cs,GetDynamicParameters,Cyclomatic complexity of the method is 21
Long Parameter List,Microsoft.Azure.Commands.DataMigration.Cmdlets,DynamicCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\DynamicCmdlet.cs,SimpleParam,The method has 6 parameters. Parameters: paramName' type' helpMessage' mandatory' usePipeline' argumentCompleterList
Long Parameter List,Microsoft.Azure.Commands.DataMigration.Common,PagingExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Common\PagingExtensions.cs,EnumerateTaskByProjects,The method has 5 parameters. Parameters: ops' resourceGroupName' serviceName' projectName' taskType
Long Identifier,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewDataMigrationTask.cs,,The length of the parameter TaskWaitSleepIntervalInSeconds is 30.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ConnectToTargetSqlSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ConnectToTargetSqlSqlDbSyncTaskCmdlet.cs,ProcessTaskCmdlet,The length of the statement  "            if ((MyInvocation.BoundParameters.ContainsKey(TargetConnection)) && (MyInvocation.BoundParameters.ContainsKey(SourceConnection))) " is 129.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetAzureDataMigrationService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetAzureDataMigrationService.cs,ExecuteCmdlet,The length of the statement  "                throw new PSArgumentException("When specifying the ServiceName parameter the ResourceGroup parameter must also be used"); " is 121.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetDataMigrationTask.cs,ExecuteCmdlet,The length of the statement  "                results.Add(new PSProjectTask(DataMigrationClient.Tasks.Get(this.ResourceGroupName' this.ServiceName' this.ProjectName' this.Name' this.ExpandFilter()))); " is 154.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetProjectCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetProjectCmdlet.cs,ExecuteCmdlet,The length of the statement  "                throw new PSArgumentException("When specifying the ServiceName parameter the ResourceGroup parameter must also be used"); " is 121.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetUserTableSqlSyncCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetUserTableSqlSyncCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SelectedSourceDatabases' typeof(string[])' "List of source database names to collect tables for"' true); " is 121.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetUserTableSqlSyncCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetUserTableSqlSyncCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SelectedTargetDatabases' typeof(string[])' "List of target database names to collect tables for"' true); " is 121.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetUserTableSqlSyncCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetUserTableSqlSyncCmdlet.cs,ProcessTaskCmdlet,The length of the statement  "            if ((MyInvocation.BoundParameters.ContainsKey(SourceConnection)) && (MyInvocation.BoundParameters.ContainsKey(TargetConnection))) " is 129.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateMongoDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateMongoDbTaskCmdlet.cs,ProcessTaskCmdlet,The length of the statement  "                throw new PSArgumentException("Failed or pending migration validation' please check your validation task state and error"); " is 123.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbMiSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbMiSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupFileShare' typeof(FileShare)' "File Share where the backup and transaction logs files are stored"' true); " is 128.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SelectedDatabase' typeof(MigrateSqlServerSqlMIDatabaseInput[])' "Selected database to migrate"' false' true); " is 126.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupFileShare' typeof(FileShare)' "File Share where the source server database files should be backed up. Use fully qualified domain name for the server"' false); " is 181.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupBlobSasUri' typeof(string)' "SAS URI that provides DMS access to your storage account container that DMS will upload the backup files to and use for migrating databases to SQL DB Managed instance"' false); " is 228.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupMode' typeof(string)' "Backup Mode to specify whether to use existing backup or create new backup. Possible values include: 'CreateBackup'' 'ExistingBackup'"' false); " is 189.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SchemaValidation' typeof(SwitchParameter)' "Allows to compare the schema information between source and target."); " is 131.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(DataIntegrityValidation' typeof(SwitchParameter)' "Allows to perform a checksum based data integrity validation between source and target."); " is 158.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(QueryAnalysisValidation' typeof(SwitchParameter)' "Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target."); " is 207.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SelectedDatabase' typeof(MigrateSqlServerSqlDbSyncDatabaseInput[])' "Selected database to migrate"' true' true); " is 129.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbSyncTaskCmdlet.cs,ProcessTaskCmdlet,The length of the statement  "                input.SelectedDatabases = ((MigrateSqlServerSqlDbSyncDatabaseInput[])MyInvocation.BoundParameters[SelectedDatabase]).ToList(); " is 126.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SchemaValidation' typeof(SwitchParameter)' "Allows to compare the schema information between source and target."); " is 131.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(DataIntegrityValidation' typeof(SwitchParameter)' "Allows to perform a checksum based data integrity validation between source and target."); " is 158.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(QueryAnalysisValidation' typeof(SwitchParameter)' "Allows to perform a quick and intelligent query analysis by retrieving queries from the source database and executes them in the target."); " is 207.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SelectedDatabase' typeof(MigrateSqlServerSqlDbDatabaseInput[])' "Selected database to migrate"' true' true); " is 125.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateSqlServerSqlDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateSqlServerSqlDbTaskCmdlet.cs,ProcessTaskCmdlet,The length of the statement  "                input.SelectedDatabases = ((MigrateSqlServerSqlDbDatabaseInput[])MyInvocation.BoundParameters[SelectedDatabase]).ToList(); " is 122.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MongoDbConnectionInfoCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MongoDbConnectionInfoCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(connectionString' typeof(string)' "MongoDb Connection string' ignored if server parameter is provided instead"' false); " is 136.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MongoDbObjectCommandCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MongoDbObjectCommandCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(Immediate' typeof(SwitchParameter)' "whether the finish command immediates stops the oplog replay"' false); " is 124.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,MongoDbObjectCommandCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MongoDbObjectCommandCmdlet.cs,_constructInputCommandObject,The length of the statement  "                    return new MongoDbFinishCommand() { Input = new MongoDbFinishCommandInput() { Immediate = immediate' ObjectName = objectName } }; " is 129.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewDataMigrationTask.cs,ExecuteCmdlet,The length of the statement  "                            WriteVerbose($"{response.Id} {response.Name} {response.Properties.State} Elapsed: {System.DateTime.UtcNow - utcStartedOn}"); " is 124.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewDataMigrationTask.cs,ExecuteCmdlet,The length of the statement  "                            response = DataMigrationClient.Tasks.Get(ResourceGroupName' ServiceName' ProjectName' Name' this.expandParameterOfTask); " is 120.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewMongoDbCollectionSettingCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewMongoDbCollectionSettingCmdlet.cs,_parseShardKey,The length of the statement  "                var regex = new Regex(@"(?<name>[^':]+)(\s*:\s*)?((?<order>[\+|\-]?1)\s*)?"' RegexOptions.Multiline | RegexOptions.IgnoreCase); " is 127.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,RemoveDataMigrationProject,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\RemoveDataMigrationProject.cs,ExecuteCmdlet,The length of the statement  "                        DataMigrationClient.Projects.DeleteWithHttpMessagesAsync(ResourceGroupName' ServiceName' Name' DeleteRunningTask.IsPresent).GetAwaiter().GetResult(); " is 149.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,RemoveDataMigrationService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\RemoveDataMigrationService.cs,ExecuteCmdlet,The length of the statement  "                        DataMigrationClient.Services.DeleteWithHttpMessagesAsync(ResourceGroupName' Name' DeleteRunningTask.IsPresent).GetAwaiter().GetResult(); " is 136.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,RemoveDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\RemoveDataMigrationTask.cs,ExecuteCmdlet,The length of the statement  "                        DataMigrationClient.Tasks.DeleteWithHttpMessagesAsync(ResourceGroupName' ServiceName' ProjectName' Name).GetAwaiter().GetResult(); " is 130.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,SqlConnectionInfoCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\SqlConnectionInfoCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(dataSource' typeof(string)' "Gets or sets data source in the format Protocol:MachineName\\SQLServerInstanceName'PortNumber"' true); " is 148.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,SqlConnectionInfoCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\SqlConnectionInfoCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(encryptConnection' typeof(SwitchParameter)' "Gets or sets whether to encrypt the connection' Default Value True"); " is 131.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,SqlConnectionInfoCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\SqlConnectionInfoCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(trustServerCertificate' typeof(SwitchParameter)' "Gets or sets whether to trust the server certificate"); " is 122.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ValidateMongoDbMigrationTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ValidateMongoDbMigrationTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(Replication' typeof(string)' "type of migration' valid value: OneTime' Continuous' or Disabled' default is OneTime"); " is 134.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ValidateSqlServerSqlDbMiSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ValidateSqlServerSqlDbMiSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupFileShare' typeof(FileShare)' "File Share where the backup and transaction logs files are stored"' true); " is 128.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ValidateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ValidateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupFileShare' typeof(FileShare)' "File Share where the source server database files should be backed up. Use fully qualified domain name for the server"' false); " is 181.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ValidateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ValidateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupBlobSasUri' typeof(string)' "SAS URI that provides DMS access to your storage account container that DMS will upload the backup files to and use for migrating databases to SQL DB Managed instance"' true); " is 227.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ValidateSqlServerSqlDbMiTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ValidateSqlServerSqlDbMiTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(BackupMode' typeof(string)' "Backup Mode to specify whether to use existing backup or create new backup. Possible values include: 'CreateBackup'' 'ExistingBackup'"' false); " is 189.
Long Statement,Microsoft.Azure.Commands.DataMigration.Cmdlets,ValidateSqlServerSqlDbSyncTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\ValidateSqlServerSqlDbSyncTaskCmdlet.cs,CustomInit,The length of the statement  "            this.SimpleParam(SelectedDatabase' typeof(MigrateSqlServerSqlDbSyncDatabaseInput[])' "Selected database to migrate"' true); " is 123.
Long Statement,Microsoft.Azure.Commands.DataMigration.Models,MongoDbConnectionInfo,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Models\DatabaseInfo\MongoDbConnectionInfo.cs,ConstructConnectionString,The length of the statement  "                var regex = new Regex(@"^mongodb:\/\/((?<user>[^:@\/\?]*)?(:?(?<pass>[^:@\/\?]*)?)?@)?(?<server>[^\/:@\?]+)(:(?<port>\d+))?([\/\?]*(?<ssl>.*))$"' RegexOptions.IgnoreCase); " is 171.
Long Statement,Microsoft.Azure.Commands.DataMigration.Models,MongoDbConnectionInfo,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Models\DatabaseInfo\MongoDbConnectionInfo.cs,ConstructConnectionString,The length of the statement  "                    this.UseSSL = this.UseSSL != null || string.IsNullOrWhiteSpace(ssl) ? this.UseSSL : ssl.ToLowerInvariant().Contains("ssl=true"); " is 128.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetAzureDataMigrationService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetAzureDataMigrationService.cs,ExecuteCmdlet,The conditional expression  "(MyInvocation.BoundParameters.ContainsKey("Name") || !string.IsNullOrEmpty(Name))                  && (MyInvocation.BoundParameters.ContainsKey("ResourceGroupName") || !string.IsNullOrEmpty(ResourceGroupName))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetDataMigrationTask.cs,ExecuteCmdlet,The conditional expression  "(MyInvocation.BoundParameters.ContainsKey("ServiceName") || !string.IsNullOrEmpty(this.ServiceName))                  && (MyInvocation.BoundParameters.ContainsKey("ResourceGroupName") || !string.IsNullOrEmpty(this.ResourceGroupName))                  && (MyInvocation.BoundParameters.ContainsKey("ProjectName") || !string.IsNullOrEmpty(this.ProjectName))                  && (MyInvocation.BoundParameters.ContainsKey("Name") || !string.IsNullOrEmpty(this.Name))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetDataMigrationTask.cs,ExecuteCmdlet,The conditional expression  "(MyInvocation.BoundParameters.ContainsKey("ServiceName") || !string.IsNullOrEmpty(this.ServiceName))                  && (MyInvocation.BoundParameters.ContainsKey("ResourceGroupName") || !string.IsNullOrEmpty(this.ResourceGroupName))                  && (MyInvocation.BoundParameters.ContainsKey("ProjectName") || !string.IsNullOrEmpty(this.ProjectName))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetProjectCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetProjectCmdlet.cs,ExecuteCmdlet,The conditional expression  "(MyInvocation.BoundParameters.ContainsKey("ServiceName") || !string.IsNullOrEmpty(ServiceName))                  && (MyInvocation.BoundParameters.ContainsKey("ResourceGroupName") || !string.IsNullOrEmpty(ResourceGroupName))                  && (MyInvocation.BoundParameters.ContainsKey("Name") || !string.IsNullOrEmpty(Name))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,GetProjectCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\GetProjectCmdlet.cs,ExecuteCmdlet,The conditional expression  "(MyInvocation.BoundParameters.ContainsKey("ServiceName") || !string.IsNullOrEmpty(ServiceName))                  && (MyInvocation.BoundParameters.ContainsKey("ResourceGroupName") || !string.IsNullOrEmpty(ResourceGroupName))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,MigrateMongoDbTaskCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MigrateMongoDbTaskCmdlet.cs,ProcessTaskCmdlet,The conditional expression  "validationResult == null ||                    validationResult.ProjectTask == null ||                    validationResult.ProjectTask.Properties == null ||                   validationResult.ProjectTask.Properties.State != "Succeeded""  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewDataMigrationTask,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewDataMigrationTask.cs,ExecuteCmdlet,The conditional expression  "this.Wait.IsPresent && response !=null && response.Properties != null &&                              ( response.Properties.State == "Queued" || response.Properties.State == "Running" )"  is complex.
Virtual Method Call from Constructor,Microsoft.Azure.Commands.DataMigration.Cmdlets,DynamicCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\DynamicCmdlet.cs,DynamicCmdlet,The constructor "DynamicCmdlet" calls a virtual method "CustomInit".
Magic Number,Microsoft.Azure.Commands.DataMigration.Common,DmsResourceIdentifier,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Common\DmsResourceIdentifier.cs,DmsResourceIdentifier,The following statement contains a magic number: tokens.Length < 8
Magic Number,Microsoft.Azure.Commands.DataMigration.Common,DmsResourceIdentifier,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Common\DmsResourceIdentifier.cs,DmsResourceIdentifier,The following statement contains a magic number: ResourceGroupName = tokens[3];
Missing Default,Microsoft.Azure.Commands.DataMigration.Cmdlets,MongoDbObjectCommandCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\MongoDbObjectCommandCmdlet.cs,_constructInputCommandObject,The following switch statement is missing a default case: switch(commandType)              {                  case CommandTypeEnum.RestartMongoDB:                      return new MongoDbRestartCommand() { Input = new MongoDbCommandInput() { ObjectName = objectName } };                  case CommandTypeEnum.FinishMongoDB:                      return new MongoDbFinishCommand() { Input = new MongoDbFinishCommandInput() { Immediate = immediate' ObjectName = objectName } };                  case CommandTypeEnum.CancelMongoDB:                      return new MongoDbCancelCommand() { Input = new MongoDbCommandInput() { ObjectName = objectName } };              }
Missing Default,Microsoft.Azure.Commands.DataMigration.Cmdlets,NewMongoDbCollectionSettingCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataMigration\DataMigration\Cmdlets\NewMongoDbCollectionSettingCmdlet.cs,_parseShardKey,The following switch statement is missing a default case: switch (order)                      {                          case "Forward": case "1": fieldOrder = MongoDbShardKeyOrder.Forward; break;                          case "Reverse": case "-1": fieldOrder = MongoDbShardKeyOrder.Reverse; break;                      }
