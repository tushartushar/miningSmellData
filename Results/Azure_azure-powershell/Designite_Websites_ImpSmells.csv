Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The method has 150 lines of code.
Long Method,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,The method has 146 lines of code.
Complex Method,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,AddAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\AddAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,NewAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\NewAzureWebAppSlot.cs,UpdateConfigIfNeeded,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,UpdateWebAppConfiguration,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.WebApps.Validations,ValidateConnectionStringsAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateConnectionStringsAttribute.cs,Validate,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Azure.Commands.WebApps.Models.WebApp,DeploymentTemplateHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\DeploymentTemplate.cs,CreateSlotCloneDeploymentTemplate,The method has 7 parameters. Parameters: location' serverFarmId' destinationWebAppName' sourceWebAppId' slotNames' hostingProfile' apiVersion
Long Parameter List,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The method has 5 parameters. Parameters: resourceGroup' deploymentName' basicDeployment' job' status
Long Parameter List,Microsoft.Azure.Commands.Common.Strategies.WebApps,AppServicePolicy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Strategies\AppServicePolicy.cs,Create,The method has 6 parameters. Parameters: provider' getOperations' getAsync' createOrUpdateAsync' createTime' compulsoryLocation
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,TryParseWebAppMetadataFromResourceId,The method has 5 parameters. Parameters: resourceId' resourceGroupName' webAppName' slotName' failIfSlot
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,CreateWebApp,The method has 8 parameters. Parameters: resourceGroupName' webAppName' slotName' location' serverFarmId' cloningInfo' aseName' aseResourceGroupName
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,UpdateWebApp,The method has 6 parameters. Parameters: resourceGroupName' location' webAppName' slotName' appServicePlan' siteEnvelope
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The method has 6 parameters. Parameters: resourceGroupName' webSiteName' slotName' deleteEmptyServerFarmBydefault' deleteMetricsBydefault' deleteSlotsBydefault
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppPublishingProfile,The method has 6 parameters. Parameters: resourceGroupName' webSiteName' slotName' outputFile' format' includeDRTEndpoint
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The method has 5 parameters. Parameters: cmdlet' resourceGroupName' webSiteName' slotName' newPSSession
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppUsageMetrics,The method has 8 parameters. Parameters: resourceGroupName' webSiteName' slotName' metricNames' startTime' endTime' timeGrain' instanceDetails
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,CreateOrUpdateAppServicePlan,The method has 5 parameters. Parameters: resourceGroupName' appServicePlanName' appServicePlan' aseName' aseResourceGroupName
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetAppServicePlanHistoricalUsageMetrics,The method has 7 parameters. Parameters: resourceGroupName' appServicePlanName' metricNames' startTime' endTime' timeGrain' instanceDetails
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,UpdateWebAppConfiguration,The method has 8 parameters. Parameters: resourceGroupName' location' webSiteName' slotName' siteConfig' appSettings' connectionStrings' azureStorageSettings
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RestoreSite,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' slotName' backupId' request
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,UpdateHostNameSslState,The method has 7 parameters. Parameters: resourceGroupName' webAppName' slotName' location' hostName' sslState' thumbPrint
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,SwapSlot,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' sourceSlotName' destinationSlotName' preserveVnet
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,SwapSlotWithPreviewApplySlotConfig,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' sourceSlotName' destinationSlotName' preserveVnet
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,CreateOrUpdateSiteSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' siteEnvelope' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,CreateOrUpdateSiteHostNameBinding,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' hostName' hostNameBinding
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,DeleteSiteSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' slot' deleteMetrics' deleteEmptyServerFarm
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,DeleteSite,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' deleteMetrics' deleteEmptyServerFarm
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,ListSitePublishingProfileXmlSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' publishingProfileOptions' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetSiteMetrics,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' details' filter
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetSiteMetricsSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' slot' details' filter
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteConfigSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' siteConfig' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteAppSettingsSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' appSettings' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteConnectionStringsSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' connectionStrings' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteBackupConfigurationSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' request' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,BackupSiteSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' request' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetSiteBackupStatusSecretsSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' backupId' EmptyRequest' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetSiteBackupStatusSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' backupId' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetSiteBackupStatusSecrets,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' backupId' EmptyRequest
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,RestoreSiteSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' backupId' request' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,RestoreSite,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' backupId' request
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,SwapSlotsSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' slotSwapEntity' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,ApplySlotConfigSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' slotSwapEntity' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetServerFarmSites,The method has 6 parameters. Parameters: serverFarm' resourceGroupName' name' skipToken' filter' top
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClientExtensions.cs,GetServerFarmMetrics,The method has 5 parameters. Parameters: serverFarm' resourceGroupName' name' details' filter
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetBySubscription,The length of the parameter progressCurrentOperationFormat is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\RemoveAzureWebApp.cs,,The length of the parameter deleteEmptyServerFarmByDefault is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetBySubscription,The length of the parameter progressCurrentOperationFormat is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,,The length of the parameter FromDeletedResourceNameParameterSet is 35.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,RemoveAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\RemoveAzureWebAppSlot.cs,,The length of the parameter deleteEmptyServerFarmByDefault is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the parameter operationWithSameIdAndProvisioningState is 39.
Long Identifier,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the parameter nestedOperationWithSameIdAndProvisioningState is 45.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,GetApplicationServiceEnvironmentResourceId,The length of the parameter applicationServiceEnvironmentName is 33.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,,The length of the parameter ApplicationServiceEnvironmentResourcesName is 42.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,,The length of the parameter ApplicationServiceEnvironmentResourceIdFormat is 45.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The length of the parameter deleteEmptyServerFarmBydefault is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the parameter defaultTrustedHostsScriptResult is 31.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the parameter webAppContainerPSSessionVarPrefix is 33.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,AddAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\AddAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,The length of the statement  "                            ipSecurityRestriction = new IpSecurityRestriction(IpAddress' null' null' null' null' Action' null' intPriority' Name' Description); " is 131.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,AddAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\AddAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,The length of the statement  "                        var subnetResourceId = CmdletHelpers.ValidateSubnet(Subnet' VirtualNetworkName' ResourceGroupName' DefaultContext.Subscription.Id); " is 131.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,AddAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\AddAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,The length of the statement  "                            ipSecurityRestriction = new IpSecurityRestriction(null' null' subnetResourceId' null' null' Action' null' intPriority' Name' Description); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,AddAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\AddAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,The length of the statement  "                        var accessRestrictionSettings = new PSAccessRestrictionConfig(ResourceGroupName' WebAppName' webApp.SiteConfig' SlotName); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\RemoveAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,The length of the statement  "                        var accessRestrictionConfig = new PSAccessRestrictionConfig(ResourceGroupName' WebAppName' webApp.SiteConfig' SlotName); " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,UpdateAzureWebAppAccessRestrictionConfigCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\UpdateAzureWebAppAccessRestrictionConfig.cs,ExecuteCmdlet,The length of the statement  "                if (ShouldProcess(Name' $"Update Scm Site of WebApp '{Name}' to {updateActionText}use Main Site Access Restriction Config")) " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureAppServicePlanMetricsCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlanMetrics.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetAppServicePlanHistoricalUsageMetrics(ResourceGroupName' Name' Metrics' StartTime' EndTime' Granularity' InstanceDetails.IsPresent)); " is 162.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,BackupRestoreUtils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\BackupRestoreUtils.cs,StringToFrequencyUnit,The length of the statement  "                throw new ArgumentException(string.Format("{0} is not a valid FrequencyUnit. Valid options are Hour and Day."' frequencyUnit)); " is 127.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\GetAzureDeletedWebApp.cs,ExecuteCmdlet,The length of the statement  "                deletedSites = deletedSites.Where(ds => string.Equals(ResourceGroupName' ds.ResourceGroupName' StringComparison.InvariantCultureIgnoreCase)); " is 141.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCertificate,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\GetAzureWebAppCertificate.cs,ProcessRecord,The length of the statement  "           var certificates = CmdletHelpers.GetCertificates(this.ResourcesClient' this.WebsitesClient' ResourceGroupName' Thumbprint); " is 123.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,ProcessRecord,The length of the statement  "                    var certificateName = GenerateCertName(certificateDetails.Thumbprint' webapp.HostingEnvironmentProfile != null ? webapp.HostingEnvironmentProfile.Name : null' webapp.Location' resourceGroupName); " is 195.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,GenerateCertName,The length of the statement  "            return string.Format("{0}{1}{2}"' thumbPrint' CertNamePostFixSeparator' GenerateCertNamePostFix(hostingEnv' location' resourceGroupName)); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,GenerateCertNamePostFix,The length of the statement  "            return string.Format("{0}{1}{2}{3}{4}"' string.IsNullOrEmpty(hostingEnv) ? "" : hostingEnv' CertNamePostFixSeparator' location' CertNamePostFixSeparator' resourceGroupName); " is 173.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\RemoveAzureWebAppSSLBinding.cs,ProcessRecord,The length of the statement  "                        WebsitesClient.UpdateHostNameSslState(resourceGroupName' webAppName' slot' webapp.Location' Name' SslState.Disabled' null); " is 123.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\RemoveAzureWebAppSSLBinding.cs,ProcessRecord,The length of the statement  "                            var certificates = CmdletHelpers.GetCertificates(this.ResourcesClient' this.WebsitesClient' certificateResourceGroup' thumbprint); " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetByLocation,The length of the statement  "            }).Where(s => string.Equals(s.Location' Location.Replace(" "' string.Empty)' StringComparison.OrdinalIgnoreCase)).ToArray(); " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppMetricsCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebAppMetrics.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetWebAppUsageMetrics(ResourceGroupName' Name' null' Metrics' StartTime' EndTime' Granularity' InstanceDetails.IsPresent)); " is 150.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppPublishingProfileCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebAppPublishingProfile.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetWebAppPublishingProfile(ResourceGroupName' Name' null' OutputFile' Format' IncludeDisasterRecoveryEndpoints)); " is 140.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateWithClonedWebApp,The length of the statement  "                    AppSettingsOverrides = AppSettingsOverrides == null ? null : AppSettingsOverrides.Cast<DictionaryEntry>().ToDictionary(kvp => kvp.Key.ToString()' kvp => kvp.Value.ToString()' StringComparer.Ordinal) " is 198.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateWithClonedWebApp,The length of the statement  "            WriteObject(new PSSite(WebsitesClient.CreateWebApp(ResourceGroupName' Name' null' Location' AppServicePlan' cloningInfo' AseName' AseResourceGroupName))); " is 154.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateWithClonedWebApp,The length of the statement  "                WriteVerboseWithTimestamp("Cloning all deployment slots of source web app '{0}' to destination web app {1}"' srcwebAppName' Name); " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,GetDefaultServerFarm,The length of the statement  "            var websiteLocation = string.IsNullOrWhiteSpace(location) ? new LocationConstraint() : new LocationConstraint(location); " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,GetDefaultServerFarm,The length of the statement  "            var farmResources = await ResourcesClient.ResourceManagementClient.Resources.ListAsync(new ODataQuery<GenericResourceFilter>(r => r.ResourceType == "Microsoft.Web/serverFarms")); " is 178.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateWithSimpleParameters,The length of the statement  "                    var profile = await WebsitesClient.WrappedWebsitesClient.WebApps.ListPublishingProfileXmlWithSecretsAsync(output.ResourceGroup' output.Name' new CsmPublishingProfileOptions { Format = "WebDeploy" }); " is 199.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CloneSlots,The length of the statement  "            var hostingEnvironmentProfile = WebsitesClient.CreateHostingEnvironmentProfile(ResourceGroupName' AseResourceGroupName' AseName); " is 129.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CloneSlots,The length of the statement  "            var template = DeploymentTemplateHelper.CreateSlotCloneDeploymentTemplate(Location' AppServicePlan' Name' SourceWebApp.Id' " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,GetNewConfig,The length of the statement  "                    siteConfig.AppSettings.Add(new NameValuePair(CmdletHelpers.DocerRegistryServerUserName' _cmdlet.ContainerRegistryUser)); " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,GetNewConfig,The length of the statement  "                    siteConfig.AppSettings.Add(new NameValuePair(CmdletHelpers.DocerRegistryServerPassword' _cmdlet.ContainerRegistryPassword.ConvertToString())); " is 142.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateConfigAsync,The length of the statement  "                // If ContainerImageName is specified and appservice plan doesn’t exist (appServiceplan == null) we will try to create plan with windows container  " is 146.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateConfigAsync,The length of the statement  "                var farmStrategy = planRG.CreateServerFarmConfig(planResourceGroup' planName' appServiceplan == null && _cmdlet.ContainerImageName != null); " is 140.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,PublishAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\PublishAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic"' Convert.ToBase64String(byteArray)); " is 143.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,PublishAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\PublishAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                        var rec = new ErrorRecord(new Exception("Maximum status polling time exceeded. Deployment is still in progress.")' string.Empty' ErrorCategory.OperationTimeout' null); " is 167.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,PublishAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\PublishAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                        var rec = new ErrorRecord(new Exception("Deployment failed with status code " + r.StatusCode)' string.Empty' ErrorCategory.InvalidResult' null); " is 144.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,PublishAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\PublishAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "            ConfirmAction(this.Force.IsPresent' $"Contents of {ArchivePath} will be deployed to the web app {Name}."' "The web app has been deployed."' Name' zipDeployAction); " is 163.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\RemoveAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    WebsitesClient.RemoveWebApp(ResourceGroupName' Name' null' deleteEmptyServerFarmByDefault' deleteMetricsByDefault' deleteSlotsByDefault); " is 137.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' null' siteConfig' appSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary()' AzureStoragePath.ConvertToAzureStorageAccountPathPropertyDictionary()); " is 263.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                            Identity = parameters.Contains("AssignIdentity") ? AssignIdentity ? new ManagedServiceIdentity("SystemAssigned"' null' null) : new ManagedServiceIdentity("None"' null' null) : WebApp.Identity' " is 192.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                        // AzureStorage path is not a part of the back end siteObject' but if the PSSite Object is given as an input' so simply set this to null " is 136.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    // AzureStorage path is not a part of the back end siteObject' but if the PSSite Object is given as an input' we will some value for this " is 137.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByLocation,The length of the statement  "            var progressRecord = new ProgressRecord(1' string.Format("Get app service plans at location '{0}'"' Location)' "Progress:"); " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByLocation,The length of the statement  "            }).Where(sf => string.Equals(sf.Location' Location.Replace(" "' string.Empty)' StringComparison.OrdinalIgnoreCase)).ToArray(); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,NewAzureAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\NewAzureAppServicePlan.cs,ExecuteCmdlet,The length of the statement  "            AppServicePlan retPlan = WebsitesClient.CreateOrUpdateAppServicePlan(ResourceGroupName' Name' appServicePlan' AseName' aseResourceGroupName); " is 141.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,SetAzureAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\SetAzureAppServicePlan.cs,ExecuteCmdlet,The length of the statement  "                    AppServicePlan.Sku.Name = string.IsNullOrWhiteSpace(WorkerSize) ? CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' workerSizeAsNumber) : CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' WorkerSize); " is 200.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,SetAzureAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\SetAzureAppServicePlan.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(new PSAppServicePlan(WebsitesClient.CreateOrUpdateAppServicePlan(ResourceGroupName' Name' AppServicePlan))' true); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,ExecuteCmdlet,The length of the statement  "            Action restoreAction = () => WebsitesClient.RestoreDeletedWebApp(TargetResourceGroupName' TargetName' TargetSlot' restoreReq); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,ExecuteCmdlet,The length of the statement  "                ConfirmAction(this.Force.IsPresent' "Target web app contents will be overwritten with the contents of the deleted app."' " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,ExecuteCmdlet,The length of the statement  "                    throw new Exception("Target app " + TargetName + " does not exist. Specify TargetAppServicePlanName for it to be created automatically."); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,ExecuteCmdlet,The length of the statement  "                    throw new Exception("Target App Service Plan " + TargetAppServicePlanName + " not found in target Resource Group " + TargetResourceGroupName); " is 142.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,ExecuteCmdlet,The length of the statement  "                string confirmMsg = string.Format("This web app will be created. App Name: {0}' Resource Group: {1}"' TargetName' TargetResourceGroupName); " is 139.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,GetDeletedSiteResourceId,The length of the statement  "                        WriteWarning("Found multiple matching deleted apps. Restoring the most recently deleted app' deleted at " + lastDeleted.DeletedTimestamp); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,GetDeletedSiteResourceId,The length of the statement  "                    return "/subscriptions/" + DefaultContext.Subscription.Id + "/providers/Microsoft.Web/locations/" + lastDeleted.GeoRegionName + "/deletedSites/" + lastDeleted.DeletedSiteId; " is 173.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,GetDeletedSiteResourceId,The length of the statement  "                    return "/subscriptions/" + InputObject.SubscriptionId + "/providers/Microsoft.Web/locations/" + InputObject.Location + "/deletedSites/" + InputObject.DeletedSiteId; " is 164.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,GetAzureWebAppSlotMetricsCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\GetAzureWebAppSlotMetrics.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetWebAppUsageMetrics(ResourceGroupName' Name' Slot' Metrics' StartTime' EndTime' Granularity' InstanceDetails.IsPresent)); " is 150.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,GetAzureWebAppSlotPublishingProfileCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\GetAzureWebAppSlotPublishingProfile.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetWebAppPublishingProfile(ResourceGroupName' Name' Slot' OutputFile' Format' IncludeDisasterRecoveryEndpoints)); " is 140.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,NewAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\NewAzureWebAppSlot.cs,UpdateConfigIfNeeded,The length of the statement  "				WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' site.Location' Name' Slot' siteConfig' appSettings.ConvertToStringDictionary()); " is 140.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,NewAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\NewAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                    AppSettingsOverrides = AppSettingsOverrides == null ? null : AppSettingsOverrides.Cast<DictionaryEntry>().ToDictionary(kvp => kvp.Key.ToString()' kvp => kvp.Value.ToString()' StringComparer.Ordinal) " is 198.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,NewAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\NewAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "			var site = new PSSite(WebsitesClient.CreateWebApp(ResourceGroupName' Name' Slot' webApp.Location' AppServicePlan==null?webApp.ServerFarmId : AppServicePlan' cloningInfo' AseName' AseResourceGroupName)); " is 202.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,RemoveAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\RemoveAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                () => WebsitesClient.RemoveWebApp(ResourceGroupName' Name' Slot' deleteEmptyServerFarmByDefault' deleteMetricsByDefault' deleteSlotsByDefault)); " is 144.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                    WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' Slot' siteConfig' appSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary()' AzureStoragePath.ConvertToAzureStorageAccountPathPropertyDictionary()); " is 263.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                            Identity = parameters.Contains("AssignIdentity") ? AssignIdentity ? new ManagedServiceIdentity("SystemAssigned"' null' null) : new ManagedServiceIdentity("None"' null' null) : WebApp.Identity' " is 192.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotConfigName,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlotConfigName.cs,ExecuteCmdlet,The length of the statement  "                throw new ValidationMetadataException("Please either provide a list of app setting names or set RemoveAllSettingNames option to true"); " is 135.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotConfigName,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlotConfigName.cs,ExecuteCmdlet,The length of the statement  "                throw new ValidationMetadataException("Please either provide a list of connection string names or set RemoveAllConnectionStringNames option to true"); " is 150.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                                WebsitesClient.SwapSlotWithPreviewApplySlotConfig(ResourceGroupName' Name' SourceSlotName' DestinationSlotName' PreserveVnet); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                actionMessage = string.Format("Regular swap: Are you sure you want to swap {0} slot with {1} slot"' SourceSlotName' DestinationSlotName); " is 137.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                        actionMessage = string.Format("Swap with preview: Applying slot config from {0} slot onto {1} slot"' DestinationSlotName' SourceSlotName); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                        actionMessage = string.Format("Swap with preview: Completing the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName); " is 167.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                        actionMessage = string.Format("Swap with preview: Resetting the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName); " is 166.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetAppResource,The length of the statement  "                query = new ODataQuery<GenericResourceFilter>($"resourceType eq 'Microsoft.Web/sites/slots' and name eq '{name}/{slot}'"); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                DeploymentOperation operationWithSameIdAndProvisioningState = old.Find(o => o.OperationId.Equals(operation.OperationId) && o.Properties.ProvisioningState.Equals(operation.Properties.ProvisioningState)); " is 202.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                //If nested deployment' get the operations under those deployments as well. Check if the deployment exists before calling list operations on it " is 143.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                    operation.Properties.TargetResource.ResourceType.Equals("Microsoft.Resources/deployments"' StringComparison.OrdinalIgnoreCase) && " is 129.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                            DeploymentOperation nestedOperationWithSameIdAndProvisioningState = newOperations.Find(o => o.OperationId.Equals(op.OperationId) && o.Properties.ProvisioningState.Equals(op.Properties.ProvisioningState)); " is 204.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,GenerateSiteWithSlotName,The length of the statement  "            if (!string.IsNullOrEmpty(slotName) && !string.Equals(slotName' ProductionSlotName' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,GetApplicationServiceEnvironmentResourceId,The length of the statement  "            return string.Format(ApplicationServiceEnvironmentResourceIdFormat' subscriptionId' resourceGroupName' ApplicationServiceEnvironmentResourcesName' " is 146.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,GetHostNameSslStatesFromSiteResponse,The length of the statement  "                hostNameSslState = site.HostNameSslStates.Where(h => h.SslState.HasValue && h.SslState.Value != SslState.Disabled).ToArray(); " is 125.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,GetCertificates,The length of the statement  "                    websitesClient.GetCertificate(certificateResource.ResourceGroupName ?? GetResourceGroupFromResourceId(certificateResource.Id)' certificateResource.Name)); " is 154.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,GetCertificates,The length of the statement  "                certificates = certificates.Where(c => string.Equals(c.Thumbprint' thumbPrint' StringComparison.OrdinalIgnoreCase)).ToList(); " is 125.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,ValidateSubnet,The length of the statement  "            //Resource Id Format: "subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}/subnets/{3}" " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,VerifySubnetDelegation,The length of the statement  "            var networkClient = AzureSession.Instance.ClientFactory.CreateArmClient<NetworkManagementClient>(context' AzureEnvironment.Endpoint.ResourceManager); " is 149.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,VerifySubnetDelegation,The length of the statement  "                subnetObj.ServiceEndpoints.Add(new ServiceEndpointPropertiesFormat(serviceEndpointServiceName' serviceEndpointLocations)); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\CmdletHelpers.cs,VerifySubnetDelegation,The length of the statement  "                    subnetObj.ServiceEndpoints.Add(new ServiceEndpointPropertiesFormat(serviceEndpointServiceName' serviceEndpointLocations)); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,CreateHostingEnvironmentProfile,The length of the statement  "            return CmdletHelpers.CreateHostingEnvironmentProfile(WrappedWebsitesClient.SubscriptionId' resourceGroupName' aseResourceGroupName' aseName); " is 141.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The length of the statement  "                WrappedWebsitesClient.WebApps().DeleteSlot(resourceGroupName' webSiteName' slotName' deleteMetrics: deleteMetricsBydefault' deleteEmptyServerFarm: deleteEmptyServerFarmBydefault); " is 179.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The length of the statement  "                WrappedWebsitesClient.WebApps().Delete(resourceGroupName' webSiteName' deleteMetrics: deleteMetricsBydefault' deleteEmptyServerFarm: deleteEmptyServerFarmBydefault); " is 165.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppPublishingProfile,The length of the statement  "                WrappedWebsitesClient.WebApps().ListPublishingProfileXmlWithSecretsSlot(resourceGroupName' webSiteName' options' slotName) :  " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,ResetWebAppPublishingCredentials,The length of the statement  "                WrappedWebsitesClient.WebApps().ListPublishingProfileXmlWithSecretsSlot(resourceGroupName' webSiteName' options' slotName) :  " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,ResetWebAppPublishingCredentials,The length of the statement  "            var profile = doc.Root == null ? null : doc.Root.Element("publishData") == null ? null : doc.Root.Element("publishData").Elements("publishProfile") " is 147.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "                // if there are no compatible versions subsequent to the minimum versions' we don't continue because the command will fail " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "                bool isBasicAuthEnabled = ExecuteScriptAndGetVariableAsBool(cmdlet' "${0} = (Get-Item WSMAN:\\LocalHost\\Client\\Auth\\Basic -ErrorAction SilentlyContinue).Value"' false); " is 171.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "                string trustedHostsScriptResult = ExecuteScriptAndGetVariable(cmdlet' "${0} = (Get-Item WSMAN:\\LocalHost\\Client\\TrustedHosts -ErrorAction SilentlyContinue).Value"' defaultTrustedHostsScriptResult); " is 200.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "                Regex expression = new Regex(@"^\*$|((^\*|^" + (string.IsNullOrWhiteSpace(slotName)? webSiteName : webSiteName + "-" + slotName) + ").azurewebsites.net)"); " is 155.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "                    WriteWarning(string.Format(Properties.Resources.EnterContainerPSSessionFormatForTrustedHostsWarning' string.IsNullOrWhiteSpace(trustedHostsScriptResult) ? defaultTrustedHostsScriptResult: trustedHostsScriptResult) +  " is 215.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "            string publishingUserName = user.PublishingUserName.Length <= 20 ? user.PublishingUserName : user.PublishingUserName.Substring(0' 20); " is 134.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "            string psSessionScript = string.Format("${3}User = '{0}' \n${3}Password = ConvertTo-SecureString -String '{1}' -AsPlainText -Force \n" + " is 136.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "                (newPSSession ? "${3}NewPsSession = New-PSSession" : "Enter-PSSession") + " -ConnectionUri https://{2}/WSMAN -Authentication Basic -Credential ${3}Credential \n"' " is 162.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The length of the statement  "            cmdlet.ExecuteScript<object>(string.Format("Clear-Variable {0}*"' webAppContainerPSSessionVarPrefix)); //Clearing session variable " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppUsageMetrics,The length of the statement  "                WrappedWebsitesClient.WebApps().ListMetricsSlot(resourceGroupName' webSiteName' slotName' instanceDetails' CmdletHelpers.BuildMetricFilter(startTime' endTime ?? DateTime.Now' timeGrain' metricNames)) : " is 201.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppUsageMetrics,The length of the statement  "                WrappedWebsitesClient.WebApps().ListMetrics(resourceGroupName' webSiteName' instanceDetails' CmdletHelpers.BuildMetricFilter(startTime' endTime ?? DateTime.Now' timeGrain' metricNames)); " is 186.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,CreateOrUpdateAppServicePlan,The length of the statement  "				id: CmdletHelpers.GetApplicationServiceEnvironmentResourceId(WrappedWebsitesClient.SubscriptionId' aseResourceGroupName' aseName)' " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,UpdateWebAppConfiguration,The length of the statement  "                    WrappedWebsitesClient.WebApps().UpdateConfiguration(resourceGroupName' webSiteName' siteConfig.ConvertToSiteConfigResource()); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppConfiguration,The length of the statement  "                site.SiteConfig.AppSettings = appSettings.Properties.Select(s => new NameValuePair { Name = s.Key' Value = s.Value }).ToList(); " is 127.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetSiteSnapshots,The length of the statement  "                    return WrappedWebsitesClient.WebApps.ListSnapshotsFromDRSecondarySlot(resourceGroupName' webSiteName' slotName).ToList(); " is 121.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateConnectionStringsAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateConnectionStringsAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}"' key' key.GetType())); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateConnectionStringsAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateConnectionStringsAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException("Connection string type value pair must be of type 'System.Collections.Hashtable'"); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateServerFarmAttribute.cs,Validate,The length of the statement  "                throw new ValidationMetadataException("Argument 'ServerFarm' must be of type Microsoft.Azure.Management.WebSites.Models.ServerFarmWithRichSku"); " is 144.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateServerFarmAttribute.cs,ValidateSku,The length of the statement  "                throw new ValidationMetadataException("Argument 'ServerFarm.SKU.Name' must conform to format first letter of sku name and numerical value of worker size. Worker Size [Small = 1' Medium = 2' Large = 3' ExtraLarge = 4] For instance' F1 means free small workers' P3 means premium large workers. "); " is 295.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateServerFarmAttribute.cs,ValidateSku,The length of the statement  "                throw new ValidationMetadataException("Argument 'ServerFarm.SKU.Tier' must be one of Free|Shared|Basic|Standard|Premium"); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateServerFarmAttribute.cs,ValidateSku,The length of the statement  "                throw new ValidationMetadataException(string.Format("Arguments 'ServerFarm.SKU.Name' and 'ServerFarm.SKU.Tier' must point to the same tier. [F = Free' D = Shared' B = Basic' S = Standard' P = Premium' I=Isolated]. Current values: SKU.Name = {0}' SKU.Tier = {1}"' sku.Name' sku.Tier)); " is 284.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateStringDictionaryAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateStringDictionaryAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}"' key' key.GetType())); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateStringDictionaryAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateStringDictionaryAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException(string.Format("Value '{0}' should be of type string instead of {1}"' value' value.GetType())); " is 132.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateWebAppNameAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Validations\ValidateWebAppNameAttribute.cs,Validate,The length of the statement  "                throw new ValidationMetadataException(string.Format("Specified resource '{0}' is a non-production web app slot. Please use the AzureRMWebAppSlot cmdlets to manage this resource"' webAppName)); " is 192.
Complex Conditional,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,ProcessRecord,The conditional expression  "ParameterSetName != ParameterSet1Name                  && ParameterSetName != ParameterSet2Name                  && ParameterSetName != ParameterSet3Name                  && ParameterSetName != ParameterSet4Name"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CreateWithSimpleParameters,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,GetWebAppConfiguration,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetByWebAppName,The following statement contains a magic number: progressRecord.PercentComplete = (100 * (i + 1)) / sites.Length;
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetBySubscription,The following statement contains a magic number: progressRecord.PercentComplete = (100 * (i + 1)) / resourceGroups.Length;
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetByLocation,The following statement contains a magic number: progressRecord.PercentComplete = (100 * (i + 1)) / sites.Length;
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,TryGetServerFarmFromResourceId,The following statement contains a magic number: resourceGroup = parts[3];
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,TryGetServerFarmFromResourceId,The following statement contains a magic number: serverFarmName = parts[7];
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\NewAzureWebApp.cs,TryGetServerFarmFromResourceId,The following statement contains a magic number: parts.Length > 7
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,PublishAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\PublishAzureWebApp.cs,ExecuteCmdlet,The following statement contains a magic number: Action zipDeployAction = () =>              {                  using (var s = File.OpenRead(ArchivePath))                  {                      HttpClient client = new HttpClient();                      var byteArray = Encoding.ASCII.GetBytes(user.PublishingUserName + ":" + user.PublishingPassword);                      client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic"' Convert.ToBase64String(byteArray));                      HttpContent fileContent = new StreamContent(s);                      fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/zip");                      r = client.PostAsync(deployUrl' fileContent).Result;                        int numChecks = 0;                      do                      {                          Thread.Sleep(TimeSpan.FromSeconds(2));                          r = client.GetAsync(deploymentStatusUrl).Result;                          numChecks++;                      } while (r.StatusCode == HttpStatusCode.Accepted && numChecks < NumStatusChecks);                        if (r.StatusCode == HttpStatusCode.Accepted && numChecks >= NumStatusChecks)                      {                          var rec = new ErrorRecord(new Exception("Maximum status polling time exceeded. Deployment is still in progress.")' string.Empty' ErrorCategory.OperationTimeout' null);                          WriteError(rec);                      }                      else if (r.StatusCode != HttpStatusCode.OK)                      {                          var rec = new ErrorRecord(new Exception("Deployment failed with status code " + r.StatusCode)' string.Empty' ErrorCategory.InvalidResult' null);                          WriteError(rec);                      }                  }              };
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByAppServicePlanName,The following statement contains a magic number: progressRecord.PercentComplete = (100 * (i + 1)) / serverFarmResources.Length;
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetBySubscription,The following statement contains a magic number: progressRecord.PercentComplete = (100 * (i + 1)) / resourceGroups.Length;
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByLocation,The following statement contains a magic number: progressRecord.PercentComplete = (100 * (i + 1)) / serverFarmResources.Length;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: int counter = 5000;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: counter = counter + 5000 > 60000 ? 60000 : counter + 5000;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: counter = counter + 5000 > 60000 ? 60000 : counter + 5000;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: counter = counter + 5000 > 60000 ? 60000 : counter + 5000;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: counter = counter + 5000 > 60000 ? 60000 : counter + 5000;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The following statement contains a magic number: Version minimumVersion = new Version(6' 1' 0' 0);
Magic Number,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The following statement contains a magic number: string publishingUserName = user.PublishingUserName.Length <= 20 ? user.PublishingUserName : user.PublishingUserName.Substring(0' 20);
Magic Number,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Utilities\WebsitesClient.cs,RunWebAppContainerPSSessionScript,The following statement contains a magic number: string publishingUserName = user.PublishingUserName.Length <= 20 ? user.PublishingUserName : user.PublishingUserName.Substring(0' 20);
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,AddAzureWebAppAccessRestrictionRuleCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\AddAzureWebAppAccessRestrictionRule.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case IpAddressParameterSet:                                                  foreach (var accessRestriction in accessRestrictionList)                          {                              if (accessRestriction.IpAddress != null &&                                   accessRestriction.IpAddress == IpAddress &&                                   accessRestriction.Action.ToLowerInvariant() == Action.ToLowerInvariant())                              {                                  accessRestrictionExists = true;                                  accessRestriction.Name = Name;                                  accessRestriction.Priority = intPriority;                                  accessRestriction.Description = Description;                                  break;                              }                          }                          if (!accessRestrictionExists)                          {                              ipSecurityRestriction = new IpSecurityRestriction(IpAddress' null' null' null' null' Action' null' intPriority' Name' Description);                              accessRestrictionList.Add(ipSecurityRestriction);                          }                          break;                        case SubnetNameParameterSet:                      case SubnetIdParameterSet:                          var Subnet = ParameterSetName == SubnetNameParameterSet ? SubnetName : SubnetId;                          var subnetResourceId = CmdletHelpers.ValidateSubnet(Subnet' VirtualNetworkName' ResourceGroupName' DefaultContext.Subscription.Id);                          if (!IgnoreMissingServiceEndpoint)                          {                              CmdletHelpers.VerifySubnetDelegation(DefaultContext' subnetResourceId);                          }                          foreach (var accessRestriction in accessRestrictionList)                          {                              if (accessRestriction.VnetSubnetResourceId != null &&                                  accessRestriction.VnetSubnetResourceId.ToLowerInvariant() == subnetResourceId.ToLowerInvariant() &&                                   accessRestriction.Action.ToLowerInvariant() == Action.ToLowerInvariant())                              {                                  accessRestrictionExists = true;                                  accessRestriction.Name = Name;                                  accessRestriction.Priority = intPriority;                                  accessRestriction.Description = Description;                                  break;                              }                          }                          if (!accessRestrictionExists)                          {                              ipSecurityRestriction = new IpSecurityRestriction(null' null' subnetResourceId' null' null' Action' null' intPriority' Name' Description);                              accessRestrictionList.Add(ipSecurityRestriction);                          }                                             break;                  }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,UpdateAzureWebAppAccessRestrictionConfigCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AccessRestriction\UpdateAzureWebAppAccessRestrictionConfig.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case InputValuesParameterSet:                      inheritConfig = ScmSiteUseMainSiteRestrictionConfig;                      break;                  case InputObjectParameterSet:                      inheritConfig = InputObject.ScmSiteUseMainSiteRestrictionConfig;                      ResourceGroupName = InputObject.ResourceGroupName;                      Name = InputObject.WebAppName;                      SlotName = InputObject.SlotName;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,ProcessRecord,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                  case ParameterSet3Name:                      var certificateBytes = File.ReadAllBytes(CertificateFilePath);                      var certificateDetails = new X509Certificate2(certificateBytes' CertificatePassword);                        var certificateName = GenerateCertName(certificateDetails.Thumbprint' webapp.HostingEnvironmentProfile != null ? webapp.HostingEnvironmentProfile.Name : null' webapp.Location' resourceGroupName);                      var certificate = new Certificate(                          webapp.Location'                          pfxBlob: certificateBytes'                          password: CertificatePassword'                          hostingEnvironmentProfile: webapp.HostingEnvironmentProfile ?? null'                                                          serverFarmId: webapp.ServerFarmId);                        try                      {                          WebsitesClient.CreateCertificate(resourceGroupName' certificateName' certificate);                      }                      catch (CloudException e)                      {                          // This exception is thrown when certificate already exists. Let's swallow it and continue.                          if (e.Response.StatusCode != HttpStatusCode.Conflict)                          {                              throw;                          }                      }                        thumbPrint = certificateDetails.Thumbprint;                      break;                    case ParameterSet2Name:                  case ParameterSet4Name:                      thumbPrint = Thumbprint;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\GetAzureWebApp.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1:                      if (!string.IsNullOrWhiteSpace(ResourceGroupName) && !string.IsNullOrWhiteSpace(Name))                      {                          WriteObject(new PSSite(WebsitesClient.GetWebApp(ResourceGroupName' Name' null)));                      }                      else if (!string.IsNullOrWhiteSpace(ResourceGroupName))                      {                          GetByResourceGroup();                      }                      else if (!string.IsNullOrWhiteSpace(Name))                      {                          GetByWebAppName();                      }                      else                      {                          GetBySubscription();                      }                      break;                  case ParameterSet2:                      GetByAppServicePlan();                      break;                  case ParameterSet3:                      GetByLocation();                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      WebApp = new PSSite(WebsitesClient.GetWebApp(ResourceGroupName' Name' null));                      location = WebApp.Location;                      tags = WebApp.Tags;                      var parameters = new HashSet<string>(MyInvocation.BoundParameters.Keys' StringComparer.OrdinalIgnoreCase);                      if (parameters.Any(p => CmdletHelpers.SiteConfigParameters.Contains(p)))                      {                          siteConfig = new SiteConfig                          {                              DefaultDocuments = parameters.Contains("DefaultDocuments") ? DefaultDocuments : null'                              NetFrameworkVersion = parameters.Contains("NetFrameworkVersion") ? NetFrameworkVersion : null'                              PhpVersion = parameters.Contains("PhpVersion") ? PhpVersion.ToLower() == "off" ? "" : PhpVersion : null'                              RequestTracingEnabled =                                  parameters.Contains("RequestTracingEnabled") ? (bool?)RequestTracingEnabled : null'                              HttpLoggingEnabled = parameters.Contains("HttpLoggingEnabled") ? (bool?)HttpLoggingEnabled : null'                              DetailedErrorLoggingEnabled =                                  parameters.Contains("DetailedErrorLoggingEnabled") ? (bool?)DetailedErrorLoggingEnabled : null'                              HandlerMappings = parameters.Contains("HandlerMappings") ? HandlerMappings : null'                              ManagedPipelineMode =                                  parameters.Contains("ManagedPipelineMode")                                      ? (ManagedPipelineMode?)Enum.Parse(typeof(ManagedPipelineMode)' ManagedPipelineMode)                                      : null'                              WebSocketsEnabled = parameters.Contains("WebSocketsEnabled") ? (bool?)WebSocketsEnabled : null'                              Use32BitWorkerProcess =                                  parameters.Contains("Use32BitWorkerProcess") ? (bool?)Use32BitWorkerProcess : null'                              AutoSwapSlotName = parameters.Contains("AutoSwapSlotName") ? AutoSwapSlotName : null'                              NumberOfWorkers = parameters.Contains("NumberOfWorkers") ? NumberOfWorkers : WebApp.SiteConfig.NumberOfWorkers                          };                      }                        Hashtable appSettings = AppSettings ?? new Hashtable();                        if (siteConfig == null)                      {                          siteConfig = WebApp.SiteConfig;                      }                        //According to current implementation if AppSettings parameter is provided we are overriding existing AppSettings                      if (WebApp.SiteConfig.AppSettings != null && AppSettings == null)                      {                          foreach (var setting in WebApp.SiteConfig.AppSettings)                          {                              appSettings[setting.Name] = setting.Value;                          }                      }                        if (ContainerImageName != null)                      {                          string dockerImage = CmdletHelpers.DockerImagePrefix + ContainerImageName;                          if (WebApp.IsXenon.GetValueOrDefault())                          {                              siteConfig.WindowsFxVersion = dockerImage;                          }                          else if (WebApp.Reserved.GetValueOrDefault())                          {                              siteConfig.LinuxFxVersion = dockerImage;                          }                      }                                              if (ContainerRegistryUrl != null)                      {                          appSettings[CmdletHelpers.DocerRegistryServerUrl] = ContainerRegistryUrl;                      }                      if (ContainerRegistryUser != null)                      {                          appSettings[CmdletHelpers.DocerRegistryServerUserName] = ContainerRegistryUser;                      }                      if (ContainerRegistryPassword != null)                      {                          appSettings[CmdletHelpers.DocerRegistryServerPassword] = ContainerRegistryPassword.ConvertToString();                      }                        if (parameters.Contains("EnableContainerContinuousDeployment"))                      {                          if (EnableContainerContinuousDeployment )                          {                              appSettings[CmdletHelpers.DockerEnableCI] = "true";                          }                          else                          {                              appSettings.Remove(CmdletHelpers.DockerEnableCI);                          }                      }                        // Update web app configuration                        WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' null' siteConfig' appSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary()' AzureStoragePath.ConvertToAzureStorageAccountPathPropertyDictionary());                        //Update WebApp object after configuration update                      WebApp = new PSSite(WebsitesClient.GetWebApp(ResourceGroupName' Name' null));                        if (parameters.Any(p => CmdletHelpers.SiteParameters.Contains(p)))                      {                            site = new Site                          {                              Location = location'                              Tags = tags'                              ServerFarmId = WebApp.ServerFarmId'                              Identity = parameters.Contains("AssignIdentity") ? AssignIdentity ? new ManagedServiceIdentity("SystemAssigned"' null' null) : new ManagedServiceIdentity("None"' null' null) : WebApp.Identity'                              HttpsOnly = parameters.Contains("HttpsOnly") ? HttpsOnly : WebApp.HttpsOnly                          };                            WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' null' WebApp.ServerFarmId' new PSSite(site));                      }                        if (parameters.Contains("AppServicePlan"))                      {                          // AzureStorage path is not a part of the back end siteObject' but if the PSSite Object is given as an input' so simply set this to null                          WebApp.AzureStoragePath = null;                          WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' null' AppServicePlan' WebApp);                      }                        if (parameters.Contains("HostNames"))                      {                          WebsitesClient.AddCustomHostNames(ResourceGroupName' location' Name' HostNames);                      }                        break;                  case ParameterSet2Name:                      // Web app is direct or pipeline input                      string servicePlanName;                      string rg;                      location = WebApp.Location;                      siteConfig = WebApp.SiteConfig;                        // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(                          ResourceGroupName'                           location'                           Name'                           null'                           siteConfig'                           WebApp.SiteConfig == null ? null : WebApp.SiteConfig                                                      .AppSettings                                                      .ToDictionary(                                                          nvp => nvp.Name'                                                           nvp => nvp.Value'                                                           StringComparer.OrdinalIgnoreCase)'                           WebApp.SiteConfig?.ConnectionStrings                                                      .ToDictionary(                                                          nvp => nvp.Name'                                                           nvp => new ConnStringValueTypePair                                                          {                                                              Type = nvp.Type.Value'                                                              Value = nvp.ConnectionString                                                          }'                                                           StringComparer.OrdinalIgnoreCase));                        CmdletHelpers.TryParseAppServicePlanMetadataFromResourceId(WebApp.ServerFarmId' out rg' out servicePlanName);                      // AzureStorage path is not a part of the back end siteObject' but if the PSSite Object is given as an input' we will some value for this                      WebApp.AzureStoragePath = null;                      WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' null' servicePlanName' WebApp);                      WebsitesClient.AddCustomHostNames(ResourceGroupName' location' Name' WebApp.HostNames.ToArray());                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1:                      if (!string.IsNullOrEmpty(ResourceGroupName) && !string.IsNullOrEmpty(Name))                      {                          GetAppServicePlan();                      }                      else if (!string.IsNullOrEmpty(ResourceGroupName))                      {                          GetByResourceGroup();                      }                      else if (!string.IsNullOrEmpty(Name))                      {                          GetByAppServicePlanName();                      }                      else                      {                          GetBySubscription();                      }                      break;                  case ParameterSet2:                      GetByLocation();                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,SetAzureAppServicePlanCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\AppServicePlans\SetAzureAppServicePlan.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      AppServicePlan = new PSAppServicePlan(WebsitesClient.GetAppServicePlan(ResourceGroupName' Name));                      AppServicePlan.Sku.Tier = string.IsNullOrWhiteSpace(Tier) ? AppServicePlan.Sku.Tier : Tier;                      AppServicePlan.Sku.Capacity = NumberofWorkers > 0 ? NumberofWorkers : AppServicePlan.Sku.Capacity;                      int workerSizeAsNumber = 0;                      int.TryParse(Regex.Match(AppServicePlan.Sku.Name' @"\d+").Value' out workerSizeAsNumber);                      AppServicePlan.Sku.Name = string.IsNullOrWhiteSpace(WorkerSize) ? CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' workerSizeAsNumber) : CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' WorkerSize);                      AppServicePlan.PerSiteScaling = PerSiteScaling;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.BackupRestore,RestoreAzureDeletedWebApp,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\BackupRestore\RestoreAzureDeletedWebApp.cs,ResolveTargetParameters,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case FromDeletedResourceNameParameterSet:                      if (string.IsNullOrEmpty(TargetResourceGroupName))                      {                          TargetResourceGroupName = ResourceGroupName;                      }                      if (string.IsNullOrEmpty(TargetName))                      {                          TargetName = Name;                      }                      break;                  case FromDeletedAppParameterSet:                      if (string.IsNullOrEmpty(TargetResourceGroupName))                      {                          TargetResourceGroupName = InputObject.ResourceGroupName;                      }                      if (string.IsNullOrEmpty(TargetName))                      {                          TargetName = InputObject.Name;                      }                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      WebApp = new PSSite(WebsitesClient.GetWebApp(ResourceGroupName' Name' Slot));                      location = WebApp.Location;                      tags = WebApp.Tags;                      var parameters = new HashSet<string>(MyInvocation.BoundParameters.Keys' StringComparer.OrdinalIgnoreCase);                      if (parameters.Any(p => CmdletHelpers.SiteConfigParameters.Contains(p)))                      {                          siteConfig = new SiteConfig                          {                              DefaultDocuments = parameters.Contains("DefaultDocuments") ? DefaultDocuments : null'                              NetFrameworkVersion = parameters.Contains("NetFrameworkVersion") ? NetFrameworkVersion : null'                              PhpVersion = parameters.Contains("PhpVersion") ? PhpVersion.ToLower() == "off" ? "" : PhpVersion : null'                              RequestTracingEnabled =                                  parameters.Contains("RequestTracingEnabled") ? (bool?)RequestTracingEnabled : null'                              HttpLoggingEnabled = parameters.Contains("HttpLoggingEnabled") ? (bool?)HttpLoggingEnabled : null'                              DetailedErrorLoggingEnabled =                                  parameters.Contains("DetailedErrorLoggingEnabled") ? (bool?)DetailedErrorLoggingEnabled : null'                              HandlerMappings = parameters.Contains("HandlerMappings") ? HandlerMappings : null'                              ManagedPipelineMode =                                  parameters.Contains("ManagedPipelineMode")                                      ? (ManagedPipelineMode?)Enum.Parse(typeof(ManagedPipelineMode)' ManagedPipelineMode)                                      : null'                              WebSocketsEnabled = parameters.Contains("WebSocketsEnabled") ? (bool?)WebSocketsEnabled : null'                              Use32BitWorkerProcess =                                  parameters.Contains("Use32BitWorkerProcess") ? (bool?)Use32BitWorkerProcess : null'                              AutoSwapSlotName = parameters.Contains("AutoSwapSlotName") ? AutoSwapSlotName : null'                              NumberOfWorkers = parameters.Contains("NumberOfWorkers") ? NumberOfWorkers : WebApp.SiteConfig.NumberOfWorkers                          };                      }                        Hashtable appSettings = AppSettings ?? new Hashtable();                        if (siteConfig == null)                      {                          siteConfig = WebApp.SiteConfig;                      }                        //According to current implementation if AppSettings parameter is provided we are overriding existing AppSettings                      if (WebApp.SiteConfig.AppSettings != null && AppSettings == null)                      {                          foreach (var setting in WebApp.SiteConfig.AppSettings)                          {                              appSettings[setting.Name] = setting.Value;                          }                      }                        if (ContainerImageName != null)                      {                          string dockerImage = CmdletHelpers.DockerImagePrefix + ContainerImageName;                          if (WebApp.IsXenon.GetValueOrDefault())                          {                              siteConfig.WindowsFxVersion = dockerImage;                          }                          else if (WebApp.Reserved.GetValueOrDefault())                          {                              siteConfig.LinuxFxVersion = dockerImage;                          }                      }                                              if (ContainerRegistryUrl != null)                      {                          appSettings[CmdletHelpers.DocerRegistryServerUrl] = ContainerRegistryUrl;                      }                      if (ContainerRegistryUser != null)                      {                          appSettings[CmdletHelpers.DocerRegistryServerUserName] = ContainerRegistryUser;                      }                      if (ContainerRegistryPassword != null)                      {                          appSettings[CmdletHelpers.DocerRegistryServerPassword] = ContainerRegistryPassword.ConvertToString();                      }                        if (parameters.Contains("EnableContainerContinuousDeployment"))                      {                          if (EnableContainerContinuousDeployment )                          {                              appSettings[CmdletHelpers.DockerEnableCI] = "true";                          }                          else                          {                              appSettings.Remove(CmdletHelpers.DockerEnableCI);                            }                      }                      // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' Slot' siteConfig' appSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary()' AzureStoragePath.ConvertToAzureStorageAccountPathPropertyDictionary());                        //update reference to WebApp object after site configuration update                      WebApp = new PSSite(WebsitesClient.GetWebApp(ResourceGroupName' Name' Slot));                        if (parameters.Any(p => CmdletHelpers.SiteParameters.Contains(p)))                      {                            site = new Site                          {                              Location = location'                              Tags = tags'                              ServerFarmId = WebApp.ServerFarmId'                              Identity = parameters.Contains("AssignIdentity") ? AssignIdentity ? new ManagedServiceIdentity("SystemAssigned"' null' null) : new ManagedServiceIdentity("None"' null' null) : WebApp.Identity'                              HttpsOnly = parameters.Contains("HttpsOnly") ? HttpsOnly : WebApp.HttpsOnly                          };                            WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' Slot' WebApp.ServerFarmId' new PSSite(site));                      }                        if (parameters.Contains("AppServicePlan"))                      {                          WebApp.AzureStoragePath = null; // the API to update site Object doesn't have the AzureStorage Path property                          WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' Slot' AppServicePlan' WebApp);                      }                        break;                  case ParameterSet2Name:                      // Web app is direct or pipeline input                      string servicePlanName;                      string rg;                      location = WebApp.Location;                      siteConfig = WebApp.SiteConfig;                        // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(                          ResourceGroupName'                           location'                           Name'                           Slot'                           siteConfig'                           WebApp.SiteConfig == null ?                               null :                               WebApp.SiteConfig.AppSettings                                  .ToDictionary(                                      nvp => nvp.Name'                                       nvp => nvp.Value'                                       StringComparer.OrdinalIgnoreCase)'                           WebApp.SiteConfig == null ?                               null :                               WebApp.SiteConfig.ConnectionStrings                                  .ToDictionary(                                  nvp => nvp.Name'                                   nvp => new ConnStringValueTypePair                                  {                                      Type = nvp.Type.Value'                                      Value = nvp.ConnectionString                                  }'                                   StringComparer.OrdinalIgnoreCase));                        CmdletHelpers.TryParseAppServicePlanMetadataFromResourceId(WebApp.ServerFarmId' out rg' out servicePlanName);                      WebApp.AzureStoragePath = null; // the API to update site Object doesn't have the AzureStorage Path property                      WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' Slot' servicePlanName' WebApp);                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (SwapWithPreviewAction.Value)                          {                                case Utilities.SwapWithPreviewAction.ApplySlotConfig:                                  WebsitesClient.SwapSlotWithPreviewApplySlotConfig(ResourceGroupName' Name' SourceSlotName' DestinationSlotName' PreserveVnet);                                  break;                                case Utilities.SwapWithPreviewAction.CompleteSlotSwap:                                  WebsitesClient.SwapSlot(ResourceGroupName' Name' SourceSlotName' DestinationSlotName' PreserveVnet);                                  break;                                case Utilities.SwapWithPreviewAction.ResetSlotSwap:                                  WebsitesClient.SwapSlotWithPreviewResetSlotSwap(ResourceGroupName' Name' SourceSlotName);                                  break;                            }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The following switch statement is missing a default case: switch (SwapWithPreviewAction.Value)                  {                        case Utilities.SwapWithPreviewAction.ApplySlotConfig:                          actionMessage = string.Format("Swap with preview: Applying slot config from {0} slot onto {1} slot"' DestinationSlotName' SourceSlotName);                          processMessage = "Swap with preview: Applying slot config from destination slot onto source slot";                          break;                        case Utilities.SwapWithPreviewAction.CompleteSlotSwap:                          actionMessage = string.Format("Swap with preview: Completing the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName);                          processMessage = "Swap with preview: Completing the current on-going slot swap operation";                          break;                        case Utilities.SwapWithPreviewAction.ResetSlotSwap:                          actionMessage = string.Format("Swap with preview: Resetting the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName);                          processMessage = "Swap with preview: Resetting the current on-going slot swap operation";                          break;                    }
Missing Default,Microsoft.Azure.Commands.WebApps,WebAppOptionalSlotBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\WebAppOptionalSlotBaseCmdlet.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      string webAppName' slotName;                      if (CmdletHelpers.TryParseAppAndSlotNames(Name' out webAppName' out slotName))                      {                          Name = webAppName;                            // We have to choose between the slot name embedded in the name parameter or the slot parameter.                           // The choice for now is to prefer the embeeded slot name over the slot parameter.                           Slot = slotName;                      }                      break;                  case ParameterSet2Name:                      string rg' name' slot;                      CmdletHelpers.TryParseWebAppMetadataFromResourceId(WebApp.Id' out rg' out name' out slot);                        ResourceGroupName = rg;                      Name = name;                      Slot = slot;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps,WebAppSlotBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Websites\Websites\Models.WebApp\WebAppSlotBaseCmdlet.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      string webAppName' slotName;                      if (CmdletHelpers.TryParseAppAndSlotNames(Name' out webAppName' out slotName))                      {                          Name = webAppName;                            // We have to choose between the slot name embedded in the name parameter or the slot parameter.                           // The choice for now is to prefer the embeeded slot name over the slot parameter.                           Slot = slotName;                      }                      break;                  case ParameterSet2Name:                      string rg' name' slot;                      CmdletHelpers.TryParseWebAppMetadataFromResourceId(WebApp.Id' out rg' out name' out slot);                      if (string.IsNullOrEmpty(slot))                      {                          throw new ValidationMetadataException("Input object is a production web app. It should be deployment slot");                      }                        ResourceGroupName = rg;                      Name = name;                      Slot = slot;                      break;              }
