Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.DataLakeStore,SetAzureDataLakeStoreAccount,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Commands\SetAzureRmDataLakeStoreAccount.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,TrackTaskProgress,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemPermissionInstance.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemPermissionInstance.cs,GetPermissionString,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,ArgumentToEncodingTransformationAttribute,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\EncodingUtils.cs,Transform,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ChangeAclRecursively,The method has 8 parameters. Parameters: path' accountName' aclToSet' aclChangeType' concurrency' aclCmdlet' trackProgress' cmdletCancellationToken
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The method has 6 parameters. Parameters: buffer' lengthData' encoding' totalRows' toReturn' totLinesRead
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetStreamRows,The method has 5 parameters. Parameters: streamPath' accountName' numRows' encoding' reverse
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The method has 11 parameters. Parameters: destinationFolderPath' accountName' sourcePath' cmdletCancellationToken' fileThreadCount' recursive' overwrite' resume' isDownload' cmdletRunningRequest' isBinary
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetFileProperties,The method has 12 parameters. Parameters: accountName' path' getAclUsage' dumpFileName' getDiskUsage' saveToLocal' numThreads' displayFiles' hideConsistentAcl' maxDepth' cmdlet' cmdletCancellationToken
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,EnumerateDeletedItems,The method has 5 parameters. Parameters: accountName' filter' count' cmdlet' cmdletCancellationToken
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,RestoreDeletedItem,The method has 6 parameters. Parameters: accountName' path' destination' type' restoreAction' cmdletCancellationToken
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreClient.cs,CreateAccount,The method has 11 parameters. Parameters: resourceGroupName' accountName' defaultGroup' location' customTags' identity' config' trustedProviders' firewallRules' encryptionType' tier
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreClient.cs,UpdateAccount,The method has 9 parameters. Parameters: resourceGroupName' accountName' defaultGroup' providerState' firewallState' azureIpState' customTags' tier' userConfig
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreClient.cs,AddOrUpdateFirewallRule,The method has 6 parameters. Parameters: resourceGroupName' accountName' ruleName' startIp' endIp' runningCommand
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreClient.cs,AddOrUpdateTrustedProvider,The method has 5 parameters. Parameters: resourceGroupName' accountName' providerName' providerEndpoint' runningCommand
Long Identifier,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreAccount,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Commands\NewAzureRmDataLakeStoreAccount.cs,,The length of the parameter EncryptionDisabledParameterSetName is 34.
Long Identifier,Microsoft.Azure.Commands.DataLakeStore,SetAzureRmDataLakeStoreItemExpiry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemExpiry.cs,,The length of the parameter RelativeExpiryParameterSetName is 30.
Long Identifier,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreCmdletBase.cs,,The length of the parameter filesystemRequestTimeoutInMinutes is 33.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureRmDataLakeStoreTrustedIdProvider,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Commands\GetAzureRmDataLakeStoreTrustedIdProvider.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(new DataLakeStoreTrustedIdProvider(DataLakeStoreClient.GetTrustedProvider(ResourceGroupName' Account' Name))); " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreChildItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreChildItem.cs,ExecuteCmdlet,The length of the statement  "            var toReturn = DataLakeStoreFileSystemClient.GetFileStatuses(Path.TransformedPath' Account).Select(entry => new DataLakeStoreItem(entry)).ToList(); " is 147.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureRmDataLakeStoreChildItemSummary,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreChildItemSummary.cs,ExecuteCmdlet,The length of the statement  "            var toReturn = DataLakeStoreFileSystemClient.GetContentSummary(Path.TransformedPath' Account' Concurrency' CmdletCancellationToken); " is 132.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreDeletedItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreDeletedItem.cs,ExecuteCmdlet,The length of the statement  "            var toReturn = DataLakeStoreFileSystemClient.EnumerateDeletedItems(Account' Filter' Count' this' CmdletCancellationToken).Select(entry => new DataLakeStoreDeletedItem(entry)).ToList(); " is 184.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreItemAclEntry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemAclEntry.cs,ExecuteCmdlet,The length of the statement  "            var toReturn = DataLakeStoreFileSystemClient.GetAclStatus(Path.TransformedPath' Account).Entries.Select(entry => new DataLakeStoreItemAce(entry)).ToList(); " is 155.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The length of the statement  "                                // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content " is 133.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\NewAzureRmDataLakeStoreItem.cs,ExecuteCmdlet,The length of the statement  "                        DataLakeStoreFileSystemClient.CreateFile(Path.TransformedPath' Account' Value != null ? GetBytes(Value' Encoding) : null); " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,RemoveAzureDataLakeStoreItemAclEntry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\RemoveAzureRmDataLakeStoreItemAclEntry.cs,ExecuteCmdlet,The length of the statement  "                : new List<AclEntry>() { new AclEntry((AclType)AceType' Id.ToString()' Default ? AclScope.Default : AclScope.Access' AclAction.None) };// Action doesnt have any affect here so just hardcoded some constant " is 204.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,RestoreAzureDataLakeStoreDeletedItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\RestoreAzureRmDataLakeStoreDeletedItem.cs,ExecuteCmdlet,The length of the statement  "                if (Force.IsPresent || ShouldContinue(string.Format("From - {0}\nTo   - {1}\nType - {2}"' Path' Destination' Type)' "Restore user data ?")) " is 139.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,RestoreAzureDataLakeStoreDeletedItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\RestoreAzureRmDataLakeStoreDeletedItem.cs,ExecuteCmdlet,The length of the statement  "                    DataLakeStoreFileSystemClient.RestoreDeletedItem(Account' Path' Destination' Type' RestoreAction' CmdletCancellationToken); " is 123.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,RestoreAzureDataLakeStoreDeletedItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\RestoreAzureRmDataLakeStoreDeletedItem.cs,ExecuteCmdlet,The length of the statement  "                if (Force.IsPresent || ShouldContinue(string.Format("From - {0}\nTo   - {1}\nType - {2}"' DeletedItem.TrashDirPath' DeletedItem.OriginalPath' DeletedItem.Type == DataLakeStoreEnums.FileType.FILE ? "file" : "folder")' "Restore user data ?")) " is 240.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,RestoreAzureDataLakeStoreDeletedItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\RestoreAzureRmDataLakeStoreDeletedItem.cs,ExecuteCmdlet,The length of the statement  "                    DataLakeStoreFileSystemClient.RestoreDeletedItem(Account' DeletedItem.TrashDirPath' DeletedItem.OriginalPath' (DeletedItem.Type == DataLakeStoreEnums.FileType.FILE ? "file" : "folder")' RestoreAction' CmdletCancellationToken); " is 226.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureDataLakeStoreItemAcl,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemAcl.cs,ExecuteCmdlet,The length of the statement  "                                Acl.Select(entry => entry.ParseDataLakeStoreItemAce()).ToList()' RequestedAclType.SetAcl' threadCount' this' ShowProgress' CmdletCancellationToken); " is 148.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureDataLakeStoreItemAclEntry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemAclEntry.cs,ExecuteCmdlet,The length of the statement  "                : new List<AclEntry> { new AclEntry((AclType)AceType' Id.ToString()' Default ? AclScope.Default : AclScope.Access' (AclAction)Permissions) }; " is 141.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureDataLakeStoreItemAclEntry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemAclEntry.cs,ExecuteCmdlet,The length of the statement  "                string.Format(Resources.SetDataLakeStoreItemAcl' Path.OriginalPath) + (recurseAndDefaultAcls ? "\n" + Resources.SetOnlyDefaultAclRecursively : "")' " is 147.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureRmDataLakeStoreItemExpiry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemExpiry.cs,ExecuteCmdlet,The length of the statement  "            if (!DataLakeStoreFileSystemClient.TestFileOrFolderExistence(Path.TransformedPath' Account' out filetype) || filetype == DirectoryEntryType.DIRECTORY) " is 150.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureRmDataLakeStoreItemExpiry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemExpiry.cs,ExecuteCmdlet,The length of the statement  "                string.Format(Resources.SetFileExpiry' Path.OriginalPath' ParameterSetName.Equals(RelativeExpiryParameterSetName) ? $"{exop} {RelativeTime}" : Expiration.ToString())' " is 166.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureRmDataLakeStoreItemExpiry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\SetAzureRmDataLakeStoreItemExpiry.cs,ExecuteCmdlet,The length of the statement  "                    WriteObject(new DataLakeStoreItem(DataLakeStoreFileSystemClient.SetExpiry(Path.TransformedPath' Account' tickValue' exop))) " is 123.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,AdlsClientFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\AdlsClientFactory.cs,GetAdlsClient,The length of the statement  "                    client = AdlsClient.CreateClient(accntNm' MockCredentials' DataLakeStoreFileSystemClient.ImportExportMaxThreads' CustomDelegatingHAndler); " is 138.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,AdlsClientFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\AdlsClientFactory.cs,GetAdlsClient,The length of the statement  "                    client = AdlsClient.CreateClient(accntNm' AzureSession.Instance.AuthenticationFactory.GetServiceClientCredentials(context' " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,AdlsClientFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\AdlsClientFactory.cs,GetAdlsClient,The length of the statement  "                        AzureEnvironment.Endpoint.AzureDataLakeStoreFileSystemEndpointSuffix)' DataLakeStoreFileSystemClient.ImportExportMaxThreads); " is 125.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The length of the statement  "                char c = bytesPerChar == 1 ? (char)buffer[charPos] : encoding.GetString(buffer' charPos - bytesPerChar + 1' bytesPerChar).ToCharArray()[0]; " is 139.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetStreamRows,The length of the statement  "                // when reading backwards' this may change to ensure that we don't re-read data as we approach the beginning of the file. " is 121.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The length of the statement  "                    var toSet = (int)(1.0 * (e.ChunksTransfered + e.FilesTransfered + e.DirectoriesTransferred) / (e.TotalChunksToTransfer + e.TotalFilesToTransfer + e.TotalDirectoriesToTransfer) * 100); " is 183.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The length of the statement  "                        $"Copying Folder: {sourcePath}{(recursive ? " recursively" : string.Empty)}. Bytes remaining: {e.TotalSizeToTransfer - e.SizeTransfered}{(e.TotalChunksToTransfer > 0 ? $"' Chunks remaining: {e.TotalChunksToTransfer - e.ChunksTransfered}" : "")}{(e.TotalNonChunkedFileToTransfer > 0 ? $"' Non-chunked files remaining: {e.TotalNonChunkedFileToTransfer - e.NonChunkedFileTransferred}" : "")}" + " is 391.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The length of the statement  "                        $"{(e.TotalDirectoriesToTransfer > 0 ? $"' Directories remaining: {e.TotalDirectoriesToTransfer - e.DirectoriesTransferred}" : "")}."; " is 134.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,EnumerateDeletedItems,The length of the statement  "                // so since we want to the debug lines to be updated while the command runs' we have to flush the debug statements in queue and thats why we want to do it this way " is 163.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,RestoreDeletedItem,The length of the statement  "            AdlsClientFactory.GetAdlsClient(accountName' _context).RestoreDeletedItems(path' destination' type' restoreAction' cmdletCancellationToken); " is 140.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The length of the statement  "                        return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]); " is 127.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The length of the statement  "                        return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]); " is 126.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreClient.cs,TestAccount,The length of the statement  "                if ((ex.Response != null && ex.Response.StatusCode == HttpStatusCode.NotFound) || ex.Message.Contains(string.Format(Properties.Resources.FailedToDiscoverResourceGroup' accountName' " is 180.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreCmdletBase.cs,CreateAdlsClient,The length of the statement  "                    : clientFactory.CreateCustomArmClient<TClient>(context.Environment.GetEndpointAsUri(endpoint)' creds' string.Empty' clientFactory.GetCustomHandlers()); " is 151.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreCmdletBase.cs,CreateAdlsClient,The length of the statement  "                    ? clientFactory.CreateCustomArmClient<TClient>(creds' string.Empty' context.Environment.GetEndpoint(endpoint)' filesystemRequestTimeoutInMinutes) " is 145.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreCmdletBase.cs,CreateAdlsClient,The length of the statement  "                    : clientFactory.CreateCustomArmClient<TClient>(creds' string.Empty' context.Environment.GetEndpoint(endpoint)' filesystemRequestTimeoutInMinutes' clientFactory.GetCustomHandlers()); " is 181.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreTracingInterceptor,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreTracingInterceptor.cs,EnterMethod,The length of the statement  "            Logger.LogDebug("Enter {0}.{1} parameters:{2}' invocationId={3}"' instance' method' string.Join(";"' parameters.Select(p => string.Format("{0}={1}"' p.Key' p.Value)))' invocationId); " is 182.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreTracingInterceptor,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Models\DataLakeStoreTracingInterceptor.cs,TraceError,The length of the statement  "                Logger.LogError("ADLS exception occurred: {0}' with message: {1}' invocationId={2}"' adlException.Body.RemoteException' adlException.Body.RemoteException.Message' invocationId); " is 177.
Complex Conditional,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreAccount,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Commands\NewAzureRmDataLakeStoreAccount.cs,ExecuteCmdlet,The conditional expression  "ex.Body != null && !string.IsNullOrEmpty(ex.Body.Code) && ex.Body.Code == "ResourceNotFound" ||                      ex.Message.Contains("ResourceNotFound")"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreAccount,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\Commands\NewAzureRmDataLakeStoreAccount.cs,ExecuteCmdlet,The conditional expression  "ex.Body != null && !string.IsNullOrEmpty(ex.Body.Code) &&                           ex.Body.Code == "ResourceGroupNotFound" || ex.Message.Contains("ResourceGroupNotFound")"  is complex.
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneCommands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          using (var adlReadStream =                              DataLakeStoreFileSystemClient.ReadFromFile(Path.TransformedPath' Account))                          {                              if (Length <= 0)                              {                                  Length = adlReadStream.Length - Offset;                                  if (Length > 1 * 1024 * 1024 && !Force)                                  // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                                  {                                      throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                                  }                              }                              adlReadStream.Seek(Offset' SeekOrigin.Begin);                              int BuffSize = 4 * 1024 * 1024;                              byte[] byteArray = new byte[Length];                              long lengthToRead = Length;                              long totalLengthRead = 0;                              while (lengthToRead > 0)                              {                                  // Read may return anything from 0 to numBytesToRead.                                  int bytesRead = adlReadStream.Read(byteArray' (int)totalLengthRead' (int)Math.Min(BuffSize' lengthToRead));                                  // Break when the end of the file is reached.                                  if (bytesRead <= 0)                                  {                                      break;                                  }                                  lengthToRead -= bytesRead;                                  totalLengthRead += bytesRead;                              }                              if (totalLengthRead < Length)                              {                                  Array.Resize(ref byteArray' (int)totalLengthRead);                              }                                WriteObject(BytesToString(byteArray' Encoding));                                                        }                      });
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreDeletedItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreDeletedItem.cs,ToUnixTimeStampMs,The following statement contains a magic number: return (long)(dt - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ChangeAclRecursively,The following statement contains a magic number: progress = new ProgressRecord(_uniqueActivityIdGenerator.Next(0' 10000000)'                          string.Format($"Recursive acl change for path {path}")'                          $"Type of Acl Change: {aclChangeType}")                      {                          PercentComplete = 0                      };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ChangeAclRecursively,The following statement contains a magic number: progress.PercentComplete = 100;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The following statement contains a magic number: switch (encoding.CodePage)              {                  // Big Endian Unicode (UTF-16)                  case 1201:                  // Unicode (UTF-16)                  case 1200:                      bytesPerChar = 2;                      break;                  // UTF-32                  case 12000:                      bytesPerChar = 4;                      break;                  // ASCII case 20127:                  // UTF-8 case 65001:                  // UTF-7 case 65000:                  // Default to UTF-8                  default:                      bytesPerChar = 1;                      break;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The following statement contains a magic number: switch (encoding.CodePage)              {                  // Big Endian Unicode (UTF-16)                  case 1201:                  // Unicode (UTF-16)                  case 1200:                      bytesPerChar = 2;                      break;                  // UTF-32                  case 12000:                      bytesPerChar = 4;                      break;                  // ASCII case 20127:                  // UTF-8 case 65001:                  // UTF-7 case 65000:                  // Default to UTF-8                  default:                      bytesPerChar = 1;                      break;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The following statement contains a magic number: switch (encoding.CodePage)              {                  // Big Endian Unicode (UTF-16)                  case 1201:                  // Unicode (UTF-16)                  case 1200:                      bytesPerChar = 2;                      break;                  // UTF-32                  case 12000:                      bytesPerChar = 4;                      break;                  // ASCII case 20127:                  // UTF-8 case 65001:                  // UTF-7 case 65000:                  // Default to UTF-8                  default:                      bytesPerChar = 1;                      break;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The following statement contains a magic number: switch (encoding.CodePage)              {                  // Big Endian Unicode (UTF-16)                  case 1201:                  // Unicode (UTF-16)                  case 1200:                      bytesPerChar = 2;                      break;                  // UTF-32                  case 12000:                      bytesPerChar = 4;                      break;                  // ASCII case 20127:                  // UTF-8 case 65001:                  // UTF-7 case 65000:                  // Default to UTF-8                  default:                      bytesPerChar = 1;                      break;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ReadNewLinesReverse,The following statement contains a magic number: switch (encoding.CodePage)              {                  // Big Endian Unicode (UTF-16)                  case 1201:                  // Unicode (UTF-16)                  case 1200:                      bytesPerChar = 2;                      break;                  // UTF-32                  case 12000:                      bytesPerChar = 4;                      break;                  // ASCII case 20127:                  // UTF-8 case 65001:                  // UTF-7 case 65000:                  // Default to UTF-8                  default:                      bytesPerChar = 1;                      break;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetStreamRows,The following statement contains a magic number: var dataPerRead = 4 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetStreamRows,The following statement contains a magic number: var dataPerRead = 4 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetStreamRows,The following statement contains a magic number: var dataPerRead = 4 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The following statement contains a magic number: var progress = new ProgressRecord(_uniqueActivityIdGenerator.Next(0' 10000000)'                  string.Format("Copying Folder: {0}{1}. Enumerating the source and preparing the copy."'                  sourcePath' recursive ? " recursively" : string.Empty)' "Copy in progress...")              {                  PercentComplete = 0              };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The following statement contains a magic number: progressTracker.ProgressChanged += (s' e) =>              {                  lock (ConsoleOutputLock)                  {                      var toSet = (int)(1.0 * (e.ChunksTransfered + e.FilesTransfered + e.DirectoriesTransferred) / (e.TotalChunksToTransfer + e.TotalFilesToTransfer + e.TotalDirectoriesToTransfer) * 100);                      // powershell defect protection. If' through some defect in                      // our progress tracking' the number is outside of 0 - 100'                      // powershell will crash if it is set to that value. Instead                      // just ke ep the value unchanged in that case.                      if (toSet < 0 || toSet > 100)                      {                          progress.PercentComplete = progress.PercentComplete;                      }                      else                      {                          progress.PercentComplete = toSet;                      }                      progress.Activity =                          $"Copying Folder: {sourcePath}{(recursive ? " recursively" : string.Empty)}. Bytes remaining: {e.TotalSizeToTransfer - e.SizeTransfered}{(e.TotalChunksToTransfer > 0 ? $"' Chunks remaining: {e.TotalChunksToTransfer - e.ChunksTransfered}" : "")}{(e.TotalNonChunkedFileToTransfer > 0 ? $"' Non-chunked files remaining: {e.TotalNonChunkedFileToTransfer - e.NonChunkedFileTransferred}" : "")}" +                          $"{(e.TotalDirectoriesToTransfer > 0 ? $"' Directories remaining: {e.TotalDirectoriesToTransfer - e.DirectoriesTransferred}" : "")}.";                    }              };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The following statement contains a magic number: progressTracker.ProgressChanged += (s' e) =>              {                  lock (ConsoleOutputLock)                  {                      var toSet = (int)(1.0 * (e.ChunksTransfered + e.FilesTransfered + e.DirectoriesTransferred) / (e.TotalChunksToTransfer + e.TotalFilesToTransfer + e.TotalDirectoriesToTransfer) * 100);                      // powershell defect protection. If' through some defect in                      // our progress tracking' the number is outside of 0 - 100'                      // powershell will crash if it is set to that value. Instead                      // just ke ep the value unchanged in that case.                      if (toSet < 0 || toSet > 100)                      {                          progress.PercentComplete = progress.PercentComplete;                      }                      else                      {                          progress.PercentComplete = toSet;                      }                      progress.Activity =                          $"Copying Folder: {sourcePath}{(recursive ? " recursively" : string.Empty)}. Bytes remaining: {e.TotalSizeToTransfer - e.SizeTransfered}{(e.TotalChunksToTransfer > 0 ? $"' Chunks remaining: {e.TotalChunksToTransfer - e.ChunksTransfered}" : "")}{(e.TotalNonChunkedFileToTransfer > 0 ? $"' Non-chunked files remaining: {e.TotalNonChunkedFileToTransfer - e.NonChunkedFileTransferred}" : "")}" +                          $"{(e.TotalDirectoriesToTransfer > 0 ? $"' Directories remaining: {e.TotalDirectoriesToTransfer - e.DirectoriesTransferred}" : "")}.";                    }              };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,BulkCopy,The following statement contains a magic number: progress.PercentComplete = 100;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,TrackTaskProgress,The following statement contains a magic number: var lastUpdate = DateTime.Now.Subtract(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,TrackTaskProgress,The following statement contains a magic number: TestMockSupport.Delay(250);
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,ToUnixTimeStampMs,The following statement contains a magic number: return (long)(date.UtcDateTime - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetFullAcl,The following statement contains a magic number: var ownerOctal = permissionString.ElementAt(permissionLength - 3).ToString();
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetFullAcl,The following statement contains a magic number: var groupOctal = permissionString.ElementAt(permissionLength - 2).ToString();
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreFileSystemClient.cs,GetFullAcl,The following statement contains a magic number: acl.Entries != null && acl.Permission != null && acl.Permission.Length >= 3
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItem.cs,ToUnixTimeStampMs,The following statement contains a magic number: return (long)(dt - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItem.cs,DataLakeStoreItem,The following statement contains a magic number: BlockSize = 256 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItem.cs,DataLakeStoreItem,The following statement contains a magic number: BlockSize = 256 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItem.cs,DataLakeStoreItem,The following statement contains a magic number: BlockSize = 256 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: singleSpec.Length == 4 && singleSpec[0].ToLowerInvariant().Equals("default")
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: permissions.Length == 3
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: const short maxSize = 1777;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: var friendlyPermissions = new Dictionary                      <DataLakeStoreEnums.PermissionScope' DataLakeStoreEnums.Permission>                  {                      {                          DataLakeStoreEnums.PermissionScope.User'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[0].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Group'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[1].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Other'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[2].ToString())                      }                  };
Missing Default,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\DataLakeStore\DataLakeStore\DataPlaneModels\DataLakeStoreItemPermissionInstance.cs,Parse,The following switch statement is missing a default case: switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }
