Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.WindowsAzure.Commands.CloudService.Development,SetAzureServiceProjectRoleCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\SetAzureServiceProjectRole.cs,SetAzureRuntimesProcess,The method has 5 parameters. Parameters: roleName' runtimeType' runtimeVersion' rootPath' manifest
Long Identifier,Microsoft.WindowsAzure.Commands.WAPackIaaS.VirtualMachine,NewWAPackVM,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\WAPackIaaS\VirtualMachine\NewWAPackVM.cs,ExecuteCmdlet,The length of the parameter virtualNetworkAdaptersWithVNet is 30.
Long Identifier,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,,The length of the parameter fullWebConfigFileWithConfiguration is 34.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,GetForwarderName,The length of the statement  "            WorkerRole workerForwarder = workerRoles.FirstOrDefault(r => r.Imports != null && r.Imports.Any(i => i.moduleName == "RemoteForwarder")); " is 137.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,GetForwarderName,The length of the statement  "                WebRole webForwarder = webRoles.FirstOrDefault(r => r.Imports != null && r.Imports.Any(i => i.moduleName == "RemoteForwarder")); " is 128.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,GetForwarderName,The length of the statement  "                        firstWorkerRole.Imports = GeneralUtilities.Append(firstWorkerRole.Imports' new Import { moduleName = "RemoteForwarder" }); " is 122.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,AddRemoteAccess,The length of the statement  "            foreach (WebRole webRole in webRoles.Where(r => r.Imports == null || !r.Imports.Any(i => i.moduleName == "RemoteAccess"))) " is 122.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,AddRemoteAccess,The length of the statement  "            foreach (WorkerRole workerRole in workerRoles.Where(r => r.Imports == null || !r.Imports.Any(i => i.moduleName == "RemoteAccess"))) " is 131.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,UpdateServiceConfigurations,The length of the statement  "                    settings["Microsoft.WindowsAzure.Plugins.RemoteAccess.AccountExpiration"] = (DateTime.Now + TimeSpan.FromDays(365)).ToString("o"); " is 130.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,UpdateServiceConfigurations,The length of the statement  "                    role.ConfigurationSettings = settings.Select(pair => new ConfigurationSetting { name = pair.Key' value = pair.Value }).ToArray(); " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.CloudService.Development.Scaffolding,NewAzureRoleTemplateCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\Scaffolding\NewAzureRoleTemplate.cs,ExecuteCmdlet,The length of the statement  "            string source = Web.IsPresent ? Path.Combine(Resources.GeneralScaffolding' Resources.WebRole) : Path.Combine(Resources.GeneralScaffolding' Resources.WorkerRole); " is 161.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,GetAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\GetAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "            MediaServicesClient = MediaServicesClient ?? new MediaServicesClient(Profile' Profile.Context.Subscription' WriteDebug); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,GetAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\GetAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "                CatchAggregatedExceptionFlattenAndRethrow(() => { account = new MediaServiceAccountDetails(MediaServicesClient.GetMediaServiceAsync(Name).Result); }); " is 150.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,GetAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\GetAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "                accounts.AddRange(MediaServicesClient.GetMediaServiceAccountsAsync().Result.Accounts.Select(c=>new MediaServiceAccount(c))); " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "            MediaServicesClient = MediaServicesClient ?? new MediaServicesClient(Profile' Profile.Context.Subscription' WriteDebug); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "            CatchAggregatedExceptionFlattenAndRethrow(() => { storageKeysResponse = MediaServicesClient.GetStorageServiceKeysAsync(StorageAccountName).Result; }); " is 150.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "            CatchAggregatedExceptionFlattenAndRethrow(() => { storageGetResponse = MediaServicesClient.GetStorageServicePropertiesAsync(StorageAccountName).Result; }); " is 155.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "            if (storageGetResponse.StorageAccount.Properties != null && storageGetResponse.StorageAccount.Properties.Endpoints.Count > 0) " is 125.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "            CatchAggregatedExceptionFlattenAndRethrow(() => { result = new AccountCreationResult(MediaServicesClient.CreateNewAzureMediaServiceAsync(request).Result); }); " is 158.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceKeyCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceKeyCommand.cs,ExecuteCmdlet,The length of the statement  "                              MediaServicesClient = MediaServicesClient ?? new MediaServicesClient(Profile' Profile.Context.Subscription' WriteDebug); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceKeyCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceKeyCommand.cs,ExecuteCmdlet,The length of the statement  "                              CatchAggregatedExceptionFlattenAndRethrow(() => { result = MediaServicesClient.RegenerateMediaServicesAccountAsync(Name' KeyType).Result; }); " is 141.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,NewAzureMediaServiceKeyCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\NewAzureMediaServiceKeyCommand.cs,ExecuteCmdlet,The length of the statement  "                              CatchAggregatedExceptionFlattenAndRethrow(() => { account = new MediaServiceAccountDetails(MediaServicesClient.GetMediaServiceAsync(Name).Result); }); " is 150.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,RemoveAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\RemoveAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "                              MediaServicesClient = MediaServicesClient ?? new MediaServicesClient(Profile' Profile.Context.Subscription' WriteDebug); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.MediaServices,RemoveAzureMediaServiceCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\MediaServices\RemoveAzureMediaServiceCommand.cs,ExecuteCmdlet,The length of the statement  "                              CatchAggregatedExceptionFlattenAndRethrow(() => { result = MediaServicesClient.DeleteAzureMediaServiceAccountAsync(Name).Result; }); " is 132.
Long Statement,Microsoft.WindowsAzure.Commands.Scheduler,GetSchedulerJobHistoryCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Scheduler\GetSchedulerJobHistoryCommand.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(SMClient.GetJobHistory(jobCollection: JobCollectionName' job: JobName' region: Location' jobStatus: JobStatus)' true); " is 130.
Long Statement,Microsoft.WindowsAzure.Commands.Scheduler,NewSchedulerHttpJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Scheduler\NewSchedulerHttpJobCommand.cs,ExecuteCmdlet,The length of the statement  "                ClientCertPfx = ClientCertificatePfx == null ? null : SchedulerUtils.GetCertData(this.ResolvePath(ClientCertificatePfx.ToString())' ClientCertificatePassword)' " is 159.
Long Statement,Microsoft.WindowsAzure.Commands.Scheduler,SetSchedulerHttpJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Scheduler\SetSchedulerHttpJobCommand.cs,ExecuteCmdlet,The length of the statement  "                    ClientCertPfx = ClientCertificatePfx == null ? null : SchedulerUtils.GetCertData(this.ResolvePath(ClientCertificatePfx.ToString())' ClientCertificatePassword)' " is 159.
Long Statement,Microsoft.WindowsAzure.Commands.Scheduler,SetSchedulerHttpJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Scheduler\SetSchedulerHttpJobCommand.cs,ExecuteCmdlet,The length of the statement  "                    ClientCertPfx = ClientCertificatePfx == null ? null : SchedulerUtils.GetCertData(this.ResolvePath(ClientCertificatePfx.ToString())' ClientCertificatePassword)' " is 159.
Long Statement,Microsoft.WindowsAzure.Commands.WAPackIaaS.VirtualMachine,NewWAPackVM,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\WAPackIaaS\VirtualMachine\NewWAPackVM.cs,CustomizeVnaOnTemplate,The length of the statement  "            List<VMTemplate> templateWithVnas = templateOps.Read(new Dictionary<string' string>() { { "ID"' this.Template.ID.ToString() } }' "VirtualNetworkAdapters"); " is 155.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,GetAzureWebsiteMetricCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\GetAzureWebsiteMetric.cs,ExecuteCmdlet,The length of the statement  "            var response = WebsitesClient.GetHistoricalUsageMetrics(Name' Slot' MetricNames' StartDate' EndDate' TimeGrain' InstanceDetails' SlotView); " is 139.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,ExecuteCmdlet,The length of the statement  "            fullSetParametersFile = string.IsNullOrEmpty(fullSetParametersFile) ? this.TryResolvePath(SetParametersFile) : fullSetParametersFile; " is 133.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,ExecuteCmdlet,The length of the statement  "                    WriteVerbose("Setting path for Parameters file to local one to package: " + Path.Combine(Path.GetDirectoryName(fullPackage)' fullSetParametersFile)); " is 149.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,ExecuteCmdlet,The length of the statement  "                DeploymentChangeSummary changeSummary = WebsitesClient.PublishWebProject(Name' Slot' fullPackage' fullSetParametersFile' connectionStrings' SkipAppData.IsPresent' DoNotDelete.IsPresent); " is 186.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,GetDynamicParameters,The length of the statement  "                    var names = WebsitesClient.ParseConnectionStringNamesFromWebConfig(fullWebConfigFile' fullWebConfigFileWithConfiguration); " is 122.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,PublishAzureWebsiteProject,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\PublishAzureWebsiteProject.cs,PrepareFileFullPaths,The length of the statement  "                fullWebConfigFileWithConfiguration = Path.Combine(Path.GetDirectoryName(fullProjectFile)' string.Format("Web.{0}.config"' configuration)); " is 138.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,UpdateAzureWebsiteRepositoryCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\UpdateAzureWebsiteRepository.cs,ExecuteCmdlet,The length of the statement  "                if (!string.IsNullOrEmpty(slot) && !slot.Equals(WebsiteSlotName.Production.ToString()' StringComparison.OrdinalIgnoreCase)) " is 123.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,SwitchAzureWebsiteSlotCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SwitchAzureWebSiteSlot.cs,ExecuteCmdlet,The length of the statement  "            string[] slots = sites.Select(site => WebsitesClient.GetSlotName(site.Name) ?? WebsiteSlotName.Production.ToString()).ToArray(); " is 128.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,SwitchAzureWebsiteSlotCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SwitchAzureWebSiteSlot.cs,VerifySlotExists,The length of the statement  "                throw new PSInvalidOperationException(String.Format(CultureInfo.CurrentCulture' Resources.SwapWebsiteSlotInvalidSlotWarning' slotToCheck)); " is 139.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,GetAzureWebsiteCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\GetAzureWebSite.cs,Do,The length of the statement  "                    WriteError(new ErrorRecord(new Exception(Resources.CommunicationCouldNotBeEstablished' ex)' string.Empty' ErrorCategory.InvalidData' null)); " is 140.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,GetAzureWebsiteDeploymentCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\GetAzureWebsiteDeployment.cs,SetDetails,The length of the statement  "            InvokeInDeploymentOperationContext(() => { deployResult.Logs = DeploymentChannel.GetDeploymentLogs(deployResult.Id); }); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Websites,SetAzureWebsiteCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SetAzureWebsite.cs,UpdateConfig,The length of the statement  "            changes = changes || ObjectDeltaMapper.Map(this' currentSiteConfig' websiteConfigUpdate' "HostNames"' "SiteWithConfig"' "PassThru"); " is 132.
Long Statement,Microsoft.WindowsAzure.Commands.Websites.WebHostingPlan,GetAzureWebHostingPlanMetricCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\WebHostingPlan\GetAzureWebHostingPlanMetric.cs,ExecuteCmdlet,The length of the statement  "            var response = WebsitesClient.GetPlanHistoricalUsageMetrics(WebSpaceName' Name' MetricNames' StartDate' EndDate' TimeGrain' InstanceDetails); " is 141.
Long Statement,Microsoft.WindowsAzure.Commands.Websites.WebHostingPlan,GetAzureWebHostingPlanCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\WebHostingPlan\GetAzureWebHostingPlan.cs,Do,The length of the statement  "                    WriteError(new ErrorRecord(new Exception(Resources.CommunicationCouldNotBeEstablished' ex)' string.Empty' ErrorCategory.InvalidData' null)); " is 140.
Empty Catch Block,Microsoft.WindowsAzure.Commands.CloudService,TestAzureNameCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\TestAzureName.cs,OnImport,The method has an empty catch block.
Empty Catch Block,Microsoft.WindowsAzure.Commands.Websites,GetAzureWebsiteCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\GetAzureWebSite.cs,WriteWebsite,The method has an empty catch block.
Empty Catch Block,Microsoft.WindowsAzure.Commands.Websites,NewAzureWebsiteCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\NewAzureWebSite.cs,UpdateSourceControlPublishing,The method has an empty catch block.
Empty Catch Block,Microsoft.WindowsAzure.Commands.Websites,RemoveAzureWebsiteCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\RemoveAzureWebSite.cs,ExecuteCmdlet,The method has an empty catch block.
Magic Number,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,IsPasswordComplex,The following statement contains a magic number: const int ASCIIMax = 255;
Magic Number,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,IsPasswordComplex,The following statement contains a magic number: return (Convert.ToInt32(password.Any(char.IsUpper)) +                      Convert.ToInt32(password.Any(char.IsLower)) +                      Convert.ToInt32(password.Any(char.IsDigit)) +                      Convert.ToInt32(password.Any(c => ((int)c) > ASCIIMax)) +                      Convert.ToInt32(password.Any(char.IsLetterOrDigit)) >= 3)                     && password.Length >= 6;
Magic Number,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,IsPasswordComplex,The following statement contains a magic number: return (Convert.ToInt32(password.Any(char.IsUpper)) +                      Convert.ToInt32(password.Any(char.IsLower)) +                      Convert.ToInt32(password.Any(char.IsDigit)) +                      Convert.ToInt32(password.Any(c => ((int)c) > ASCIIMax)) +                      Convert.ToInt32(password.Any(char.IsLetterOrDigit)) >= 3)                     && password.Length >= 6;
Magic Number,Microsoft.WindowsAzure.Commands.CloudService.Development,EnableAzureServiceProjectRemoteDesktopCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\CloudService\Development\EnableAzureRemoteDesktop.cs,UpdateServiceConfigurations,The following statement contains a magic number: foreach (ServiceConfiguration config in new[] { service.Components.LocalConfig' service.Components.CloudConfig })              {                  foreach (RoleSettings role in config.Role)                  {                      if (role.Certificates == null)                      {                          role.Certificates = new Certificate[0];                      }                        Certificate existingCert = role.Certificates.FirstOrDefault(c => c.name == certElement.name);                      if (existingCert != null)                      {                          // ensure we're referencing the right cert                          existingCert.thumbprint = certElement.thumbprint;                      }                      else                      {                          role.Certificates = role.Certificates.Concat(new[] { certElement }).ToArray();                      }                        Dictionary<string' string> settings = new Dictionary<string' string>();                      foreach (ConfigurationSetting setting in role.ConfigurationSettings)                      {                          settings[setting.name] = setting.value;                      }                      settings["Microsoft.WindowsAzure.Plugins.RemoteAccess.Enabled"] = "true";                      settings["Microsoft.WindowsAzure.Plugins.RemoteAccess.AccountUsername"] = Username;                      settings["Microsoft.WindowsAzure.Plugins.RemoteAccess.AccountEncryptedPassword"] = encryptedPassword;                      settings["Microsoft.WindowsAzure.Plugins.RemoteAccess.AccountExpiration"] = (DateTime.Now + TimeSpan.FromDays(365)).ToString("o");                        if (role.name == forwarderName)                      {                          settings["Microsoft.WindowsAzure.Plugins.RemoteForwarder.Enabled"] = "true";                      }                        role.ConfigurationSettings = settings.Select(pair => new ConfigurationSetting { name = pair.Key' value = pair.Value }).ToArray();                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Websites,SwitchAzureWebsiteSlotCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SwitchAzureWebSiteSlot.cs,ExecuteCmdlet,The following statement contains a magic number: if (sites.Count < 2)              {                  throw new PSInvalidOperationException(Resources.SwapWebsiteSlotRequire2SlotsWarning);              }
Magic Number,Microsoft.WindowsAzure.Commands.Websites,SwitchAzureWebsiteSlotCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SwitchAzureWebSiteSlot.cs,ExecuteCmdlet,The following statement contains a magic number: if (slot1 == null && slot2 == null)              {                  // If slots not specified make sure there are only 2 slots and use them                  if (slots.Length == 2)                  {                      slot1 = slots[0];                      slot2 = slots[1];                  }                  else                  {                      throw new PSInvalidOperationException(Resources.SwapWebsiteSlotSpecifySlotsWarning);                  }              }              else if (slot1 != null && slot2 != null)              {                  // If both slots specified make sure they exist and use them                  VerifySlotExists(slots' slot1);                  VerifySlotExists(slots' slot2);              }              else              {                  // If only one slot is specified make sure it exists and that there are only 2 slots                  if (slots.Length == 2)                  {                      if (slot1 != null)                      {                          VerifySlotExists(slots' slot1);                      }                      if (slot2 != null)                      {                          VerifySlotExists(slots' slot2);                      }                        slot1 = slots[0];                      slot2 = slots[1];                  }                  else                  {                      throw new PSInvalidOperationException(Resources.SwapWebsiteSlotSpecifySlotsWarning);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Websites,SwitchAzureWebsiteSlotCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SwitchAzureWebSiteSlot.cs,ExecuteCmdlet,The following statement contains a magic number: if (slot1 == null && slot2 == null)              {                  // If slots not specified make sure there are only 2 slots and use them                  if (slots.Length == 2)                  {                      slot1 = slots[0];                      slot2 = slots[1];                  }                  else                  {                      throw new PSInvalidOperationException(Resources.SwapWebsiteSlotSpecifySlotsWarning);                  }              }              else if (slot1 != null && slot2 != null)              {                  // If both slots specified make sure they exist and use them                  VerifySlotExists(slots' slot1);                  VerifySlotExists(slots' slot2);              }              else              {                  // If only one slot is specified make sure it exists and that there are only 2 slots                  if (slots.Length == 2)                  {                      if (slot1 != null)                      {                          VerifySlotExists(slots' slot1);                      }                      if (slot2 != null)                      {                          VerifySlotExists(slots' slot2);                      }                        slot1 = slots[0];                      slot2 = slots[1];                  }                  else                  {                      throw new PSInvalidOperationException(Resources.SwapWebsiteSlotSpecifySlotsWarning);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Websites,SaveAzureWebsiteLogCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SaveAzureWebsiteLog.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[8 * 1024];
Magic Number,Microsoft.WindowsAzure.Commands.Websites,SaveAzureWebsiteLogCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Websites\SaveAzureWebsiteLog.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[8 * 1024];
Duplicate Code,Microsoft.WindowsAzure.Commands.Scheduler,SetSchedulerHttpJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Scheduler\SetSchedulerHttpJobCommand.cs,ExecuteCmdlet,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 30)' (37' 61))
Duplicate Code,Microsoft.WindowsAzure.Commands.Scheduler,SetSchedulerStorageQueueJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\Scheduler\SetSchedulerStorageQueueJobCommand.cs,ExecuteCmdlet,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 27)' (34' 55))
Missing Default,Microsoft.WindowsAzure.Commands.WAPackIaaS.VirtualMachine,VMOperationsCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\Services\Commands\WAPackIaaS\VirtualMachine\VMOperationsCmdlet.cs,ExecuteVMOperation,The following switch statement is missing a default case: switch (operation)              {                  case VMOperationsEnum.Start:                      virtualMachine = virtualMachineOperations.Start(VM.ID' out job);                      break;                    case VMOperationsEnum.Stop:                      virtualMachine = virtualMachineOperations.Stop(VM.ID' out job);                      break;                    case VMOperationsEnum.Restart:                      virtualMachine = virtualMachineOperations.Restart(VM.ID' out job);                      break;                    case VMOperationsEnum.Shutdown:                      virtualMachine = virtualMachineOperations.Shutdown(VM.ID' out job);                      break;                    case VMOperationsEnum.Suspend:                      virtualMachine = virtualMachineOperations.Suspend(VM.ID' out job);                      break;                    case VMOperationsEnum.Resume:                      virtualMachine = virtualMachineOperations.Resume(VM.ID' out job);                      break;              }
