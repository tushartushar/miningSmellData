Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.Commands.WebApps.Models.WebApp,DeploymentTemplateHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\DeploymentTemplate.cs,CreateSlotCloneDeploymentTemplate,The method has 7 parameters. Parameters: location' serverFarmId' destinationWebAppName' sourceWebAppId' slotNames' hostingProfile' apiVersion
Long Parameter List,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The method has 5 parameters. Parameters: resourceGroup' deploymentName' basicDeployment' job' status
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,TryParseWebAppMetadataFromResourceId,The method has 5 parameters. Parameters: resourceId' resourceGroupName' webAppName' slotName' failIfSlot
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,CreateWebApp,The method has 8 parameters. Parameters: resourceGroupName' webAppName' slotName' location' serverFarmId' cloningInfo' aseName' aseResourceGroupName
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,UpdateWebApp,The method has 5 parameters. Parameters: resourceGroupName' location' webAppName' slotName' appServicePlan
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The method has 6 parameters. Parameters: resourceGroupName' webSiteName' slotName' deleteEmptyServerFarmBydefault' deleteMetricsBydefault' deleteSlotsBydefault
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetWebAppPublishingProfile,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' slotName' outputFile' format
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetWebAppUsageMetrics,The method has 8 parameters. Parameters: resourceGroupName' webSiteName' slotName' metricNames' startTime' endTime' timeGrain' instanceDetails
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,CreateAppServicePlan,The method has 8 parameters. Parameters: resourceGroupName' appServicePlanName' location' adminSiteName' sku' aseName' aseResourceGroupName' perSiteScaling
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetAppServicePlanHistoricalUsageMetrics,The method has 7 parameters. Parameters: resourceGroupName' appServicePlanName' metricNames' startTime' endTime' timeGrain' instanceDetails
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,UpdateWebAppConfiguration,The method has 7 parameters. Parameters: resourceGroupName' location' webSiteName' slotName' siteConfig' appSettings' connectionStrings
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetSiteBackupStatusSecrets,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' slotName' backupId' request
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,RestoreSite,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' slotName' backupId' request
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,UpdateHostNameSslState,The method has 7 parameters. Parameters: resourceGroupName' webAppName' slotName' location' hostName' sslState' thumbPrint
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,SwapSlot,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' sourceSlotName' destinationSlotName' preserveVnet
Long Parameter List,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,SwapSlotWithPreviewApplySlotConfig,The method has 5 parameters. Parameters: resourceGroupName' webSiteName' sourceSlotName' destinationSlotName' preserveVnet
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,CreateOrUpdateSiteSlot,The method has 9 parameters. Parameters: webApp' resourceGroupName' name' siteEnvelope' slot' skipDnsRegistration' skipCustomDomainVerification' forceDnsRegistration' ttlInSeconds
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,CreateOrUpdateSite,The method has 8 parameters. Parameters: webApp' resourceGroupName' name' siteEnvelope' skipDnsRegistration' skipCustomDomainVerification' forceDnsRegistration' ttlInSeconds
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,CreateOrUpdateSiteHostNameBinding,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' hostName' hostNameBinding
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,DeleteSiteSlot,The method has 7 parameters. Parameters: webApp' resourceGroupName' name' slot' deleteMetrics' deleteEmptyServerFarm' deleteAllSlots
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,DeleteSite,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' deleteMetrics' deleteEmptyServerFarm' deleteAllSlots
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,ListSitePublishingProfileXmlSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' publishingProfileOptions' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetSiteMetrics,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' details' filter
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetSiteMetricsSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' slot' details' filter
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteConfigSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' siteConfig' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteAppSettingsSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' appSettings' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteConnectionStringsSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' connectionStrings' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,UpdateSiteBackupConfigurationSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' request' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,BackupSiteSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' request' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetSiteBackupStatusSecretsSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' backupId' EmptyRequest' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetSiteBackupStatusSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' backupId' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetSiteBackupStatusSecrets,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' backupId' EmptyRequest
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,RestoreSiteSlot,The method has 6 parameters. Parameters: webApp' resourceGroupName' name' backupId' request' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,RestoreSite,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' backupId' request
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,RecoverSiteSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' recoveryEntity' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,SwapSlotsSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' slotSwapEntity' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,ApplySlotConfigSlot,The method has 5 parameters. Parameters: webApp' resourceGroupName' name' slotSwapEntity' slot
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetServerFarmSites,The method has 6 parameters. Parameters: serverFarm' resourceGroupName' name' skipToken' filter' top
Long Parameter List,Microsoft.Azure.Management.WebSites,WebsitesClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClientExtensions.cs,GetServerFarmMetrics,The method has 5 parameters. Parameters: serverFarm' resourceGroupName' name' details' filter
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetBySubscription,The length of the parameter progressCurrentOperationFormat is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetBySubscription,The length of the parameter progressCurrentOperationFormat is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\RemoveAzureWebApp.cs,,The length of the parameter deleteEmptyServerFarmByDefault is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,RemoveAzureWebAppSlotCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\RemoveAzureWebAppSlot.cs,,The length of the parameter deleteEmptyServerFarmByDefault is 30.
Long Identifier,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the parameter operationWithSameIdAndProvisioningState is 39.
Long Identifier,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the parameter nestedOperationWithSameIdAndProvisioningState is 45.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GetApplicationServiceEnvironmentResourceId,The length of the parameter applicationServiceEnvironmentName is 33.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,,The length of the parameter ApplicationServiceEnvironmentResourcesName is 42.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,,The length of the parameter ApplicationServiceEnvironmentResourceIdFormat is 45.
Long Identifier,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The length of the parameter deleteEmptyServerFarmBydefault is 30.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByLocation,The length of the statement  "            var progressRecord = new ProgressRecord(1' string.Format("Get app service plans at location '{0}'"' Location)' "Progress:"); " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByLocation,The length of the statement  "            }).Where(sf => string.Equals(sf.Location' Location.Replace(" "' string.Empty)' StringComparison.OrdinalIgnoreCase)).ToArray(); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,NewAzureAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\NewAzureAppServicePlan.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.CreateAppServicePlan(ResourceGroupName' Name' Location' null' sku' AseName' aseResourceGroupName' PerSiteScaling)' true); " is 148.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,SetAzureAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\SetAzureAppServicePlan.cs,ExecuteCmdlet,The length of the statement  "                    AppServicePlan.Sku.Name = string.IsNullOrWhiteSpace(WorkerSize) ? CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' workerSizeAsNumber) : CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' WorkerSize); " is 200.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,SetAzureAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\SetAzureAppServicePlan.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.CreateAppServicePlan(ResourceGroupName' Name' AppServicePlan.Location' AdminSiteName' AppServicePlan.Sku' null' null' AppServicePlan.PerSiteScaling)' true); " is 183.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureAppServicePlanMetricsCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlanMetrics.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetAppServicePlanHistoricalUsageMetrics(ResourceGroupName' Name' Metrics' StartTime' EndTime' Granularity' InstanceDetails.IsPresent)); " is 162.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,BackupRestoreUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\BackupRestore\BackupRestoreUtils.cs,StringToFrequencyUnit,The length of the statement  "                throw new ArgumentException(string.Format("{0} is not a valid FrequencyUnit. Valid options are Hour and Day."' frequencyUnit)); " is 127.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,ProcessRecord,The length of the statement  "                    var certificateName = GenerateCertName(certificateDetails.Thumbprint' webapp.HostingEnvironmentProfile != null ? webapp.HostingEnvironmentProfile.Name : null' webapp.Location' resourceGroupName); " is 195.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,GenerateCertName,The length of the statement  "            return string.Format("{0}{1}{2}"' thumbPrint' CertNamePostFixSeparator' GenerateCertNamePostFix(hostingEnv' location' resourceGroupName)); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,GenerateCertNamePostFix,The length of the statement  "            return string.Format("{0}{1}{2}{3}{4}"' string.IsNullOrEmpty(hostingEnv) ? "" : hostingEnv' CertNamePostFixSeparator' location' CertNamePostFixSeparator' resourceGroupName); " is 173.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\RemoveAzureWebAppSSLBinding.cs,ProcessRecord,The length of the statement  "                        WebsitesClient.UpdateHostNameSslState(resourceGroupName' webAppName' slot' webapp.Location' Name' SslState.Disabled' null); " is 123.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\RemoveAzureWebAppSSLBinding.cs,ProcessRecord,The length of the statement  "                            var certificates = CmdletHelpers.GetCertificates(this.ResourcesClient' this.WebsitesClient' certificateResourceGroup' thumbprint); " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetByLocation,The length of the statement  "            }).Where(s => string.Equals(s.Location' Location.Replace(" "' string.Empty)' StringComparison.OrdinalIgnoreCase)).ToArray(); " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppMetricsCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebAppMetrics.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetWebAppUsageMetrics(ResourceGroupName' Name' null' Metrics' StartTime' EndTime' Granularity' InstanceDetails.IsPresent)); " is 150.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\NewAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    ConfigureLoadBalancing = !string.IsNullOrEmpty(TrafficManagerProfileId) || !string.IsNullOrEmpty(TrafficManagerProfileName)' " is 124.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\NewAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    AppSettingsOverrides = AppSettingsOverrides == null ? null : AppSettingsOverrides.Cast<DictionaryEntry>().ToDictionary(kvp => kvp.Key.ToString()' kvp => kvp.Value.ToString()' StringComparer.Ordinal) " is 198.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\NewAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.CreateWebApp(ResourceGroupName' Name' null' Location' AppServicePlan' cloningInfo' AseName' AseResourceGroupName)); " is 142.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\NewAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                WriteVerboseWithTimestamp("Cloning all deployment slots of source web app '{0}' to destination web app {1}"' srcwebAppName' Name); " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CloneSlots,The length of the statement  "            var hostingEnvironmentProfile = WebsitesClient.CreateHostingEnvironmentProfile(ResourceGroupName' AseResourceGroupName' AseName); " is 129.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\NewAzureWebApp.cs,CloneSlots,The length of the statement  "            var template = DeploymentTemplateHelper.CreateSlotCloneDeploymentTemplate(Location' AppServicePlan' Name' SourceWebApp.Id' " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,RemoveAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\RemoveAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    WebsitesClient.RemoveWebApp(ResourceGroupName' Name' null' deleteEmptyServerFarmByDefault' deleteMetricsByDefault' deleteSlotsByDefault); " is 137.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The length of the statement  "                    WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' null' siteConfig' AppSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary()); " is 192.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,GetAzureWebAppSlotMetricsCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\GetAzureWebAppSlotMetrics.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.GetWebAppUsageMetrics(ResourceGroupName' Name' Slot' Metrics' StartTime' EndTime' Granularity' InstanceDetails.IsPresent)); " is 150.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,NewAzureWebAppSlotCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\NewAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                    AppSettingsOverrides = AppSettingsOverrides == null ? null : AppSettingsOverrides.Cast<DictionaryEntry>().ToDictionary(kvp => kvp.Key.ToString()' kvp => kvp.Value.ToString()' StringComparer.Ordinal) " is 198.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,NewAzureWebAppSlotCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\NewAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "            WriteObject(WebsitesClient.CreateWebApp(ResourceGroupName' Name' Slot' webApp.Location' AppServicePlan' cloningInfo' AseName' AseResourceGroupName)); " is 149.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,RemoveAzureWebAppSlotCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\RemoveAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                () => WebsitesClient.RemoveWebApp(ResourceGroupName' Name' Slot' deleteEmptyServerFarmByDefault' deleteMetricsByDefault' deleteSlotsByDefault)); " is 144.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                    WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' Slot' siteConfig' AppSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary()); " is 192.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotConfigName,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlotConfigName.cs,ExecuteCmdlet,The length of the statement  "                throw new ValidationMetadataException("Please either provide a list of app setting names or set RemoveAllSettingNames option to true"); " is 135.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotConfigName,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlotConfigName.cs,ExecuteCmdlet,The length of the statement  "                throw new ValidationMetadataException("Please either provide a list of connection string names or set RemoveAllConnectionStringNames option to true"); " is 150.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,ExecuteCmdlet,The length of the statement  "                                WebsitesClient.SwapSlotWithPreviewApplySlotConfig(ResourceGroupName' Name' SourceSlotName' DestinationSlotName' PreserveVnet); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                actionMessage = string.Format("Regular swap: Are you sure you want to swap {0} slot with {1} slot"' SourceSlotName' DestinationSlotName); " is 137.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                        actionMessage = string.Format("Swap with preview: Applying slot config from {0} slot onto {1} slot"' DestinationSlotName' SourceSlotName); " is 138.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                        actionMessage = string.Format("Swap with preview: Completing the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName); " is 167.
Long Statement,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The length of the statement  "                        actionMessage = string.Format("Swap with preview: Resetting the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName); " is 166.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                DeploymentOperation operationWithSameIdAndProvisioningState = old.Find(o => o.OperationId.Equals(operation.OperationId) && o.Properties.ProvisioningState.Equals(operation.Properties.ProvisioningState)); " is 202.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                //If nested deployment' get the operations under those deployments as well. Check if the deployment exists before calling list operations on it " is 143.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                    operation.Properties.TargetResource.ResourceType.Equals("Microsoft.Resources/deployments"' StringComparison.OrdinalIgnoreCase) && " is 129.
Long Statement,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,GetNewOperations,The length of the statement  "                            DeploymentOperation nestedOperationWithSameIdAndProvisioningState = newOperations.Find(o => o.OperationId.Equals(op.OperationId) && o.Properties.ProvisioningState.Equals(op.Properties.ProvisioningState)); " is 204.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GenerateSiteWithSlotName,The length of the statement  "            if (!string.IsNullOrEmpty(slotName) && !string.Equals(slotName' ProductionSlotName' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GetApplicationServiceEnvironmentResourceId,The length of the statement  "            return string.Format(ApplicationServiceEnvironmentResourceIdFormat' subscriptionId' resourceGroupName' ApplicationServiceEnvironmentResourcesName' " is 146.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GetHostNameSslStatesFromSiteResponse,The length of the statement  "                hostNameSslState = site.HostNameSslStates.Where(h => h.SslState.HasValue && h.SslState.Value != SslState.Disabled).ToArray(); " is 125.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GetCertificates,The length of the statement  "                certificateResources = certificateResources.Where(c => string.Equals(c.ResourceGroupName' resourceGroupName' StringComparison.OrdinalIgnoreCase)).ToArray(); " is 156.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GetCertificates,The length of the statement  "                    websitesClient.GetCertificate(certificateResource.ResourceGroupName ?? GetResourceGroupFromResourceId(certificateResource.Id)' certificateResource.Name)); " is 154.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,CmdletHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\CmdletHelpers.cs,GetCertificates,The length of the statement  "                certificates = certificates.Where(c => string.Equals(c.Thumbprint' thumbPrint' StringComparison.OrdinalIgnoreCase)).ToList(); " is 125.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,CreateHostingEnvironmentProfile,The length of the statement  "            return CmdletHelpers.CreateHostingEnvironmentProfile(WrappedWebsitesClient.SubscriptionId' resourceGroupName' aseResourceGroupName' aseName); " is 141.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The length of the statement  "                WrappedWebsitesClient.WebApps().DeleteSiteSlot(resourceGroupName' webSiteName' slotName' deleteMetrics: deleteMetricsBydefault.ToString()' deleteEmptyServerFarm: deleteEmptyServerFarmBydefault.ToString()' deleteAllSlots: deleteSlotsBydefault.ToString()); " is 254.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,RemoveWebApp,The length of the statement  "                WrappedWebsitesClient.WebApps().DeleteSite(resourceGroupName' webSiteName' deleteMetrics: deleteMetricsBydefault.ToString()' deleteEmptyServerFarm: deleteEmptyServerFarmBydefault.ToString()' deleteAllSlots: deleteSlotsBydefault.ToString()); " is 240.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,ResetWebAppPublishingCredentials,The length of the statement  "            var profile = doc.Root == null ? null : doc.Root.Element("publishData") == null ? null : doc.Root.Element("publishData").Elements("publishProfile") " is 147.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetWebAppUsageMetrics,The length of the statement  "                WrappedWebsitesClient.WebApps().GetSiteMetricsSlot(resourceGroupName' webSiteName' slotName' instanceDetails' CmdletHelpers.BuildMetricFilter(startTime' endTime ?? DateTime.Now' timeGrain' metricNames)) : " is 204.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetWebAppUsageMetrics,The length of the statement  "                WrappedWebsitesClient.WebApps().GetSiteMetrics(resourceGroupName' webSiteName' instanceDetails' CmdletHelpers.BuildMetricFilter(startTime' endTime ?? DateTime.Now' timeGrain' metricNames)); " is 189.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,CreateAppServicePlan,The length of the statement  "				id: CmdletHelpers.GetApplicationServiceEnvironmentResourceId(WrappedWebsitesClient.SubscriptionId' aseResourceGroupName' aseName)' " is 130.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,CreateAppServicePlan,The length of the statement  "            return WrappedWebsitesClient.AppServicePlans().CreateOrUpdateServerFarm(resourceGroupName' appServicePlanName' serverFarm); " is 123.
Long Statement,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetWebAppConfiguration,The length of the statement  "                site.SiteConfig.AppSettings = appSettings.Properties.Select(s => new NameValuePair { Name = s.Key' Value = s.Value }).ToList(); " is 127.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateConnectionStringsAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateConnectionStringsAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}"' key' key.GetType())); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateConnectionStringsAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateConnectionStringsAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException("Connection string type value pair must be of type 'System.Collections.Hashtable'"); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateServerFarmAttribute.cs,Validate,The length of the statement  "                throw new ValidationMetadataException("Argument 'ServerFarm' must be of type Microsoft.Azure.Management.WebSites.Models.ServerFarmWithRichSku"); " is 144.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateServerFarmAttribute.cs,ValidateSku,The length of the statement  "                throw new ValidationMetadataException("Argument 'ServerFarm.SKU.Name' must conform to format first letter of sku name and numerical value of worker size. Worker Size [Small = 1' Medium = 2' Large = 3' ExtraLarge = 4] For instance' F1 means free small workers' P3 means premium large workers. "); " is 295.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateServerFarmAttribute.cs,ValidateSku,The length of the statement  "                throw new ValidationMetadataException("Argument 'ServerFarm.SKU.Tier' must be one of Free|Shared|Basic|Standard|Premium"); " is 122.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateServerFarmAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateServerFarmAttribute.cs,ValidateSku,The length of the statement  "                throw new ValidationMetadataException(string.Format("Arguments 'ServerFarm.SKU.Name' and 'ServerFarm.SKU.Tier' must point to the same tier. [F = Free' D = Shared' B = Basic' S = Standard' P = Premium]. Current values: SKU.Name = {0}' SKU.Tier = {1}"' sku.Name' sku.Tier)); " is 272.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateStringDictionaryAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateStringDictionaryAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException(string.Format("Key '{0}' should be of type string instead of {1}"' key' key.GetType())); " is 126.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateStringDictionaryAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateStringDictionaryAttribute.cs,Validate,The length of the statement  "                    throw new ValidationMetadataException(string.Format("Value '{0}' should be of type string instead of {1}"' value' value.GetType())); " is 132.
Long Statement,Microsoft.Azure.Commands.WebApps.Validations,ValidateWebAppNameAttribute,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Validations\ValidateWebAppNameAttribute.cs,Validate,The length of the statement  "                throw new ValidationMetadataException(string.Format("Specified resource '{0}' is a non-production web app slot. Please use the AzureRMWebAppSlot cmdlets to manage this resource"' webAppName)); " is 192.
Complex Conditional,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,ProcessRecord,The conditional expression  "ParameterSetName != ParameterSet1Name                  && ParameterSetName != ParameterSet2Name                  && ParameterSetName != ParameterSet3Name                  && ParameterSetName != ParameterSet4Name"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.WebApps.Utilities,WebsitesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Utilities\WebsitesClient.cs,GetWebAppConfiguration,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByAppServicePlanName,The following statement contains a magic number: for (var i = 0; i < serverFarmResources.Length; i++)              {                  var sf = serverFarmResources[i];                  try                  {                      var result = WebsitesClient.GetAppServicePlan(sf.ResourceGroupName' sf.Name);                      if (result != null)                      {                          list.Add(result);                      }                  }                  catch (Exception e)                  {                      WriteExceptionError(e);                  }                    progressRecord.StatusDescription = string.Format(progressDescriptionFormat' i + 1' serverFarmResources.Length);                  progressRecord.PercentComplete = (100 * (i + 1)) / serverFarmResources.Length;                  WriteProgress(progressRecord);              }
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetBySubscription,The following statement contains a magic number: for (var i = 0; i < resourceGroups.Length; i++)              {                  var rg = resourceGroups[i];                  try                  {                      var result = WebsitesClient.ListAppServicePlans(rg);                      if (result != null && result != null)                      {                          list.AddRange(result);                      }                  }                  catch (Exception e)                  {                      WriteExceptionError(e);                  }                    progressRecord.CurrentOperation = string.Format(progressCurrentOperationFormat' rg);                  progressRecord.StatusDescription = string.Format(progressDescriptionFormat' i + 1' resourceGroups.Length);                  progressRecord.PercentComplete = (100 * (i + 1)) / resourceGroups.Length;                  WriteProgress(progressRecord);              }
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,GetByLocation,The following statement contains a magic number: for (var i = 0; i < serverFarmResources.Length; i++)              {                  var sf = serverFarmResources[i];                  try                  {                      var result = WebsitesClient.GetAppServicePlan(sf.ResourceGroupName' sf.Name);                      if (result != null)                      {                          list.Add(result);                      }                  }                  catch (Exception e)                  {                      WriteExceptionError(e);                  }                    progressRecord.StatusDescription = string.Format(progressDescriptionFormat' i + 1' serverFarmResources.Length);                  progressRecord.PercentComplete = (100 * (i + 1)) / serverFarmResources.Length;                  WriteProgress(progressRecord);              }
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetByWebAppName,The following statement contains a magic number: for (var i = 0; i < sites.Length; i++)              {                  var s = sites[i];                  var result = WebsitesClient.GetWebApp(s.ResourceGroupName' s.Name' null);                  if (result != null)                  {                      list.Add(result);                  }                    progressRecord.StatusDescription = string.Format(progressDescriptionFormat' i + 1' sites.Length);                  progressRecord.PercentComplete = (100 * (i + 1)) / sites.Length;                  WriteProgress(progressRecord);              }
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetBySubscription,The following statement contains a magic number: for (var i = 0; i < resourceGroups.Length; i++)              {                  var rg = resourceGroups[i];                  try                  {                      var result = WebsitesClient.ListWebApps(rg' null);                      if (result != null)                      {                          list.AddRange(result);                      }                  }                  catch (Exception e)                  {                      WriteExceptionError(e);                  }                    progressRecord.CurrentOperation = string.Format(progressCurrentOperationFormat' rg);                  progressRecord.StatusDescription = string.Format(progressDescriptionFormat' i + 1' resourceGroups.Length);                  progressRecord.PercentComplete = (100 * (i + 1)) / resourceGroups.Length;                  WriteProgress(progressRecord);              }
Magic Number,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebApp.cs,GetByLocation,The following statement contains a magic number: for (var i = 0; i < sites.Length; i++)              {                  try                  {                      var sf = sites[i];                      var result = WebsitesClient.GetWebApp(sf.ResourceGroupName' sf.Name' null);                      if (result != null)                      {                          list.Add(result);                      }                  }                  catch (Exception e)                  {                      WriteExceptionError(e);                  }                    progressRecord.StatusDescription = string.Format(progressDescriptionFormat' i + 1' sites.Length);                  progressRecord.PercentComplete = (100 * (i + 1)) / sites.Length;                  WriteProgress(progressRecord);              }
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: int counter = 5000;
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName);                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName);                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName);                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName);                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName);                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Magic Number,Microsoft.Azure.Commands.WebApps.Models,ResourceClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\ResourceClient.cs,IsClientFailureRequest,The following statement contains a magic number: return statusCode == 505 || statusCode == 501 || (statusCode >= 400 && statusCode < 500 && statusCode != 408);
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,GetAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\GetAzureAppServicePlan.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1:                      if (!string.IsNullOrEmpty(ResourceGroupName) && !string.IsNullOrEmpty(Name))                      {                          GetAppServicePlan();                      }                      else if (!string.IsNullOrEmpty(ResourceGroupName))                      {                          GetByResourceGroup();                      }                      else if (!string.IsNullOrEmpty(Name))                      {                          GetByAppServicePlanName();                      }                      else                      {                          GetBySubscription();                      }                      break;                  case ParameterSet2:                      GetByLocation();                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.AppServicePlans,SetAzureAppServicePlanCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\AppServicePlans\SetAzureAppServicePlan.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      AppServicePlan = WebsitesClient.GetAppServicePlan(ResourceGroupName' Name);                      AppServicePlan.Sku.Tier = string.IsNullOrWhiteSpace(Tier) ? AppServicePlan.Sku.Tier : Tier;                      AppServicePlan.Sku.Capacity = NumberofWorkers > 0 ? NumberofWorkers : AppServicePlan.Sku.Capacity;                      var workerSizeAsNumber = int.Parse(AppServicePlan.Sku.Name.Substring(1' AppServicePlan.Sku.Name.Length - 1));                      AppServicePlan.Sku.Name = string.IsNullOrWhiteSpace(WorkerSize) ? CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' workerSizeAsNumber) : CmdletHelpers.GetSkuName(AppServicePlan.Sku.Tier' WorkerSize);                      AppServicePlan.PerSiteScaling = PerSiteScaling;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,NewAzureWebAppSSLBinding,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\Certificates\NewAzureWebAppSSLBinding.cs,ProcessRecord,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                  case ParameterSet3Name:                      var certificateBytes = File.ReadAllBytes(CertificateFilePath);                      var certificateDetails = new X509Certificate2(certificateBytes' CertificatePassword);                        var certificateName = GenerateCertName(certificateDetails.Thumbprint' webapp.HostingEnvironmentProfile != null ? webapp.HostingEnvironmentProfile.Name : null' webapp.Location' resourceGroupName);                      var certificate = new Certificate(                          webapp.Location'  #if !NETSTANDARD                          pfxBlob: Convert.ToBase64String(certificateBytes)'  #else                          pfxBlob: certificateBytes'  #endif                          password: CertificatePassword'                          hostingEnvironmentProfile: (webapp.HostingEnvironmentProfile != null) ?                                                          webapp.HostingEnvironmentProfile :                                                          null);                        var certificateResourceGroup = CmdletHelpers.GetResourceGroupFromResourceId(webapp.ServerFarmId);                      try                      {                          WebsitesClient.CreateCertificate(certificateResourceGroup' certificateName' certificate);                      }                      catch (CloudException e)                      {                          // This exception is thrown when certificate already exists. Let's swallow it and continue.                          if (e.Response.StatusCode != HttpStatusCode.Conflict)                          {                              throw;                          }                      }                        thumbPrint = certificateDetails.Thumbprint;                      break;                    case ParameterSet2Name:                  case ParameterSet4Name:                      thumbPrint = Thumbprint;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,GetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\GetAzureWebApp.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1:                      if (!string.IsNullOrWhiteSpace(ResourceGroupName) && !string.IsNullOrWhiteSpace(Name))                      {                          WriteObject(WebsitesClient.GetWebApp(ResourceGroupName' Name' null));                      }                      else if (!string.IsNullOrWhiteSpace(ResourceGroupName))                      {                          GetByResourceGroup();                      }                      else if (!string.IsNullOrWhiteSpace(Name))                      {                          GetByWebAppName();                      }                      else                      {                          GetBySubscription();                      }                      break;                  case ParameterSet2:                      GetByAppServicePlan();                      break;                  case ParameterSet3:                      GetByLocation();                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.WebApps,SetAzureWebAppCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\WebApps\SetAzureWebApp.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      WebApp = WebsitesClient.GetWebApp(ResourceGroupName' Name' null);                      location = WebApp.Location;                      var parameters = new HashSet<string>(MyInvocation.BoundParameters.Keys' StringComparer.OrdinalIgnoreCase);                      if (parameters.Any(p => CmdletHelpers.SiteConfigParameters.Contains(p)))                      {                          siteConfig = new SiteConfig                          {                              DefaultDocuments = parameters.Contains("DefaultDocuments") ? DefaultDocuments : null'                              NetFrameworkVersion = parameters.Contains("NetFrameworkVersion") ? NetFrameworkVersion : null'                              PhpVersion = parameters.Contains("PhpVersion") ? PhpVersion : null'                              RequestTracingEnabled =                                  parameters.Contains("RequestTracingEnabled") ? (bool?)RequestTracingEnabled : null'                              HttpLoggingEnabled = parameters.Contains("HttpLoggingEnabled") ? (bool?)HttpLoggingEnabled : null'                              DetailedErrorLoggingEnabled =                                  parameters.Contains("DetailedErrorLoggingEnabled") ? (bool?)DetailedErrorLoggingEnabled : null'                              HandlerMappings = parameters.Contains("HandlerMappings") ? HandlerMappings : null'                              ManagedPipelineMode =                                  parameters.Contains("ManagedPipelineMode")                                      ? (ManagedPipelineMode?)Enum.Parse(typeof(ManagedPipelineMode)' ManagedPipelineMode)                                      : null'                              WebSocketsEnabled = parameters.Contains("WebSocketsEnabled") ? (bool?)WebSocketsEnabled : null'                              Use32BitWorkerProcess =                                  parameters.Contains("Use32BitWorkerProcess") ? (bool?)Use32BitWorkerProcess : null'                              AutoSwapSlotName = parameters.Contains("AutoSwapSlotName") ? AutoSwapSlotName : null'                              NumberOfWorkers = parameters.Contains("NumberOfWorkers") ? NumberOfWorkers : WebApp.SiteConfig.NumberOfWorkers                          };                      }                        // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' null' siteConfig' AppSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary());                        if (parameters.Contains("AppServicePlan"))                      {                          WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' null' AppServicePlan);                      }                        if (parameters.Contains("HostNames"))                      {                          WebsitesClient.AddCustomHostNames(ResourceGroupName' location' Name' HostNames);                      }                        break;                  case ParameterSet2Name:                      // Web app is direct or pipeline input                      string servicePlanName;                      string rg;                      location = WebApp.Location;                      siteConfig = WebApp.SiteConfig;                        // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(                          ResourceGroupName'                           location'                           Name'                           null'                           siteConfig'                           WebApp.SiteConfig == null ? null : WebApp.SiteConfig                                                      .AppSettings                                                      .ToDictionary(                                                          nvp => nvp.Name'                                                           nvp => nvp.Value'                                                           StringComparer.OrdinalIgnoreCase)'                           WebApp.SiteConfig == null ? null : WebApp.SiteConfig                                                      .ConnectionStrings                                                      .ToDictionary(                                                          nvp => nvp.Name'                                                           nvp => new ConnStringValueTypePair                                                          {                                                              Type = nvp.Type.Value'                                                              Value = nvp.ConnectionString                                                          }'                                                           StringComparer.OrdinalIgnoreCase));                        CmdletHelpers.TryParseAppServicePlanMetadataFromResourceId(WebApp.ServerFarmId' out rg' out servicePlanName);                      WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' null' servicePlanName);                      WebsitesClient.AddCustomHostNames(ResourceGroupName' location' Name' WebApp.HostNames.ToArray());                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SetAzureWebAppSlotCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SetAzureWebAppSlot.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      WebApp = WebsitesClient.GetWebApp(ResourceGroupName' Name' Slot);                      location = WebApp.Location;                      var parameters = new HashSet<string>(MyInvocation.BoundParameters.Keys' StringComparer.OrdinalIgnoreCase);                      if (parameters.Any(p => CmdletHelpers.SiteConfigParameters.Contains(p)))                      {                          siteConfig = new SiteConfig                          {                              DefaultDocuments = parameters.Contains("DefaultDocuments") ? DefaultDocuments : null'                              NetFrameworkVersion = parameters.Contains("NetFrameworkVersion") ? NetFrameworkVersion : null'                              PhpVersion = parameters.Contains("PhpVersion") ? PhpVersion : null'                              RequestTracingEnabled =                                  parameters.Contains("RequestTracingEnabled") ? (bool?)RequestTracingEnabled : null'                              HttpLoggingEnabled = parameters.Contains("HttpLoggingEnabled") ? (bool?)HttpLoggingEnabled : null'                              DetailedErrorLoggingEnabled =                                  parameters.Contains("DetailedErrorLoggingEnabled") ? (bool?)DetailedErrorLoggingEnabled : null'                              HandlerMappings = parameters.Contains("HandlerMappings") ? HandlerMappings : null'                              ManagedPipelineMode =                                  parameters.Contains("ManagedPipelineMode")                                      ? (ManagedPipelineMode?)Enum.Parse(typeof(ManagedPipelineMode)' ManagedPipelineMode)                                      : null'                              WebSocketsEnabled = parameters.Contains("WebSocketsEnabled") ? (bool?)WebSocketsEnabled : null'                              Use32BitWorkerProcess =                                  parameters.Contains("Use32BitWorkerProcess") ? (bool?)Use32BitWorkerProcess : null'                              AutoSwapSlotName = parameters.Contains("AutoSwapSlotName") ? AutoSwapSlotName : null'                              NumberOfWorkers = parameters.Contains("NumberOfWorkers") ? NumberOfWorkers : WebApp.SiteConfig.NumberOfWorkers                          };                      }                        // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(ResourceGroupName' location' Name' Slot' siteConfig' AppSettings.ConvertToStringDictionary()' ConnectionStrings.ConvertToConnectionStringDictionary());                        if (parameters.Contains("AppServicePlan"))                      {                          WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' Slot' AppServicePlan);                      }                          break;                  case ParameterSet2Name:                      // Web app is direct or pipeline input                      string servicePlanName;                      string rg;                      location = WebApp.Location;                      siteConfig = WebApp.SiteConfig;                        // Update web app configuration                      WebsitesClient.UpdateWebAppConfiguration(                          ResourceGroupName'                           location'                           Name'                           Slot'                           siteConfig'                           WebApp.SiteConfig == null ?                               null :                               WebApp.SiteConfig.AppSettings                                  .ToDictionary(                                      nvp => nvp.Name'                                       nvp => nvp.Value'                                       StringComparer.OrdinalIgnoreCase)'                           WebApp.SiteConfig == null ?                               null :                               WebApp.SiteConfig.ConnectionStrings                                  .ToDictionary(                                  nvp => nvp.Name'                                   nvp => new ConnStringValueTypePair                                  {                                      Type = nvp.Type.Value'                                      Value = nvp.ConnectionString                                  }'                                   StringComparer.OrdinalIgnoreCase));                        CmdletHelpers.TryParseAppServicePlanMetadataFromResourceId(WebApp.ServerFarmId' out rg' out servicePlanName);                      WebsitesClient.UpdateWebApp(ResourceGroupName' location' Name' Slot' servicePlanName);                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (SwapWithPreviewAction.Value)                          {                                case Utilities.SwapWithPreviewAction.ApplySlotConfig:                                  WebsitesClient.SwapSlotWithPreviewApplySlotConfig(ResourceGroupName' Name' SourceSlotName' DestinationSlotName' PreserveVnet);                                  break;                                case Utilities.SwapWithPreviewAction.CompleteSlotSwap:                                  WebsitesClient.SwapSlot(ResourceGroupName' Name' SourceSlotName' DestinationSlotName' PreserveVnet);                                  break;                                case Utilities.SwapWithPreviewAction.ResetSlotSwap:                                  WebsitesClient.SwapSlotWithPreviewResetSlotSwap(ResourceGroupName' Name' SourceSlotName);                                  break;                            }
Missing Default,Microsoft.Azure.Commands.WebApps.Cmdlets.DeploymentSlots,SwitchAzureWebAppSlot,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Cmdlets\DeploymentSlots\SwitchAzureWebAppSlot.cs,GetConfirmActionMessages,The following switch statement is missing a default case: switch (SwapWithPreviewAction.Value)                  {                        case Utilities.SwapWithPreviewAction.ApplySlotConfig:                          actionMessage = string.Format("Swap with preview: Applying slot config from {0} slot onto {1} slot"' DestinationSlotName' SourceSlotName);                          processMessage = "Swap with preview: Applying slot config from destination slot onto source slot";                          break;                        case Utilities.SwapWithPreviewAction.CompleteSlotSwap:                          actionMessage = string.Format("Swap with preview: Completing the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName);                          processMessage = "Swap with preview: Completing the current on-going slot swap operation";                          break;                        case Utilities.SwapWithPreviewAction.ResetSlotSwap:                          actionMessage = string.Format("Swap with preview: Resetting the current on-going slot swap operation between {0} and {1} slots"' SourceSlotName' DestinationSlotName);                          processMessage = "Swap with preview: Resetting the current on-going slot swap operation";                          break;                    }
Missing Default,Microsoft.Azure.Commands.WebApps,WebAppOptionalSlotBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\WebAppOptionalSlotBaseCmdlet.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      string webAppName' slotName;                      if (CmdletHelpers.TryParseAppAndSlotNames(Name' out webAppName' out slotName))                      {                          Name = webAppName;                            // We have to choose between the slot name embedded in the name parameter or the slot parameter.                           // The choice for now is to prefer the embeeded slot name over the slot parameter.                           Slot = slotName;                      }                      break;                  case ParameterSet2Name:                      string rg' name' slot;                      CmdletHelpers.TryParseWebAppMetadataFromResourceId(WebApp.Id' out rg' out name' out slot);                        ResourceGroupName = rg;                      Name = name;                      Slot = slot;                      break;              }
Missing Default,Microsoft.Azure.Commands.WebApps,WebAppSlotBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Websites\Commands.Websites\Models.WebApp\WebAppSlotBaseCmdlet.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet1Name:                      string webAppName' slotName;                      if (CmdletHelpers.TryParseAppAndSlotNames(Name' out webAppName' out slotName))                      {                          Name = webAppName;                            // We have to choose between the slot name embedded in the name parameter or the slot parameter.                           // The choice for now is to prefer the embeeded slot name over the slot parameter.                           Slot = slotName;                      }                      break;                  case ParameterSet2Name:                      string rg' name' slot;                      CmdletHelpers.TryParseWebAppMetadataFromResourceId(WebApp.Id' out rg' out name' out slot);                      if (string.IsNullOrEmpty(slot))                      {                          throw new ValidationMetadataException("Input object is a production web app. It should be deployment slot");                      }                        ResourceGroupName = rg;                      Name = name;                      Slot = slot;                      break;              }
