Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,FillFromString,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,ToString,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,TryParseUri,The method has 7 parameters. Parameters: blobUri' storageAccountName' storageDomainName' blobContainerName' blobName' queryString' secret
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,BlobUri,The method has 6 parameters. Parameters: uri' storageAccountName' storageDomainName' blobContainerName' blobName' queryString
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Threading,Parallel,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Threading\Parallel.cs,ForEach,The method has 5 parameters. Parameters: source' argumentConstructor' body' finalize' parallelism
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\PatchingBlobCreator.cs,PatchingBlobCreator,The method has 5 parameters. Parameters: localVhd' destination' baseVhdBlob' blobObjectFactory' overWrite
Long Statement,Microsoft.WindowsAzure.Commands.Sync,ServicePointHandler,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\ServicePointHandler.cs,GetWebProxy,The length of the statement  "            PropertyInfo propertyInfo = webRequestType.GetProperty("InternalDefaultWebProxy"' BindingFlags.Static | BindingFlags.NonPublic); " is 128.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,ToString,The length of the statement  "                if (((!flag || (key == null)) || !key.StartsWith("__VIEWSTATE"' StringComparison.Ordinal)) && (((excludeKeys == null) || (key == null)) || (excludeKeys[key] == null))) " is 167.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The length of the statement  "                    var message = String.Format("File already exists' you can use Overwrite option to delete it:'{0}'"' parameters.LocalFilePath); " is 126.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The length of the statement  "                using (new ProgressTracker(downloadStatus' parameters.ProgressDownloadStatus' parameters.ProgressDownloadComplete' TimeSpan.FromSeconds(1))) " is 140.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The length of the statement  "                    using (var fileStream = new FileStream(parameters.LocalFilePath' FileMode.OpenOrCreate' FileAccess.Write' FileShare.Write' 8 * megaByte' FileOptions.WriteThrough)) " is 163.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,TryValidateFreeDiskSpace,The length of the statement  "                    string message = String.Format("Insufficient disk space: Blob's size is {0}' however available space is {1}."' blobLength' info.AvailableFreeSpace); " is 148.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\BlobCreatorBase.cs,AssertIfValidVhdSize,The length of the statement  "                    string message = String.Format("VHD size is too large ('{0}')' maximum allowed size is '{1}'."' lengthString' expectedLengthString); " is 132.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\BlobCreatorBase.cs,PopulateContextWithUploadableRanges,The length of the statement  "                    var alreadyUploadedRanges = context.DestinationBlob.GetPageRanges().Select(pr => new IndexRange(pr.StartOffset' pr.EndOffset)); " is 127.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\BlobCreatorBase.cs,AssertMetaDataExists,The length of the statement  "                throw new InvalidOperationException("There is no CsUpload metadata on the blob' so CsUpload cannot resume. Use the overwrite option."); " is 135.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\BlobCreatorBase.cs,AssertMetaDataMatch,The length of the statement  "            if (String.Compare(systemInformation.MachineName' Environment.MachineName' CultureInfo.InvariantCulture' CompareOptions.IgnoreCase) != 0) " is 137.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\BlobCreatorBase.cs,CompareFileMetaData,The length of the statement  "                var message = String.Format("Last modified date of VHD file in blob storage ({0}) and local VHD file ({1}) does not match "' " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,ExceptionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\ExtensionMethods.cs,DumpStorageExceptionErrorDetails,The length of the statement  "                message.Append(key).Append(":").Append(storageException.RequestInformation.ExtendedErrorInformation.AdditionalDetails[key]); " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\PatchingBlobCreator.cs,CreateRemoteBlob,The length of the statement  "                throw new InvalidOperationException(String.Format("Base image to patch doesn't exist in blob storage: {0}"' baseVhdBlobUri.Uri)); " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\PatchingBlobCreator.cs,CreateRemoteBlob,The length of the statement  "                var message = String.Format("Patching cannot proceed' MD5 hash of base image in blob storage ({0}) and base VHD file ({1}) does not match "' " is 140.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\PatchingBlobCreator.cs,CopyBaseImageToDestination,The length of the statement  "            using (new ProgressTracker(copyStatus' Program.SyncOutput.ProgressCopyStatus' Program.SyncOutput.ProgressCopyComplete'TimeSpan.FromSeconds(1))) " is 143.
Complex Conditional,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The conditional expression  "((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,IsSafe,The conditional expression  "(((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9'))"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,ToString,The conditional expression  "((!flag || (key == null)) || !key.StartsWith("__VIEWSTATE"' StringComparison.Ordinal)) && (((excludeKeys == null) || (key == null)) || (excludeKeys[key] == null))"  is complex.
Empty Catch Block,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,TryValidateFreeDiskSpace,The method has an empty catch block.
Magic Number,Microsoft.WindowsAzure.Commands.Sync,ProgressStatus,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\ProgressStatus.cs,Progress,The following statement contains a magic number: double avtThroughputMbps = 8.0 * computeAvg;
Magic Number,Microsoft.WindowsAzure.Commands.Sync,ProgressStatus,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\ProgressStatus.cs,PercentComplete,The following statement contains a magic number: return 100.0 * this.BytesProcessed / ((double)this.TotalLength);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobHandle.cs,BlobHandle,The following statement contains a magic number: this.blobRequestOptions = new BlobRequestOptions                                            {                                                ServerTimeout = TimeSpan.FromMinutes(5)'                                                RetryPolicy = new LinearRetry(TimeSpan.FromMinutes(1)' 3)                                            };
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobHandle.cs,BlobHandle,The following statement contains a magic number: this.blobRequestOptions = new BlobRequestOptions                                            {                                                ServerTimeout = TimeSpan.FromMinutes(5)'                                                RetryPolicy = new LinearRetry(TimeSpan.FromMinutes(1)' 3)                                            };
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobHandle.cs,GetUploadableRanges,The following statement contains a magic number: ranges = Enumerable.ToList<IndexRange>(IndexRangeHelper.ChunkRangesBySize(ranges' 2 * MegaByte));
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,TryParseUri,The following statement contains a magic number: if (hostSegments.Length < 2)              {                  return false;              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,TryParseUri,The following statement contains a magic number: if (segments.Length < 2)              {                  return false; //Must have atleast a containerName and BlobName              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if (ch == '+')                  {                      ch = ' ';                  }                  else if ((ch == '%') && (i < (length - 2)))                  {                      if ((s[i + 1] == 'u') && (i < (length - 5)))                      {                          int num3 = HexToInt(s[i + 2]);                          int num4 = HexToInt(s[i + 3]);                          int num5 = HexToInt(s[i + 4]);                          int num6 = HexToInt(s[i + 5]);                          if (((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0)))                          {                              goto Label_0106;                          }                          ch = (char)((((num3 << 12) | (num4 << 8)) | (num5 << 4)) | num6);                          i += 5;                          decoder.AddChar(ch);                          continue;                      }                      int num7 = HexToInt(s[i + 1]);                      int num8 = HexToInt(s[i + 2]);                      if ((num7 >= 0) && (num8 >= 0))                      {                          byte b = (byte)((num7 << 4) | num8);                          i += 2;                          decoder.AddByte(b);                          continue;                      }                  }              Label_0106:                  if ((ch & 0xff80) == 0)                  {                      decoder.AddByte((byte)ch);                  }                  else                  {                      decoder.AddChar(ch);                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,HexToInt,The following statement contains a magic number: if ((h >= 'a') && (h <= 'f'))              {                  return ((h - 'a') + 10);              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,HexToInt,The following statement contains a magic number: if ((h >= 'A') && (h <= 'F'))              {                  return ((h - 'A') + 10);              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,UrlEncodeUnicodeStringToStringInternal,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  char ch = s[i];                  if ((ch & 0xff80) == 0)                  {                      if (ignoreAscii || IsSafe(ch))                      {                          builder.Append(ch);                      }                      else if (ch == ' ')                      {                          builder.Append('+');                      }                      else                      {                          builder.Append('%');                          builder.Append(IntToHex((ch >> 4) & '\x000f'));                          builder.Append(IntToHex(ch & '\x000f'));                      }                  }                  else                  {                      builder.Append("%u");                      builder.Append(IntToHex((ch >> 12) & '\x000f'));                      builder.Append(IntToHex((ch >> 8) & '\x000f'));                      builder.Append(IntToHex((ch >> 4) & '\x000f'));                      builder.Append(IntToHex(ch & '\x000f'));                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,IntToHex,The following statement contains a magic number: if (n <= 9)              {                  return (char)(n + 0x30);              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 0x61);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: const int megaByte = 1024 * 1024;
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: const int megaByte = 1024 * 1024;
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: var bufferManager = BufferManager.CreateBufferManager(Int32.MaxValue' 20 * megaByte);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: using (new ServicePointHandler(parameters.BlobUri.Uri' parameters.ConnectionLimit))              {                  using (new ProgressTracker(downloadStatus' parameters.ProgressDownloadStatus' parameters.ProgressDownloadComplete' TimeSpan.FromSeconds(1)))                  {                      using (var fileStream = new FileStream(parameters.LocalFilePath' FileMode.OpenOrCreate' FileAccess.Write' FileShare.Write' 8 * megaByte' FileOptions.WriteThrough))                      {                          fileStream.SetLength(0);                          fileStream.SetLength(blobHandle.Length);                            LoopResult lr = Parallel.ForEach<IndexRange' Stream>(ranges'                                      blobHandle.OpenStream'                                      (r' b) =>                                          {                                              b.Seek(r.StartIndex' SeekOrigin.Begin);                                                byte[] buffer = this.EnsureReadAsSize(b' (int)r.Length' bufferManager);                                                lock (fileStreamLock)                                              {                                                  Trace.WriteLine(String.Format("Range:{0}"' r));                                                  fileStream.Seek(r.StartIndex' SeekOrigin.Begin);                                                  fileStream.Write(buffer' 0' (int)r.Length);                                                  fileStream.Flush();                                              }                                                downloadStatus.AddToProcessedBytes((int)r.Length);                                          }'                                      pbwlf =>                                          {                                              pbwlf.Dispose();                                          }'                                      parameters.ConnectionLimit);                            if (lr.IsExceptional)                          {                              throw new AggregateException(lr.Exceptions);                          }                      }                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Upload\BlobCreatorBase.cs,AcquireSingleInstanceMutex,The following statement contains a magic number: try              {                  singleInstanceMutex = new Mutex(false' @"Global\" + mutexName);                  if (!singleInstanceMutex.WaitOne(TimeSpan.FromSeconds(5)' false))                  {                      var message = String.Format("An upload is already in progress on this machine");                      throw new InvalidOperationException(message);                  }                  throwing = false;                  return singleInstanceMutex;              }              finally              {                  if(throwing && singleInstanceMutex != null)                  {                      singleInstanceMutex.ReleaseMutex();                      singleInstanceMutex.Close();                  }              }
Missing Default,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Stack\Sync\Download\BlobUri.cs,IsSafe,The following switch statement is missing a default case: switch (ch)              {                  case '\'':                  case '(':                  case ')':                  case '*':                  case '-':                  case '.':                  case '_':                  case '!':                      return true;              }
