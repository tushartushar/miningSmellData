Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.Commands.KeyVault.Test,KeyVaultManagementController,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementController.cs,RunPsTestWorkflow,The method has 6 parameters. Parameters: logger' scriptBuilder' cleanup' callingClassType' mockName' initialize
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.Models,UtilitiesTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\UtilitiesTests.cs,GetWebKeyFromCertificate,The length of the statement  "            // This allows the test to run in Visual Studio and in the console runner. The file will exist in one of the two locations depending on the environment. " is 152.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.Models,UtilitiesTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\UtilitiesTests.cs,GetWebKeyFromCertificate,The length of the statement  "            var consolePath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? String.Empty' "Resources"' "pshtest.pfx"); " is 140.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.Models,UtilitiesTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\UtilitiesTests.cs,GetWebKeyFromCertificate,The length of the statement  "            var webKey = converters.ConvertKeyFromFile(new FileInfo(File.Exists(consolePath) ? consolePath : vsPath)' password.ConvertToSecureString()); " is 140.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestSetRemoveAccessPolicyByObjectId,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-SetRemoveAccessPolicyByObjectId"' _data.PreCreatedVault' _data.ResourceGroupName' objId) }; " is 145.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestSetRemoveAccessPolicyByUPN,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-SetRemoveAccessPolicyByUPN"' _data.PreCreatedVault' _data.ResourceGroupName' upn) }; " is 138.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestSetRemoveAccessPolicyByCompoundId,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3} {4}"' "Test-SetRemoveAccessPolicyByCompoundId"' _data.PreCreatedVault' _data.ResourceGroupName' appId' objId) }; " is 158.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestRemoveAccessPolicyWithCompoundIdPolicies,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3} {4} {5}"' "Test-RemoveAccessPolicyWithCompoundIdPolicies"' _data.PreCreatedVault' _data.ResourceGroupName' appId1' appId2' objId) }; " is 178.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestSetCompoundIdAccessPolicy,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3} {4}"' "Test-SetCompoundIdAccessPolicy"' _data.PreCreatedVault' _data.ResourceGroupName' appId' objId) }; " is 150.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestModifyAccessPolicy,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-ModifyAccessPolicy"' _data.PreCreatedVault' _data.ResourceGroupName' objId) }; " is 132.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestModifyAccessPolicyEnabledForDeployment,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-ModifyAccessPolicyEnabledForDeployment"' _data.PreCreatedVault' _data.ResourceGroupName' upn) }; " is 150.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestModifyAccessPolicyEnabledForTemplateDeployment,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-ModifyAccessPolicyEnabledForTemplateDeployment"' _data.PreCreatedVault' _data.ResourceGroupName' upn) }; " is 158.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestModifyAccessPolicyEnabledForDiskEncryption,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-ModifyAccessPolicyEnabledForDiskEncryption"' _data.PreCreatedVault' _data.ResourceGroupName' upn) }; " is 154.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestModifyAccessPolicyNegativeCases,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-ModifyAccessPolicyNegativeCases"' _data.PreCreatedVault' _data.ResourceGroupName' upn) }; " is 143.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestRemoveNonExistentAccessPolicyDoesNotThrow,The length of the statement  "                    return new[] { string.Format("{0} {1} {2} {3}"' "Test-RemoveNonExistentAccessPolicyDoesNotThrow"' _data.PreCreatedVault' _data.ResourceGroupName' objId) }; " is 155.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultManagementTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementTests.cs,TestCreateDeleteVaultWithPiping,The length of the statement  "                () => { return new[] { string.Format("{0} {1} {2}"' "Test-CreateDeleteVaultWithPiping"' _data.ResourceGroupName' _data.Location) }; }' " is 134.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultTestFixture,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultTestFixture.cs,Initialize,The length of the statement  "                using (MockContext context = MockContext.Start(new StackTrace().GetFrame(1).GetMethod().ReflectedType?.ToString()' new StackTrace().GetFrame(1).GetMethod().Name)) " is 162.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultTestFixture,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultTestFixture.cs,GetKeyVaultLocation,The length of the statement  "            var location = provider.ResourceTypes.First(resType => resType.ResourceType.Contains("vaults")).Locations.FirstOrDefault(); " is 123.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultTestFixture,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultTestFixture.cs,ResetPreCreatedVault,The length of the statement  "                using (MockContext context = MockContext.Start(new StackTrace().GetFrame(1).GetMethod().ReflectedType?.ToString()' new StackTrace().GetFrame(1).GetMethod().Name)) " is 162.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.ScenarioTests,KeyVaultTestFixture,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultTestFixture.cs,Dispose,The length of the statement  "                    using (MockContext context = MockContext.Start(new StackTrace().GetFrame(1).GetMethod().ReflectedType?.ToString()' new StackTrace().GetFrame(1).GetMethod().Name)) " is 162.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultSecretTests.cs,CanRemoveSecretWithPassThruTest,The length of the statement  "            PSDeletedKeyVaultSecret expected = new PSDeletedKeyVaultSecret() { Name = SecretName' VaultName = VaultName' SecretValue = secureSecretValue }; " is 143.
Long Statement,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultSecretTests.cs,CanRemoveSecretWithNoPassThruTest,The length of the statement  "            PSDeletedKeyVaultSecret expected = new PSDeletedKeyVaultSecret() { Name = SecretName' VaultName = VaultName' SecretValue = secureSecretValue }; " is 143.
Complex Conditional,Microsoft.Azure.Commands.KeyVault.Test,KeyVaultManagementController,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\ScenarioTests\KeyVaultManagementController.cs,GetGraphClient,The conditional expression  "AzureRmProfileProvider.Instance != null &&                  AzureRmProfileProvider.Instance.Profile != null &&                  AzureRmProfileProvider.Instance.Profile.DefaultContext != null &&                  AzureRmProfileProvider.Instance.Profile.DefaultContext.Tenant != null"  is complex.
Virtual Method Call from Constructor,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultKeyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultKeyTests.cs,RemoveKeyVaultKeyTests,The constructor "RemoveKeyVaultKeyTests" calls a virtual method "SetupTest".
Virtual Method Call from Constructor,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultSecretTests.cs,RemoveKeyVaultSecretTests,The constructor "RemoveKeyVaultSecretTests" calls a virtual method "SetupTest".
Virtual Method Call from Constructor,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultKeyAttributeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultKeyAttributeTests.cs,SetKeyVaultKeyAttributeTests,The constructor "SetKeyVaultKeyAttributeTests" calls a virtual method "SetupTest".
Virtual Method Call from Constructor,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultSecretAttributeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultSecretAttributeTests.cs,SetKeyVaultSecretAttributeTests,The constructor "SetKeyVaultSecretAttributeTests" calls a virtual method "SetupTest".
Virtual Method Call from Constructor,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultSecretTests.cs,SetKeyVaultSecretTests,The constructor "SetKeyVaultSecretTests" calls a virtual method "SetupTest".
Empty Catch Block,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultKeyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultKeyTests.cs,ErrorRemoveKeyWithPassThruTest,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultSecretTests.cs,ErrorRemoveSecretWithPassThruTest,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultKeyAttributeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultKeyAttributeTests.cs,ErrorSetKeyTest,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultSecretAttributeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultSecretAttributeTests.cs,ErrorSetSecretAttributeTest,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultSecretTests.cs,ErrorSetSecretTest,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithNoKeyTypeAndKeySize_SucceedsWithRsaKeyTypeAnd2048KeySize,The following statement contains a magic number: Assert.Equal(2048' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithRsaKeyTypeAndNoKeySize_SucceedsWith2048KeySize,The following statement contains a magic number: Assert.Equal(2048' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEcKeyTypeP256CurveAndNoKeySize_SucceedsWith256KeySize,The following statement contains a magic number: Assert.Equal(256' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEcKeyTypeP256KCurveAndNoKeySize_SucceedsWith256KeySize,The following statement contains a magic number: Assert.Equal(256' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEcKeyTypeSECP256K1CurveAndNoKeySize_SucceedsWith256KeySize,The following statement contains a magic number: Assert.Equal(256' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEcKeyTypeP384CurveAndNoKeySize_SucceedsWith384KeySize,The following statement contains a magic number: Assert.Equal(384' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEcKeyTypeP521CurveAndNoKeySize_SucceedsWith521KeySize,The following statement contains a magic number: Assert.Equal(521' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithRsaKeyTypeAnd256KeySize_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.RSA'                      keySize: 256'                      curve: string.Empty'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithRsaKeyTypeAnd384KeySize_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.RSA'                      keySize: 384'                      curve: string.Empty'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithRsaKeyTypeAnd521KeySize_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.RSA'                      keySize: 521'                      curve: string.Empty'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithECKeyTypeAnd2048KeySize_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 2048'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithECKeyTypeAnd3072KeySize_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 3072'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithECKeyTypeAnd4096KeySize_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 4096'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithOneLifetimeAction_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: 1'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithMoreThanOneLifetimeAction_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: 1'                      renewAtPercentageLifetime: 1'                      emailAtNumberOfDaysBeforeExpiry: 1'                      emailAtPercentageLifetime: 1'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 256'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithNoEku_SucceedsWithNullEku,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: new List<string>()'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEmptyEku_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: new List<string>() { string.Empty }'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 256'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithNoDnsName_SucceedsWithNullDnsName,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: new List<string>()'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithEmptyDnsName_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: new List<string>() { string.Empty }'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: string.Empty'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 256'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,CreateCertificatePolicy_WithInValidSubjectName_ThrowsException,The following statement contains a magic number: Assert.Throws<ArgumentException>(                  () => new PSKeyVaultCertificatePolicy(                      dnsNames: null'                      keyUsages: null'                      ekus: null'                      enabled: null'                      issuerName: string.Empty'                      certificateType: string.Empty'                      renewAtNumberOfDaysBeforeExpiry: null'                      renewAtPercentageLifetime: null'                      emailAtNumberOfDaysBeforeExpiry: null'                      emailAtPercentageLifetime: null'                      reuseKeyOnRenewal: null'                      secretContentType: string.Empty'                      subjectName: "SubjectName"'                      validityInMonths: null'                      keyType: Constants.EC'                      keySize: 256'                      curve: Constants.P256'                      exportable: null'                      certificateTransparency: null));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithNoKeyTypeAndKeySize_SucceedsWithRsaKeyTypeAnd2048KeySize,The following statement contains a magic number: Assert.Equal(2048' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithRsaKeyTypeAndNoKeySize_SucceedsWith2048KeySize,The following statement contains a magic number: Assert.Equal(2048' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEcKeyTypeP256CurveAndNoKeySize_SucceedsWith256KeySize,The following statement contains a magic number: Assert.Equal(256' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEcKeyTypeP256KCurveAndNoKeySize_SucceedsWith256KeySize,The following statement contains a magic number: Assert.Equal(256' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEcKeyTypeSECP256K1CurveAndNoKeySize_SucceedsWith256KeySize,The following statement contains a magic number: Assert.Equal(256' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEcKeyTypeP384CurveAndNoKeySize_SucceedsWith384KeySize,The following statement contains a magic number: Assert.Equal(384' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEcKeyTypeP521CurveAndNoKeySize_SucceedsWith521KeySize,The following statement contains a magic number: Assert.Equal(521' policy.KeySize.Value);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithRsaKeyTypeAnd256KeySize_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.RSA'                  keySize: 0'                  curve: string.Empty'                  exportable: null'                  certificateTransparency: null)              {                  KeySize= 256'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithRsaKeyTypeAnd384KeySize_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.RSA'                  keySize: 0'                  curve: string.Empty'                  exportable: null'                  certificateTransparency: null)              {                  KeySize = 384'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithRsaKeyTypeAnd521KeySize_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.RSA'                  keySize: 0'                  curve: string.Empty'                  exportable: null'                  certificateTransparency: null)                  {                      KeySize = 521'                  };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithECKeyTypeAnd2048KeySize_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 0'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  KeySize = 2048'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithECKeyTypeAnd3072KeySize_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 0'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  KeySize = 3072'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithECKeyTypeAnd4096KeySize_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 0'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  KeySize = 4096'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithOneLifetimeAction_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  RenewAtNumberOfDaysBeforeExpiry = 1'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithMoreThanOneLifetimeAction_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  RenewAtNumberOfDaysBeforeExpiry = 1'                  RenewAtPercentageLifetime = 1'                  EmailAtNumberOfDaysBeforeExpiry = 1'                  EmailAtPercentageLifetime = 1'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithNoEku_SucceedsWithNullEku,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: new List<string>()'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEmptyEku_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  Ekus = new List<string>() { string.Empty }'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithNoDnsName_SucceedsWithNullDnsName,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: new List<string>()'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null);
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithEmptyDnsName_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  DnsNames = new List<string>() { string.Empty }'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,PSKeyVaultCertificatePolicyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\PSKeyVaultCertificatePolicyTests.cs,ValidateCertificatePolicy_WithInValidSubjectName_ThrowsException,The following statement contains a magic number: var policy = new PSKeyVaultCertificatePolicy(                  dnsNames: null'                  keyUsages: null'                  ekus: null'                  enabled: null'                  issuerName: string.Empty'                  certificateType: string.Empty'                  renewAtNumberOfDaysBeforeExpiry: null'                  renewAtPercentageLifetime: null'                  emailAtNumberOfDaysBeforeExpiry: null'                  emailAtPercentageLifetime: null'                  reuseKeyOnRenewal: null'                  secretContentType: string.Empty'                  subjectName: string.Empty'                  validityInMonths: null'                  keyType: Constants.EC'                  keySize: 256'                  curve: Constants.P256'                  exportable: null'                  certificateTransparency: null)              {                  SubjectName = "SubjectName"'              };
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.Models,UtilitiesTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\Models\UtilitiesTests.cs,GetWebKeyFromByok,The following statement contains a magic number: byte[] byokBlob = new byte[100];
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultKeyTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultKeyTests.cs,CannotRemoveKeyWithoutShouldProcessOrForceConfirmationTest,The following statement contains a magic number: commandRuntimeMock.Verify(f => f.WriteObject(expected)' Times.Exactly(2));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultSecretTests.cs,CanRemoveSecretWithPassThruTest,The following statement contains a magic number: commandRuntimeMock.Verify(f => f.WriteObject(expected)' Times.Exactly(2));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,RemoveKeyVaultSecretTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\RemoveKeyVaultSecretTests.cs,CannotRemoveSecretWithoutShouldProcessOrForceConfirmationTest,The following statement contains a magic number: commandRuntimeMock.Verify(f => f.WriteObject(expected)' Times.Exactly(2));
Magic Number,Microsoft.Azure.Commands.KeyVault.Test.UnitTests,SetKeyVaultSecretAttributeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\KeyVault\KeyVault.Test\UnitTests\SetKeyVaultSecretAttributeTests.cs,SetKeyVaultSecretAttributeTests,The following statement contains a magic number: secretAttributes = new PSKeyVaultSecretAttributes(true' DateTime.UtcNow.AddYears(2)' DateTime.UtcNow' "contenttype"' null);
