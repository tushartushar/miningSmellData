Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,CreateEventSubscription,The method has 9 parameters. Parameters: scope' eventSubscriptionName' endpoint' endpointType' subjectBeginsWith' subjectEndsWith' isSubjectCaseSensitive' includedEventTypes' labels
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter EventGridEventSubscriptionVerb is 30.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter TopicKeyInputObjectParameterSet is 31.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter EventSubscriptionInputObjectParameterSet is 40.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter CustomTopicEventSubscriptionParameterSet is 40.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter SubscriptionAndResourceGroupEventSubscriptionParameterSet is 57.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter ResourceIdEventSubscriptionParameterSet is 39.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter EventSubscriptionNameParameterSet is 33.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter EventSubscriptionTopicNameParameterSet is 38.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter EventSubscriptionTopicTypeNameParameterSet is 42.
Long Identifier,Microsoft.Azure.Commands.EventGrid,AzureEventGridCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\AzureEventGridCmdletBase.cs,,The length of the parameter LongRunningOperationDefaultTimeout is 34.
Long Identifier,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,CreateEventSubscription,The length of the parameter WebHookEventSubscriptionDestination is 35.
Long Identifier,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,CreateEventSubscription,The length of the parameter EventHubEventSubscriptionDestination is 36.
Long Statement,Microsoft.Azure.Commands.EventGrid,GetAzureRmEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\GetAzureEventGridSubscription.cs,ExecuteCmdlet,The length of the statement  "                    eventSubscriptionsList = this.Client.ListByResource(this.ResourceGroupName' "Microsoft.EventGrid"' "topics"' this.TopicName); " is 125.
Long Statement,Microsoft.Azure.Commands.EventGrid,GetAzureRmEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\GetAzureEventGridSubscription.cs,ExecuteCmdlet,The length of the statement  "                        eventSubscriptionsList = this.Client.ListGlobalEventSubscriptionsByResourceGroupForTopicType(this.ResourceGroupName' this.TopicTypeName); " is 137.
Long Statement,Microsoft.Azure.Commands.EventGrid,GetAzureRmEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\GetAzureEventGridSubscription.cs,ExecuteCmdlet,The length of the statement  "                        eventSubscriptionsList = this.Client.ListRegionalEventSubscriptionsByResourceGroup(this.ResourceGroupName' this.Location); " is 122.
Long Statement,Microsoft.Azure.Commands.EventGrid,GetAzureRmEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\GetAzureEventGridSubscription.cs,ExecuteCmdlet,The length of the statement  "                        eventSubscriptionsList = this.Client.ListRegionalEventSubscriptionsByResourceGroupForTopicType(this.ResourceGroupName' this.Location' this.TopicTypeName); " is 154.
Long Statement,Microsoft.Azure.Commands.EventGrid,GetAzureRmEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\GetAzureEventGridSubscription.cs,ExecuteCmdlet,The length of the statement  "                        eventSubscriptionsList = this.Client.ListRegionalEventSubscriptionsBySubscriptionForTopicType(this.Location' this.TopicTypeName); " is 129.
Long Statement,Microsoft.Azure.Commands.EventGrid,GetAzureRmEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\GetAzureEventGridSubscription.cs,WritePSEventSubscriptionsList,The length of the statement  "                    EventSubscriptionFullUrl fullUrl = this.Client.GetEventSubscriptionFullUrl(eventSubscription.Topic' eventSubscription.Name); " is 124.
Long Statement,Microsoft.Azure.Commands.EventGrid,NewAzureEventGridSubscription,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\EventSubscription\NewAzureEventGridSubscription.cs,ExecuteCmdlet,The length of the statement  "            if (this.ShouldProcess(this.EventSubscriptionName' $"Create a new Event Grid subscription {this.EventSubscriptionName}")) " is 121.
Long Statement,Microsoft.Azure.Commands.EventGrid,NewAzureEventGridTopic,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Topic\NewAzureEventGridTopic.cs,ExecuteCmdlet,The length of the statement  "            if (this.ShouldProcess(this.Name' $"Create a new EventGrid topic {this.Name} in Resource Group {this.ResourceGroupName}")) " is 122.
Long Statement,Microsoft.Azure.Commands.EventGrid,NewAzureEventGridTopicKey,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Topic\NewAzureEventGridTopicKey.cs,ExecuteCmdlet,The length of the statement  "            if (this.ShouldProcess(this.TopicName' $"Regenerate key {this.KeyName} for topic {this.TopicName} in Resource Group {this.ResourceGroupName}")) " is 143.
Long Statement,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ValidateSubscription,The length of the statement  "                throw new Exception("SubscriptionID from resource is different than the default subscription set in the context. Please retry after setting this subscription ID as the default subscription."); " is 192.
Long Statement,Microsoft.Azure.Commands.EventGrid.Utilities,EventGridUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridUtils.cs,GetScope,The length of the statement  "                scope = $"/{EventGridConstants.Subscriptions}/{subscriptionId}/{EventGridConstants.ResourceGroups}/{resourceGroupName}"; " is 120.
Long Statement,Microsoft.Azure.Commands.EventGrid.Utilities,EventGridUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridUtils.cs,GetScope,The length of the statement  "                scope = $"/{EventGridConstants.Subscriptions}/{subscriptionId}/{EventGridConstants.ResourceGroups}/{resourceGroupName}/{EventGridConstants.TopicsResourceType}/{topicName}"; " is 172.
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid,EventGridClient,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridClient.cs,ListByResourceId,The following statement contains a magic number: if (tokens.Length == 2)              {                  // subscription scope                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    return this.ListGlobalEventSubscriptionsBySubscription();              }              else if (tokens.Length == 4)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource Group scope                  string resourceGroupName = tokens[3];                  return this.ListGlobalEventSubscriptionsByResourceGroup(resourceGroupName);              }              else if (tokens.Length == 8)              {                  string providedSubscriptionId = tokens[1];                  this.ValidateSubscription(providedSubscriptionId' currentSubscriptionId);                    // Resource scope                  string resourceGroupName = tokens[3];                  string providerNamespace = tokens[5];                  string resourceType = tokens[6];                  string resourceName = tokens[7];                  return this.Client.EventSubscriptions.ListByResource(resourceGroupName' providerNamespace' resourceType' resourceName);              }              else              {                  throw new ArgumentException("Unsupported value for resourceID"' nameof(resourceId));              }
Magic Number,Microsoft.Azure.Commands.EventGrid.Utilities,EventGridUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridUtils.cs,GetResourceGroupNameAndTopicName,The following statement contains a magic number: if (tokens.Length != 8)              {                  throw new Exception($"ResourceId {resourceId} not in the expected format");              }
Magic Number,Microsoft.Azure.Commands.EventGrid.Utilities,EventGridUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridUtils.cs,GetResourceGroupNameAndTopicName,The following statement contains a magic number: resourceGroupName = tokens[3];
Magic Number,Microsoft.Azure.Commands.EventGrid.Utilities,EventGridUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridUtils.cs,GetResourceGroupNameAndTopicName,The following statement contains a magic number: topicName = tokens[7];
Magic Number,Microsoft.Azure.Commands.EventGrid.Utilities,EventGridUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\EventGrid\Commands.EventGrid\Utilities\EventGridUtils.cs,ParseResourceGroupFromId,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceId))              {                  string[] tokens = resourceId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  return tokens[3];              }
