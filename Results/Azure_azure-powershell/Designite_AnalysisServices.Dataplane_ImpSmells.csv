Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureDataplaneClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Models\AsAzureDataplaneClient.cs,SendRequestAsync,The method has 6 parameters. Parameters: method' baseUri' requestUrl' correlationId' content' cancellationToken
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AddAzureASAccountCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\AddAzureASAccount.cs,,The length of the parameter ServicePrincipalWithPasswordParameterSet is 40.
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AddAzureASAccountCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\AddAzureASAccount.cs,,The length of the parameter ServicePrincipalWithCertificateParameterSet is 43.
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,,The length of the parameter DefaultRetryIntervalForPolling is 30.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,ExportAzureAnalysisServerLog,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Export-AzureAsInstanceLog.cs,ExecuteCmdlet,The length of the statement  "            using (var message = AsAzureDataplaneClient.CallGetAsync(logfileEndpoint).ConfigureAwait(false).GetAwaiter().GetResult()) " is 121.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,ExportAzureAnalysisServerLog,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Export-AzureAsInstanceLog.cs,ExecuteCmdlet,The length of the statement  "                if (AzureSession.Instance.DataStore.FileExists(OutputPath) && !Force.IsPresent && !ShouldContinue(actionWarning' Resources.Confirm)) " is 132.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "            WriteProgress(new ProgressRecord(0' "Sync-AzAnalysisServicesInstance."' string.Format("Successfully authenticated for '{0}' environment."' DnsSafeHost))); " is 154.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(string.Format("Sending sync request for database '{0}' to server '{1}'. Correlation Id: '{2}'."' Database' Instance' correlationId.ToString())); " is 156.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                    this.syncRequestRootActivityId = message.Headers.Contains(RootActivityIdHeaderName) ? message.Headers.GetValues(RootActivityIdHeaderName).FirstOrDefault() : string.Empty; " is 170.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                    this.syncRequestTimeStamp = message.Headers.Contains(CurrentUtcDateHeaderName) ? message.Headers.GetValues(CurrentUtcDateHeaderName).FirstOrDefault() : string.Empty; " is 165.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                    pollingUrlAndRetryAfter = new Tuple<Uri' RetryConditionHeaderValue>(message.Headers.Location' message.Headers.RetryAfter); " is 122.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,PollSyncStatusWithRetryAsync,The length of the statement  "                    using (HttpResponseMessage message = await AsAzureDataplaneClient.CallGetAsync(pollingUrl' string.Empty' correlationId)) " is 120.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureDataplaneCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Models\AsAzureDataplaneCmdletBase.cs,CreateAsAzureDataplaneClient,The length of the statement  "            var credentials = AzureSession.Instance.AuthenticationFactory.GetServiceClientCredentials(context' AzureEnvironment.ExtendedEndpoint.AnalysisServicesEndpointResourceId); " is 169.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureDataplaneCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Models\AsAzureDataplaneCmdletBase.cs,CreateAsAzureDataplaneClient,The length of the statement  "            return AzureSession.Instance.ClientFactory.CreateCustomArmClient<AsAzureDataplaneClient>(baseUri' credentials' httpClientProvider' handlers); " is 141.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureDataplaneCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Models\AsAzureDataplaneCmdletBase.cs,BeginProcessing,The length of the statement  "            if (!Uri.TryCreate(Instance' UriKind.Absolute' out var uriResult) || uriResult.Scheme != AsAzureEndpoints.UriSchemeAsAzure) " is 123.
Magic Number,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,PollSyncStatusWithRetryAsync,The following statement contains a magic number: return await Task.Run(async () =>              {                  ScaleOutServerDatabaseSyncResult response = null;                  var syncCompleted = false;                  var retryCount = 0;                    while (!syncCompleted && retryCount < maxNumberOfAttempts)                  {                      // Wait for specified polling interval other than retries.                      if (retryCount == 0)                      {                          await Task.Delay(pollingInterval);                      }                      else                      {                          await Task.Delay(DefaultRetryIntervalForPolling);                      }                        this.AsAzureDataplaneClient.ResetHttpClient();                      using (HttpResponseMessage message = await AsAzureDataplaneClient.CallGetAsync(pollingUrl' string.Empty' correlationId))                      {                          bool shouldRetry = false;                          if (message.IsSuccessStatusCode && message.Content != null)                          {                              var responseString = await message.Content.ReadAsStringAsync();                              response = JsonConvert.DeserializeObject<ScaleOutServerDatabaseSyncResult>(responseString);                                if (response != null)                              {                                  var state = response.SyncState;                                  if (state == DatabaseSyncState.Completed || state == DatabaseSyncState.Failed)                                  {                                      syncCompleted = true;                                  }                                  else                                  {                                      pollingUrl = message.Headers.Location ?? pollingUrl;                                      pollingInterval = message.Headers.RetryAfter.Delta ?? pollingInterval;                                  }                              }                              else                              {                                  shouldRetry = true;                              }                          }                          else                          {                              shouldRetry = true;                          }                            if (shouldRetry)                          {                              retryCount++;                              response = new ScaleOutServerDatabaseSyncResult()                              {                                  Database = databaseName'                                  SyncState = DatabaseSyncState.Invalid                              };                                response.Details = string.Format(                                  "Http Error code: {0}. Message: {1}"'                                  message.StatusCode.ToString()'                                  message.Content != null ? await message.Content.ReadAsStringAsync() : string.Empty);                                if (message.StatusCode >= (HttpStatusCode)400 && message.StatusCode <= (HttpStatusCode)499)                              {                                  break;                              }                          }                          else                          {                              retryCount = 0;                          }                      }                  }                    return response;              });
Magic Number,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AnalysisServices\AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,PollSyncStatusWithRetryAsync,The following statement contains a magic number: return await Task.Run(async () =>              {                  ScaleOutServerDatabaseSyncResult response = null;                  var syncCompleted = false;                  var retryCount = 0;                    while (!syncCompleted && retryCount < maxNumberOfAttempts)                  {                      // Wait for specified polling interval other than retries.                      if (retryCount == 0)                      {                          await Task.Delay(pollingInterval);                      }                      else                      {                          await Task.Delay(DefaultRetryIntervalForPolling);                      }                        this.AsAzureDataplaneClient.ResetHttpClient();                      using (HttpResponseMessage message = await AsAzureDataplaneClient.CallGetAsync(pollingUrl' string.Empty' correlationId))                      {                          bool shouldRetry = false;                          if (message.IsSuccessStatusCode && message.Content != null)                          {                              var responseString = await message.Content.ReadAsStringAsync();                              response = JsonConvert.DeserializeObject<ScaleOutServerDatabaseSyncResult>(responseString);                                if (response != null)                              {                                  var state = response.SyncState;                                  if (state == DatabaseSyncState.Completed || state == DatabaseSyncState.Failed)                                  {                                      syncCompleted = true;                                  }                                  else                                  {                                      pollingUrl = message.Headers.Location ?? pollingUrl;                                      pollingInterval = message.Headers.RetryAfter.Delta ?? pollingInterval;                                  }                              }                              else                              {                                  shouldRetry = true;                              }                          }                          else                          {                              shouldRetry = true;                          }                            if (shouldRetry)                          {                              retryCount++;                              response = new ScaleOutServerDatabaseSyncResult()                              {                                  Database = databaseName'                                  SyncState = DatabaseSyncState.Invalid                              };                                response.Details = string.Format(                                  "Http Error code: {0}. Message: {1}"'                                  message.StatusCode.ToString()'                                  message.Content != null ? await message.Content.ReadAsStringAsync() : string.Empty);                                if (message.StatusCode >= (HttpStatusCode)400 && message.StatusCode <= (HttpStatusCode)499)                              {                                  break;                              }                          }                          else                          {                              retryCount = 0;                          }                      }                  }                    return response;              });
