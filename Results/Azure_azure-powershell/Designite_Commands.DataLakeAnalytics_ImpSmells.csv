Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The method has 245 lines of code.
Long Method,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetCatalogItem,The method has 173 lines of code.
Complex Method,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateOrUpdateAccount,Cyclomatic complexity of the method is 13
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,ObsoleteUSqlCredential,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\ObsoleteUSqlCredential.cs,ObsoleteUSqlCredential,The method has 5 parameters. Parameters: baseCred' databaseName' identity' userName' computeAccountName
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateOrUpdateAccount,The method has 13 parameters. Parameters: resourceGroupName' accountName' location' defaultDataLakeStoreAccount' additionalDataLakeStoreAccounts' additionalStorageAccounts' customTags' maxAnalyticsUnits' maxJobCount' queryStoreRetention' tier' firewallState' allowAzureIps
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,AddOrUpdateFirewallRule,The method has 6 parameters. Parameters: resourceGroupName' accountName' ruleName' startIp' endIp' runningCommand
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateSecret,The method has 5 parameters. Parameters: accountName' databaseName' secretName' password' hostUri
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,UpdateSecret,The method has 5 parameters. Parameters: accountName' databaseName' secretName' password' hostUri
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateCredential,The method has 6 parameters. Parameters: accountName' databaseName' credentialName' userId' password' hostUri
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,UpdateCredentialPassword,The method has 7 parameters. Parameters: accountName' databaseName' credentialName' userId' password' newPassword' hostUri
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,DeleteCredential,The method has 5 parameters. Parameters: accountName' databaseName' credentialName' password' cascade
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetTablePartition,The method has 5 parameters. Parameters: accountName' databaseName' schemaName' tableName' partitionName
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetTableStatistic,The method has 5 parameters. Parameters: accountName' databaseName' schemaName' tableName' statisticsName
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateComputePolicy,The method has 7 parameters. Parameters: resourceGroupName' accountName' policyName' objectId' objectType' maxAnalyticsUnitsPerJob' minPriorityPerJob
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,UpdateComputePolicy,The method has 5 parameters. Parameters: resourceGroupName' accountName' policyName' maxAnalyticsUnitsPerJob' minPriorityPerJob
Long Parameter List,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,ListJobs,The method has 6 parameters. Parameters: accountName' filter' top' skip' orderBy' moreJobs
Long Identifier,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,,The length of the parameter USqlJobWithScriptPathAndRecurrence is 34.
Long Identifier,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,,The length of the parameter USqlJobParameterSetNameAndRecurrence is 36.
Long Identifier,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,,The length of the parameter USqlJobWithScriptPathAndPipeline is 32.
Long Identifier,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,,The length of the parameter USqlJobParameterSetNameAndPipeline is 34.
Long Identifier,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateOrUpdateAccount,The length of the parameter additionalDataLakeStoreAccounts is 31.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics,GetAzureRmDataLakeAnalyticsFirewallRule,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\GetAzureRmDataLakeAnalyticsFirewallRule.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(new DataLakeAnalyticsFirewallRule(DataLakeAnalyticsClient.GetFirewallRule(ResourceGroupName' Account' Name))); " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics,GetAzureDataLakeAnalyticsDataSource,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\GetAzureRmDataLakeAnalyticsDataSource.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(new PSDataLakeStoreAccountInfo(DataLakeAnalyticsClient.GetDataLakeStoreAccount(ResourceGroupName' Account' DataLakeStore))); " is 136.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics,GetAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\GetAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The length of the statement  "                    filter.Add(string.Format("submitTime ge datetimeoffset'{0}'"' Uri.EscapeDataString(SubmittedAfter.Value.ToString("O")))); " is 121.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics,GetAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\GetAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The length of the statement  "                    filter.Add(string.Format("submitTime lt datetimeoffset'{0}'"' Uri.EscapeDataString(SubmittedBefore.Value.ToString("O")))); " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The length of the statement  "                var jobId = DataLakeAnalyticsClient.JobIdQueue.Count == 0 ? Guid.NewGuid() : DataLakeAnalyticsClient.JobIdQueue.Dequeue(); " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,TestAccount,The length of the statement  "                if ((ex.Response != null && ex.Response.StatusCode == HttpStatusCode.NotFound) || ex.Message.Contains(string.Format(Properties.Resources.FailedToDiscoverResourceGroup' accountName' " is 180.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetCatalogItem,The length of the statement  "                            path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName' path.TableStatisticsOrPartitionName)); " is 120.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetCredentials,The length of the statement  "            return toReturn.Select(element => new ObsoleteUSqlCredential(element' databaseName' computeAccountName: accountName)).ToList(); " is 127.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateComputePolicy,The length of the statement  "            return _accountClient.ComputePolicies.CreateOrUpdate(resourceGroupName' accountName' policyName' new ComputePolicyCreateOrUpdateParameters " is 138.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetWildcardFilterString,The length of the statement  "                throw new InvalidOperationException("Exactly one wildcard ('*') character is supported for expansion. Please remove extra wildcards and try again"); " is 148.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsCmdletBase.cs,CreateAdlaClient,The length of the statement  "                    : clientFactory.CreateCustomArmClient<TClient>(context.Environment.GetEndpointAsUri(endpoint)' creds' string.Empty' clientFactory.GetCustomHandlers()); " is 151.
Long Statement,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsCmdletBase.cs,CreateAdlaClient,The length of the statement  "                    : clientFactory.CreateCustomArmClient<TClient>(creds' string.Empty' context.Environment.GetEndpoint(endpoint)' clientFactory.GetCustomHandlers()); " is 146.
Complex Conditional,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The conditional expression  "(string.IsNullOrEmpty(Script) && string.IsNullOrEmpty(ScriptPath)) ||                  (!string.IsNullOrEmpty(Script) && !string.IsNullOrEmpty(ScriptPath))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataLakeAnalytics,SubmitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\SubmitAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The conditional expression  "ParameterSetName.Equals(USqlJobParameterSetNameAndRecurrence) ||                          ParameterSetName.Equals(USqlJobParameterSetNameAndPipeline) ||                          ParameterSetName.Equals(USqlJobWithScriptPathAndRecurrence) ||                          ParameterSetName.Equals(USqlJobWithScriptPathAndPipeline)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataLakeAnalytics,NewAzureDataLakeAnalyticsAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\NewAzureRmDataLakeAnalyticsAccount.cs,ExecuteCmdlet,The conditional expression  "ex.Body != null && !string.IsNullOrEmpty(ex.Body.Code) && ex.Body.Code == "ResourceNotFound" ||                      ex.Message.Contains("ResourceNotFound")"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataLakeAnalytics,NewAzureDataLakeAnalyticsAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\NewAzureRmDataLakeAnalyticsAccount.cs,ExecuteCmdlet,The conditional expression  "ex.Body != null && !string.IsNullOrEmpty(ex.Body.Code) &&                           ex.Body.Code == "ResourceGroupNotFound" || ex.Message.Contains("ResourceGroupNotFound")"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,CreateOrUpdateAccount,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.DataLakeAnalytics,WaitAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\WaitAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The following statement contains a magic number: while (jobInfo.State != JobState.Ended)              {                  if (TimeoutInSeconds > 0 && timeWaitedInSeconds >= TimeoutInSeconds)                  {                      throw new CloudException(string.Format(Resources.WaitJobTimeoutExceeded' JobId' TimeoutInSeconds));                  }                    WriteVerboseWithTimestamp(string.Format(Resources.WaitJobState' jobInfo.State));                  TestMockSupport.Delay(WaitIntervalInSeconds * 1000);                  timeWaitedInSeconds += WaitIntervalInSeconds;                  jobInfo = DataLakeAnalyticsClient.GetJob(Account' JobId);              }
Magic Number,Microsoft.Azure.Commands.DataLakeAnalytics,GetAzureDataLakeAnalyticsJob,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Commands\GetAzureRmDataLakeAnalyticsJob.cs,ExecuteCmdlet,The following statement contains a magic number: if (JobId != null && JobId != Guid.Empty)              {                  // Get for single job                  var jobDetails = DataLakeAnalyticsClient.GetJob(Account' JobId);                    if (Include != DataLakeAnalyticsEnums.ExtendedJobData.None)                  {                      if (jobDetails.Type != JobType.USql)                      {                          WriteWarningWithTimestamp(string.Format(Resources.AdditionalDataNotSupported' jobDetails.Type));                      }                      else                      {                          if (Include == DataLakeAnalyticsEnums.ExtendedJobData.All ||                              Include == DataLakeAnalyticsEnums.ExtendedJobData.DebugInfo)                          {                              ((USqlJobProperties)jobDetails.Properties).DebugData =                                  DataLakeAnalyticsClient.GetDebugDataPaths(Account' JobId);                          }                            if (Include == DataLakeAnalyticsEnums.ExtendedJobData.All ||                              Include == DataLakeAnalyticsEnums.ExtendedJobData.Statistics)                          {                              ((USqlJobProperties)jobDetails.Properties).Statistics =                                  DataLakeAnalyticsClient.GetJobStatistics(Account' JobId);                          }                      }                  }                    WriteObject(jobDetails);              }              else              {                  var filter = new List<string>();                  // always order by most recently submitted.                  if (!string.IsNullOrEmpty(Submitter))                  {                      // TODO: replace with the wildcard substitution.                      filter.Add(string.Format("submitter eq '{0}'"' Submitter));                  }                    // due to issue: https://github.com/Azure/autorest/issues/975'                  // date time offsets must be explicitly escaped before being passed to the filter                  if (SubmittedAfter.HasValue)                  {                      filter.Add(string.Format("submitTime ge datetimeoffset'{0}'"' Uri.EscapeDataString(SubmittedAfter.Value.ToString("O"))));                  }                    // due to issue: https://github.com/Azure/autorest/issues/975'                  // date time offsets must be explicitly escaped before being passed to the filter                  if (SubmittedBefore.HasValue)                  {                      filter.Add(string.Format("submitTime lt datetimeoffset'{0}'"' Uri.EscapeDataString(SubmittedBefore.Value.ToString("O"))));                  }                    if (!string.IsNullOrEmpty(Name))                  {                      // TODO: replace with the wildcard substitution.                      filter.Add(string.Format("name eq '{0}'"' Name));                  }                    if (State != null && State.Length > 0)                  {                      filter.Add("(" +                                 string.Join(" or "'                                     State.Select(state => string.Format("state eq '{0}'"' state)).ToArray()) + ")");                  }                    if (Result != null && Result.Length > 0)                  {                      filter.Add("(" +                                 string.Join(" or "'                                     Result.Select(result => string.Format("result eq '{0}'"' result)).ToArray()) + ")");                  }                    if (PipelineId.HasValue)                  {                      filter.Add(string.Format("related/pipelineId eq guid'{0}'"' PipelineId.Value));                  }                    if (RecurrenceId.HasValue)                  {                      filter.Add(string.Format("related/recurrenceId eq guid'{0}'"' RecurrenceId.Value));                  }                    var filterString = string.Join(" and "' filter.ToArray());                    // List the jobs with the given filters                  bool warnUser;                  var list = DataLakeAnalyticsClient.ListJobs(Account'                       string.IsNullOrEmpty(filterString) ? null : filterString' Top' null' "submitTime desc"' out warnUser)                      .Select(element => new PSJobInformationBasic(element))                      .ToList();                  if (warnUser)                  {                      WriteWarning(string.Format(Resources.MoreJobsToGetWarning' Top.HasValue ? Top.Value : 500));                  }                    WriteObject(list' true);              }
Magic Number,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,ListJobs,The following statement contains a magic number: if (!top.HasValue)              {                  top = 500;              }
Magic Number,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetWildcardFilterString,The following statement contains a magic number: if(subStrings.Length != 2)              {                  throw new InvalidOperationException("Exactly one wildcard ('*') character is supported for expansion. Please remove extra wildcards and try again");              }
Missing Default,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,GetCatalogItem,The following switch statement is missing a default case: switch (itemType)              {                  case DataLakeAnalyticsEnums.CatalogItemType.Database:                      if (isList)                      {                          toReturn.AddRange(GetDatabases(accountName));                      }                      else                      {                          toReturn.Add(GetDatabase(accountName' path.DatabaseName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Schema:                      if (isList)                      {                          toReturn.AddRange(GetSchemas(accountName' path.DatabaseName));                      }                      else                      {                          toReturn.Add(GetSchema(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Assembly:                      if (isList)                      {                          toReturn.AddRange(GetAssemblies(accountName' path.DatabaseName));                      }                      else                      {                          toReturn.Add(GetAssembly(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.ExternalDataSource:                      if (isList)                      {                          toReturn.AddRange(GetExternalDataSources(accountName' path.DatabaseName));                      }                      else                      {                          toReturn.Add(GetExternalDataSource(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                        break;                    case DataLakeAnalyticsEnums.CatalogItemType.Credential:                      if (isList)                      {                          toReturn.AddRange(GetCredentials(accountName' path.DatabaseName));                      }                      else                      {                          toReturn.Add(GetCredential(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Table:                      if (isList)                      {                          toReturn.AddRange(GetTables(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                      else                      {                          toReturn.Add(GetTable(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.TablePartition:                      if (isList)                      {                          toReturn.AddRange(GetTablePartitions(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                      else                      {                          toReturn.Add(GetTablePartition(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName' path.TableStatisticsOrPartitionName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.TableValuedFunction:                      if (isList)                      {                          toReturn.AddRange(GetTableValuedFunctions(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                      else                      {                          toReturn.Add(GetTableValuedFunction(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.TableStatistics:                      if (isList)                      {                          toReturn.AddRange(GetTableStatistics(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                      else                      {                          toReturn.Add(GetTableStatistic(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName'                              path.TableStatisticsOrPartitionName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.View:                      if (isList)                      {                          toReturn.AddRange(GetViews(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                      else                      {                          toReturn.Add(GetView(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                        break;                    case DataLakeAnalyticsEnums.CatalogItemType.Package:                      if (isList)                      {                          toReturn.AddRange(GetPackages(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                      else                      {                          toReturn.Add(GetPackage(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                        break;                    case DataLakeAnalyticsEnums.CatalogItemType.Procedure:                      if (isList)                      {                          toReturn.AddRange(GetProcedures(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                      else                      {                          toReturn.Add(GetProcedure(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName' path.TableOrTableValuedFunctionName));                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Types:                      if (isList)                      {                          toReturn.AddRange(GetTypes(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                      else                      {                          throw new InvalidOperationException(Properties.Resources.InvalidUSqlTypeRequest);                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Secret:                      if (isList)                      {                          throw new InvalidOperationException(Properties.Resources.InvalidUSqlSecretRequest);                      }                      else                      {                          toReturn.Add(GetSecret(accountName' path.DatabaseName'                              path.SchemaAssemblyOrExternalDataSourceName));                      }                        break;              }
Missing Default,Microsoft.Azure.Commands.DataLakeAnalytics.Models,DataLakeAnalyticsClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeAnalytics\Commands.DataLakeAnalytics\Models\DataLakeAnalyticsClient.cs,IsCatalogItemOrList,The following switch statement is missing a default case: switch (type)              {                  case DataLakeAnalyticsEnums.CatalogItemType.Database:                      if (string.IsNullOrEmpty(path.DatabaseName))                      {                          isList = true;                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Schema:                  case DataLakeAnalyticsEnums.CatalogItemType.Assembly:                  case DataLakeAnalyticsEnums.CatalogItemType.ExternalDataSource:                  case DataLakeAnalyticsEnums.CatalogItemType.Secret:                  case DataLakeAnalyticsEnums.CatalogItemType.Credential:                      if (string.IsNullOrEmpty(path.DatabaseName))                      {                          throw new CloudException(string.Format(Properties.Resources.InvalidCatalogPath'                              path.FullCatalogItemPath));                      }                        if (string.IsNullOrEmpty(path.SchemaAssemblyOrExternalDataSourceName))                      {                          isList = true;                      }                        break;                  case DataLakeAnalyticsEnums.CatalogItemType.Procedure:                  case DataLakeAnalyticsEnums.CatalogItemType.Types:                  case DataLakeAnalyticsEnums.CatalogItemType.Package:                      if (string.IsNullOrEmpty(path.DatabaseName) ||                          string.IsNullOrEmpty(path.SchemaAssemblyOrExternalDataSourceName))                      {                          throw new CloudException(string.Format(Properties.Resources.InvalidCatalogPath'                              path.FullCatalogItemPath));                      }                        if (string.IsNullOrEmpty(path.TableOrTableValuedFunctionName))                      {                          isList = true;                      }                        break;                    case DataLakeAnalyticsEnums.CatalogItemType.Table:                  case DataLakeAnalyticsEnums.CatalogItemType.TableValuedFunction:                  case DataLakeAnalyticsEnums.CatalogItemType.View:                      if (string.IsNullOrEmpty(path.DatabaseName))                      {                          throw new CloudException(string.Format(Properties.Resources.InvalidCatalogPath'                              path.FullCatalogItemPath));                      }                        if (string.IsNullOrEmpty(path.TableOrTableValuedFunctionName) ||                          string.IsNullOrEmpty(path.SchemaAssemblyOrExternalDataSourceName))                      {                          isList = true;                      }                        break;                    case DataLakeAnalyticsEnums.CatalogItemType.TablePartition:                      if (string.IsNullOrEmpty(path.DatabaseName) ||                          string.IsNullOrEmpty(path.SchemaAssemblyOrExternalDataSourceName) ||                          string.IsNullOrEmpty(path.TableOrTableValuedFunctionName))                      {                          throw new CloudException(string.Format(Properties.Resources.InvalidCatalogPath'                              path.FullCatalogItemPath));                      }                        if (string.IsNullOrEmpty(path.TableStatisticsOrPartitionName))                      {                          isList = true;                      }                      break;                    case DataLakeAnalyticsEnums.CatalogItemType.TableStatistics:                      if (string.IsNullOrEmpty(path.DatabaseName))                      {                          throw new CloudException(string.Format(Properties.Resources.InvalidCatalogPath'                              path.FullCatalogItemPath));                      }                        if (string.IsNullOrEmpty(path.TableStatisticsOrPartitionName) ||                          string.IsNullOrEmpty(path.SchemaAssemblyOrExternalDataSourceName))                      {                          isList = true;                      }                      break;              }
