Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateAccountResource,The method has 7 parameters. Parameters: accountName' resourceGroupName' location' tags' storageId' dedicatedCoreQuotaPerVMFamilyEnforced' machineFamilyQuotas
Long Parameter List,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,BatchController,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\BatchController.cs,RunPsTestWorkflow,The method has 6 parameters. Parameters: logger' scriptBuilder' initialize' cleanup' callingClassType' mockName
Long Parameter List,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateTestPool,The method has 7 parameters. Parameters: controller' context' poolId' targetDedicated' targetLowPriority' certReference' startTask
Long Parameter List,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateTestTask,The method has 6 parameters. Parameters: controller' context' jobId' taskId' cmdLine' numInstances
Long Parameter List,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateComputeNodeUser,The method has 5 parameters. Parameters: controller' context' poolId' computeNodeId' computeNodeUserName
Long Parameter List,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,DeleteComputeNodeUser,The method has 5 parameters. Parameters: controller' context' poolId' computeNodeId' computeNodeUserName
Long Parameter List,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateApplicationPackage,The method has 5 parameters. Parameters: controller' context' applicationName' version' filePath
Long Identifier,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateAccountResource,The length of the parameter dedicatedCoreQuotaPerVMFamilyEnforced is 37.
Long Identifier,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,,The length of the parameter startComputeNodeServiceLogUploadCommand is 39.
Long Identifier,Microsoft.Azure.Commands.Batch.Test.ComputeNodeUsers,SetBatchComputeNodeUserCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodeUsers\SetBatchComputeNoderUserCommandTests.cs,SetBatchComputeNodeUserRequestTest,The length of the parameter extractUserUpdateParametersAction is 33.
Long Identifier,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,,The length of the parameter SharedPoolStartTaskStdOutContent is 32.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ApplicationPackages,GetBatchApplicationPackageCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ApplicationPackages\GetBatchApplicationPackageCommandTests.cs,GetBatchApplicationPackageTest,The length of the statement  "            batchClientMock.Setup(b => b.GetApplicationPackage(resourceGroup' accountName' applicationName' applicationVersion)).Returns(expected); " is 135.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ApplicationPackages,NewBatchApplicationPackageCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ApplicationPackages\NewBatchApplicationPackageCommandTests.cs,UploadBatchApplicationPackageTest,The length of the statement  "            batchClientMock.Setup(b => b.UploadAndActivateApplicationPackage(resourceGroup' accountName' applicationName' version' filePath' format' false)).Returns(applicationPackageResponse); " is 181.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ApplicationPackages,NewBatchApplicationPackageCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ApplicationPackages\NewBatchApplicationPackageCommandTests.cs,UploadBatchApplicationPackageTest,The length of the statement  "            batchClientMock.Verify(b => b.UploadAndActivateApplicationPackage(resourceGroup' accountName' applicationName' version' filePath' format' false)' Times.Once()); " is 160.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ApplicationPackages,NewBatchApplicationPackageCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ApplicationPackages\NewBatchApplicationPackageCommandTests.cs,ActivateApplicationPackageOnly,The length of the statement  "            batchClientMock.Setup(b => b.UploadAndActivateApplicationPackage(resourceGroup' accountName' applicationName' version' null' format' true)).Returns(applicationPackageResponse); " is 176.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ApplicationPackages,NewBatchApplicationPackageCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ApplicationPackages\NewBatchApplicationPackageCommandTests.cs,ActivateApplicationPackageOnly,The length of the statement  "            batchClientMock.Verify(b => b.UploadAndActivateApplicationPackage(resourceGroup' accountName' applicationName' version' null' format' true)' Times.Once()); " is 155.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ApplicationPackages,RemoveBatchApplicationPackageCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ApplicationPackages\RemoveBatchApplicationPackageCommandTests.cs,DeleteBatchApplicationPackageTest,The length of the statement  "            batchClientMock.Verify(b => b.DeleteApplicationPackage(resourceGroup' accountName' applicationName' version)' Times.Once()); " is 124.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchApplicationCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Applications\GetBatchApplicationCommandTests.cs,ListBatchApplicationsTest,The length of the statement  "            batchClientMock.Setup(b => b.ListApplications(resourceGroup' accountName01)).Returns(new List<PSApplication>() { expected01' expected02 }); " is 139.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchAccountCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\GetBatchAccountCommandTests.cs,ListBatchAccountsTest,The length of the statement  "            BatchAccountContext expected01 = BatchAccountContext.ConvertAccountResourceToNewAccountContext(accountResource01' null); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchAccountCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\GetBatchAccountCommandTests.cs,ListBatchAccountsTest,The length of the statement  "            BatchAccountContext expected02 = BatchAccountContext.ConvertAccountResourceToNewAccountContext(accountResource02' null); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchAccountCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\GetBatchAccountCommandTests.cs,ListBatchAccountsTest,The length of the statement  "            batchClientMock.Setup(b => b.ListAccounts(null' resourceGroup)).Returns(new List<BatchAccountContext>() { expected01' expected02 }); " is 132.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchSupportedImagesCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\GetBatchSupportedImagesCommandTests.cs,ListBatchSupportedImagesParametersTest,The length of the statement  "                AzureOperationResponse<IPage<ProxyModels.ImageInformation>' ProxyModels.AccountListSupportedImagesHeaders>>(responseToUse: response); " is 133.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchSupportedImagesCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\GetBatchSupportedImagesCommandTests.cs,ListBatchSupportedImagesWithFilterTest,The length of the statement  "            var getResponse = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.ImageInformation' ProxyModels.AccountListSupportedImagesHeaders>(); " is 154.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,NewBatchAccountCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\NewBatchAccountCommandTests.cs,NewBatchAccountTest,The length of the statement  "            BatchAccountContext fakeResponse = BatchAccountContext.ConvertAccountResourceToNewAccountContext(accountResource' null); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,NewBatchAccountCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\NewBatchAccountCommandTests.cs,NewBatchWithAutoStorageAccountTest,The length of the statement  "            BatchAccountContext fakeResponse = BatchAccountContext.ConvertAccountResourceToNewAccountContext(accountResource' null); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Accounts,NewBatchAccountCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\NewBatchAccountCommandTests.cs,CanCreateUserSubscriptionBatchAccount,The length of the statement  "            BatchAccountContext fakeResponse = BatchAccountContext.ConvertAccountResourceToNewAccountContext(accountResource' null); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Applications,NewBatchApplicationCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Applications\NewBatchApplicationCommandTests.cs,AddBatchApplicationTest,The length of the statement  "            batchClientMock.Setup(b => b.AddApplication(resourceGroup' accountName' applicationName' true' displayName)).Returns(expected); " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Applications,NewBatchApplicationCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Applications\NewBatchApplicationCommandTests.cs,AddBatchApplicationTestWithoutAllowUpdates,The length of the statement  "            batchClientMock.Setup(b => b.AddApplication(resourceGroup' accountName' applicationName' null' displayName)).Returns(expected); " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Applications,SetBatchApplicationCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Applications\SetBatchApplicationCommandTests.cs,UpdateBatchApplicationTest,The length of the statement  "            batchClientMock.Verify(b => b.UpdateApplication(resourceGroup' accountName' applicationName' true' defaultVersion' displayName)' Times.Once()); " is 143.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Applications,SetBatchApplicationCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Applications\SetBatchApplicationCommandTests.cs,UpdateBatchApplicationAllowUpdatesOnlyTest,The length of the statement  "            batchClientMock.Verify(b => b.UpdateApplication(resourceGroup' accountName' applicationName' true' null' null)' Times.Once()); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Applications,SetBatchApplicationCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Applications\SetBatchApplicationCommandTests.cs,UpdateBatchApplicationDefault,The length of the statement  "            batchClientMock.Verify(b => b.UpdateApplication(resourceGroup' accountName' applicationName' null' null' null)' Times.Once()); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateAccountResource,The length of the statement  "            string id = string.Format("id/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Batch/batchAccounts/abc"' subscription' resourceGroup); " is 142.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateAccountResource,The length of the statement  "            machineFamilyQuotas = machineFamilyQuotas ?? new List<VirtualMachineFamilyCoreQuota> { new VirtualMachineFamilyCoreQuota("foo"' 55 ) }; " is 135.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeGetFileAndPropertiesFromComputeNodeResponseInterceptor,The length of the statement  "                    FileGetNodeFilePropertiesFromComputeNodeBatchRequest propRequest = (FileGetNodeFilePropertiesFromComputeNodeBatchRequest)baseRequest; " is 133.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeGetFileAndPropertiesFromComputeNodeResponseInterceptor,The length of the statement  "                        Task<AzureOperationHeaderResponse<ProxyModels.FileGetPropertiesFromComputeNodeHeaders>> task = Task.FromResult(response); " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateRemoteLoginSettingsGetResponse,The length of the statement  "            var response = new AzureOperationResponse<ProxyModels.ComputeNodeGetRemoteLoginSettingsResult' ProxyModels.ComputeNodeGetRemoteLoginSettingsHeaders>() " is 150.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateCloudJobScheduleGetResponse,The length of the statement  "            ProxyModels.CloudJobSchedule jobSchedule = new ProxyModels.CloudJobSchedule(id: jobScheduleId' schedule: schedule' jobSpecification: jobSpec); " is 142.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateJobPreparationAndReleaseTaskStatusListResponse,The length of the statement  "            var response = new AzureOperationResponse<IPage<ProxyModels.JobPreparationAndReleaseTaskExecutionInformation>' ProxyModels.JobListPreparationAndReleaseTaskStatusHeaders>(); " is 172.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreatePoolNodeCountsGetResponse,The length of the statement  "            var response = new AzureOperationResponse<IPage<ProxyModels.PoolNodeCounts>' ProxyModels.AccountListPoolNodeCountsHeaders>(); " is 125.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateCloudTaskListSubtasksResponse,The length of the statement  "            var response = new AzureOperationResponse<ProxyModels.CloudTaskListSubtasksResult' ProxyModels.TaskListSubtasksHeaders>(); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateSupportedImagesResponse,The length of the statement  "            var response = new AzureOperationResponse<IPage<ProxyModels.ImageInformation>' ProxyModels.AccountListSupportedImagesHeaders>() " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeBoundJob,The length of the statement  "            return context.BatchOMClient.JobOperations.GetJob(cloudJob.Id' additionalBehaviors: new BatchClientBehavior[] { interceptor }); " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeBoundJobSchedule,The length of the statement  "                    response.Body = new ProxyModels.CloudJobSchedule(id: jobScheduleId' schedule: new ProxyModels.Schedule()' jobSpecification: new ProxyModels.JobSpecification()); " is 160.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeBoundJobSchedule,The length of the statement  "                    Task<AzureOperationResponse<ProxyModels.CloudJobSchedule' ProxyModels.JobScheduleGetHeaders>> task = Task.FromResult(response); " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeBoundJobSchedule,The length of the statement  "            return context.BatchOMClient.JobScheduleOperations.GetJobSchedule(jobScheduleId' additionalBehaviors: new BatchClientBehavior[] { interceptor }); " is 145.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeBoundPool,The length of the statement  "            return context.BatchOMClient.PoolOperations.GetPool(poolId' additionalBehaviors: new BatchClientBehavior[] { interceptor }); " is 124.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateFakeBoundTask,The length of the statement  "            return context.BatchOMClient.JobOperations.GetTask("jobId"' taskId' additionalBehaviors: new BatchClientBehavior[] { interceptor }); " is 132.
Long Statement,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateComputeNodeServiceLogsAddResponse,The length of the statement  "            var response = new AzureOperationResponse<ProxyModels.UploadBatchServiceLogsResult' ProxyModels.ComputeNodeUploadBatchServiceLogsHeaders>(); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,GetBatchCertificateTest,The length of the statement  "            AzureOperationResponse<ProxyModels.Certificate' ProxyModels.CertificateGetHeaders> response = BatchTestHelpers.CreateCertificateGetResponse(cmdlet.Thumbprint); " is 159.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,GetBatchCertificateTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCertificate>())).Callback<object>(c => pipeline.Add((PSCertificate)c)); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,GetBatchCertificateODataTest,The length of the statement  "            // Fetch the OData clauses off the request. The OData clauses are applied after user provided RequestInterceptors' so a ResponseInterceptor is used. " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,GetBatchCertificateODataTest,The length of the statement  "            AzureOperationResponse<ProxyModels.Certificate' ProxyModels.CertificateGetHeaders> getResponse = BatchTestHelpers.CreateCertificateGetResponse(cmdlet.Thumbprint); " is 162.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListBatchCertificatesODataTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.Certificate>' ProxyModels.CertificateListHeaders> response = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.Certificate' ProxyModels.CertificateListHeaders>(); " is 222.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListBatchCertificatesODataTest,The length of the statement  "            Action<BatchRequest<ProxyModels.CertificateListOptions' AzureOperationResponse<IPage<ProxyModels.Certificate>' ProxyModels.CertificateListHeaders>>> extractCertificateListAction = " is 179.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListBatchCertificatesODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(responseToUse: response' requestAction: extractCertificateListAction); " is 164.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListBatchCertificatesWithoutFiltersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.Certificate>' ProxyModels.CertificateListHeaders> response = BatchTestHelpers.CreateCertificateListResponse(thumbprintsOfConstructedCerts); " is 180.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListCertificatesMaxCountTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.Certificate>' ProxyModels.CertificateListHeaders> response = BatchTestHelpers.CreateCertificateListResponse(thumbprintsOfConstructedCerts); " is 180.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Certificates,RemoveBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\RemoveBatchCertificateCommandTests.cs,RemoveBatchCertificateParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<CertificateDeleteOptions' AzureOperationHeaderResponse<CertificateDeleteHeaders>>(); " is 171.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,DisableBatchComputeNodeSchedulingCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\DisableBatchComputeNodeSchedulingCommandTests.cs,DisableComputeNodeSchedulingRequestTest,The length of the statement  "            BatchCommon.DisableComputeNodeSchedulingOption? disableOption = BatchCommon.DisableComputeNodeSchedulingOption.TaskCompletion; " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,GetBatchComputeNodeTest,The length of the statement  "            AzureOperationResponse<ProxyModels.ComputeNode' ProxyModels.ComputeNodeGetHeaders> response = BatchTestHelpers.CreateComputeNodeGetResponse(cmdlet.Id); " is 151.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,GetBatchComputeNodeTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSComputeNode>())).Callback<object>(c => pipeline.Add((PSComputeNode)c)); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,GetBatchComputeNodeODataTest,The length of the statement  "            // Fetch the OData clauses off the request. The OData clauses are applied after user provided RequestInterceptors' so a ResponseInterceptor is used. " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,GetBatchComputeNodeODataTest,The length of the statement  "            AzureOperationResponse<ProxyModels.ComputeNode' ProxyModels.ComputeNodeGetHeaders> getResponse = BatchTestHelpers.CreateComputeNodeGetResponse(cmdlet.Id); " is 154.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListBatchComputeNodesODataTest,The length of the statement  "                BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.ComputeNode' ProxyModels.ComputeNodeListHeaders>(); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListBatchComputeNodesODataTest,The length of the statement  "            Action<BatchRequest<ProxyModels.ComputeNodeListOptions' AzureOperationResponse<IPage<ProxyModels.ComputeNode>' ProxyModels.ComputeNodeListHeaders>>> listComputeNodeAction = " is 172.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListBatchComputeNodesODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.ComputeNodeListOptions' AzureOperationResponse<IPage<ProxyModels.ComputeNode>' ProxyModels.ComputeNodeListHeaders>>(response' listComputeNodeAction); " is 255.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListComputeNodesMaxCountTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.ComputeNode>' ProxyModels.ComputeNodeListHeaders> response = BatchTestHelpers.CreateComputeNodeListResponse(idsOfConstructedComputeNodes); " is 179.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeLoginSettingsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeLoginSettingsCommandTests.cs,GetBatchComputeNodeLoginSettingsParametersTest,The length of the statement  "                AzureOperationResponse<ComputeNodeGetRemoteLoginSettingsResult' ComputeNodeGetRemoteLoginSettingsHeaders>>(responseToUse: response); " is 132.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithPoolIdAndComputeNodeId_ShouldSucceed,The length of the statement  "            AzureOperationResponse<ProxyModels.UploadBatchServiceLogsResult' ProxyModels.ComputeNodeUploadBatchServiceLogsHeaders> response =  " is 129.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithPoolIdAndComputeNodeId_ShouldSucceed,The length of the statement  "                AzureOperationResponse<ProxyModels.UploadBatchServiceLogsResult' ProxyModels.ComputeNodeUploadBatchServiceLogsHeaders>>(response); " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithPoolIdAndComputeNodeId_ShouldSucceed,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSStartComputeNodeServiceLogUploadResult>())).Callback<object>(c => result = (PSStartComputeNodeServiceLogUploadResult)c); " is 175.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithComputeNode_ShouldSucceed,The length of the statement  "            AzureOperationResponse<ProxyModels.UploadBatchServiceLogsResult' ProxyModels.ComputeNodeUploadBatchServiceLogsHeaders> response2 = " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithComputeNode_ShouldSucceed,The length of the statement  "                AzureOperationResponse<ProxyModels.UploadBatchServiceLogsResult' ProxyModels.ComputeNodeUploadBatchServiceLogsHeaders>>(response2); " is 131.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithComputeNode_ShouldSucceed,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSStartComputeNodeServiceLogUploadResult>())).Callback<object>(c => result = (PSStartComputeNodeServiceLogUploadResult)c); " is 175.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,RemoveBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\RemoveBatchComputeNodeCommandTests.cs,RemoveComputeNodeRequestTest,The length of the statement  "                    requestDeallocationOption = BatchTestHelpers.MapEnum<Microsoft.Azure.Batch.Common.ComputeNodeDeallocationOption>(request.Parameters.NodeDeallocationOption); " is 156.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,ResetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\ResetBatchComputeNodeCommandTests.cs,ResetComputeNodeRequestTest,The length of the statement  "            Assert.Equal(cmdlet.ReimageOption' BatchTestHelpers.MapEnum<BatchCommon.ComputeNodeReimageOption>(requestReimageOption)); " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,EnableBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\EnableBatchAutoScaleCommandTests.cs,EnableAutoScaleRequestTest,The length of the statement  "            Action<BatchRequest<PoolEnableAutoScaleParameter' PoolEnableAutoScaleOptions' AzureOperationHeaderResponse<PoolEnableAutoScaleHeaders>>> extractFormulaAction = " is 159.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,EnableBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\EnableBatchAutoScaleCommandTests.cs,EnableAutoScaleRequestTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(requestAction: extractFormulaAction); " is 124.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,GetBatchPoolTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudPool' ProxyModels.PoolGetHeaders> response = BatchTestHelpers.CreateCloudPoolGetResponse(cmdlet.Id); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,GetBatchPoolTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudPool>())).Callback<object>(p => pipeline.Add((PSCloudPool)p)); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,GetBatchPoolODataTest,The length of the statement  "            // Fetch the OData clauses off the request. The OData clauses are applied after user provided RequestInterceptors' so a ResponseInterceptor is used. " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,GetBatchPoolODataTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudPool' ProxyModels.PoolGetHeaders> getResponse = BatchTestHelpers.CreateCloudPoolGetResponse(cmdlet.Id); " is 143.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListBatchPoolsODataTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudPool>' ProxyModels.PoolListHeaders> response = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.CloudPool' ProxyModels.PoolListHeaders>(); " is 204.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListBatchPoolsODataTest,The length of the statement  "            Action<BatchRequest<ProxyModels.PoolListOptions' AzureOperationResponse<IPage<ProxyModels.CloudPool>' ProxyModels.PoolListHeaders>>> extractPoolListAction = " is 156.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListBatchPoolsODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(responseToUse: response' requestAction: extractPoolListAction); " is 157.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListBatchPoolWithoutFiltersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudPool>' ProxyModels.PoolListHeaders> response = BatchTestHelpers.CreateCloudPoolListResponse(idsOfConstructedPools); " is 161.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListPoolsMaxCountTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudPool>' ProxyModels.PoolListHeaders> response = BatchTestHelpers.CreateCloudPoolListResponse(idsOfConstructedPools); " is 161.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithPoolIdOption_ShouldHonorPoolIdFilter,The length of the statement  "                BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.PoolNodeCounts' ProxyModels.AccountListPoolNodeCountsHeaders>(); " is 133.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithPoolIdOption_ShouldHonorPoolIdFilter,The length of the statement  "            Action<BatchRequest<ProxyModels.AccountListPoolNodeCountsOptions' AzureOperationResponse<IPage<ProxyModels.PoolNodeCounts>' ProxyModels.AccountListPoolNodeCountsHeaders>>> requestAction = " is 187.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithCloudPoolOption_ShouldHonorPoolFilter,The length of the statement  "                BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.PoolNodeCounts' ProxyModels.AccountListPoolNodeCountsHeaders>(); " is 133.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithCloudPoolOption_ShouldHonorPoolFilter,The length of the statement  "            Action<BatchRequest<ProxyModels.AccountListPoolNodeCountsOptions' AzureOperationResponse<IPage<ProxyModels.PoolNodeCounts>' ProxyModels.AccountListPoolNodeCountsHeaders>>> requestAction = " is 187.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,PoolNodeCountsObjectComparer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,AreEqual,The length of the statement  "                    var psPoolNodeCountsValue = this.psPoolNodeCountsPropertInfos.First(psPi => psPi.Name == pi.Name).GetValue(psPoolNodeCounts); " is 125.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolStatisticsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolStatisticsCommandTests.cs,GetBatchPoolStatisticsTest,The length of the statement  "                AzureOperationResponse<ProxyModels.PoolStatistics' ProxyModels.PoolGetAllLifetimeStatisticsHeaders>>(responseToUse: response); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolStatisticsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolStatisticsCommandTests.cs,GetBatchPoolStatisticsTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSPoolStatistics>())).Callback<object>(c => statistics = (PSPoolStatistics)c); " is 131.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageODataTest,The length of the statement  "                AzureOperationResponse<IPage<ProxyModels.PoolUsageMetrics>' ProxyModels.PoolListUsageMetricsHeaders>>(responseToUse: response); " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageWithFilter,The length of the statement  "                AzureOperationResponse<IPage<ProxyModels.PoolUsageMetrics>' ProxyModels.PoolListUsageMetricsHeaders>>(responseToUse: response); " is 127.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            cmdlet.VirtualMachineConfiguration = new PSVirtualMachineConfiguration(new PSImageReference("offer"' "publisher"' "sku")' "node agent"); " is 136.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            cmdlet.MountConfiguration = new[] { new PSMountConfiguration(new PSAzureBlobFileSystemConfiguration("foo"' "bar"' "baz"' AzureStorageAuthenticationKey.FromAccountKey("abc"))) }; " is 177.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.CertificateReferences[0].ThumbprintAlgorithm' requestParameters.CertificateReferences[0].ThumbprintAlgorithm); " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.TaskSchedulingPolicy.ComputeNodeFillType.ToString()' requestParameters.TaskSchedulingPolicy.NodeFillType.ToString()); " is 137.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.VirtualMachineConfiguration.NodeAgentSkuId' requestParameters.VirtualMachineConfiguration.NodeAgentSKUId); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.VirtualMachineConfiguration.ImageReference.Publisher' requestParameters.VirtualMachineConfiguration.ImageReference.Publisher); " is 146.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.VirtualMachineConfiguration.ImageReference.Offer' requestParameters.VirtualMachineConfiguration.ImageReference.Offer); " is 138.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.VirtualMachineConfiguration.ImageReference.Sku' requestParameters.VirtualMachineConfiguration.ImageReference.Sku); " is 134.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MountConfiguration[0].AzureBlobFileSystemConfiguration.AccountName' requestParameters.MountConfiguration[0].AzureBlobFileSystemConfiguration.AccountName); " is 174.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MountConfiguration[0].AzureBlobFileSystemConfiguration.AccountKey' requestParameters.MountConfiguration[0].AzureBlobFileSystemConfiguration.AccountKey); " is 172.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MountConfiguration[0].AzureBlobFileSystemConfiguration.ContainerName' requestParameters.MountConfiguration[0].AzureBlobFileSystemConfiguration.ContainerName); " is 178.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MountConfiguration[0].AzureBlobFileSystemConfiguration.RelativeMountPath' requestParameters.MountConfiguration[0].AzureBlobFileSystemConfiguration.RelativeMountPath); " is 186.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolNetworkConfigurationParameterTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(requestAction: extractPoolAction); " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The length of the statement  "            PSUserAccount sshUser = new PSUserAccount("user3"' "password3"' linuxUserConfiguration: new PSLinuxUserConfiguration(uid: 1' gid: 2' sshPrivateKey: "my ssh key")); " is 163.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The length of the statement  "            Assert.Equal(sshUser.LinuxUserConfiguration.SshPrivateKey' requestParameters.UserAccounts[2].LinuxUserConfiguration.SshPrivateKey); " is 131.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,RemoveBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\RemoveBatchPoolCommandTests.cs,RemoveBatchPoolParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<PoolDeleteOptions' AzureOperationHeaderResponse<PoolDeleteHeaders>>(); " is 157.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,SetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\SetBatchPoolCommandTests.cs,SetBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.Pool.CertificateReferences[0].ThumbprintAlgorithm' requestParameters.CertificateReferences[0].ThumbprintAlgorithm); " is 135.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,SetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\SetBatchPoolCommandTests.cs,SetBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.Pool.ApplicationPackageReferences[0].ApplicationId' requestParameters.ApplicationPackageReferences[0].ApplicationId); " is 137.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,SetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\SetBatchPoolCommandTests.cs,SetBatchPoolParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.Pool.ApplicationPackageReferences[0].Version' requestParameters.ApplicationPackageReferences[0].Version); " is 125.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,StopBatchPoolResizeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\StopBatchPoolResizeCommandTests.cs,StopPoolResizeParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<PoolStopResizeOptions' AzureOperationHeaderResponse<PoolStopResizeHeaders>>(); " is 165.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,TestBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\TestBatchAutoScaleCommandTests.cs,TestAutoScaleParametersTest,The length of the statement  "                BatchTestHelpers.CreateGenericAzureOperationResponse<ProxyModels.AutoScaleRun' ProxyModels.PoolEvaluateAutoScaleHeaders>(); " is 123.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,TestBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\TestBatchAutoScaleCommandTests.cs,TestAutoScaleRequestTest,The length of the statement  "                BatchTestHelpers.CreateGenericAzureOperationResponse<ProxyModels.AutoScaleRun' ProxyModels.PoolEvaluateAutoScaleHeaders>(); " is 123.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,TestBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\TestBatchAutoScaleCommandTests.cs,TestAutoScaleRequestTest,The length of the statement  "            Action<BatchRequest<string' ProxyModels.PoolEvaluateAutoScaleOptions' AzureOperationResponse<ProxyModels.AutoScaleRun' ProxyModels.PoolEvaluateAutoScaleHeaders>>> extractFormulaAction = " is 185.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Pools,TestBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\TestBatchAutoScaleCommandTests.cs,TestAutoScaleRequestTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(responseToUse: response' requestAction: extractFormulaAction); " is 149.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodeUsers,SetBatchComputeNodeUserCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodeUsers\SetBatchComputeNoderUserCommandTests.cs,SetBatchComputeNodeUserRequestTest,The length of the statement  "            Action<BatchRequest<NodeUpdateUserParameter' ComputeNodeUpdateUserOptions' AzureOperationHeaderResponse<ComputeNodeUpdateUserHeaders>>> extractUserUpdateParametersAction = " is 171.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ComputeNodeUsers,SetBatchComputeNodeUserCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodeUsers\SetBatchComputeNoderUserCommandTests.cs,SetBatchComputeNodeUserRequestTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(requestAction: extractUserUpdateParametersAction); " is 137.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,GetBatchNodeFileByTaskParametersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.NodeFile>' ProxyModels.FileListFromTaskHeaders> response = BatchTestHelpers.CreateNodeFileListByTaskResponse(new string[] { }); " is 168.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,GetBatchNodeFileByTaskParametersTest,The length of the statement  "            // Verify that we don't get an argument exception. We should get an InvalidOperationException though since the task is unbound " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,GetBatchNodeFileByTaskTest,The length of the statement  "            AzureOperationHeaderResponse<ProxyModels.FileGetPropertiesFromTaskHeaders> response = BatchTestHelpers.CreateNodeFileGetPropertiesByTaskResponse(); " is 147.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,GetBatchNodeFileByTaskTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSNodeFile>())).Callback<object>(f => pipeline.Add((PSNodeFile)f)); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,GetBatchNodeFileByComputeNodeTest,The length of the statement  "            AzureOperationHeaderResponse<ProxyModels.FileGetPropertiesFromComputeNodeHeaders> response = BatchTestHelpers.CreateNodeFileGetPropertiesByComputeNodeResponse(); " is 161.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,GetBatchNodeFileByComputeNodeTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSNodeFile>())).Callback<object>(f => pipeline.Add((PSNodeFile)f)); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileContentCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileContentCommandTests.cs,GetBatchNodeFileByTaskParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeGetFileAndPropertiesFromTaskResponseInterceptor(cmdlet.Path); " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileContentCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileContentCommandTests.cs,GetBatchNodeFileByComputeNodeContentParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeGetFileAndPropertiesFromComputeNodeResponseInterceptor(cmdlet.Path); " is 128.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileContentCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileContentCommandTests.cs,GetBatchNodeFileByteRangeSet_IsPopulatedInRequest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeGetFileAndPropertiesFromTaskResponseInterceptor(cmdlet.Path); " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchRemoteDesktopProtocolFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchRemoteDesktopProtocolFileCommandTests.cs,GetBatchRemoteDesktopProtocolFileParametersTest,The length of the statement  "            AzureOperationResponse<Stream' ComputeNodeGetRemoteDesktopHeaders> response = BatchTestHelpers.CreateGetRemoteDesktOperationResponse(); " is 135.
Long Statement,Microsoft.Azure.Commands.Batch.Test.HelperCmdlets,NewBatchResourceFileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\HelperCmdlets\NewBatchResourceFileTests.cs,NewBatchResourceFileWithHttpUrl,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSResourceFile>())).Callback<object>(p => pipeline.Add((PSResourceFile)p)); " is 128.
Long Statement,Microsoft.Azure.Commands.Batch.Test.HelperCmdlets,NewBatchResourceFileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\HelperCmdlets\NewBatchResourceFileTests.cs,NewBatchResourceFileWithAutoStorageContainerName,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSResourceFile>())).Callback<object>(p => pipeline.Add((PSResourceFile)p)); " is 128.
Long Statement,Microsoft.Azure.Commands.Batch.Test.HelperCmdlets,NewBatchResourceFileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\HelperCmdlets\NewBatchResourceFileTests.cs,NewBatchResourceFileWithStorageContainerUrl,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSResourceFile>())).Callback<object>(p => pipeline.Add((PSResourceFile)p)); " is 128.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,DisableBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\DisableBatchJobScheduleCommandTests.cs,DisableJobScheduleParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobScheduleDisableOptions' AzureOperationHeaderResponse<JobScheduleDisableHeaders>>(); " is 173.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,EnableBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\EnableBatchJobScheduleCommandTests.cs,EnableJobScheduleParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobScheduleEnableOptions' AzureOperationHeaderResponse<JobScheduleEnableHeaders>>(); " is 171.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,GetBatchJobScheduleTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudJobSchedule' ProxyModels.JobScheduleGetHeaders> response = BatchTestHelpers.CreateCloudJobScheduleGetResponse(cmdlet.Id); " is 161.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,GetBatchJobScheduleTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudJobSchedule>())).Callback<object>(j => pipeline.Add((PSCloudJobSchedule)j)); " is 136.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,GetBatchJobScheduleODataTest,The length of the statement  "            // Fetch the OData clauses off the request. The OData clauses are applied after user provided RequestInterceptors' so a ResponseInterceptor is used. " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,GetBatchJobScheduleODataTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudJobSchedule' ProxyModels.JobScheduleGetHeaders> getResponse = BatchTestHelpers.CreateCloudJobScheduleGetResponse(cmdlet.Id); " is 164.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,GetBatchJobScheduleODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobScheduleGetOptions' AzureOperationResponse<ProxyModels.CloudJobSchedule' ProxyModels.JobScheduleGetHeaders>>(getResponse); " is 231.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListBatchJobSchedulesODataTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders> response = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.CloudJobSchedule' ProxyModels.JobScheduleListHeaders>(); " is 232.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListBatchJobSchedulesODataTest,The length of the statement  "            Action<BatchRequest<ProxyModels.JobScheduleListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders>>> listJobScheduleAction = " is 177.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListBatchJobSchedulesODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobScheduleListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders>>(responseToUse: response' requestAction: listJobScheduleAction); " is 290.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListBatchJobSchedulesWithoutFiltersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders> response = BatchTestHelpers.CreateCloudJobScheduleListResponse(idsOfConstructedJobSchedules); " is 189.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListBatchJobSchedulesWithoutFiltersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobScheduleListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders>>(response); " is 230.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListJobSchedulesMaxCountTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders> response = BatchTestHelpers.CreateCloudJobScheduleListResponse(idsOfConstructedJobSchedules); " is 189.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListJobSchedulesMaxCountTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobScheduleListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJobSchedule>' ProxyModels.JobScheduleListHeaders>>(response); " is 230.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,NewBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\NewBatchJobScheduleCommandTests.cs,NewBatchJobScheduleParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(jobSpec.CommonEnvironmentSettings.Count' requestParameters.JobSpecification.CommonEnvironmentSettings.Count); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,NewBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\NewBatchJobScheduleCommandTests.cs,NewBatchJobScheduleParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(jobSpec.JobPreparationTask.CommandLine' requestParameters.JobSpecification.JobPreparationTask.CommandLine); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,RemoveBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\RemoveBatchJobScheduleCommandTests.cs,RemoveBatchJobScheduleParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobScheduleDeleteOptions' AzureOperationHeaderResponse<JobScheduleDeleteHeaders>>(); " is 171.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,SetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\SetBatchJobScheduleCommandTests.cs,SetBatchJobScheduleParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(jobSpec.CommonEnvironmentSettings.Count' requestParameters.JobSpecification.CommonEnvironmentSettings.Count); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,SetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\SetBatchJobScheduleCommandTests.cs,SetBatchJobScheduleParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(jobSpec.JobPreparationTask.CommandLine' requestParameters.JobSpecification.JobPreparationTask.CommandLine); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.JobSchedules,StopBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\StopBatchJobScheduleCommandTests.cs,StopJobScheduleParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobScheduleTerminateOptions' AzureOperationHeaderResponse<JobScheduleTerminateHeaders>>(); " is 177.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,DisableBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\DisableBatchJobCommandTests.cs,DisableJobRequestTest,The length of the statement  "            Action<BatchRequest<ProxyModels.DisableJobOption' ProxyModels.JobDisableOptions' AzureOperationHeaderResponse<ProxyModels.JobDisableHeaders>>> extractDisableOptionAction = " is 171.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,DisableBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\DisableBatchJobCommandTests.cs,DisableJobRequestTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(requestAction: extractDisableOptionAction); " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,EnableBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\EnableBatchJobCommandTests.cs,EnableJobParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobEnableOptions' AzureOperationHeaderResponse<JobEnableHeaders>>(); " is 155.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,GetBatchJobTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudJob' ProxyModels.JobGetHeaders> response = BatchTestHelpers.CreateCloudJobGetResponse(job); " is 131.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,GetBatchJobTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudJob>())).Callback<object>(j => pipeline.Add((PSCloudJob)j)); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,GetBatchJobODataTest,The length of the statement  "            // Fetch the OData clauses off the request. The OData clauses are applied after user provided RequestInterceptors' so a ResponseInterceptor is used. " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,GetBatchJobODataTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudJob' ProxyModels.JobGetHeaders> getResponse = BatchTestHelpers.CreateCloudJobGetResponse(cmdlet.Id); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsODataTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudJob>' ProxyModels.JobListHeaders> response = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.CloudJob' ProxyModels.JobListHeaders>(); " is 200.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsODataTest,The length of the statement  "            Action<BatchRequest<ProxyModels.JobListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJob>' ProxyModels.JobListHeaders>>> extractJobListAction = " is 152.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(responseToUse: response' requestAction: extractJobListAction); " is 156.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsWithoutFiltersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudJob>' ProxyModels.JobListHeaders> response = BatchTestHelpers.CreateCloudJobListResponse(idsOfConstructedJobs); " is 157.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsWithoutFiltersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJob>' ProxyModels.JobListHeaders>>(response); " is 206.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListJobsMaxCountTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudJob>' ProxyModels.JobListHeaders> response = BatchTestHelpers.CreateCloudJobListResponse(idsOfConstructedJobs); " is 157.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListJobsMaxCountTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobListOptions' AzureOperationResponse<IPage<ProxyModels.CloudJob>' ProxyModels.JobListHeaders>>(response); " is 206.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsUnderScheduleTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<ProxyModels.JobListFromJobScheduleOptions'  " is 129.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,WhenGettingAJobFromTheService_ApplicationPackageReferencesAreMapped,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudJob' ProxyModels.JobGetHeaders> response = BatchTestHelpers.CreateCloudJobGetResponse(cloudTask); " is 137.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,WhenGettingAJobFromTheService_ApplicationPackageReferencesAreMapped,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudJob>())).Callback<object>(t => pipeline.Add((PSCloudJob)t)); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobPreparationAndReleaseTaskStatusTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobPreparationAndReleaseTaskStatusTests.cs,GetBatchJobPreparationAndReleaseTaskStatusTest,The length of the statement  "                AzureOperationResponse<IPage<ProxyModels.JobPreparationAndReleaseTaskExecutionInformation>' ProxyModels.JobListPreparationAndReleaseTaskStatusHeaders>>(response); " is 162.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobPreparationAndReleaseTaskStatusTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobPreparationAndReleaseTaskStatusTests.cs,GetBatchJobPreparationAndReleaseTaskStatusTestMaxCountTest,The length of the statement  "                AzureOperationResponse<IPage<ProxyModels.JobPreparationAndReleaseTaskExecutionInformation>' ProxyModels.JobListPreparationAndReleaseTaskStatusHeaders>>(response); " is 162.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobStatisticsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobStatisticsCommandTests.cs,GetBatchJobStatisticsTest,The length of the statement  "                AzureOperationResponse<ProxyModels.JobStatistics' ProxyModels.JobGetAllLifetimeStatisticsHeaders>>(responseToUse: response); " is 124.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobStatisticsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobStatisticsCommandTests.cs,GetBatchJobStatisticsTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSJobStatistics>())).Callback<object>(c => statistics = (PSJobStatistics)c); " is 129.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobParametersTest,The length of the statement  "            var interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobAddParameter' JobAddOptions' AzureOperationHeaderResponse<JobAddHeaders>>( " is 149.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.CommonEnvironmentSettings[requestParameters.CommonEnvironmentSettings[0].Name]' requestParameters.CommonEnvironmentSettings[0].Value); " is 154.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,ApplicationPackageReferencesAreSentToService,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobAddParameter' JobAddOptions' AzureOperationHeaderResponse<JobAddHeaders>>( " is 164.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The length of the statement  "            PSUserAccount sshUser = new PSUserAccount("user3"' "password3"' Azure.Batch.Common.ElevationLevel.Admin' new PSLinuxUserConfiguration(uid: 1' gid:2' sshPrivateKey: "my ssh key")); " is 179.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The length of the statement  "            Assert.Equal(sshUser.LinuxUserConfiguration.Uid' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].LinuxUserConfiguration.Uid); " is 147.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The length of the statement  "            Assert.Equal(sshUser.LinuxUserConfiguration.Gid' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].LinuxUserConfiguration.Gid); " is 147.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The length of the statement  "            Assert.Equal(sshUser.LinuxUserConfiguration.SshPrivateKey' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].LinuxUserConfiguration.SshPrivateKey); " is 167.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,RemoveBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\RemoveBatchJobCommandTests.cs,RemoveBatchJobParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobDeleteOptions' AzureOperationHeaderResponse<JobDeleteHeaders>>(); " is 155.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,SetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\SetBatchJobCommandTests.cs,SetBatchJobParametersGetPassedToRequestTest,The length of the statement  "            Assert.Contains(requestParameters.Metadata' p => p.Name == "meta1" && p.Value == cmdlet.Job.Metadata["meta1"].ToString()); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,SetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\SetBatchJobCommandTests.cs,SetBatchJobParametersGetPassedToRequestTest,The length of the statement  "            Assert.Contains(requestParameters.Metadata' p => p.Name == "meta2" && p.Value == cmdlet.Job.Metadata["meta2"].ToString()); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,SetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\SetBatchJobCommandTests.cs,AutoCompletionSettingIsSentToService,The length of the statement  "                BatchTestHelpers.CreateFakeServiceResponseInterceptor<JobUpdateParameter' JobUpdateOptions' AzureOperationHeaderResponse<JobUpdateHeaders>>( " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,StopBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\StopBatchJobCommandTests.cs,StopJobParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<string' JobTerminateOptions' AzureOperationHeaderResponse<JobTerminateHeaders>>(); " is 169.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,StopBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\StopBatchJobCommandTests.cs,StopJobRequestTest,The length of the statement  "            Action<BatchRequest<string' JobTerminateOptions' AzureOperationHeaderResponse<JobTerminateHeaders>>> extractTerminateReasponAction = " is 132.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Jobs,StopBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\StopBatchJobCommandTests.cs,StopJobRequestTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(requestAction: extractTerminateReasponAction); " is 133.
Long Statement,Microsoft.Azure.Commands.BatchManager.Test,BatchAccountContextTest,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Models\BatchAccountContextTest.cs,BatchAccountContextFromResourceTest,The length of the statement  "            string id = string.Format("id/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Batch/batchAccounts/abc"' subscription' resourceGroup); " is 142.
Long Statement,Microsoft.Azure.Commands.BatchManager.Test,BatchAccountContextTest,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Models\BatchAccountContextTest.cs,BatchAccountContextFromResourceTest,The length of the statement  "                string.Format("/subscriptions{0}/resourceGroups/{1}/providers/Microsoft.KeyVault/vaults/foo"' subscription' resourceGroup)' " is 123.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,CertificateTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\CertificateTests.cs,TestCancelCertificateDelete,The length of the statement  "                () => { return new string[] { string.Format("Test-TestCancelCertificateDelete '{0}' '{1}'"' BatchTestHelpers.TestCertificateAlgorithm' thumbprint) }; }' " is 152.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,CertificateTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\CertificateTests.cs,TestCancelCertificateDelete,The length of the statement  "                    thumbprint = ScenarioTestHelpers.AddTestCertificate(controller' context' BatchTestHelpers.TestCertificateFileName).ToLowerInvariant(); " is 134.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,CertificateTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\CertificateTests.cs,TestCancelCertificateDelete,The length of the statement  "                    ScenarioTestHelpers.CreateTestPool(controller' context' poolId' targetDedicated: 0' targetLowPriority: 0' certReference: certRef); " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,CertificateTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\CertificateTests.cs,TestCancelCertificateDelete,The length of the statement  "                    ScenarioTestHelpers.WaitForCertificateToFailDeletion(controller' context' BatchTestHelpers.TestCertificateAlgorithm' thumbprint); " is 129.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ComputeNodeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ComputeNodeTests.cs,TestRebootAndReimageComputeNode,The length of the statement  "                () => { return new string[] { string.Format("Test-RebootAndReimageComputeNode '{0}' '{1}' '{2}'"' poolId' computeNodeId' computeNodeId2) }; }' " is 142.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ComputeNodeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ComputeNodeTests.cs,TestDisableAndEnableComputeNodeScheduling,The length of the statement  "                () => { return new string[] { string.Format("Test-DisableAndEnableComputeNodeScheduling '{0}' '{1}'"' poolId' computeNodeId) }; }' " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestGetNodeFileContentByTask,The length of the statement  "                () => { return new string[] { string.Format("Test-GetNodeFileContentByTask '{0}' '{1}' '{2}' '{3}'"' jobId' taskId' nodeFilePath' fileContents) }; }' " is 149.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestGetNodeFileContentByTask,The length of the statement  "                    ScenarioTestHelpers.CreateTestTask(controller' context' jobId' taskId' string.Format("cmd /c echo {0} > {1}"' fileContents' fileName)); " is 135.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestGetNodeFileContentByComputeNode,The length of the statement  "            () => { return new string[] { string.Format("Test-GetNodeFileContentByComputeNode '{0}' '{1}' '{2}' '{3}'"' poolId' computeNodeId' startTaskStdOutName' startTaskStdOutContent) }; }' " is 181.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestDeleteNodeFileByTask,The length of the statement  "                () => { return new string[] { string.Format("Test-DeleteNodeFileByTask '{0}' '{1}' '{2}'"' jobId' taskId' filePath) }; }' " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestDeleteNodeFileByTask,The length of the statement  "                    ScenarioTestHelpers.CreateTestTask(controller' context' jobId' taskId' string.Format("cmd /c echo \"test\" > {0}"' fileName)); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestDeleteNodeFileByComputeNode,The length of the statement  "                () => { return new string[] { string.Format("Test-DeleteNodeFileByComputeNode '{0}' '{1}' '{2}'"' poolId' computeNodeId' filePath) }; }' " is 136.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,FileTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\FileTests.cs,TestDeleteNodeFileByComputeNode,The length of the statement  "                    ScenarioTestHelpers.CreateTestTask(controller' context' jobId' taskId' string.Format("cmd /c echo \"test\" > {0}"' fileName)); " is 126.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,JobTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\JobTests.cs,IfJobSetsAutoFailure_ItCompletesWhenAnyTaskFails,The length of the statement  "                () => { return new string[] { string.Format("IfJobSetsAutoFailure-ItCompletesWhenAnyTaskFails '{0}' '{1}'"' jobId' taskId) }; }' " is 128.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateTestAccountAndResourceGroup,The length of the statement  "            controller.ResourceManagementClient.ResourceGroups.CreateOrUpdate(resourceGroupName' new ResourceGroup() { Location = location }); " is 130.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateTestAccountAndResourceGroup,The length of the statement  "            BatchAccount createResponse = controller.BatchManagementClient.BatchAccount.Create(resourceGroupName' accountName' new BatchAccountCreateParameters() { Location = location }); " is 175.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForRecentJob,The length of the statement  "            while (jobSchedule.ExecutionInformation.RecentJob == null || string.Equals(jobSchedule.ExecutionInformation.RecentJob.Id' previousJob' StringComparison.OrdinalIgnoreCase)) " is 171.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,CreateTestTask,The length of the statement  "                UserIdentity = new PSUserIdentity(new PSAutoUserSpecification(AutoUserScope.Task' numInstances <= 1 ? ElevationLevel.Admin : ElevationLevel.NonAdmin)) " is 150.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,DeleteComputeNodeUser,The length of the statement  "            ComputeNodeUserOperationParameters parameters = new ComputeNodeUserOperationParameters(context' poolId' computeNodeId' computeNodeUserName); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,TaskTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\TaskTests.cs,TestListAllSubtasks,The length of the statement  "                () => { return new string[] { string.Format("Test-ListAllSubtasks '{0}' '{1}' '{2}'"' jobId' taskId' numInstances) }; }' " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,EnableBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\EnableBatchTaskCommandTests.cs,OmittingMandatoryParametersCausesException,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<TaskReactivateOptions' AzureOperationHeaderResponse<TaskReactivateHeaders>>(); " is 165.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,GetBatchTaskParametersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudTask>' ProxyModels.TaskListHeaders> response = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.CloudTask' ProxyModels.TaskListHeaders>(); " is 204.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,GetBatchTaskTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTask' ProxyModels.TaskGetHeaders> response = BatchTestHelpers.CreateCloudTaskGetResponse(cmdlet.Id); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,GetBatchTaskTest,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudTask>())).Callback<object>(t => pipeline.Add((PSCloudTask)t)); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,GetBatchTaskODataTest,The length of the statement  "            // Fetch the OData clauses off the request. The OData clauses are applied after user provided RequestInterceptors' so a ResponseInterceptor is used. " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,GetBatchTaskODataTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTask' ProxyModels.TaskGetHeaders> getResponse = BatchTestHelpers.CreateCloudTaskGetResponse(cmdlet.Id); " is 143.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListBatchTasksODataTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudTask>' ProxyModels.TaskListHeaders> response = BatchTestHelpers.CreateGenericAzureOperationListResponse<ProxyModels.CloudTask' ProxyModels.TaskListHeaders>(); " is 204.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListBatchTasksODataTest,The length of the statement  "            Action<BatchRequest<ProxyModels.TaskListOptions' AzureOperationResponse<IPage<ProxyModels.CloudTask>' ProxyModels.TaskListHeaders>>> extractTaskListAction = " is 156.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListBatchTasksODataTest,The length of the statement  "            RequestInterceptor requestInterceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(responseToUse: response' requestAction: extractTaskListAction); " is 157.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListBatchTasksWithoutFiltersTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudTask>' ProxyModels.TaskListHeaders> response = BatchTestHelpers.CreateCloudTaskListResponse(idsOfConstructedTasks); " is 161.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListTasksMaxCountTest,The length of the statement  "            AzureOperationResponse<IPage<ProxyModels.CloudTask>' ProxyModels.TaskListHeaders> response = BatchTestHelpers.CreateCloudTaskListResponse(idsOfConstructedTasks); " is 161.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTask' ProxyModels.TaskGetHeaders> response = BatchTestHelpers.CreateCloudTaskGetResponse(cloudTask); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudTask>())).Callback<object>(t => pipeline.Add((PSCloudTask)t)); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ApplicationPackageReferencesAreMapped,The length of the statement  "                ApplicationPackageReferences = new[] { new ProxyModels.ApplicationPackageReference(applicationName' applicationVersion) } " is 121.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ApplicationPackageReferencesAreMapped,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTask' ProxyModels.TaskGetHeaders> response = BatchTestHelpers.CreateCloudTaskGetResponse(cloudTask); " is 140.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ApplicationPackageReferencesAreMapped,The length of the statement  "            commandRuntimeMock.Setup(r => r.WriteObject(It.IsAny<PSCloudTask>())).Callback<object>(t => pipeline.Add((PSCloudTask)t)); " is 122.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MultiInstanceSettings.NumberOfInstances' requestParameters.MultiInstanceSettings.NumberOfInstances); " is 120.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MultiInstanceSettings.CoordinationCommandLine' requestParameters.MultiInstanceSettings.CoordinationCommandLine); " is 132.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MultiInstanceSettings.CommonResourceFiles.Count' requestParameters.MultiInstanceSettings.CommonResourceFiles.Count); " is 136.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MultiInstanceSettings.CommonResourceFiles[0].HttpUrl' requestParameters.MultiInstanceSettings.CommonResourceFiles[0].HttpUrl); " is 146.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The length of the statement  "            Assert.Equal(cmdlet.MultiInstanceSettings.CommonResourceFiles[0].FilePath' requestParameters.MultiInstanceSettings.CommonResourceFiles[0].FilePath); " is 148.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,ApplicationPackageReferencesAreSentOnATask,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<TaskAddParameter' TaskAddOptions' AzureOperationHeaderResponse<TaskAddHeaders>>( " is 167.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,ExitConditionsAreSentToService,The length of the statement  "            var satisfyDependency = new PSExitOptions(new Azure.Batch.ExitOptions { DependencyAction = Azure.Batch.Common.DependencyAction.Satisfy }); " is 138.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskCollectionParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor(responseToUse: response' requestAction: extractCollection); " is 146.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,OutputFilesAreSentToService,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<TaskAddParameter' TaskAddOptions' AzureOperationHeaderResponse<TaskAddHeaders>>( " is 167.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,OutputFilesAreSentToService,The length of the statement  "                    Assert.Equal(uploadCondition.ToString().ToLowerInvariant()' outputFile.UploadOptions.UploadCondition.ToString().ToLowerInvariant()); " is 132.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,ContainerSettingsAreSentToService,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<TaskAddParameter' TaskAddOptions' AzureOperationHeaderResponse<TaskAddHeaders>>( " is 167.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,RemoveBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\RemoveBatchTaskCommandTests.cs,RemoveBatchTaskParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<TaskDeleteOptions' AzureOperationHeaderResponse<TaskDeleteHeaders>>(); " is 157.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Tasks,StopBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\StopBatchTaskCommandTests.cs,StopBatchTaskParametersTest,The length of the statement  "            RequestInterceptor interceptor = BatchTestHelpers.CreateFakeServiceResponseInterceptor<TaskTerminateOptions' AzureOperationHeaderResponse<TaskTerminateHeaders>>(); " is 163.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,GetBatchSubtaskParametersTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTaskListSubtasksResult' ProxyModels.TaskListSubtasksHeaders> response = BatchTestHelpers.CreateCloudTaskListSubtasksResponse(); " is 167.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksWithoutFiltersTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTaskListSubtasksResult' ProxyModels.TaskListSubtasksHeaders> response = BatchTestHelpers.CreateCloudTaskListSubtasksResponse(idsOfConstructedSubtasks); " is 191.
Long Statement,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksMaxCountTest,The length of the statement  "            AzureOperationResponse<ProxyModels.CloudTaskListSubtasksResult' ProxyModels.TaskListSubtasksHeaders> response = BatchTestHelpers.CreateCloudTaskListSubtasksResponse(idsOfConstructedSubtasks); " is 191.
Magic Number,Microsoft.Azure.Commands.Batch.Test.Accounts,GetBatchSupportedImagesCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchAccounts\GetBatchSupportedImagesCommandTests.cs,ListBatchSupportedImagesParametersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test,BatchTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\BatchTestHelpers.cs,CreateAccountResource,The following statement contains a magic number: machineFamilyQuotas = machineFamilyQuotas ?? new List<VirtualMachineFamilyCoreQuota> { new VirtualMachineFamilyCoreQuota("foo"' 55 ) };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListBatchCertificatesWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListCertificatesMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Certificates,GetBatchCertificateCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Certificates\GetBatchCertificateCommandTests.cs,ListCertificatesMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListBatchComputeNodesWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListComputeNodesMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,GetBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\GetBatchComputeNodeCommandTests.cs,ListComputeNodesMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithPoolIdAndComputeNodeId_ShouldSucceed,The following statement contains a magic number: const int numberOfFilesUploaded = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.ComputeNodes,StartBatchComputeNodeServiceLogUploadCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\StartBatchComputeNodeServiceLogUploadCommandTests.cs,WhenStartBatchComputeNodeServiceLogUploadCommandIsCalledWithComputeNode_ShouldSucceed,The following statement contains a magic number: const int numberOfFilesUploaded = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,RemoveBatchComputeNodeCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodes\RemoveBatchComputeNodeCommandTests.cs,RemoveComputeNodeRequestTest,The following statement contains a magic number: cmdlet.ResizeTimeout = TimeSpan.FromMinutes(8);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,EnableBatchAutoScaleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\EnableBatchAutoScaleCommandTests.cs,EnableAutoScaleRequestTest,The following statement contains a magic number: TimeSpan? interval = TimeSpan.FromMinutes(6);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListBatchPoolWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListPoolsMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolCommandTests.cs,ListPoolsMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts1 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool1"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 1'                      idle: 2'                      offline: 3'                      preempted: 4'                      rebooting: 5'                      reimaging: 6'                      running: 7'                      starting: 8'                      startTaskFailed: 9'                      leavingPool: 10'                      unknown: 11'                      unusable: 12'                      waitingForStartTask: 13'                      total: 91)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenGetBatchPoolNodeCountsCommandIsCalledWithoutFilter_ShouldReturnAllPools,The following statement contains a magic number: var poolNodeCounts2 = new ProxyModels.PoolNodeCounts()              {                  PoolId = "Pool2"'                  Dedicated = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total                  LowPriority = new ProxyModels.NodeCounts(                      creating: 11'                      idle: 12'                      offline: 13'                      preempted: 14'                      rebooting: 15'                      reimaging: 16'                      running: 17'                      starting: 18'                      startTaskFailed: 19'                      leavingPool: 20'                      unknown: 21'                      unusable: 22'                      waitingForStartTask: 23'                      total: 221)' // Total              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int idle = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int offline = 3;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int preempted = 4;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int rebooting = 5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int reimaging = 6;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int running = 7;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int starting = 8;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int startTaskFailed = 9;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int leavingPool = 10;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int unknown = 11;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int unusable = 12;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int waitingForStartTask = 13;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolNodeCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolNodeCountsCommandTests.cs,WhenPSNodeCountsFormatObjectIsCalled_ShouldSerlializeNodeCountsToString,The following statement contains a magic number: const int total = 91;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolStatisticsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolStatisticsCommandTests.cs,GetBatchPoolStatisticsTest,The following statement contains a magic number: double avgCPUPercentage = 10;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageODataTest,The following statement contains a magic number: int year = 2013;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageODataTest,The following statement contains a magic number: int month = 4;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageODataTest,The following statement contains a magic number: DateTime[] startTimes = new[] { new DateTime(year' month' day' 0' 0' 0)' new DateTime(year' month' day' 0' 30' 0) };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageODataTest,The following statement contains a magic number: DateTime[] endTimes = new[] { new DateTime(year' month' day' 0' 30' 0)' new DateTime(year' month' day' 1' 0' 0) };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageODataTest,The following statement contains a magic number: Assert.Equal(2' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageWithFilter,The following statement contains a magic number: int year = 2013;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageWithFilter,The following statement contains a magic number: int month = 4;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,GetBatchPoolUsageMetricsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\GetBatchPoolUsageMetricsCommandTests.cs,GetBatchPoolUsageWithFilter,The following statement contains a magic number: DateTime[] endTimes = new[] { new DateTime(year' month' day' 0' 30' 0) };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.MaxTasksPerComputeNode = 4;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.ResizeTimeout = TimeSpan.FromMinutes(20);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.TargetDedicatedComputeNodes = 3;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.TargetLowPriorityComputeNodes = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolAutoScaleHandledProperlyTest,The following statement contains a magic number: cmdlet.AutoScaleEvaluationInterval = TimeSpan.FromMinutes(15);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: cmdlet.TargetDedicatedComputeNodes = 3;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: PSUserAccount sshUser = new PSUserAccount("user3"' "password3"' linuxUserConfiguration: new PSLinuxUserConfiguration(uid: 1' gid: 2' sshPrivateKey: "my ssh key"));
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(3' requestParameters.UserAccounts.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.Name' requestParameters.UserAccounts[2].Name);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.Password' requestParameters.UserAccounts[2].Password);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.ElevationLevel.ToString().ToLowerInvariant()'                  requestParameters.UserAccounts[2].ElevationLevel.ToString().ToLowerInvariant());
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.LinuxUserConfiguration.Uid' requestParameters.UserAccounts[2].LinuxUserConfiguration.Uid);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.LinuxUserConfiguration.Gid' requestParameters.UserAccounts[2].LinuxUserConfiguration.Gid);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Pools,NewBatchPoolCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Pools\NewBatchPoolCommandTests.cs,NewBatchPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.LinuxUserConfiguration.SshPrivateKey' requestParameters.UserAccounts[2].LinuxUserConfiguration.SshPrivateKey);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ComputeNodeUsers,NewBatchComputeNodeUserCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ComputeNodeUsers\NewBatchComputeNodeUserCommandTests.cs,NewBatchComputeNodeUserParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.ExpiryTime = DateTime.Now.AddDays(30);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListBatchNodeFilesByTaskByODataFilterTest,The following statement contains a magic number: Assert.Equal(2' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListBatchNodeFilesByTaskWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListNodeFilesByTaskMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListNodeFilesByTaskMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListBatchNodeFilesByComputeNodeByODataFilterTest,The following statement contains a magic number: Assert.Equal(2' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListBatchNodeFilesByComputeNodeWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListNodeFilesByComputeNodeMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Files,GetBatchNodeFileCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Files\GetBatchNodeFileCommandTests.cs,ListNodeFilesByComputeNodeMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListBatchJobSchedulesWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListJobSchedulesMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.JobSchedules,GetBatchJobScheduleCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\JobSchedules\GetBatchJobScheduleCommandTests.cs,ListJobSchedulesMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListJobsMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListJobsMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobCommandTests.cs,ListBatchJobsUnderScheduleTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobPreparationAndReleaseTaskStatusTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobPreparationAndReleaseTaskStatusTests.cs,GetBatchJobPreparationAndReleaseTaskStatusTestMaxCountTest,The following statement contains a magic number: const int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobPreparationAndReleaseTaskStatusTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobPreparationAndReleaseTaskStatusTests.cs,GetBatchJobPreparationAndReleaseTaskStatusTestMaxCountTest,The following statement contains a magic number: const int countReturned = 3;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,GetBatchJobPreparationAndReleaseTaskStatusTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\GetBatchJobPreparationAndReleaseTaskStatusTests.cs,GetBatchJobPreparationAndReleaseTaskStatusTestMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Constraints = new PSJobConstraints(TimeSpan.FromHours(1)' 5);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Priority = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: PSUserAccount sshUser = new PSUserAccount("user3"' "password3"' Azure.Batch.Common.ElevationLevel.Admin' new PSLinuxUserConfiguration(uid: 1' gid:2' sshPrivateKey: "my ssh key"));
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(3' cmdlet.PoolInformation.AutoPoolSpecification.PoolSpecification.UserAccounts.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.Name' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].Name);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.Password' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].Password);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.ElevationLevel.ToString().ToLowerInvariant()'                  requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].ElevationLevel.ToString().ToLowerInvariant());
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.LinuxUserConfiguration.Uid' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].LinuxUserConfiguration.Uid);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.LinuxUserConfiguration.Gid' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].LinuxUserConfiguration.Gid);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,NewBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\NewBatchJobCommandTests.cs,NewBatchJobPoolUserAccountsGetPassedToRequest,The following statement contains a magic number: Assert.Equal(sshUser.LinuxUserConfiguration.SshPrivateKey' requestParameters.PoolInfo.AutoPoolSpecification.Pool.UserAccounts[2].LinuxUserConfiguration.SshPrivateKey);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,SetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\SetBatchJobCommandTests.cs,SetBatchJobParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Job.Constraints = new PSJobConstraints(TimeSpan.FromHours(1)' 5);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Jobs,SetBatchJobCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Jobs\SetBatchJobCommandTests.cs,SetBatchJobParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Job.Priority = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subscriptions,GetBatchLocationQuotasCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Locations\GetBatchLocationQuotasCommandTests.cs,GetBatchLocationQuotasTest,The following statement contains a magic number: PSBatchLocationQuotas quotas = new PSBatchLocationQuotas(location' new BatchLocationQuota(accountQuota: 5));
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ComputeNodeTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ComputeNodeTests.cs,TestRemoveComputeNodes,The following statement contains a magic number: controller.RunPsTestWorkflow(                  _logger'                  () => { return new string[] { string.Format("Test-RemoveComputeNodes '{0}'"' removeNodePoolId) }; }'                  () =>                  {                      context = new ScenarioTestContext();                      ScenarioTestHelpers.CreateTestPool(controller' context' removeNodePoolId' targetDedicated: 2' targetLowPriority: 0);                      ScenarioTestHelpers.WaitForSteadyPoolAllocation(controller' context' removeNodePoolId);                  }'                  () =>                  {                      ScenarioTestHelpers.DeletePool(controller' context' removeNodePoolId);                  }'                  MethodBase.GetCurrentMethod().ReflectedType?.ToString()'                  MethodBase.GetCurrentMethod().Name);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,AddTestCertificate,The following statement contains a magic number: TimeSpan timeout = GetTimeout(TimeSpan.FromMinutes(5));
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,AddTestCertificate,The following statement contains a magic number: Sleep(5000);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForCertificateToFailDeletion,The following statement contains a magic number: DateTime timeout = DateTime.Now.Add(GetTimeout(TimeSpan.FromMinutes(2)));
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForCertificateToFailDeletion,The following statement contains a magic number: Sleep(10000);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForSteadyPoolAllocation,The following statement contains a magic number: DateTime timeout = DateTime.Now.Add(GetTimeout(TimeSpan.FromMinutes(5)));
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForSteadyPoolAllocation,The following statement contains a magic number: Sleep(5000);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForRecentJob,The following statement contains a magic number: DateTime timeout = DateTime.Now.Add(GetTimeout(TimeSpan.FromMinutes(2)));
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForRecentJob,The following statement contains a magic number: Sleep(5000);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForTaskCompletion,The following statement contains a magic number: monitor.WaitAll(tasks.Select(t => t.omObject)' TaskState.Completed' TimeSpan.FromMinutes(10)' null);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForJobCompletion,The following statement contains a magic number: DateTime timeout = DateTime.Now.AddMinutes(10);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForJobCompletion,The following statement contains a magic number: TestMockSupport.Delay(20000);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForIdleComputeNode,The following statement contains a magic number: DateTime timeout = DateTime.Now.Add(GetTimeout(TimeSpan.FromMinutes(10)));
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,WaitForIdleComputeNode,The following statement contains a magic number: Sleep(5000);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,ScenarioTestHelpers,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\ScenarioTestHelpers.cs,GetTimeout,The following statement contains a magic number: return TimeSpan.FromHours(3);
Magic Number,Microsoft.Azure.Commands.Batch.Test.ScenarioTests,TaskTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\ScenarioTests\TaskTests.cs,TestListAllSubtasks,The following statement contains a magic number: int numInstances = 3;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListBatchTasksWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListTasksMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,ListTasksMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The following statement contains a magic number: ProxyModels.CloudTask cloudTask = new ProxyModels.CloudTask              {                  Id = "task-1"'                  ExitConditions = new ProxyModels.ExitConditions                  {                      ExitCodeRanges = new[] { new ProxyModels.ExitCodeRangeMapping(2' 5' none) }'                      ExitCodes = new[] { new ProxyModels.ExitCodeMapping(4' terminate) }'                      PreProcessingError = terminate'                      FileUploadError = none'                      DefaultProperty = none'                  }              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The following statement contains a magic number: ProxyModels.CloudTask cloudTask = new ProxyModels.CloudTask              {                  Id = "task-1"'                  ExitConditions = new ProxyModels.ExitConditions                  {                      ExitCodeRanges = new[] { new ProxyModels.ExitCodeRangeMapping(2' 5' none) }'                      ExitCodes = new[] { new ProxyModels.ExitCodeMapping(4' terminate) }'                      PreProcessingError = terminate'                      FileUploadError = none'                      DefaultProperty = none'                  }              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The following statement contains a magic number: ProxyModels.CloudTask cloudTask = new ProxyModels.CloudTask              {                  Id = "task-1"'                  ExitConditions = new ProxyModels.ExitConditions                  {                      ExitCodeRanges = new[] { new ProxyModels.ExitCodeRangeMapping(2' 5' none) }'                      ExitCodes = new[] { new ProxyModels.ExitCodeMapping(4' terminate) }'                      PreProcessingError = terminate'                      FileUploadError = none'                      DefaultProperty = none'                  }              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The following statement contains a magic number: Assert.Equal(4' psExitConditions.ExitCodes.First().Code);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The following statement contains a magic number: Assert.Equal(2' psExitConditions.ExitCodeRanges.First().Start);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCommandTests.cs,WhenGettingATaskFromTheService_ExitConditionsAreMapped,The following statement contains a magic number: Assert.Equal(5' psExitConditions.ExitCodeRanges.First().End);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCountsCommandTests.cs,GetBatchTaskCountsTest,The following statement contains a magic number: const int active = 3;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCountsCommandTests.cs,GetBatchTaskCountsTest,The following statement contains a magic number: const int running = 5;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,GetBatchTaskCountsCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchTaskCountsCommandTests.cs,GetBatchTaskCountsTest,The following statement contains a magic number: const int succeeded = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Constraints = new PSTaskConstraints(TimeSpan.FromHours(1)' TimeSpan.FromDays(2)' 5);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Constraints = new PSTaskConstraints(TimeSpan.FromHours(1)' TimeSpan.FromDays(2)' 5);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.MultiInstanceSettings = new PSMultiInstanceSettings("cmd /c echo coordinating"' 3)              {                  CommonResourceFiles = new List<PSResourceFile>()                  {                      new PSResourceFile(ResourceFile.FromUrl("https://some.blob"' "myFile.txt"))                  }              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,ExitConditionsAreSentToService,The following statement contains a magic number: cmdlet.ExitConditions = new PSExitConditions              {                  ExitCodes = new List<PSExitCodeMapping> { new PSExitCodeMapping(0' none) }'                  PreProcessingError = terminate'                  FileUploadError = none'                  ExitCodeRanges = new List<PSExitCodeRangeMapping> { new PSExitCodeRangeMapping(1' 5' satisfyDependency) }'                  Default = none'              };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,ExitConditionsAreSentToService,The following statement contains a magic number: Assert.Equal(5' exitConditions.ExitCodeRanges.First().End);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskCollectionParametersTest,The following statement contains a magic number: PSCloudTask[] tasks = taskIds.Select(                  id => new PSCloudTask(id' commandLine)                  {                      ResourceFiles = new[]                      {                           new PSResourceFile(ResourceFile.FromUrl("anotherFile.txt"' "https://another.blob"))                      }'                      OutputFiles = new[]                       {                          new PSOutputFile(                              pattern'                              new PSOutputFileDestination(new PSOutputFileBlobContainerDestination(containerUrl' path))'                              new PSOutputFileUploadOptions(uploadCondition))                      }'                      ApplicationPackageReferences = new[]                      {                          new PSApplicationPackageReference                          {                              ApplicationId = "1"'                              Version = "foo"                          }                      }'                      ExitConditions = new PSExitConditions()                      {                          ExitCodeRanges = new List<PSExitCodeRangeMapping>                          {                              new PSExitCodeRangeMapping(                                  5'                                  10'                                  new PSExitOptions                                  {                                      DependencyAction = Azure.Batch.Common.DependencyAction.Block                                  })                            }'                          ExitCodes = new List<PSExitCodeMapping>                          {                              new PSExitCodeMapping(                                  11'                                  new PSExitOptions                                  {                                      DependencyAction = Azure.Batch.Common.DependencyAction.Block                                  })                            }'                          Default = new PSExitOptions                          {                              DependencyAction = Azure.Batch.Common.DependencyAction.Satisfy                          }                      }                  }).ToArray();
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskCollectionParametersTest,The following statement contains a magic number: PSCloudTask[] tasks = taskIds.Select(                  id => new PSCloudTask(id' commandLine)                  {                      ResourceFiles = new[]                      {                           new PSResourceFile(ResourceFile.FromUrl("anotherFile.txt"' "https://another.blob"))                      }'                      OutputFiles = new[]                       {                          new PSOutputFile(                              pattern'                              new PSOutputFileDestination(new PSOutputFileBlobContainerDestination(containerUrl' path))'                              new PSOutputFileUploadOptions(uploadCondition))                      }'                      ApplicationPackageReferences = new[]                      {                          new PSApplicationPackageReference                          {                              ApplicationId = "1"'                              Version = "foo"                          }                      }'                      ExitConditions = new PSExitConditions()                      {                          ExitCodeRanges = new List<PSExitCodeRangeMapping>                          {                              new PSExitCodeRangeMapping(                                  5'                                  10'                                  new PSExitOptions                                  {                                      DependencyAction = Azure.Batch.Common.DependencyAction.Block                                  })                            }'                          ExitCodes = new List<PSExitCodeMapping>                          {                              new PSExitCodeMapping(                                  11'                                  new PSExitOptions                                  {                                      DependencyAction = Azure.Batch.Common.DependencyAction.Block                                  })                            }'                          Default = new PSExitOptions                          {                              DependencyAction = Azure.Batch.Common.DependencyAction.Satisfy                          }                      }                  }).ToArray();
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskCollectionParametersTest,The following statement contains a magic number: PSCloudTask[] tasks = taskIds.Select(                  id => new PSCloudTask(id' commandLine)                  {                      ResourceFiles = new[]                      {                           new PSResourceFile(ResourceFile.FromUrl("anotherFile.txt"' "https://another.blob"))                      }'                      OutputFiles = new[]                       {                          new PSOutputFile(                              pattern'                              new PSOutputFileDestination(new PSOutputFileBlobContainerDestination(containerUrl' path))'                              new PSOutputFileUploadOptions(uploadCondition))                      }'                      ApplicationPackageReferences = new[]                      {                          new PSApplicationPackageReference                          {                              ApplicationId = "1"'                              Version = "foo"                          }                      }'                      ExitConditions = new PSExitConditions()                      {                          ExitCodeRanges = new List<PSExitCodeRangeMapping>                          {                              new PSExitCodeRangeMapping(                                  5'                                  10'                                  new PSExitOptions                                  {                                      DependencyAction = Azure.Batch.Common.DependencyAction.Block                                  })                            }'                          ExitCodes = new List<PSExitCodeMapping>                          {                              new PSExitCodeMapping(                                  11'                                  new PSExitOptions                                  {                                      DependencyAction = Azure.Batch.Common.DependencyAction.Block                                  })                            }'                          Default = new PSExitOptions                          {                              DependencyAction = Azure.Batch.Common.DependencyAction.Satisfy                          }                      }                  }).ToArray();
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,NewBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\NewBatchTaskCommandTests.cs,NewBatchTaskCollectionParametersTest,The following statement contains a magic number: Assert.Equal(2' requestCollection.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,SetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\SetBatchTaskCommandTests.cs,SetBatchTaskParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Task.Constraints = new PSTaskConstraints(TimeSpan.FromHours(1)' TimeSpan.FromDays(2)' 5);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Tasks,SetBatchTaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\SetBatchTaskCommandTests.cs,SetBatchTaskParametersGetPassedToRequestTest,The following statement contains a magic number: cmdlet.Task.Constraints = new PSTaskConstraints(TimeSpan.FromHours(1)' TimeSpan.FromDays(2)' 5);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksWithoutFiltersTest,The following statement contains a magic number: int[] idsOfConstructedSubtasks = new[] { 1' 2' 3 };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksWithoutFiltersTest,The following statement contains a magic number: int[] idsOfConstructedSubtasks = new[] { 1' 2' 3 };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksWithoutFiltersTest,The following statement contains a magic number: Assert.Equal(3' pipeline.Count);
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksMaxCountTest,The following statement contains a magic number: int maxCount = 2;
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksMaxCountTest,The following statement contains a magic number: int[] idsOfConstructedSubtasks = new[] { 1' 2' 3 };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksMaxCountTest,The following statement contains a magic number: int[] idsOfConstructedSubtasks = new[] { 1' 2' 3 };
Magic Number,Microsoft.Azure.Commands.Batch.Test.Subtasks,GetBatchSubtaskCommandTests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Batch\Batch.Test\Tasks\GetBatchSubtaskCommandTests.cs,ListBatchSubtasksMaxCountTest,The following statement contains a magic number: cmdlet.MaxCount = -5;
