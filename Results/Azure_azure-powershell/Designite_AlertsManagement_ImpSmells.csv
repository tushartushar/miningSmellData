Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,The method has 155 lines of code.
Complex Method,Microsoft.Azure.Commands.AlertsManagement,RemoveAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\RemoveAzureActionRule.cs,ProcessRecordInternal,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ParseConditions,Cyclomatic complexity of the method is 8
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,GetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\GetAzureActionRule.cs,,The length of the parameter ListActionRulesByTargetResourceIdParameterSet is 45.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,,The length of the parameter BySimplifiedFormatSuppressionActionRuleParameterSet is 51.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,,The length of the parameter BySimplifiedFormatActionGroupActionRuleParameterSet is 51.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,,The length of the parameter BySimplifiedFormatDiagnosticsActionRuleParameterSet is 51.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,UpdateAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\UpdateAzureActionRule.cs,,The length of the parameter ByNameSimplifiedPatchParameterSet is 33.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,GetAzureAlertCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\GetAzureAlert.cs,,The length of the parameter AlertsListByFilterParameterSet is 30.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,GetAzureAlertCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\GetAzureAlert.cs,,The length of the parameter AlertsListByTargetResourceIdFilterParameterSet is 46.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,MeasureAzureAlertStatistic,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\MeasureAzureAlertStatistic.cs,,The length of the parameter SummaryTargetResourceIdFilterParameterSet is 41.
Long Identifier,Microsoft.Azure.Commands.AlertsManagement,GetAzureSmartGroup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\SmartGroupCommands\GetAzureSmartGroup.cs,,The length of the parameter SmartGroupsListByFilterParameterSet is 35.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,GetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\GetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                                pageResult = this.AlertsManagementClient.ActionRules.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink).Result.Body; " is 124.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,GetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\GetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                                pageResult = this.AlertsManagementClient.ActionRules.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink).Result.Body; " is 123.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,GetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\GetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                    var rulebyName = this.AlertsManagementClient.ActionRules.GetByNameWithHttpMessagesAsync(ResourceGroupName' Name).Result.Body; " is 125.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,GetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\GetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                    var ruleById = this.AlertsManagementClient.ActionRules.GetByNameWithHttpMessagesAsync(info.ResourceGroupName' info.Resource).Result.Body; " is 137.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                                    resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: actionGroupARFromInputObject).Result.Body; " is 128.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                                    resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: suppressionARFromInputObject).Result.Body; " is 128.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,The length of the statement  "                                    resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: diagnosticsARFromInputObject).Result.Body; " is 128.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,UpdateAzureAlertState,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\UpdateAzureAlertState.cs,ProcessRecordInternal,The length of the statement  "                PSAlert alert = new PSAlert(this.AlertsManagementClient.Alerts.ChangeStateWithHttpMessagesAsync(id' State).Result.Body); " is 120.
Long Statement,Microsoft.Azure.Commands.AlertsManagement,GetAzureSmartGroup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\SmartGroupCommands\GetAzureSmartGroup.cs,ProcessRecordInternal,The length of the statement  "                    PSSmartGroup smartGroup = new PSSmartGroup(this.AlertsManagementClient.SmartGroups.GetByIdWithHttpMessagesAsync(id).Result.Body); " is 129.
Magic Number,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,DetermineScopeType,The following statement contains a magic number: tokens.Length == 5
Magic Number,Microsoft.Azure.Commands.AlertsManagement,CommonUtils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\Commons\CommonUtils.cs,ExtractFromActionRuleResourceId,The following statement contains a magic number: info.ResourceGroupName = tokens[4];
Magic Number,Microsoft.Azure.Commands.AlertsManagement,CommonUtils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\Commons\CommonUtils.cs,ExtractFromActionRuleResourceId,The following statement contains a magic number: info.Resource = tokens[8];
Magic Number,Microsoft.Azure.Commands.AlertsManagement,CommonUtils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\Commons\CommonUtils.cs,ExtractFromActionRuleResourceId,The following statement contains a magic number: tokens.Length == 9
Missing Default,Microsoft.Azure.Commands.AlertsManagement,GetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\GetAzureActionRule.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ListActionRulesParameterSet:                  case ListActionRulesByTargetResourceIdParameterSet:                      IPage<ActionRule> pageResult = new Page<ActionRule>();                      List<ActionRule> resultList = new List<ActionRule>();                      bool listByResourceGroup = false;                        if (string.IsNullOrWhiteSpace(ResourceGroupName))                      {                          pageResult = this.AlertsManagementClient.ActionRules.ListBySubscriptionWithHttpMessagesAsync(                              targetResource: TargetResourceId'                              targetResourceType: TargetResourceType'                              targetResourceGroup: TargetResourceGroup'                              monitorService: MonitorService'                              severity: Severity'                              alertRuleId: AlertRuleId'                              impactedScope: ImpactedScope'                              actionGroup: ActionGroup'                              description: Description'                              name: Name                          ).Result.Body;                            listByResourceGroup = false;                      }                      else                      {                          pageResult = this.AlertsManagementClient.ActionRules.ListByResourceGroupWithHttpMessagesAsync(                              resourceGroupName: ResourceGroupName'                              targetResource: TargetResourceId'                              targetResourceType: TargetResourceType'                              targetResourceGroup: TargetResourceGroup'                              monitorService: MonitorService'                              severity: Severity'                              alertRuleId: AlertRuleId'                              impactedScope: ImpactedScope'                              actionGroup: ActionGroup'                              description: Description'                              name: Name                          ).Result.Body;                            listByResourceGroup = true;                      }                        // Deal with paging in response                      ulong first = MyInvocation.BoundParameters.ContainsKey("First") ? this.PagingParameters.First : ulong.MaxValue;                      ulong skip = MyInvocation.BoundParameters.ContainsKey("Skip") ? this.PagingParameters.Skip : 0;                        // Any items before this count should be return                      ulong lastCount = MyInvocation.BoundParameters.ContainsKey("First") ? skip + first : ulong.MaxValue;                      ulong currentCount = 0;                      var nextPageLink = pageResult.NextPageLink;                        do                      {                          List<ActionRule> tempList = pageResult.ToList();                          if (currentCount + (ulong)tempList.Count - 1 < skip)                          {                              // skip the whole chunk if they are all in skip                              currentCount += (ulong)tempList.Count;                          }                          else                          {                              foreach (ActionRule currentActionRule in tempList)                              {                                  // not return "skip" count of items in the begin' and only return "first" count of items after that.                                  if (currentCount >= skip && currentCount < lastCount)                                  {                                      resultList.Add(currentActionRule);                                  }                                  currentCount++;                                  if (currentCount >= lastCount)                                  {                                      break;                                  }                              }                          }                            if (!string.IsNullOrEmpty(nextPageLink))                          {                              if (listByResourceGroup)                              {                                  pageResult = this.AlertsManagementClient.ActionRules.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink).Result.Body;                              }                              else                              {                                  pageResult = this.AlertsManagementClient.ActionRules.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink).Result.Body;                              }                              nextPageLink = pageResult.NextPageLink;                          }                        } while (!string.IsNullOrEmpty(nextPageLink) && currentCount < lastCount);                        WriteObject(resultList.Select((r) => TransformOutput(r))' enumerateCollection: true);                      break;                    case ActionRuleByNameParameterSet:                      var rulebyName = this.AlertsManagementClient.ActionRules.GetByNameWithHttpMessagesAsync(ResourceGroupName' Name).Result.Body;                      WriteObject(sendToPipeline: TransformOutput(rulebyName));                      break;                    case ResourceIdParameterSet:                      ExtractedInfo info = CommonUtils.ExtractFromActionRuleResourceId(ResourceId);                      var ruleById = this.AlertsManagementClient.ActionRules.GetByNameWithHttpMessagesAsync(info.ResourceGroupName' info.Resource).Result.Body;                      WriteObject(sendToPipeline: TransformOutput(ruleById));                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,RemoveAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\RemoveAzureActionRule.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ByResourceIdParameterSet:                      if (ShouldProcess(                          target: string.Format(Resources.Target' this.ResourceId)'                          action: Resources.RemoveActionRule_Action))                      {                          var extractedInfo = CommonUtils.ExtractFromActionRuleResourceId(ResourceId);                          isDeleted = this.AlertsManagementClient.ActionRules.DeleteWithHttpMessagesAsync(                              resourceGroupName: extractedInfo.ResourceGroupName'                              actionRuleName: extractedInfo.Resource)                              .Result.Body;                      }                        if (PassThru.IsPresent)                      {                          WriteObject(isDeleted);                      }                      break;                                    case ByInputObjectParameterSet:                      if (ShouldProcess(                          target: string.Format(Resources.Target' this.InputObject.Id)'                          action: Resources.RemoveActionRule_Action))                      {                          var extractedInfo = CommonUtils.ExtractFromActionRuleResourceId(InputObject.Id);                          isDeleted = this.AlertsManagementClient.ActionRules.DeleteWithHttpMessagesAsync(                              resourceGroupName: extractedInfo.ResourceGroupName'                              actionRuleName: extractedInfo.Resource)                              .Result.Body;                      }                        if (PassThru.IsPresent)                      {                          WriteObject(isDeleted);                      }                        break;                                    case ByNameParameterSet:                      if (ShouldProcess(                         target: string.Format(Resources.TargetWithRG' this.Name' this.ResourceGroupName)'                         action: Resources.RemoveActionRule_Action))                      {                          isDeleted = this.AlertsManagementClient.ActionRules.DeleteWithHttpMessagesAsync(                              resourceGroupName: ResourceGroupName'                              actionRuleName: Name)                              .Result.Body;                      }                        if (PassThru.IsPresent)                      {                          WriteObject(isDeleted);                      }                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case BySimplifiedFormatActionGroupActionRuleParameterSet:                          if (ActionRuleType != "ActionGroup")                          {                              throw new PSInvalidOperationException(string.Format(Resources.IncorrectActionRuleType_Exception' "ActionGroup"));                          }                            // Create Action Rule                          ActionRule actionGroupAR = new ActionRule(                              location: "Global"'                              tags: new Dictionary<string' string>()'                              properties: new ActionGroup(                                  scope: ParseScope()'                                  conditions: ParseConditions()'                                  actionGroupId: ActionGroupId'                                  description: Description'                                  status: Status                              )                          );                            result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                              resourceGroupName: ResourceGroupName' actionRuleName: Name' actionRule: actionGroupAR).Result.Body;                          break;                        case BySimplifiedFormatSuppressionActionRuleParameterSet:                            if (ActionRuleType != "Suppression")                          {                              throw new PSInvalidOperationException(string.Format(Resources.IncorrectActionRuleType_Exception' "Suppression"));                          }                            SuppressionConfig config = new SuppressionConfig(recurrenceType: ReccurenceType);                          if (ReccurenceType != "Always")                          {                              config.Schedule = new SuppressionSchedule(                                  startDate: SuppressionStartTime.Split(' ')[0]'                                  endDate: SuppressionEndTime.Split(' ')[0]'                                  startTime: SuppressionStartTime.Split(' ')[1]'                                  endTime: SuppressionEndTime.Split(' ')[1]                                  );                                if (ReccurentValue.Length > 0)                              {                                  config.Schedule.RecurrenceValues = ReccurentValue.OfType<int?>().ToList();                              }                          }                            // Create Action Rule                          ActionRule suppressionAR = new ActionRule(                              location: "Global"'                              tags: new Dictionary<string' string>()'                              properties: new Suppression(                                  scope: ParseScope()'                                  conditions: ParseConditions()'                                  description: Description'                                  status: Status'                                  suppressionConfig: config                              )                          );                            result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                              resourceGroupName: ResourceGroupName' actionRuleName: Name' actionRule: suppressionAR).Result.Body;                          break;                        case BySimplifiedFormatDiagnosticsActionRuleParameterSet:                          if (ActionRuleType != "Diagnostics")                          {                              throw new PSInvalidOperationException(string.Format(Resources.IncorrectActionRuleType_Exception' "Diagnostics"));                          }                            // Create Action Rule                          ActionRule diagnosticsAR = new ActionRule(                              location: "Global"'                              tags: new Dictionary<string' string>()'                              properties: new Diagnostics(                                  scope: ParseScope()'                                  conditions: ParseConditions()'                                  description: Description'                                  status: Status                              )                          );                            result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                              resourceGroupName: ResourceGroupName' actionRuleName: Name' actionRule: diagnosticsAR).Result.Body;                            break;                      case ByInputObjectParameterSet:                          ExtractedInfo info = CommonUtils.ExtractFromActionRuleResourceId(InputObject.Id);                          switch (InputObject.ActionRuleType)                          {                              case "ActionGroup":                                  // Create Action Rule                                  PSActionGroupActionRule actionGroupInputObject = (PSActionGroupActionRule)InputObject;                                  ActionRule actionGroupARFromInputObject = new ActionRule(                                      location: "Global"'                                      tags: new Dictionary<string' string>()'                                      properties: new ActionGroup(                                          scope: JsonConvert.DeserializeObject<Scope>(actionGroupInputObject.Scope)'                                          conditions: JsonConvert.DeserializeObject<Conditions>(actionGroupInputObject.Conditions)'                                          actionGroupId: actionGroupInputObject.ActionGroupId'                                          description: actionGroupInputObject.Description'                                          status: actionGroupInputObject.Status                                      )                                  );                                    result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                                      resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: actionGroupARFromInputObject).Result.Body;                                  break;                                case "Suppression":                                  PSSuppressionActionRule suppressionInputObject = (PSSuppressionActionRule)InputObject;                                  SuppressionConfig configFromInputObject = new SuppressionConfig(recurrenceType: suppressionInputObject.RecurrenceType);                                  if (suppressionInputObject.RecurrenceType != "Always")                                  {                                      configFromInputObject.Schedule = new SuppressionSchedule(                                          startDate: suppressionInputObject.StartDate'                                          endDate: suppressionInputObject.EndDate'                                          startTime: suppressionInputObject.StartTime'                                          endTime: suppressionInputObject.EndTime                                          );                                        if (ReccurentValue.Length > 0)                                      {                                          configFromInputObject.Schedule.RecurrenceValues = suppressionInputObject.RecurrenceValues;                                      }                                  }                                    // Create Action Rule                                  ActionRule suppressionARFromInputObject = new ActionRule(                                      location: "Global"'                                      tags: new Dictionary<string' string>()'                                      properties: new Suppression(                                          scope: JsonConvert.DeserializeObject<Scope>(suppressionInputObject.Scope)'                                          conditions: JsonConvert.DeserializeObject<Conditions>(suppressionInputObject.Conditions)'                                          description: suppressionInputObject.Description'                                          status: suppressionInputObject.Status'                                          suppressionConfig: configFromInputObject                                      )                                  );                                    result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                                      resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: suppressionARFromInputObject).Result.Body;                                  break;                                case "Diagnostics":                                  // Create Action Rule                                  PSDiagnosticsActionRule diagnosticsInputObject = (PSDiagnosticsActionRule)InputObject;                                  ActionRule diagnosticsARFromInputObject = new ActionRule(                                      location: "Global"'                                      tags: new Dictionary<string' string>()'                                      properties: new Diagnostics(                                          scope: JsonConvert.DeserializeObject<Scope>(diagnosticsInputObject.Scope)'                                          conditions: JsonConvert.DeserializeObject<Conditions>(diagnosticsInputObject.Conditions)'                                          description: diagnosticsInputObject.Description'                                          status: diagnosticsInputObject.Status                                      )                                  );                                    result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                                      resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: diagnosticsARFromInputObject).Result.Body;                                  break;                          }                          break;                  }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,SetAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\SetAzureActionRule.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (InputObject.ActionRuleType)                          {                              case "ActionGroup":                                  // Create Action Rule                                  PSActionGroupActionRule actionGroupInputObject = (PSActionGroupActionRule)InputObject;                                  ActionRule actionGroupARFromInputObject = new ActionRule(                                      location: "Global"'                                      tags: new Dictionary<string' string>()'                                      properties: new ActionGroup(                                          scope: JsonConvert.DeserializeObject<Scope>(actionGroupInputObject.Scope)'                                          conditions: JsonConvert.DeserializeObject<Conditions>(actionGroupInputObject.Conditions)'                                          actionGroupId: actionGroupInputObject.ActionGroupId'                                          description: actionGroupInputObject.Description'                                          status: actionGroupInputObject.Status                                      )                                  );                                    result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                                      resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: actionGroupARFromInputObject).Result.Body;                                  break;                                case "Suppression":                                  PSSuppressionActionRule suppressionInputObject = (PSSuppressionActionRule)InputObject;                                  SuppressionConfig configFromInputObject = new SuppressionConfig(recurrenceType: suppressionInputObject.RecurrenceType);                                  if (suppressionInputObject.RecurrenceType != "Always")                                  {                                      configFromInputObject.Schedule = new SuppressionSchedule(                                          startDate: suppressionInputObject.StartDate'                                          endDate: suppressionInputObject.EndDate'                                          startTime: suppressionInputObject.StartTime'                                          endTime: suppressionInputObject.EndTime                                          );                                        if (ReccurentValue.Length > 0)                                      {                                          configFromInputObject.Schedule.RecurrenceValues = suppressionInputObject.RecurrenceValues;                                      }                                  }                                    // Create Action Rule                                  ActionRule suppressionARFromInputObject = new ActionRule(                                      location: "Global"'                                      tags: new Dictionary<string' string>()'                                      properties: new Suppression(                                          scope: JsonConvert.DeserializeObject<Scope>(suppressionInputObject.Scope)'                                          conditions: JsonConvert.DeserializeObject<Conditions>(suppressionInputObject.Conditions)'                                          description: suppressionInputObject.Description'                                          status: suppressionInputObject.Status'                                          suppressionConfig: configFromInputObject                                      )                                  );                                    result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                                      resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: suppressionARFromInputObject).Result.Body;                                  break;                                case "Diagnostics":                                  // Create Action Rule                                  PSDiagnosticsActionRule diagnosticsInputObject = (PSDiagnosticsActionRule)InputObject;                                  ActionRule diagnosticsARFromInputObject = new ActionRule(                                      location: "Global"'                                      tags: new Dictionary<string' string>()'                                      properties: new Diagnostics(                                          scope: JsonConvert.DeserializeObject<Scope>(diagnosticsInputObject.Scope)'                                          conditions: JsonConvert.DeserializeObject<Conditions>(diagnosticsInputObject.Conditions)'                                          description: diagnosticsInputObject.Description'                                          status: diagnosticsInputObject.Status                                      )                                  );                                    result = this.AlertsManagementClient.ActionRules.CreateUpdateWithHttpMessagesAsync(                                      resourceGroupName: info.ResourceGroupName' actionRuleName: info.Resource' actionRule: diagnosticsARFromInputObject).Result.Body;                                  break;                          }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,UpdateAzureActionRule,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\ActionRuleCommands\UpdateAzureActionRule.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ByNameSimplifiedPatchParameterSet:                      if (ShouldProcess(                          target: string.Format(Resources.TargetWithRG' this.Name' this.ResourceGroupName)'                          action: Resources.CreateOrUpdateActionRule_Action))                      {                          updatedActionRule = new PSActionRule(this.AlertsManagementClient.ActionRules.UpdateWithHttpMessagesAsync(                          resourceGroupName: ResourceGroupName'                          actionRuleName: Name'                          actionRulePatch: new PatchObject(                                  status: Status'                                  tags: Tag                              )                          ).Result.Body);                      }                      break;                    case ByInputObjectParameterSet:                      if (ShouldProcess(                          target: string.Format(Resources.Target' this.InputObject.Id)'                          action: Resources.CreateOrUpdateActionRule_Action))                      {                          var extractedInfo = CommonUtils.ExtractFromActionRuleResourceId(InputObject.Id);                          updatedActionRule = new PSActionRule(this.AlertsManagementClient.ActionRules.UpdateWithHttpMessagesAsync(                              resourceGroupName: extractedInfo.ResourceGroupName'                              actionRuleName: extractedInfo.Resource'                              actionRulePatch: new PatchObject(                                      status: Status'                                      tags: Tag                                  )                              ).Result.Body);                      }                      break;                    case ByResourceIdParameterSet:                      if (ShouldProcess(                          target: string.Format(Resources.Target' this.ResourceId)'                          action: Resources.CreateOrUpdateActionRule_Action))                      {                          var info = CommonUtils.ExtractFromActionRuleResourceId(ResourceId);                          updatedActionRule = new PSActionRule(this.AlertsManagementClient.ActionRules.UpdateWithHttpMessagesAsync(                              resourceGroupName: info.ResourceGroupName'                              actionRuleName: info.Resource'                              actionRulePatch: new PatchObject(                                      status: Status'                                      tags: Tag                                  )                              ).Result.Body);                      }                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,GetAzureAlertCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\GetAzureAlert.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case AlertsListByFilterParameterSet:                  case AlertsListByTargetResourceIdFilterParameterSet:                      List<Alert> resultList = new List<Alert>();                      IPage<Alert> pageResult = new Page<Alert>();                      pageResult = this.AlertsManagementClient.Alerts.GetAllWithHttpMessagesAsync(                          targetResource: TargetResourceId'                          targetResourceType: TargetResourceType'                          targetResourceGroup: TargetResourceGroup'                          monitorService: MonitorService'                          monitorCondition: MonitorCondition'                          severity: Severity'                          alertState: State'                          alertRule: AlertRuleId'                          smartGroupId: SmartGroupId'                          includeContext: IncludeContext'                          includeEgressConfig: IncludeEgressConfig'                          pageCount: PageCount'                          sortBy: SortBy'                          sortOrder: SortOrder'                          timeRange: TimeRange'                          customTimeRange: CustomTimeRange'                          select: Select                          ).Result.Body;                        // Deal with paging in response                      ulong first = MyInvocation.BoundParameters.ContainsKey("First") ? this.PagingParameters.First : ulong.MaxValue;                      ulong skip = MyInvocation.BoundParameters.ContainsKey("Skip") ? this.PagingParameters.Skip : 0;                        // Any items before this count should be return                      ulong lastCount = MyInvocation.BoundParameters.ContainsKey("First") ? skip + first : ulong.MaxValue;                      ulong currentCount = 0;                      var nextPageLink = pageResult.NextPageLink;                        do                      {                          List<Alert> tempList = pageResult.ToList();                          if (currentCount + (ulong)tempList.Count - 1 < skip)                          {                              // skip the whole chunk if they are all in skip                              currentCount += (ulong)tempList.Count;                          }                          else                          {                              foreach (Alert currentAlert in tempList)                              {                                  // not return "skip" count of items in the begin' and only return "first" count of items after that.                                  if (currentCount >= skip && currentCount < lastCount)                                  {                                      resultList.Add(currentAlert);                                  }                                  currentCount++;                                  if (currentCount >= lastCount)                                  {                                      break;                                  }                              }                          }                            if (!string.IsNullOrEmpty(nextPageLink))                          {                              pageResult = this.AlertsManagementClient.Alerts.GetAllNextWithHttpMessagesAsync(nextPageLink).Result.Body;                              nextPageLink = pageResult.NextPageLink;                          }                        } while (!string.IsNullOrEmpty(nextPageLink) && currentCount < lastCount);                        WriteObject(resultList.Select((r) => new PSAlert(r))' enumerateCollection: true);                      break;                                    case AlertByIdParameterSet:                      string id = CommonUtils.GetIdFromARMResourceId(AlertId);                      PSAlert alert = new PSAlert(this.AlertsManagementClient.Alerts.GetByIdWithHttpMessagesAsync(id).Result.Body);                      WriteObject(sendToPipeline: alert);                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,GetAzureAlertObjectHistory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\GetAzureAlertObjectHistory.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ByIdParameterSet:                      id = CommonUtils.GetIdFromARMResourceId(AlertId);                      break;                    case ByInputObjectParameterSet:                      id = CommonUtils.GetIdFromARMResourceId(InputObject.Id);                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,MeasureAzureAlertStatistic,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\MeasureAzureAlertStatistic.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case SummaryFilterParameterSet:                  case SummaryTargetResourceIdFilterParameterSet:                      PSAlertsSummary summary = new PSAlertsSummary(this.AlertsManagementClient.Alerts.GetSummaryWithHttpMessagesAsync(                          groupby: GroupBy'                          targetResource: TargetResourceId'                          targetResourceType: TargetResourceType'                          targetResourceGroup: TargetResourceGroup'                          monitorService: MonitorService'                          monitorCondition: MonitorCondition'                          severity: Severity'                          alertState: State'                          alertRule: AlertRuleId'                          timeRange: TimeRange'                          customTimeRange: CustomTimeRange'                          includeSmartGroupsCount: IncludeSmartGroupsCount                          ).Result.Body);                        WriteObject(summary);                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,UpdateAzureAlertState,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\AlertCommands\UpdateAzureAlertState.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case ByIdParameterSet:                          id = CommonUtils.GetIdFromARMResourceId(AlertId);                          break;                        case ByInputObjectParameterSet:                          id = CommonUtils.GetIdFromARMResourceId(InputObject.Id);                          break;                  }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,GetAzureSmartGroup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\SmartGroupCommands\GetAzureSmartGroup.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case SmartGroupsListByFilterParameterSet:                      IPage<SmartGroup> pageResult = new Page<SmartGroup>();                      List<SmartGroup> resultList = new List<SmartGroup>();                      pageResult = this.AlertsManagementClient.SmartGroups.GetAllWithHttpMessagesAsync(                          sortBy: SortBy'                          sortOrder: SortOrder'                          timeRange: TimeRange                          ).Result.Body;                        // Deal with paging in response                      ulong first = MyInvocation.BoundParameters.ContainsKey("First") ? this.PagingParameters.First : ulong.MaxValue;                      ulong skip = MyInvocation.BoundParameters.ContainsKey("Skip") ? this.PagingParameters.Skip : 0;                        // Any items before this count should be return                      ulong lastCount = MyInvocation.BoundParameters.ContainsKey("First") ? skip + first : ulong.MaxValue;                      ulong currentCount = 0;                      var nextPageLink = pageResult.NextPageLink;                        do                      {                          List<SmartGroup> tempList = pageResult.ToList();                          if (currentCount + (ulong)tempList.Count - 1 < skip)                          {                              // skip the whole chunk if they are all in skip                              currentCount += (ulong)tempList.Count;                          }                          else                          {                              foreach (SmartGroup currentSmartGroup in tempList)                              {                                  // not return "skip" count of items in the begin' and only return "first" count of items after that.                                  if (currentCount >= skip && currentCount < lastCount)                                  {                                      resultList.Add(currentSmartGroup);                                  }                                  currentCount++;                                  if (currentCount >= lastCount)                                  {                                      break;                                  }                              }                          }                            if (!string.IsNullOrEmpty(nextPageLink))                          {                              pageResult = this.AlertsManagementClient.SmartGroups.GetAllNextWithHttpMessagesAsync(nextPageLink).Result.Body;                              nextPageLink = pageResult.NextPageLink;                          }                        } while (!string.IsNullOrEmpty(nextPageLink) && currentCount < lastCount);                        WriteObject(resultList.Select((r) => new PSSmartGroup(r))' enumerateCollection: true);                      break;                    case SmartGroupByIdParameterSet:                      string id = CommonUtils.GetIdFromARMResourceId(SmartGroupId);                      PSSmartGroup smartGroup = new PSSmartGroup(this.AlertsManagementClient.SmartGroups.GetByIdWithHttpMessagesAsync(id).Result.Body);                      WriteObject(sendToPipeline: smartGroup);                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,GetAzureSmartGroupHistory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\SmartGroupCommands\GetAzureSmartGroupHistory.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ByIdParameterSet:                      id = CommonUtils.GetIdFromARMResourceId(SmartGroupId);                      break;                    case ByInputObjectParameterSet:                      id = CommonUtils.GetIdFromARMResourceId(InputObject.Id);                      break;              }
Missing Default,Microsoft.Azure.Commands.AlertsManagement,UpdateAzureSmartGroupState,D:\research\architectureSmells\repos\Azure_azure-powershell\src\AlertsManagement\AlertsManagement\SmartGroupCommands\UpdateAzureSmartGroupState.cs,ProcessRecordInternal,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case ByIdParameterSet:                          id = CommonUtils.GetIdFromARMResourceId(SmartGroupId);                          break;                        case ByInputObjectParameterSet:                          id = CommonUtils.GetIdFromARMResourceId(InputObject.Id);                          break;                  }
