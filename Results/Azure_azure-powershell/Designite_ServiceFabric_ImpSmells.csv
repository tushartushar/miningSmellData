Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The method has 203 lines of code.
Long Method,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetOrCreateCertificateInformation,The method has 101 lines of code.
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ValidateCertParameters,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ParseTemplate,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzureRmServiceFabricClientCertificate,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzureRmServiceFabricClientCertificate.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzureRmServiceFabricNodeType.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetOrCreateCertificateInformation,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricDurability,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzureRmServiceFabricDurability.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Models,PSCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Models\PSCluster.cs,ToString,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetProfiles,The method has 5 parameters. Parameters: clusterId' vmExtProfile' osProfile' storageProfile' networkProfile
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,SetParameters,The method has 12 parameters. Parameters: parameters' keyVault' certificateUrl' thumbprint' durabilityLevel' reliability' location' clusterName' vmUserName' adminPassword' sku' vmSize
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ProxyResourceCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ProxyResourceCmdletBase.cs,CreateApplicationTypeVersion,The method has 5 parameters. Parameters: applicationTypeName' typeVersion' packageUrl' force' defaultParameters
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The method has 5 parameters. Parameters: subjectName' keyVaultUrl' thumbprint' certificateBundle' outputFilePath
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetKeyVaultReady,The method has 6 parameters. Parameters: vault' certificateBundle' thumbprint' pfxOutputPath' commonName' srcPfxPath
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,ImportCertificateToAzureKeyVault,The method has 6 parameters. Parameters: keyVaultName' certificateName' pfxFilePath' password' thumbprint' commonName
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,CreateBasicDeployment,The method has 5 parameters. Parameters: deploymentMode' templateFilePath' parameterFilePath' debugSetting' parameters
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,,The length of the parameter MultipleUpdatesWithCommonNameSet is 32.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,,The length of the parameter MultipleUpdatesWithThumbprintSet is 32.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,,The length of the parameter NewCreatedKeyVaultWaitTimeInSec is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,,The length of the parameter DefaultPermissionsToCertificates is 32.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricSettingsCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricSettingsCmdletBase.cs,,The length of the parameter updatedSettingsSectionDescriptionList is 37.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricClientCertificate is 37.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricClusterCertificate is 38.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricUpgradeType is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricDurability is 30.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricReliability is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\Constants.cs,,The length of the parameter DefaultClientConnectionEndpoint is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\Constants.cs,,The length of the parameter ServiceFabricWindowsNodeExtName is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Common\Constants.cs,,The length of the parameter applicationTypeVersionProvider is 30.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricClusterCertificate,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricClusterCertificate.cs,ExecuteCmdlet,The length of the statement  "                    patchRequest.CertificateCommonNames.CommonNames.Add(new ServerCertificateCommonName(this.CertificateCommonName' issuerTP)); " is 123.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetProfiles,The length of the statement  "                            WriteVerboseWithTimestamp(string.Format("GetProfiles: Found vmss {0} that corresponds to cluster id {1}"' vmss.Id' clusterId)); " is 127.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetProfiles,The length of the statement  "                                WriteVerboseWithTimestamp(string.Format("GetProfiles: Unable to get storageProfile and/or NetworkProfile from vmss id: {0}"' vmss.Id)); " is 135.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetProfiles,The length of the statement  "                throw new InvalidOperationException(string.Format(ServiceFabricProperties.Resources.VmExtensionNotFound' ResourceGroupName' clusterId)); " is 136.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricApplication.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzFabricApplicationType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricApplicationType.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appTypeRId.ParentResource}"); " is 191.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricApplicationTypeVersion.cs,GetByVersion,The length of the statement  "            var appTypeVersion = this.SFRPClient.ApplicationTypeVersions.Get(this.ResourceGroupName' this.ClusterName' this.Name' this.Version); " is 132.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricApplicationTypeVersion.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier appTypeRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appTypeVersionRId.ParentResource}"); " is 198.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricApplicationTypeVersion.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appTypeRId.ParentResource}"); " is 191.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricService.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier appRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{serviceRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,GetAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\GetAzServiceFabricService.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricApplication.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.ResourceGroupName' action: string.Format("Create new application. name {0}' typename: {1}' version {2}"' this.Name' this.ApplicationTypeName' this.ApplicationTypeVersion))) " is 203.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricApplication.cs,ExecuteCmdlet,The length of the statement  "                        CreateApplicationTypeVersion(this.ApplicationTypeName' this.ApplicationTypeVersion' this.PackageUrl' this.Force.IsPresent); " is 123.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricApplication.cs,CreateApplication,The length of the statement  "                    parameters: this.ApplicationParameter?.Cast<DictionaryEntry>().ToDictionary(d => d.Key as string' d => d.Value as string)' " is 122.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricApplicationTypeVersion.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.ResourceGroupName' action: string.Format("Create new application type version. typename: {0}' version {1}"' this.Name' this.Version))) " is 165.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricApplicationTypeVersion.cs,ExecuteCmdlet,The length of the statement  "                    var appTypeVersion = CreateApplicationTypeVersion(this.Name' this.Version' this.PackageUrl' this.Force.IsPresent' this.DefaultParameter); " is 137.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricService.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.ResourceGroupName' action: string.Format("Create new Service. name {0} in application: {1}' cluster {2}"' this.Name' this.ApplicationName' this.ClusterName))) " is 189.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricService.cs,ExecuteCmdlet,The length of the statement  "                        throw new PSInvalidOperationException(string.Format("Invalid service name' the application name must be a prefix of the service name' for example: '{0}'"' $"{this.ApplicationName}~{this.Name}")); " is 195.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricService.cs,SetParameters,The length of the statement  "            SetServiceParameter(template' parameters' "partitionDescription"' JObject.Parse($"{{\"partitionScheme\":\"{ParameterSetName.Split('-')[1]}\"}}")); " is 146.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzServiceFabricService.cs,WaitForDeployment,The length of the statement  "            var progress = new ProgressRecord(0' string.Format("Request for {0} in progress"' typeof(ServiceResource).Name)' "Starting..."); " is 128.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target:  this.ResourceGroupName' action: string.Format("Create new cluster {0}"' this.Name ?? this.ResourceGroupName))) " is 137.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ValidateCertParameters,The length of the statement  "                if (certificateThumbprint != null || secSourceVaultValue != null || secCertificateThumbprint != null || secCertificateUrlValue != null) " is 135.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ValidateCertParameters,The length of the statement  "                if (sourceVaultValue != null && certificateCommonName != null && certificateUrlValue != null && certificateIssuerThumbprint != null) " is 132.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ExtractParametersWithDefaultTemplate,The length of the statement  "            this.domainNameLabel = TryGetParameter((JObject)parameters' this.domainNameLabelParameter) ?? this.domainNameLabelParameter; " is 124.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ProxyResourceCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ProxyResourceCmdletBase.cs,CreateApplicationType,The length of the statement  "            return this.SFRPClient.ApplicationTypes.CreateOrUpdate(this.ResourceGroupName' this.ClusterName' applicationTypeName' new ApplicationTypeResource()); " is 149.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ProxyResourceCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ProxyResourceCmdletBase.cs,CreateApplicationTypeVersion,The length of the statement  "                        string.Format("{0} already exits but provisioning is in Failed state. Do you want to recreate the resource?"' resourceMessage)' " is 127.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ProxyResourceCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ProxyResourceCmdletBase.cs,CreateApplicationTypeVersion,The length of the statement  "                throw new PSInvalidOperationException(string.Format("ApplicationTypeVersion {0}:{1} is in provisioning state {2}"' applicationTypeName' typeVersion' appTypeVersion.ProvisioningState)); " is 184.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ProxyResourceCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ProxyResourceCmdletBase.cs,CreateOrUpdateApplicationTypeVersion,The length of the statement  "                    defaultParameterList: defaultParameters?.Cast<DictionaryEntry>().ToDictionary(d => d.Key as string' d => d.Value as string)); " is 125.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ProxyResourceCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ProxyResourceCmdletBase.cs,CreateOrUpdateApplicationTypeVersion,The length of the statement  "                () => string.Format("Provisioning state: {0}"' GetAppTypeVersionProvisioningStatus(applicationTypeName' typeVersion) ?? "Not found")); " is 134.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplication.cs,ExecuteCmdlet,The length of the statement  "            var resourceMessage = string.Format("Application '{0}' in resource group '{1}'' cluster name {2}"' this.Name' this.ResourceGroupName' this.ClusterName); " is 152.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplication.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzFabricApplicationType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationType.cs,ExecuteCmdlet,The length of the statement  "            var resourceMessage = string.Format("ApplicationType '{0}' in resource group '{1}'' cluster name {2}"' this.Name' this.ResourceGroupName' this.ClusterName); " is 156.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzFabricApplicationType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationType.cs,ExecuteCmdlet,The length of the statement  "                    "Do you want to remove the application type? This will remove all type versions under this resource. Please remove all applications under this resource before running this command."' " is 182.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzFabricApplicationType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationType.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appTypeRId.ParentResource}"); " is 191.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationTypeVersion.cs,ExecuteCmdlet,The length of the statement  "            var resourceMessage = string.Format("ApplicationType '{0}' in resource group '{1}'' cluster name {2}"' this.Name' this.ResourceGroupName' this.ClusterName); " is 156.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationTypeVersion.cs,ExecuteCmdlet,The length of the statement  "                    "Do you want to remove the application type version? Please remove all applications under this resource before running this command."' " is 134.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationTypeVersion.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier appTypeRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appTypeVersionRId.ParentResource}"); " is 198.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricApplicationTypeVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricApplicationTypeVersion.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appTypeRId.ParentResource}"); " is 191.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricService.cs,ExecuteCmdlet,The length of the statement  "            var resourceMessage = string.Format("Service '{0}' in application {1} in resource group '{2}'' cluster name {3}"' this.Name' this.ApplicationName' this.ResourceGroupName' this.ClusterName); " is 189.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricService.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier appRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{serviceRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzServiceFabricService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzServiceFabricService.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,Validate,The length of the statement  "                    throw new PSArgumentException(string.Format(ServiceFabricProperties.Resources.InvalidDirectory' this.CertificateOutputFolder)); " is 127.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "            while (retry-- >= 0 && operation != null && operation.Error == null && operation.Status.Equals("inProgress"' StringComparison.OrdinalIgnoreCase)) " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "                WriteVerboseWithTimestamp(string.Format("Creating self signed certificate {0} with status {1}"' this.keyVaultCertificateName' operation.Status)); " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "                var protectedCertificateBytes = certCollection.Export(X509ContentType.Pkcs12' this.CertificatePassword?.ConvertToString()); " is 123.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GeneratePfxName,The length of the statement  "            while (File.Exists(ret = Path.Combine(dir' string.Concat(this.keyVaultCertificateName' suffx' fileExt))) && ++retry <= 50) " is 122.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateAddOrRemoveCertVMSSTasks,The length of the statement  "                throw new ItemNotFoundException(string.Format(ServiceFabricProperties.Resources.NoVmssFoundForCluster' this.ResourceGroupName' clusterId)); " is 139.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetKeyVaultReady,The length of the statement  "                vault = CreateKeyVault(this.Name' this.KeyVaultName' this.KeyVaultResourceGroupLocation' this.KeyVaultResourceGroupName); " is 121.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetCertFromSecret,The length of the statement  "                throw new PSInvalidOperationException(string.Format("Failed to get certificate from secretUrl: {0}. Certcollection is empty"' secretUrl)); " is 138.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetCertFromSecret,The length of the statement  "                throw new PSInvalidOperationException(string.Format("Failed to get certificate from secretUrl: {0}. All certs in the chain are Certificate Authority"' secretUrl)); " is 163.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,RemoveCertFromVmssTask,The length of the statement  "                    if (secretGroup.VaultCertificates.Count() == 1 && secretGroup.VaultCertificates.First().CertificateUrl.Equals(certInformation.SecretUrl)) " is 137.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCmdlet.cs,GetDurabilityLevel,The length of the statement  "                throw new InvalidOperationException(string.Format(ServiceFabricProperties.Resources.SFExtensionNotFoundInVMSS' vmss.Name' vmss.Id)); " is 132.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,GetVmss,The length of the statement  "                            WriteVerboseWithTimestamp(string.Format("GetVmss: Found vmss {0} that corresponds to cluster id {1}"' vmss.Id' clusterId)); " is 123.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,StartRequestAndWait,The length of the statement  "                        result = this.SFRPClient.GetPutOrPatchOperationResultAsync(beginRequestResponse' null' default(CancellationToken)).GetAwaiter().GetResult(); " is 140.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,SetAzureRmServiceFabricSetting,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\SetAzureRmServiceFabricSetting.cs,ExecuteCmdlet,The length of the statement  "                    settings[setting.Name] = new System.Collections.Generic.Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase); " is 126.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,ExecuteCmdlet,The length of the statement  "                            throw new PSInvalidOperationException(string.Format("The application '{0}' is alrady running with type version '{1}'."' currentApp.Name' currentApp.TypeVersion)); " is 162.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,UpdateApplication,The length of the statement  "                    currentApp.Parameters = this.ApplicationParameter?.Cast<DictionaryEntry>().ToDictionary(d => d.Key as string' d => d.Value as string); " is 134.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,StartUpdate,The length of the statement  "                () => this.SFRPClient.Applications.BeginCreateOrUpdateWithHttpMessagesAsync(this.ResourceGroupName' this.ClusterName' this.Name' appResource)' " is 142.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                currentPolicy.RollingUpgradeMonitoringPolicy.HealthCheckRetryTimeout = TimeSpan.FromSeconds(HealthCheckRetryTimeoutSec).ToString("c"); " is 134.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                currentPolicy.RollingUpgradeMonitoringPolicy.HealthCheckWaitDuration = TimeSpan.FromSeconds(HealthCheckWaitDurationSec).ToString("c"); " is 134.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                currentPolicy.RollingUpgradeMonitoringPolicy.HealthCheckStableDuration = TimeSpan.FromSeconds(HealthCheckStableDurationSec).ToString("c"); " is 138.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                currentPolicy.RollingUpgradeMonitoringPolicy.UpgradeDomainTimeout = TimeSpan.FromSeconds(UpgradeDomainTimeoutSec).ToString("c"); " is 128.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                    currentPolicy.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy.MaxPercentUnhealthyPartitionsPerService = DefaultServiceTypeMaxPercentUnhealthyPartitionsPerService; " is 169.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                    currentPolicy.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy.MaxPercentUnhealthyReplicasPerPartition = DefaultServiceTypeMaxPercentUnhealthyReplicasPerPartition; " is 169.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                    currentPolicy.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy.MaxPercentUnhealthyServices = DefaultServiceTypeUnhealthyServicesMaxPercent; " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                    currentPolicy.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications = UnhealthyDeployedApplicationsMaxPercent; " is 120.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The length of the statement  "                    currentPolicy.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap.Add(entry.Key as string' this.ParseServiceTypeHealthPolicy(entry.Value as string)); " is 148.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,ParseServiceTypeHealthPolicy,The length of the statement  "                throw new ArgumentException("Invalid Service Type health policy' the input should follow the pattern & quot; &lt; MaxPercentUnhealthyPartitionsPerService & gt;'&lt; MaxPercentUnhealthyReplicasPerPartition & gt;'&lt; MaxPercentUnhealthyServices & gt; &quot;. And each value is byte.One example is “5'10'5”."); " is 308.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetParametersByResourceId,The length of the statement  "            ResourceIdentifier clusterRId = new ResourceIdentifier($"/subscriptions/{subscription}/resourceGroups/{this.ResourceGroupName}/providers/Microsoft.ServiceFabric/{appRId.ParentResource}"); " is 187.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricDurability,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzureRmServiceFabricDurability.cs,ExecuteCmdlet,The length of the statement  "                throw new InvalidOperationException(string.Format(ServiceFabricProperties.Resources.SFExtensionNotFoundInVMSS' vmss.Name' vmss.Id)); " is 132.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricDurability,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzureRmServiceFabricDurability.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.Name' action: string.Format("Update fabric durability level to {0} of {1}"' this.DurabilityLevel' this.NodeType))) " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricNodeBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzureRmServiceFabricNodeBase.cs,ExecuteCmdlet,The length of the statement  "            var updateTask = this.ComputeClient.VirtualMachineScaleSets.CreateOrUpdateAsync(this.ResourceGroupName' vmss.Name' vmss); " is 121.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricReliability,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzureRmServiceFabricReliability.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.Name' action: string.Format("Update fabric reliability level to {0}"' this.ReliabilityLevel))) " is 125.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricClusterCertificate,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricClusterCertificate.cs,ExecuteCmdlet,The conditional expression  "(this.CertificateCommonName != null && clusterResource.Certificate != null) ||                  (this.CertificateCommonName == null && clusterResource.CertificateCommonNames != null)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ValidateCertParameters,The conditional expression  "certificateThumbprint != null || secSourceVaultValue != null || secCertificateThumbprint != null || secCertificateUrlValue != null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ValidateCertParameters,The conditional expression  "sourceVaultValue != null && certificateCommonName != null && certificateUrlValue != null && certificateIssuerThumbprint != null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ParseTemplate,The conditional expression  "extSetting["durabilityLevel"] == null ||                                  extSetting["certificate"] == null ||                                  (extSetting["certificate"]["thumbprint"] == null &&                                  extSetting["certificate"]["commonNames"] == null)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,ParseArgumentsForThumbprint,The conditional expression  "(this.AdminClientThumbprint == null || !this.AdminClientThumbprint.Any()) &&                             (this.ReadonlyClientThumbprint == null || !this.ReadonlyClientThumbprint.Any())"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The conditional expression  "retry-- >= 0 && operation != null && operation.Error == null && operation.Status.Equals("inProgress"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricCmdletBase.cs,SafeGetResource,The conditional expression  "(e.Body?.Error != null &&                      (e.Body.Error.Code.Equals("ResourceGroupNotFound"' StringComparison.OrdinalIgnoreCase) ||                       e.Body.Error.Code.Equals("ResourceNotFound"' StringComparison.OrdinalIgnoreCase)||                       e.Body.Error.Code.Equals("NotFound"' StringComparison.OrdinalIgnoreCase))) ||                       e.Response?.StatusCode == System.Net.HttpStatusCode.NotFound"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Models,PSCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Models\PSCluster.cs,ToString,The conditional expression  "value is CertificateDescription ||                           value is AzureActiveDirectory ||                           value is DiagnosticsStorageAccountConfig ||                           value is ClusterUpgradePolicy ||                           value is EndpointRangeDescription ||                           value is ClusterHealthPolicy ||                           value is ClusterUpgradeDeltaHealthPolicy ||                           value is NodeTypeDescription"  is complex.
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAddressPoolName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAddressPoolName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAddressPoolName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAddressPoolName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAddressPoolName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAddressPoolName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAddressPoolName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Internal.Network.Version2017_10_01.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIdFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetSubnetAddressPrefix,The following statement contains a magic number: !segments[segments.Length - 2].Equals("subnets"' StringComparison.OrdinalIgnoreCase) ||                   !segments[segments.Length - 4].Equals("virtualNetworks"' StringComparison.OrdinalIgnoreCase) ||                  !segments[segments.Length - 8].Equals("resourceGroups"' StringComparison.OrdinalIgnoreCase)
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetSubnetAddressPrefix,The following statement contains a magic number: !segments[segments.Length - 2].Equals("subnets"' StringComparison.OrdinalIgnoreCase) ||                   !segments[segments.Length - 4].Equals("virtualNetworks"' StringComparison.OrdinalIgnoreCase) ||                  !segments[segments.Length - 8].Equals("resourceGroups"' StringComparison.OrdinalIgnoreCase)
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetSubnetAddressPrefix,The following statement contains a magic number: !segments[segments.Length - 2].Equals("subnets"' StringComparison.OrdinalIgnoreCase) ||                   !segments[segments.Length - 4].Equals("virtualNetworks"' StringComparison.OrdinalIgnoreCase) ||                  !segments[segments.Length - 8].Equals("resourceGroups"' StringComparison.OrdinalIgnoreCase)
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetSubnetAddressPrefix,The following statement contains a magic number: var subNetRG = segments[segments.Length - 7];
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetSubnetAddressPrefix,The following statement contains a magic number: var virtualNetworkName = segments[segments.Length - 3];
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,The following statement contains a magic number: plainPassword.Length < 12 || plainPassword.Length > 123
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,The following statement contains a magic number: plainPassword.Length < 12 || plainPassword.Length > 123
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,The following statement contains a magic number: requirements < 3
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The following statement contains a magic number: var retry = 120;
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GeneratePfxName,The following statement contains a magic number: File.Exists(ret = Path.Combine(dir' string.Concat(this.keyVaultCertificateName' suffx' fileExt))) && ++retry <= 50
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GeneratePfxName,The following statement contains a magic number: retry > 50
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateDefaultKeyVaultName,The following statement contains a magic number: sb.Length < 3
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateDefaultKeyVaultName,The following statement contains a magic number: return sb.ToString().Substring(0' 24);
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateDefaultKeyVaultName,The following statement contains a magic number: sb.Length > 24
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,ExtractSecretNameFromSecretIdentifier,The following statement contains a magic number: tokens.Length != 5
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,ExtractSecretNameFromSecretIdentifier,The following statement contains a magic number: vaultSecretName = tokens[3];
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,ExtractSecretNameFromSecretIdentifier,The following statement contains a magic number: version = tokens[4];
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The following statement contains a magic number: currentPolicy.RollingUpgradeMonitoringPolicy = new ArmRollingUpgradeMonitoringPolicy(                      failureAction: "Manual"'                      healthCheckStableDuration: TimeSpan.FromSeconds(120).ToString("c")'                      healthCheckRetryTimeout: TimeSpan.FromSeconds(600).ToString("c")'                      healthCheckWaitDuration: TimeSpan.FromSeconds(0).ToString("c")'                      upgradeTimeout: TimeSpan.MaxValue.ToString("c")'                      upgradeDomainTimeout: TimeSpan.MaxValue.ToString("c"));
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,SetUpgradePolicy,The following statement contains a magic number: currentPolicy.RollingUpgradeMonitoringPolicy = new ArmRollingUpgradeMonitoringPolicy(                      failureAction: "Manual"'                      healthCheckStableDuration: TimeSpan.FromSeconds(120).ToString("c")'                      healthCheckRetryTimeout: TimeSpan.FromSeconds(600).ToString("c")'                      healthCheckWaitDuration: TimeSpan.FromSeconds(0).ToString("c")'                      upgradeTimeout: TimeSpan.MaxValue.ToString("c")'                      upgradeDomainTimeout: TimeSpan.MaxValue.ToString("c"));
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,ParseServiceTypeHealthPolicy,The following statement contains a magic number: policyFields.Length != 3
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzServiceFabricApplication,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\UpdateAzServiceFabricApplication.cs,ParseServiceTypeHealthPolicy,The following statement contains a magic number: return new ArmServiceTypeHealthPolicy              {                  MaxPercentUnhealthyPartitionsPerService = int.Parse(policyFields[0])'                  MaxPercentUnhealthyReplicasPerPartition = int.Parse(policyFields[1])'                  MaxPercentUnhealthyServices = int.Parse(policyFields[2])              };
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricClientCertificate,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\AddAzureRmServiceFabricClientCertificate.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case SingleUpdateWithThumbprintSet:                      case MultipleUpdatesWithThumbprintSet:                          {                              var oldCertThumbprints = cluster.ClientCertificateThumbprints;                              var allCertThumbprints = ParseArgumentsForThumbprint();                                if (oldCertThumbprints != null)                              {                                  allCertThumbprints.AddRange(oldCertThumbprints);                              }                                var patchRequest = new ClusterUpdateParameters                              {                                  ClientCertificateThumbprints = allCertThumbprints'                                  ClientCertificateCommonNames = cluster.ClientCertificateCommonNames                              };                                var psCluster = SendPatchRequest(patchRequest);                              WriteObject(psCluster' true);                              break;                          }                        case SingleUpdateWithCommonNameSet:                      case MultipleUpdatesWithCommonNameSet:                          {                              var oldCommonNames = cluster.ClientCertificateCommonNames;                              var allNewCommonNames = ParseArgumentsForCommonName(false);                                if (oldCommonNames != null)                              {                                  allNewCommonNames.AddRange(oldCommonNames);                              }                                var patchRequest = new ClusterUpdateParameters                              {                                  ClientCertificateCommonNames = allNewCommonNames'                                  ClientCertificateThumbprints = cluster.ClientCertificateThumbprints                              };                                var psCluster = SendPatchRequest(patchRequest);                              WriteObject(psCluster' true);                              break;                          }                  }
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzureRmServiceFabricClientCertificate,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\RemoveAzureRmServiceFabricClientCertificate.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case SingleUpdateWithThumbprintSet:                      case MultipleUpdatesWithThumbprintSet:                      {                          var oldCertThumbprints = cluster.ClientCertificateThumbprints.Select(                              c => c.CertificateThumbprint).ToDictionary(                                  c => c'                                  StringComparer.OrdinalIgnoreCase);                            var toRemoveThumbprints = ParseArgumentsForThumbprint();                            if (oldCertThumbprints.Any())                          {                              var notExist = toRemoveThumbprints.SingleOrDefault(                                  c => !oldCertThumbprints.ContainsKey(                                      c.CertificateThumbprint));                                if (notExist != null)                              {                                  throw new PSArgumentException(                                      string.Format(                                          ServiceFabricProperties.Resources.CannotFindCertificateInCluster'                                          notExist.CertificateThumbprint));                              }                          }                          else                          {                              throw new PSArgumentException(                                  string.Format(                                      ServiceFabricProperties.Resources.NoneCertificateFound));                          }                            var thumbprintList = cluster.ClientCertificateThumbprints.ToList();                          foreach (var thumbprint in toRemoveThumbprints)                          {                              thumbprintList.RemoveAll(c => string.Equals(                                  c.CertificateThumbprint'                                  thumbprint.CertificateThumbprint'                                  StringComparison.InvariantCultureIgnoreCase));                          }                            var patchRequest = new ClusterUpdateParameters                          {                              ClientCertificateThumbprints = thumbprintList '                              ClientCertificateCommonNames = cluster.ClientCertificateCommonNames                          };                            var psCluster = SendPatchRequest(patchRequest);                          WriteObject(psCluster' true);                          break;                      }                        case SingleUpdateWithCommonNameSet:                      case MultipleUpdatesWithCommonNameSet:                      {                          var oldCommonNames = cluster.ClientCertificateCommonNames                              .GroupBy(c => c.CertificateCommonName + c.CertificateIssuerThumbprint'                                  StringComparer.OrdinalIgnoreCase)                              .ToDictionary(c => c.Key' c => c.First()' StringComparer.OrdinalIgnoreCase);                            var toRemoveCommonName = ParseArgumentsForCommonName(true);                            if (oldCommonNames.Any())                          {                              var notExist = toRemoveCommonName.SingleOrDefault(                                  c => !oldCommonNames.ContainsKey(                                      c.CertificateCommonName + c.CertificateIssuerThumbprint));                                if (notExist != null)                              {                                  throw new PSArgumentException(                                      string.Format(                                          ServiceFabricProperties.Resources.CannotFindCommonNameAndIssuer'                                          notExist.CertificateCommonName'                                          notExist.CertificateIssuerThumbprint));                              }                          }                          else                          {                              throw new PSArgumentException(string.Format(                                  ServiceFabricProperties.Resources.NoneCertificateFound));                          }                            var commonNames = cluster.ClientCertificateCommonNames.ToList();                          foreach (var commonName in toRemoveCommonName)                          {                              commonNames.RemoveAll(c => string.Equals(                                  commonName.CertificateCommonName + commonName.CertificateIssuerThumbprint'                                  c.CertificateCommonName + c.CertificateIssuerThumbprint'                                  StringComparison.OrdinalIgnoreCase));                          }                            var patchRequest = new ClusterUpdateParameters                          {                              ClientCertificateCommonNames = commonNames'                              ClientCertificateThumbprints = cluster.ClientCertificateThumbprints                          };                            var psCluster = SendPatchRequest(patchRequest);                          WriteObject(psCluster' true);                          break;                      }                  }
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,ParseArgumentsForThumbprint,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case MultipleUpdatesWithThumbprintSet:                      {                            if ((this.AdminClientThumbprint == null || !this.AdminClientThumbprint.Any()) &&                             (this.ReadonlyClientThumbprint == null || !this.ReadonlyClientThumbprint.Any()))                          {                              throw new PSArgumentException(                                  "Both AdminClientThumbprints and ReadonlyClientThumbprints are empty");                          }                            if (this.AdminClientThumbprint != null && this.AdminClientThumbprint.Any())                          {                              allCertThumbprints.AddRange(                                  this.AdminClientThumbprint.Select(t => new ClientCertificateThumbprint()                                  {                                      CertificateThumbprint = t'                                      IsAdmin = true                                  }));                          }                            if (this.ReadonlyClientThumbprint != null && this.ReadonlyClientThumbprint.Any())                          {                              allCertThumbprints.AddRange(                                  this.ReadonlyClientThumbprint.Select(t => new ClientCertificateThumbprint()                                  {                                      CertificateThumbprint = t'                                      IsAdmin = false                                  }));                          }                            return allCertThumbprints;                      }                    case SingleUpdateWithThumbprintSet:                        {                          allCertThumbprints.Add(new ClientCertificateThumbprint()                          {                              CertificateThumbprint = this.Thumbprint'                              IsAdmin = this.IsAdmin                          });                          return allCertThumbprints;                      }              }
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\ServiceFabric\ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,ParseArgumentsForCommonName,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case MultipleUpdatesWithCommonNameSet:                      {                          allCommonNames = this.ClientCertificateCommonName.Select(                              c => new ClientCertificateCommonName(                                  c.IsAdmin'                                  c.CertificateCommonName'                                  c.CertificateIssuerThumbprint)).ToList();                          break;                      }                  case SingleUpdateWithCommonNameSet:                        {                          allCommonNames.Add(                              new ClientCertificateCommonName()                              {                                  CertificateCommonName = this.CommonName'                                  CertificateIssuerThumbprint = this.IssuerThumbprint'                                  IsAdmin = this.IsAdmin                              });                          break;                      }              }
