Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The method has 103 lines of code.
Long Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The method has 106 lines of code.
Complex Method,Microsoft.Azure.Commands.DataLakeStore,SetAzureDataLakeStoreAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\SetAzureRmDataLakeStoreAccount.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreClient.cs,CreateAccount,The method has 11 parameters. Parameters: resourceGroupName' accountName' defaultGroup' location' customTags' identity' config' trustedProviders' firewallRules' encryptionType' tier
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreClient.cs,UpdateAccount,The method has 9 parameters. Parameters: resourceGroupName' accountName' defaultGroup' providerState' firewallState' azureIpState' customTags' tier' userConfig
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreClient.cs,AddOrUpdateFirewallRule,The method has 6 parameters. Parameters: resourceGroupName' accountName' ruleName' startIp' endIp' runningCommand
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreClient.cs,AddOrUpdateTrustedProvider,The method has 5 parameters. Parameters: resourceGroupName' accountName' providerName' providerEndpoint' runningCommand
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The method has 5 parameters. Parameters: streamPath' accountName' numRows' encoding' reverse
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,PreviewFile,The method has 6 parameters. Parameters: filePath' accountName' bytesToPreview' offset' cmdletCancellationToken' cmdletRunningRequest
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The method has 11 parameters. Parameters: destinationPath' accountName' sourcePath' cmdletCancellationToken' threadCount' overwrite' resume' isBinary' isDownload' cmdletRunningRequest' parentProgress
Long Parameter List,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The method has 13 parameters. Parameters: destinationFolderPath' accountName' sourceFolderPath' cmdletCancellationToken' concurrentFileCount' perFileThreadCount' recursive' overwrite' resume' forceBinaryOrText' isBinary' isDownload' cmdletRunningRequest
Long Identifier,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\NewAzureRmDataLakeStoreAccount.cs,,The length of the parameter EncryptionDisabledParameterSetName is 34.
Long Identifier,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreCmdletBase.cs,,The length of the parameter filesystemRequestTimeoutInMinutes is 33.
Long Identifier,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,,The length of the parameter MaximumBytesPerDownloadRequest is 30.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureRmDataLakeStoreTrustedIdProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreTrustedIdProvider.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(new DataLakeStoreTrustedIdProvider(DataLakeStoreClient.GetTrustedProvider(ResourceGroupName' Account' Name))); " is 122.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,SetAzureRmDataLakeStoreItemExpiry,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\SetAzureRmDataLakeStoreItemExpiry.cs,ExecuteCmdlet,The length of the statement  "            if(!DataLakeStoreFileSystemClient.TestFileOrFolderExistence(Path.TransformedPath' Account' out filetype) || filetype == FileType.DIRECTORY) " is 139.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreItemAclEntry,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemAclEntry.cs,ExecuteCmdlet,The length of the statement  "            var toReturn = new List<DataLakeStoreItemAce>(DataLakeStoreItemAce.GetAclFromStatus(DataLakeStoreFileSystemClient.GetAclStatus(Path.TransformedPath' Account))); " is 160.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The length of the statement  "                            // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content " is 133.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The length of the statement  "                        using (var memStream = ((MemoryStream)DataLakeStoreFileSystemClient.PreviewFile(Path.TransformedPath' Account' Length' Offset' " is 126.
Long Statement,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Tail' encoding' reverse: true)' true); " is 125.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreClient.cs,TestAccount,The length of the statement  "                if ((ex.Response != null && ex.Response.StatusCode == HttpStatusCode.NotFound) || ex.Message.Contains(string.Format(Properties.Resources.FailedToDiscoverResourceGroup' accountName' " is 180.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreCmdletBase.cs,CreateAdlsClient,The length of the statement  "                    : clientFactory.CreateCustomArmClient<TClient>(context.Environment.GetEndpointAsUri(endpoint)' creds' string.Empty' clientFactory.GetCustomHandlers()); " is 151.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreCmdletBase.cs,CreateAdlsClient,The length of the statement  "                    ? clientFactory.CreateCustomArmClient<TClient>(creds' string.Empty' context.Environment.GetEndpoint(endpoint)' filesystemRequestTimeoutInMinutes) " is 145.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreCmdletBase.cs,CreateAdlsClient,The length of the statement  "                    : clientFactory.CreateCustomArmClient<TClient>(creds' string.Empty' context.Environment.GetEndpoint(endpoint)' filesystemRequestTimeoutInMinutes' clientFactory.GetCustomHandlers()); " is 181.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The length of the statement  "            // when reading backwards' this may change to ensure that we don't re-read data as we approach the beginning of the file. " is 121.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The length of the statement  "                using (var streamReader = new StreamReader(_client.FileSystem.Open(accountName' streamPath' dataPerRead' initialOffset)' encoding)) " is 131.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The length of the statement  "                    // Then' for tail' subtract the amount of data that we want to read from that location (so read up to where the new line would be). " is 131.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The length of the statement  "                        !reverse ? streamAsBytes.Length - 1 : 0'  // depending on if we are searching from the back or the front' the start index is either the front or back of the array " is 162.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,PreviewFile,The length of the statement  "                string.Format("Previewing file in DataLakeStore Store Location: {0}. Bytes to preview: {1}' from Offset: {2}"' filePath' " is 120.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,PreviewFile,The length of the statement  "            //TODO: defect: 4259238 (located here: http://vstfrd:8080/Azure/RD/_workitems/edit/4259238) needs to be resolved or the tracingadapter work around needs to be put back in " is 170.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The length of the statement  "            // Service client tracing is enabled' however issue: https://github.com/Azure/azure-powershell/issues/2499 is not yet resolved' so debug functionality can still potentially affect performance negatively. " is 203.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The length of the statement  "            if (!overwrite && (!isDownload && TestFileOrFolderExistence(destinationPath' accountName' out ignoredType) || (isDownload && File.Exists(destinationPath)))) " is 156.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The length of the statement  "                // Service client tracing is enabled' however issue: https://github.com/Azure/azure-powershell/issues/2499 is not yet resolved' so debug functionality can still potentially affect performance negatively. " is 203.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The length of the statement  "                            sourceFolderPath' recursive ? " recursively" : string.Empty' e.TotalFileLength - e.TransferredByteCount' e.TotalFileCount - e.TransferredFileCount); " is 148.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetFullAcl,The length of the statement  "            if (acl.AclStatus.Entries != null && acl.AclStatus.Permission.HasValue && acl.AclStatus.Permission.Value.ToString().Length >= 3) " is 128.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreTracingInterceptor,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreTracingInterceptor.cs,EnterMethod,The length of the statement  "            Logger.LogDebug("Enter {0}.{1} parameters:{2}' invocationId={3}"' instance' method' string.Join(";"' parameters.Select(p => string.Format("{0}={1}"' p.Key' p.Value)))' invocationId); " is 182.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreTracingInterceptor,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreTracingInterceptor.cs,TraceError,The length of the statement  "                Logger.LogError("ADLS exception occured: {0}' with message: {1}' invocationId={2}"' adlException.Body.RemoteException' adlException.Body.RemoteException.Message' invocationId); " is 176.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The length of the statement  "                        return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]); " is 127.
Long Statement,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The length of the statement  "                        return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]); " is 126.
Complex Conditional,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\NewAzureRmDataLakeStoreAccount.cs,ExecuteCmdlet,The conditional expression  "ex.Body != null && !string.IsNullOrEmpty(ex.Body.Code) && ex.Body.Code == "ResourceNotFound" ||                      ex.Message.Contains("ResourceNotFound")"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataLakeStore,NewAzureDataLakeStoreAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\NewAzureRmDataLakeStoreAccount.cs,ExecuteCmdlet,The conditional expression  "ex.Body != null && !string.IsNullOrEmpty(ex.Body.Code) &&                           ex.Body.Code == "ResourceGroupNotFound" || ex.Message.Contains("ResourceGroupNotFound")"  is complex.
Complex Conditional,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The conditional expression  "!overwrite && (!isDownload && TestFileOrFolderExistence(destinationPath' accountName' out ignoredType) || (isDownload && File.Exists(destinationPath)))"  is complex.
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: if (this.ParameterSetName.Equals(BaseParameterSetName' StringComparison.OrdinalIgnoreCase))              {                  ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          byte[] byteArray;                          if (Length <= 0)                          {                              Length = (long)DataLakeStoreFileSystemClient.GetFileStatus(Path.TransformedPath' Account).Length - Offset;                              if (Length > 1 * 1024 * 1024 && !Force)                              // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                              {                                  throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                              }                          }                            using (var memStream = ((MemoryStream)DataLakeStoreFileSystemClient.PreviewFile(Path.TransformedPath' Account' Length' Offset'                              CmdletCancellationToken' this)))                          {                              byteArray = memStream.ToArray();                          }                            if (UsingByteEncoding(Encoding))                          {                              WriteObject(byteArray);                          }                          else                          {                              WriteObject(BytesToString(byteArray' Encoding));                          }                      });              }              else if (this.ParameterSetName.Equals(HeadRowParameterSetName' StringComparison.OrdinalIgnoreCase))              {                                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Head' encoding)' true);              }              else              {                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Tail' encoding' reverse: true)' true);              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: if (this.ParameterSetName.Equals(BaseParameterSetName' StringComparison.OrdinalIgnoreCase))              {                  ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          byte[] byteArray;                          if (Length <= 0)                          {                              Length = (long)DataLakeStoreFileSystemClient.GetFileStatus(Path.TransformedPath' Account).Length - Offset;                              if (Length > 1 * 1024 * 1024 && !Force)                              // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                              {                                  throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                              }                          }                            using (var memStream = ((MemoryStream)DataLakeStoreFileSystemClient.PreviewFile(Path.TransformedPath' Account' Length' Offset'                              CmdletCancellationToken' this)))                          {                              byteArray = memStream.ToArray();                          }                            if (UsingByteEncoding(Encoding))                          {                              WriteObject(byteArray);                          }                          else                          {                              WriteObject(BytesToString(byteArray' Encoding));                          }                      });              }              else if (this.ParameterSetName.Equals(HeadRowParameterSetName' StringComparison.OrdinalIgnoreCase))              {                                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Head' encoding)' true);              }              else              {                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Tail' encoding' reverse: true)' true);              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: if (this.ParameterSetName.Equals(BaseParameterSetName' StringComparison.OrdinalIgnoreCase))              {                  ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          byte[] byteArray;                          if (Length <= 0)                          {                              Length = (long)DataLakeStoreFileSystemClient.GetFileStatus(Path.TransformedPath' Account).Length - Offset;                              if (Length > 1 * 1024 * 1024 && !Force)                              // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                              {                                  throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                              }                          }                            using (var memStream = ((MemoryStream)DataLakeStoreFileSystemClient.PreviewFile(Path.TransformedPath' Account' Length' Offset'                              CmdletCancellationToken' this)))                          {                              byteArray = memStream.ToArray();                          }                            if (UsingByteEncoding(Encoding))                          {                              WriteObject(byteArray);                          }                          else                          {                              WriteObject(BytesToString(byteArray' Encoding));                          }                      });              }              else if (this.ParameterSetName.Equals(HeadRowParameterSetName' StringComparison.OrdinalIgnoreCase))              {                                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Head' encoding)' true);              }              else              {                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Tail' encoding' reverse: true)' true);              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore,GetAzureDataLakeStoreContent,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Commands\GetAzureRmDataLakeStoreItemContent.cs,ExecuteCmdlet,The following statement contains a magic number: if (this.ParameterSetName.Equals(BaseParameterSetName' StringComparison.OrdinalIgnoreCase))              {                  ConfirmAction(                      Resources.DownloadFileDataMessage'                      Path.TransformedPath'                      () =>                      {                          byte[] byteArray;                          if (Length <= 0)                          {                              Length = (long)DataLakeStoreFileSystemClient.GetFileStatus(Path.TransformedPath' Account).Length - Offset;                              if (Length > 1 * 1024 * 1024 && !Force)                              // If content is greater than 1MB throw an error to the user to let them know they must pass in a length to preview this much content                              {                                  throw new InvalidOperationException(string.Format(Resources.FilePreviewTooLarge' 1 * 1024 * 1024' Length));                              }                          }                            using (var memStream = ((MemoryStream)DataLakeStoreFileSystemClient.PreviewFile(Path.TransformedPath' Account' Length' Offset'                              CmdletCancellationToken' this)))                          {                              byteArray = memStream.ToArray();                          }                            if (UsingByteEncoding(Encoding))                          {                              WriteObject(byteArray);                          }                          else                          {                              WriteObject(BytesToString(byteArray' Encoding));                          }                      });              }              else if (this.ParameterSetName.Equals(HeadRowParameterSetName' StringComparison.OrdinalIgnoreCase))              {                                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Head' encoding)' true);              }              else              {                  var encoding = GetEncoding(Encoding);                  WriteObject(DataLakeStoreFileSystemClient.GetStreamRows(Path.TransformedPath' Account' Tail' encoding' reverse: true)' true);              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The following statement contains a magic number: var dataPerRead = 4 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The following statement contains a magic number: var dataPerRead = 4 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetStreamRows,The following statement contains a magic number: var dataPerRead = 4 * 1024 * 1024;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,PreviewFile,The following statement contains a magic number: for (long i = 0; i < numRequests; i++)              {                  cmdletCancellationToken.ThrowIfCancellationRequested();                  progress.PercentComplete = (int)Math.Ceiling((i / numRequests) * 100);                  UpdateProgress(progress' cmdletRunningRequest);                    if (lengthToUse < bytesToRequest)                  {                      bytesToRequest = lengthToUse;                  }                  else                  {                      lengthToUse -= bytesToRequest;                  }                    var responseStream =                      ReadFromFile(                          filePath'                          accountName'                          currentOffset'                          bytesToRequest);                    responseStream.CopyTo(byteStream);                  currentOffset += bytesToRequest;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,PreviewFile,The following statement contains a magic number: if (cmdletRunningRequest != null && !cmdletCancellationToken.IsCancellationRequested)              {                  progress.PercentComplete = 100;                  progress.RecordType = ProgressRecordType.Completed;                  cmdletRunningRequest.WriteProgress(progress);              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The following statement contains a magic number: if (threadCount < 1)              {                  threadCount = 10; // 10 is the default per our documentation.              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The following statement contains a magic number: var progress = new ProgressRecord(                  uniqueActivityIdGenerator.Next(0' 10000000)'                  string.Format("{0} Data Lake Store Store"' isDownload ? "Download from" : "Upload to")'                  description)              {                  PercentComplete = 0              };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The following statement contains a magic number: progressTracker.ProgressChanged += (s' e) =>              {                  lock (ConsoleOutputLock)                  {                      var toSet = (int)(1.0 * e.TransferredByteCount / e.TotalFileLength * 100);                      // powershell defect protection. If' through some defect in                      // our progress tracking' the number is outside of 0 - 100'                      // powershell will crash if it is set to that value. Instead                      // just keep the value unchanged in that case.                      if (toSet < 0 || toSet > 100)                      {                          progress.PercentComplete = progress.PercentComplete;                      }                      else                      {                          progress.PercentComplete = toSet;                      }                  }              };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyFile,The following statement contains a magic number: progressTracker.ProgressChanged += (s' e) =>              {                  lock (ConsoleOutputLock)                  {                      var toSet = (int)(1.0 * e.TransferredByteCount / e.TotalFileLength * 100);                      // powershell defect protection. If' through some defect in                      // our progress tracking' the number is outside of 0 - 100'                      // powershell will crash if it is set to that value. Instead                      // just keep the value unchanged in that case.                      if (toSet < 0 || toSet > 100)                      {                          progress.PercentComplete = progress.PercentComplete;                      }                      else                      {                          progress.PercentComplete = toSet;                      }                  }              };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The following statement contains a magic number: var progress = new ProgressRecord(                  uniqueActivityIdGenerator.Next(0' 10000000)'                  string.Format("Copying Folder: {0}{1}. Total bytes remaining: {2}. Total files remaining: {3}"'                      sourceFolderPath' recursive ? " recursively" : string.Empty' totalBytes' totalFiles)'                  "Copy in progress...")              { PercentComplete = 0 };
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The following statement contains a magic number: try              {                  // Service client tracing is enabled' however issue: https://github.com/Azure/azure-powershell/issues/2499 is not yet resolved' so debug functionality can still potentially affect performance negatively.                  ServicePointManager.Expect100Continue = false;                    // On update from the Data Lake store uploader' capture the progress.                  var progressTracker = new System.Progress<TransferFolderProgress>();                  progressTracker.ProgressChanged += (s' e) =>                  {                      lock (ConsoleOutputLock)                      {                          var toSet = (int)(1.0 * e.TransferredByteCount / e.TotalFileLength * 100);                          // powershell defect protection. If' through some defect in                          // our progress tracking' the number is outside of 0 - 100'                          // powershell will crash if it is set to that value. Instead                          // just keep the value unchanged in that case.                          if (toSet < 0 || toSet > 100)                          {                              progress.PercentComplete = progress.PercentComplete;                          }                          else                          {                              progress.PercentComplete = toSet;                          }                          progress.Activity = string.Format("Copying Folder: {0}{1}. Total bytes remaining: {2}. Total files remaining: {3}"'                              sourceFolderPath' recursive ? " recursively" : string.Empty' e.TotalFileLength - e.TransferredByteCount' e.TotalFileCount - e.TransferredFileCount);                      }                  };                    Task transferTask;                  if (isDownload)                  {                      transferTask = Task.Run(() =>                      {                          cmdletCancellationToken.ThrowIfCancellationRequested();                          _client.FileSystem.DownloadFolder(                              accountName'                              sourceFolderPath'                              destinationFolderPath'                              perFileThreadCount'                              concurrentFileCount'                              resume'                              overwrite'                              recursive'                              progressTracker'                              cmdletCancellationToken);                          cmdletCancellationToken.ThrowIfCancellationRequested();                      }' cmdletCancellationToken);                  }                  else                  {                      transferTask = Task.Run(() =>                      {                          cmdletCancellationToken.ThrowIfCancellationRequested();                          _client.FileSystem.UploadFolder(                              accountName'                              sourceFolderPath'                              destinationFolderPath'                              perFileThreadCount'                              concurrentFileCount'                              resume'                              overwrite'                              isBinary'                              recursive'                              progressTracker'                              cmdletCancellationToken);                          cmdletCancellationToken.ThrowIfCancellationRequested();                      }' cmdletCancellationToken);                  }                    TrackUploadProgress(transferTask' progress' cmdletRunningRequest' cmdletCancellationToken);                    if (!cmdletCancellationToken.IsCancellationRequested)                  {                      progress.PercentComplete = 100;                      progress.RecordType = ProgressRecordType.Completed;                      UpdateProgress(progress' cmdletRunningRequest);                  }              }              catch (Exception e)              {                  throw new CloudException(string.Format(Properties.Resources.UploadFailedMessage' e));              }              finally              {                  ServicePointManager.Expect100Continue = previousExpect100;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The following statement contains a magic number: try              {                  // Service client tracing is enabled' however issue: https://github.com/Azure/azure-powershell/issues/2499 is not yet resolved' so debug functionality can still potentially affect performance negatively.                  ServicePointManager.Expect100Continue = false;                    // On update from the Data Lake store uploader' capture the progress.                  var progressTracker = new System.Progress<TransferFolderProgress>();                  progressTracker.ProgressChanged += (s' e) =>                  {                      lock (ConsoleOutputLock)                      {                          var toSet = (int)(1.0 * e.TransferredByteCount / e.TotalFileLength * 100);                          // powershell defect protection. If' through some defect in                          // our progress tracking' the number is outside of 0 - 100'                          // powershell will crash if it is set to that value. Instead                          // just keep the value unchanged in that case.                          if (toSet < 0 || toSet > 100)                          {                              progress.PercentComplete = progress.PercentComplete;                          }                          else                          {                              progress.PercentComplete = toSet;                          }                          progress.Activity = string.Format("Copying Folder: {0}{1}. Total bytes remaining: {2}. Total files remaining: {3}"'                              sourceFolderPath' recursive ? " recursively" : string.Empty' e.TotalFileLength - e.TransferredByteCount' e.TotalFileCount - e.TransferredFileCount);                      }                  };                    Task transferTask;                  if (isDownload)                  {                      transferTask = Task.Run(() =>                      {                          cmdletCancellationToken.ThrowIfCancellationRequested();                          _client.FileSystem.DownloadFolder(                              accountName'                              sourceFolderPath'                              destinationFolderPath'                              perFileThreadCount'                              concurrentFileCount'                              resume'                              overwrite'                              recursive'                              progressTracker'                              cmdletCancellationToken);                          cmdletCancellationToken.ThrowIfCancellationRequested();                      }' cmdletCancellationToken);                  }                  else                  {                      transferTask = Task.Run(() =>                      {                          cmdletCancellationToken.ThrowIfCancellationRequested();                          _client.FileSystem.UploadFolder(                              accountName'                              sourceFolderPath'                              destinationFolderPath'                              perFileThreadCount'                              concurrentFileCount'                              resume'                              overwrite'                              isBinary'                              recursive'                              progressTracker'                              cmdletCancellationToken);                          cmdletCancellationToken.ThrowIfCancellationRequested();                      }' cmdletCancellationToken);                  }                    TrackUploadProgress(transferTask' progress' cmdletRunningRequest' cmdletCancellationToken);                    if (!cmdletCancellationToken.IsCancellationRequested)                  {                      progress.PercentComplete = 100;                      progress.RecordType = ProgressRecordType.Completed;                      UpdateProgress(progress' cmdletRunningRequest);                  }              }              catch (Exception e)              {                  throw new CloudException(string.Format(Properties.Resources.UploadFailedMessage' e));              }              finally              {                  ServicePointManager.Expect100Continue = previousExpect100;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,CopyDirectory,The following statement contains a magic number: try              {                  // Service client tracing is enabled' however issue: https://github.com/Azure/azure-powershell/issues/2499 is not yet resolved' so debug functionality can still potentially affect performance negatively.                  ServicePointManager.Expect100Continue = false;                    // On update from the Data Lake store uploader' capture the progress.                  var progressTracker = new System.Progress<TransferFolderProgress>();                  progressTracker.ProgressChanged += (s' e) =>                  {                      lock (ConsoleOutputLock)                      {                          var toSet = (int)(1.0 * e.TransferredByteCount / e.TotalFileLength * 100);                          // powershell defect protection. If' through some defect in                          // our progress tracking' the number is outside of 0 - 100'                          // powershell will crash if it is set to that value. Instead                          // just keep the value unchanged in that case.                          if (toSet < 0 || toSet > 100)                          {                              progress.PercentComplete = progress.PercentComplete;                          }                          else                          {                              progress.PercentComplete = toSet;                          }                          progress.Activity = string.Format("Copying Folder: {0}{1}. Total bytes remaining: {2}. Total files remaining: {3}"'                              sourceFolderPath' recursive ? " recursively" : string.Empty' e.TotalFileLength - e.TransferredByteCount' e.TotalFileCount - e.TransferredFileCount);                      }                  };                    Task transferTask;                  if (isDownload)                  {                      transferTask = Task.Run(() =>                      {                          cmdletCancellationToken.ThrowIfCancellationRequested();                          _client.FileSystem.DownloadFolder(                              accountName'                              sourceFolderPath'                              destinationFolderPath'                              perFileThreadCount'                              concurrentFileCount'                              resume'                              overwrite'                              recursive'                              progressTracker'                              cmdletCancellationToken);                          cmdletCancellationToken.ThrowIfCancellationRequested();                      }' cmdletCancellationToken);                  }                  else                  {                      transferTask = Task.Run(() =>                      {                          cmdletCancellationToken.ThrowIfCancellationRequested();                          _client.FileSystem.UploadFolder(                              accountName'                              sourceFolderPath'                              destinationFolderPath'                              perFileThreadCount'                              concurrentFileCount'                              resume'                              overwrite'                              isBinary'                              recursive'                              progressTracker'                              cmdletCancellationToken);                          cmdletCancellationToken.ThrowIfCancellationRequested();                      }' cmdletCancellationToken);                  }                    TrackUploadProgress(transferTask' progress' cmdletRunningRequest' cmdletCancellationToken);                    if (!cmdletCancellationToken.IsCancellationRequested)                  {                      progress.PercentComplete = 100;                      progress.RecordType = ProgressRecordType.Completed;                      UpdateProgress(progress' cmdletRunningRequest);                  }              }              catch (Exception e)              {                  throw new CloudException(string.Format(Properties.Resources.UploadFailedMessage' e));              }              finally              {                  ServicePointManager.Expect100Continue = previousExpect100;              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,TrackUploadProgress,The following statement contains a magic number: var lastUpdate = DateTime.Now.Subtract(TimeSpan.FromSeconds(2));
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,TrackUploadProgress,The following statement contains a magic number: while (!uploadTask.IsCompleted && !uploadTask.IsCanceled)              {                  if (token.IsCancellationRequested)                  {                      // we are done tracking progress and will just break and let the task clean itself up.                      try                      {                          uploadTask.Wait();                      }                      catch (OperationCanceledException)                      {                          if (uploadTask.IsCanceled)                          {                              uploadTask.Dispose();                          }                      }                      catch (AggregateException ex)                      {                          if (ex.InnerExceptions.OfType<OperationCanceledException>().Any())                          {                              if (uploadTask.IsCanceled)                              {                                  uploadTask.Dispose();                              }                          }                          else                          {                              throw;                          }                      }                      break;                  }                    if (DateTime.Now - lastUpdate > TimeSpan.FromSeconds(1))                  {                      lock (ConsoleOutputLock)                      {                          if (commandToUpdateProgressFor != null && !token.IsCancellationRequested &&                              !commandToUpdateProgressFor.Stopping)                          {                              commandToUpdateProgressFor.WriteProgress(uploadProgress);                          }                      }                  }                    TestMockSupport.Delay(250);              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,TrackUploadProgress,The following statement contains a magic number: if (uploadTask.IsCanceled || token.IsCancellationRequested)              {                  uploadProgress.RecordType = ProgressRecordType.Completed;              }              else if (uploadTask.IsFaulted && uploadTask.Exception != null)              {                  // If there are errors' raise them to the user.                  if (uploadTask.Exception.InnerException != null)                  {                      // we only go three levels deep. This is the Inception rule.                      if (uploadTask.Exception.InnerException.InnerException != null)                      {                          throw uploadTask.Exception.InnerException.InnerException;                      }                        throw uploadTask.Exception.InnerException;                  }                    throw uploadTask.Exception;              }              else              {                  // finally execution is finished' set progress state to completed.                  uploadProgress.PercentComplete = 100;                  uploadProgress.RecordType = ProgressRecordType.Completed;                    if (commandToUpdateProgressFor != null)                  {                      commandToUpdateProgressFor.WriteProgress(uploadProgress);                  }              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,ToUnixTimeStampMs,The following statement contains a magic number: return (long)(date.UtcDateTime - new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetFullAcl,The following statement contains a magic number: if (acl.AclStatus.Entries != null && acl.AclStatus.Permission.HasValue && acl.AclStatus.Permission.Value.ToString().Length >= 3)              {                  var permissionString = acl.AclStatus.Permission.Value.ToString();                  var permissionLength = permissionString.Length;                  var ownerOctal = permissionString.ElementAt(permissionLength - 3).ToString();                  var groupOctal = permissionString.ElementAt(permissionLength - 2).ToString();                  var otherOctal = permissionString.ElementAt(permissionLength - 1).ToString();                    acl.AclStatus.Entries.Add(string.Format("user::{0}"' octalToPermission(int.Parse(ownerOctal))));                  acl.AclStatus.Entries.Add(string.Format("other::{0}"' octalToPermission(int.Parse(otherOctal))));                    if (!string.IsNullOrEmpty(acl.AclStatus.Entries.FirstOrDefault(e => e.StartsWith("group::"))))                  {                      acl.AclStatus.Entries.Add(string.Format("mask::{0}"' octalToPermission(int.Parse(groupOctal))));                  }                  else                  {                      acl.AclStatus.Entries.Add(string.Format("group::{0}"' octalToPermission(int.Parse(groupOctal))));                  }              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetFullAcl,The following statement contains a magic number: if (acl.AclStatus.Entries != null && acl.AclStatus.Permission.HasValue && acl.AclStatus.Permission.Value.ToString().Length >= 3)              {                  var permissionString = acl.AclStatus.Permission.Value.ToString();                  var permissionLength = permissionString.Length;                  var ownerOctal = permissionString.ElementAt(permissionLength - 3).ToString();                  var groupOctal = permissionString.ElementAt(permissionLength - 2).ToString();                  var otherOctal = permissionString.ElementAt(permissionLength - 1).ToString();                    acl.AclStatus.Entries.Add(string.Format("user::{0}"' octalToPermission(int.Parse(ownerOctal))));                  acl.AclStatus.Entries.Add(string.Format("other::{0}"' octalToPermission(int.Parse(otherOctal))));                    if (!string.IsNullOrEmpty(acl.AclStatus.Entries.FirstOrDefault(e => e.StartsWith("group::"))))                  {                      acl.AclStatus.Entries.Add(string.Format("mask::{0}"' octalToPermission(int.Parse(groupOctal))));                  }                  else                  {                      acl.AclStatus.Entries.Add(string.Format("group::{0}"' octalToPermission(int.Parse(groupOctal))));                  }              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,GetFullAcl,The following statement contains a magic number: if (acl.AclStatus.Entries != null && acl.AclStatus.Permission.HasValue && acl.AclStatus.Permission.Value.ToString().Length >= 3)              {                  var permissionString = acl.AclStatus.Permission.Value.ToString();                  var permissionLength = permissionString.Length;                  var ownerOctal = permissionString.ElementAt(permissionLength - 3).ToString();                  var groupOctal = permissionString.ElementAt(permissionLength - 2).ToString();                  var otherOctal = permissionString.ElementAt(permissionLength - 1).ToString();                    acl.AclStatus.Entries.Add(string.Format("user::{0}"' octalToPermission(int.Parse(ownerOctal))));                  acl.AclStatus.Entries.Add(string.Format("other::{0}"' octalToPermission(int.Parse(otherOctal))));                    if (!string.IsNullOrEmpty(acl.AclStatus.Entries.FirstOrDefault(e => e.StartsWith("group::"))))                  {                      acl.AclStatus.Entries.Add(string.Format("mask::{0}"' octalToPermission(int.Parse(groupOctal))));                  }                  else                  {                      acl.AclStatus.Entries.Add(string.Format("group::{0}"' octalToPermission(int.Parse(groupOctal))));                  }              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,octalToPermission,The following statement contains a magic number: return string.Format("{0}{1}{2}"'                  (octal & 4) > 0 ? "r" : "-"'                  (octal & 2) > 0 ? "w" : "-"'                  (octal & 1) > 0 ? "x" : "-");
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreFileSystemClient,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreFileSystemClient.cs,octalToPermission,The following statement contains a magic number: return string.Format("{0}{1}{2}"'                  (octal & 4) > 0 ? "r" : "-"'                  (octal & 2) > 0 ? "w" : "-"'                  (octal & 1) > 0 ? "x" : "-");
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItem,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItem.cs,DataLakeStoreItem,The following statement contains a magic number: try              {                  this.LastWriteTime = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddMilliseconds((long)this.ModificationTime).ToLocalTime();              }              catch(ArgumentOutOfRangeException)              {                  if(this.ModificationTime < 0)                  {                      // set last write time to the min DateTime                      this.LastWriteTime = DateTime.MinValue;                  }                  else                  {                      this.LastWriteTime = DateTime.MaxValue;                  }              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItem,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItem.cs,DataLakeStoreItem,The following statement contains a magic number: if (this.ExpirationTime.HasValue)              {                  try                  {                      this.Expiration = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).AddMilliseconds((long)this.ExpirationTime.GetValueOrDefault()).ToLocalTime();                  }                  catch (ArgumentOutOfRangeException)                  {                      if (this.ExpirationTime < 0)                      {                          // set last write time to the min DateTime                          this.Expiration = DateTime.MinValue;                      }                      else                      {                          this.Expiration = DateTime.MaxValue;                      }                  }              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: if (singleSpec.Length == 4 && singleSpec[0].ToLowerInvariant().Equals("default"))              {                  scope = DataLakeStoreEnums.ScopeType.Default;                  typeIndex = 1;              }              else if (singleSpec.Length != 3)              {                  throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: if (singleSpec.Length == 4 && singleSpec[0].ToLowerInvariant().Equals("default"))              {                  scope = DataLakeStoreEnums.ScopeType.Default;                  typeIndex = 1;              }              else if (singleSpec.Length != 3)              {                  throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemAce,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemAce.cs,Parse,The following statement contains a magic number: switch (singleSpec[typeIndex].ToLowerInvariant())              {                  case "group":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default group and regular group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owning group and regular owning group case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Group' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "user":                      if (!string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default user and regular user case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' singleSpec[typeIndex + 1]' singleSpec[typeIndex + 2]);                      }                      else if (string.IsNullOrEmpty(singleSpec[typeIndex + 1]))                      {                          // default owner and owner case                          return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.User' string.Empty' singleSpec[typeIndex + 2]);                      }                        throw new InvalidOperationException(string.Format(Resources.InvalidAce' aceString));                  case "mask":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Mask' string.Empty' singleSpec[typeIndex + 2]);                  case "other":                      return new DataLakeStoreItemAce(scope' DataLakeStoreEnums.AceType.Other' string.Empty' singleSpec[typeIndex + 2]);                  default:                      throw new CloudException(string.Format(Resources.InvalidParseAce' aceString));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: try              {                  var convertedPermissions = string.Empty;                    if (permissions.Length == 3)                  {                      // assume user passed in the octal                      convertedPermissions = permissions;                  }                  else if (permissions.Length == 9)                  {                      // confirm the string is valid                      if (!permissions.ToLowerInvariant().All(characters => "rwx-".Contains(characters)))                      {                          throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                      }                        // convert rwxrwxrwx into octal                      var charsRead = 0;                      var eachPermission = 0;                      foreach (var character in permissions)                      {                          switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }                            charsRead++;                            if (charsRead % 3 == 0)                          {                              convertedPermissions += eachPermission;                              eachPermission = 0;                          }                      }                  }                  else                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Now do the conversion into a short                  const short minSize = 0;                  const short maxSize = 1777;                    var parsedShort = short.Parse(convertedPermissions);                    if (parsedShort < minSize || parsedShort > maxSize)                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Create the friendly permissions list                  var friendlyPermissions = new Dictionary                      <DataLakeStoreEnums.PermissionScope' DataLakeStoreEnums.Permission>                  {                      {                          DataLakeStoreEnums.PermissionScope.User'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[0].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Group'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[1].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Other'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[2].ToString())                      }                  };                    return new DataLakeStoreItemPermissionInstance                  {                      PermissionsOctal = convertedPermissions'                      Permissions = friendlyPermissions                  };              }              catch              {                  throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: try              {                  var convertedPermissions = string.Empty;                    if (permissions.Length == 3)                  {                      // assume user passed in the octal                      convertedPermissions = permissions;                  }                  else if (permissions.Length == 9)                  {                      // confirm the string is valid                      if (!permissions.ToLowerInvariant().All(characters => "rwx-".Contains(characters)))                      {                          throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                      }                        // convert rwxrwxrwx into octal                      var charsRead = 0;                      var eachPermission = 0;                      foreach (var character in permissions)                      {                          switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }                            charsRead++;                            if (charsRead % 3 == 0)                          {                              convertedPermissions += eachPermission;                              eachPermission = 0;                          }                      }                  }                  else                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Now do the conversion into a short                  const short minSize = 0;                  const short maxSize = 1777;                    var parsedShort = short.Parse(convertedPermissions);                    if (parsedShort < minSize || parsedShort > maxSize)                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Create the friendly permissions list                  var friendlyPermissions = new Dictionary                      <DataLakeStoreEnums.PermissionScope' DataLakeStoreEnums.Permission>                  {                      {                          DataLakeStoreEnums.PermissionScope.User'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[0].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Group'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[1].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Other'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[2].ToString())                      }                  };                    return new DataLakeStoreItemPermissionInstance                  {                      PermissionsOctal = convertedPermissions'                      Permissions = friendlyPermissions                  };              }              catch              {                  throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: try              {                  var convertedPermissions = string.Empty;                    if (permissions.Length == 3)                  {                      // assume user passed in the octal                      convertedPermissions = permissions;                  }                  else if (permissions.Length == 9)                  {                      // confirm the string is valid                      if (!permissions.ToLowerInvariant().All(characters => "rwx-".Contains(characters)))                      {                          throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                      }                        // convert rwxrwxrwx into octal                      var charsRead = 0;                      var eachPermission = 0;                      foreach (var character in permissions)                      {                          switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }                            charsRead++;                            if (charsRead % 3 == 0)                          {                              convertedPermissions += eachPermission;                              eachPermission = 0;                          }                      }                  }                  else                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Now do the conversion into a short                  const short minSize = 0;                  const short maxSize = 1777;                    var parsedShort = short.Parse(convertedPermissions);                    if (parsedShort < minSize || parsedShort > maxSize)                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Create the friendly permissions list                  var friendlyPermissions = new Dictionary                      <DataLakeStoreEnums.PermissionScope' DataLakeStoreEnums.Permission>                  {                      {                          DataLakeStoreEnums.PermissionScope.User'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[0].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Group'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[1].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Other'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[2].ToString())                      }                  };                    return new DataLakeStoreItemPermissionInstance                  {                      PermissionsOctal = convertedPermissions'                      Permissions = friendlyPermissions                  };              }              catch              {                  throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: try              {                  var convertedPermissions = string.Empty;                    if (permissions.Length == 3)                  {                      // assume user passed in the octal                      convertedPermissions = permissions;                  }                  else if (permissions.Length == 9)                  {                      // confirm the string is valid                      if (!permissions.ToLowerInvariant().All(characters => "rwx-".Contains(characters)))                      {                          throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                      }                        // convert rwxrwxrwx into octal                      var charsRead = 0;                      var eachPermission = 0;                      foreach (var character in permissions)                      {                          switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }                            charsRead++;                            if (charsRead % 3 == 0)                          {                              convertedPermissions += eachPermission;                              eachPermission = 0;                          }                      }                  }                  else                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Now do the conversion into a short                  const short minSize = 0;                  const short maxSize = 1777;                    var parsedShort = short.Parse(convertedPermissions);                    if (parsedShort < minSize || parsedShort > maxSize)                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Create the friendly permissions list                  var friendlyPermissions = new Dictionary                      <DataLakeStoreEnums.PermissionScope' DataLakeStoreEnums.Permission>                  {                      {                          DataLakeStoreEnums.PermissionScope.User'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[0].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Group'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[1].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Other'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[2].ToString())                      }                  };                    return new DataLakeStoreItemPermissionInstance                  {                      PermissionsOctal = convertedPermissions'                      Permissions = friendlyPermissions                  };              }              catch              {                  throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));              }
Magic Number,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemPermissionInstance.cs,Parse,The following statement contains a magic number: try              {                  var convertedPermissions = string.Empty;                    if (permissions.Length == 3)                  {                      // assume user passed in the octal                      convertedPermissions = permissions;                  }                  else if (permissions.Length == 9)                  {                      // confirm the string is valid                      if (!permissions.ToLowerInvariant().All(characters => "rwx-".Contains(characters)))                      {                          throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                      }                        // convert rwxrwxrwx into octal                      var charsRead = 0;                      var eachPermission = 0;                      foreach (var character in permissions)                      {                          switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }                            charsRead++;                            if (charsRead % 3 == 0)                          {                              convertedPermissions += eachPermission;                              eachPermission = 0;                          }                      }                  }                  else                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Now do the conversion into a short                  const short minSize = 0;                  const short maxSize = 1777;                    var parsedShort = short.Parse(convertedPermissions);                    if (parsedShort < minSize || parsedShort > maxSize)                  {                      throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));                  }                    // Create the friendly permissions list                  var friendlyPermissions = new Dictionary                      <DataLakeStoreEnums.PermissionScope' DataLakeStoreEnums.Permission>                  {                      {                          DataLakeStoreEnums.PermissionScope.User'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[0].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Group'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[1].ToString())                      }'                      {                          DataLakeStoreEnums.PermissionScope.Other'                          (DataLakeStoreEnums.Permission) int.Parse(convertedPermissions[2].ToString())                      }                  };                    return new DataLakeStoreItemPermissionInstance                  {                      PermissionsOctal = convertedPermissions'                      Permissions = friendlyPermissions                  };              }              catch              {                  throw new ArgumentException(string.Format(Resources.InvalidPermissionString' permissions));              }
Missing Default,Microsoft.Azure.Commands.DataLakeStore.Models,DataLakeStoreItemPermissionInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\DataLakeStore\Commands.DataLakeStore\Models\DataLakeStoreItemPermissionInstance.cs,Parse,The following switch statement is missing a default case: switch (character)                          {                              case 'r':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Read;                                  break;                              case 'w':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Write;                                  break;                              case 'x':                                  eachPermission += (int)DataLakeStoreEnums.Permission.Execute;                                  break;                          }
