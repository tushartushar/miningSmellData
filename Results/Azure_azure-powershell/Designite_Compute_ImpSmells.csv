Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The method has 312 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The method has 453 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The method has 114 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The method has 102 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The method has 120 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The method has 191 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,UpdateVmEncryptionSettings,The method has 105 lines of code.
Long Method,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,GetSingleAstRequiredModules,The method has 110 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmContainerServiceConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ContainerService\Config\NewAzureRmContainerServiceConfigCommand.cs,Run,The method has 133 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\NewAzureRmDiskConfigCommand.cs,Run,The method has 138 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmGalleryImage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImage\GalleryImageCreateOrUpdateMethod.cs,ExecuteCmdlet,The method has 129 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmGalleryImage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImage\GalleryImageCreateOrUpdateMethod.cs,ExecuteCmdlet,The method has 147 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmImageOsDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Image\Config\SetAzureRmImageOsDiskCommand.cs,Run,The method has 144 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\NewAzureRmSnapshotConfigCommand.cs,Run,The method has 128 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The method has 342 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The method has 128 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The method has 216 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The method has 324 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The method has 738 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The method has 553 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation.Models,ComputeAutomationAutoMapperProfile,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Models\ComputeAutoMapperProfile.cs,Initialize,The method has 127 lines of code.
Complex Method,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute,AddAzureVMDataDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\AddAzureVMDataDiskCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute,AddAzureVMNetworkInterfaceCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\AddAzureVMNetworkInterfaceCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.Compute,NewAzureVMConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\NewAzureVMConfigCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Commands.Compute,SetAzureVMDataDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMDataDiskCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,Cyclomatic complexity of the method is 21
Complex Method,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetChildProperties,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Common,ComputeCloudException,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeCloudException.cs,GetErrorMessageWithRequestIdInfo,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPublicConfigFromXmlFile,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPrivateDiagnosticsConfiguration,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,Cyclomatic complexity of the method is 30
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetStatusFromInstanceView,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetAzureDiskEncryptionMode,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\GetAzureVmssDiskEncryptionStatus.cs,GetVmssDiskStatus,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,FindSnapshot,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmContainerServiceConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ContainerService\Config\NewAzureRmContainerServiceConfigCommand.cs,Run,Cyclomatic complexity of the method is 26
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskEncryptionSetConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DiskEncryptionSet\Config\NewAzureRmDiskEncryptionSetConfigCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\NewAzureRmDiskConfigCommand.cs,Run,Cyclomatic complexity of the method is 29
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskUpdateConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\NewAzureRmDiskUpdateConfigCommand.cs,Run,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskUpdateKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmImageConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Image\Config\NewAzureRmImageConfigCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmImageOsDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Image\Config\SetAzureRmImageOsDiskCommand.cs,Run,Cyclomatic complexity of the method is 31
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\NewAzureRmSnapshotConfigCommand.cs,Run,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotUpdateConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\NewAzureRmSnapshotUpdateConfigCommand.cs,Run,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,Cyclomatic complexity of the method is 76
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,Cyclomatic complexity of the method is 28
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,Cyclomatic complexity of the method is 46
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,Cyclomatic complexity of the method is 68
Complex Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,Cyclomatic complexity of the method is 184
Complex Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,Cyclomatic complexity of the method is 138
Complex Method,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,FillFromString,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,MoveNextInternal,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The method has 5 parameters. Parameters: obj' max' depth' tupleList' expand
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The method has 6 parameters. Parameters: storageAccountName' storageAccountKey' storageClient' storageContext' configurationPath' defaultContext
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,CreateStorageContext,The method has 6 parameters. Parameters: blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint' storageAccountName' storageAccountKey
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The method has 5 parameters. Parameters: publicConfigPath' privateConfigPath' resourceId' cmdlet' storageClient
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,Utils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\Utils.cs,DoesConfigSupportAcceleratedNetwork,The method has 5 parameters. Parameters: client' imageInfo' size' location' defaultLocation
Long Parameter List,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,LogProgress,The method has 5 parameters. Parameters: activityId' activity' precentComplete' remainingTime' avgThroughputMbps
Long Parameter List,Microsoft.Azure.Commands.Compute.Models,UploadParameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\UploadParameters.cs,UploadParameters,The method has 5 parameters. Parameters: destinationUri' baseImageUri' localFilePath' overWrite' numberOfUploaderThreads
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,AEMHelper,The method has 7 parameters. Parameters: errorAction' verboseAction' warningAction' ui' storageClient' subscription' storageEndpoint
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetExtensionVersion,The method has 5 parameters. Parameters: vm' vmStatus' osType' type' publisher
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,MonitoringPropertyExists,The method has 5 parameters. Parameters: CheckMessage' PropertyName' Properties' parentResult' expectedResult
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckMonitoringProperty,The method has 5 parameters. Parameters: CheckMessage' PropertyName' Properties' expectedValue' parentResult
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has 6 parameters. Parameters: StorageAccountName' TableName' FilterString' WaitChar' UseNewTableNames' TimeoutinMinutes
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckDiagnosticsTable,The method has 6 parameters. Parameters: storageAccountName' resId' host' waitChar' osType' TimeoutinMinutes
Long Parameter List,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,The method has 7 parameters. Parameters: configurationPath' configurationDataPath' additionalPath' configurationArchivePath' force' skipDependencyDetection' parameterSetName
Long Parameter List,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,PublishConfiguration,The method has 11 parameters. Parameters: configurationPath' configurationDataPath' additionalPath' outputArchivePath' storageEndpointSuffix' containerName' parameterSetName' force' skipDependencyDetection' storageCredentials' passThru
Long Parameter List,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The method has 6 parameters. Parameters: storageCredentials' storageEndpointSuffix' containerName' archivePath' force' passThru
Long Parameter List,Microsoft.Azure.Commands.Compute.StorageServices,SaveAzureVhdCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\SaveAzureVhdCommand.cs,DownloadFromBlobUri,The method has 7 parameters. Parameters: cmdlet' sourceUri' localFileInfo' storagekey' resourceGroupName' numThreads' overwrite
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ComputeStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ComputeStrategy.cs,Create,The method has 5 parameters. Parameters: provider' getOperations' getAsync' createOrUpdateAsync' createTime
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,The method has 5 parameters. Parameters: client' imageAndOsType' resourceGroupName' imageName' location
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,VirtualMachineScaleSetStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\VirtualMachineScaleSetStrategy.cs,CreateVirtualMachineScaleSetConfig,The method has 23 parameters. Parameters: resourceGroup' name' subnet' backendAdressPool' inboundNatPools' networkSecurityGroup' imageAndOsType' adminUsername' adminPassword' vmSize' instanceCount' identity' singlePlacementGroup' upgradeMode' dataDisks' zones' ultraSSDEnabled' proximityPlacementGroup' priority' evictionPolicy' maxPrice' scaleInPolicy' doNotRunExtensionsOnOverprovisionedVMs
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,VirtualMachineStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\VirtualMachineStrategy.cs,CreateVirtualMachineConfig,The method has 17 parameters. Parameters: resourceGroup' name' networkInterface' imageAndOsType' adminUsername' adminPassword' size' availabilitySet' identity' dataDisks' zones' ultraSSDEnabled' proximityPlacementGroup' hostId' priority' evictionPolicy' maxPrice
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,VirtualMachineStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\VirtualMachineStrategy.cs,CreateVirtualMachineConfig,The method has 16 parameters. Parameters: resourceGroup' name' networkInterface' osType' disk' size' availabilitySet' identity' dataDisks' zones' ultraSSDEnabled' proximityPlacementGroup' hostId' priority' evictionPolicy' maxPrice
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.Network,InboundNetPoolStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\InboundNetPoolStrategy.cs,CreateInboundNatPool,The method has 6 parameters. Parameters: loadBalancer' name' frontendIpConfiguration' frontendPortRangeStart' frontendPortRangeEnd' backendPort
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.Network,LoadBalancingRuleStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\LoadBalancingRuleStrategy.cs,CreateLoadBalancingRule,The method has 6 parameters. Parameters: loadBalancer' name' fronendIpConfiguration' backendAddressPool' frontendPort' backendPort
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.Network,NetworkInterfaceStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\NetworkInterfaceStrategy.cs,CreateNetworkInterfaceConfig,The method has 6 parameters. Parameters: resourceGroup' name' subnet' publicIPAddress' networkSecurityGroup' enableAcceleratedNetworking
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.Network,NetworkStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\NetworkStrategy.cs,Create,The method has 6 parameters. Parameters: provider' getOperations' getAsync' createOrUpdateAsync' createTime' compareExistingConfig
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.Network,PublicIPAddressStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\PublicIPAddressStrategy.cs,CreatePublicIPAddressConfig,The method has 6 parameters. Parameters: resourceGroup' name' domainNameLabel' allocationMethod' sku' zones
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,TryParseUri,The method has 7 parameters. Parameters: blobUri' storageAccountName' storageDomainName' blobContainerName' blobName' queryString' secret
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,BlobUri,The method has 6 parameters. Parameters: uri' storageAccountName' storageDomainName' blobContainerName' blobName' queryString
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Threading,Parallel,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Threading\Parallel.cs,ForEach,The method has 5 parameters. Parameters: source' argumentConstructor' body' finalize' parallelism
Long Parameter List,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\PatchingBlobCreator.cs,PatchingBlobCreator,The method has 5 parameters. Parameters: localVhd' destination' baseVhdBlob' blobObjectFactory' overWrite
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 5 parameters. Parameters: engine' param1' param2' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 6 parameters. Parameters: engine' param1' param2' param3' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 7 parameters. Parameters: engine' param1' param2' param3' param4' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 8 parameters. Parameters: engine' param1' param2' param3' param4' param5' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 9 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 10 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 11 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 12 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 13 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 14 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' param11' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 5 parameters. Parameters: engine' param1' param2' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 6 parameters. Parameters: engine' param1' param2' param3' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 7 parameters. Parameters: engine' param1' param2' param3' param4' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 8 parameters. Parameters: engine' param1' param2' param3' param4' param5' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 9 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 10 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 11 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 12 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 13 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 14 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' param11' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 5 parameters. Parameters: engine' param1' param2' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 6 parameters. Parameters: engine' param1' param2' param3' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 7 parameters. Parameters: engine' param1' param2' param3' param4' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 8 parameters. Parameters: engine' param1' param2' param3' param4' param5' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 9 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 10 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 11 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 12 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 13 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The method has 14 parameters. Parameters: engine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' param11' callback' asyncState
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFile,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFile.cs,VhdFile,The method has 5 parameters. Parameters: footer' header' bat' parent' stream
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,StreamHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\StreamHelper.cs,BeginReadBytes,The method has 5 parameters. Parameters: stream' offset' length' callback' state
Long Parameter List,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,StreamHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\StreamHelper.cs,BeginReadBytes,The method has 6 parameters. Parameters: stream' offset' length' origin' callback' state
Long Identifier,Microsoft.Azure.Commands.Compute,AEMExtensionConstants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMExtensionConstants.cs,,The length of the parameter VirtualMachineExtensionResourceType is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the parameter virtualMachineExtensionGetResponse is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter WithContainerAndFileNamesParameterSet is 37.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByNameWithContainerParameterSet is 31.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByParentObjectWithContainerParameterSet is 39.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByResourceIdWithContainerParameterSet is 37.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByInputObjectWithContainerParameterSet is 38.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByParentObjectWithUrisParameterSet is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByResourceIdWithUrisParameterSet is 32.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter ByInputObjectWithUrisParameterSet is 33.
Long Identifier,Microsoft.Azure.Commands.Compute,DiagnosticsExtensionConstants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\DiagnosticsExtensionConstants.cs,,The length of the parameter VirtualMachineExtensionResourceType is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\GetAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the parameter virtualMachineExtensionGetResponse is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,SqlServerPrivateSettings,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\AzureVMSqlServerPrivateSettings.cs,,The length of the parameter PrivateKeyVaultCredentialSettings is 33.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,,The length of the parameter GetSqlServerExtensionParamSetName is 33.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,,The length of the parameter ListVirtualMachineSizeParamSet is 30.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,,The length of the parameter ListAvailableSizesForAvailabilitySet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,,The length of the parameter ListAvailableSizesForVirtualMachine is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,,The length of the parameter RestartResourceGroupNameParameterSet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,,The length of the parameter PerformMaintenanceResourceGroupNameParameterSet is 47.
Long Identifier,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,,The length of the parameter PerformMaintenanceIdParameterSet is 32.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\SetAzureVMCommand.cs,,The length of the parameter GeneralizeResourceGroupNameParameterSet is 39.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\SetAzureVMCommand.cs,,The length of the parameter RedeployResourceGroupNameParameterSet is 37.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\SetAzureVMCommand.cs,,The length of the parameter ReapplyResourceGroupNameParameterSet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,,The length of the parameter WindowsDisableVMAgentWinRmHttpsParamSet is 39.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,,The length of the parameter WindowsAndDiskEncryptionParameterSet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,,The length of the parameter LinuxAndDiskEncryptionParameterSet is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter GetVirtualMachineInResourceGroupParamSet is 40.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter ListNextLinkVirtualMachinesParamSet is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter ListLocationVirtualMachinesParamSet is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMOSDiskDiskEncryptionKeyVaultId is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMOSDiskKeyEncryptionKeyVaultId is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMBootDiagnosticsResourceGroupName is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMBootDiagnosticsStorageAccountName is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineADDomainExtension is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineCustomScriptExtension is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineDiagnosticsExtension is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineExtensionImageVersion is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineExtensionImageType is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineScaleSetDiagnosticsExtension is 42.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineDscConfiguration is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineDscExtensionStatus is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerExtension is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerAutoBackupConfig is 39.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerAutoPatchingConfig is 41.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerKeyVaultCredentialConfig is 47.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter AzureVmssDiskEncryptionExtension is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter GetAzureRmVmssDiskEncryptionAlias is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ConstantStringTypes.cs,,The length of the parameter GetAzureRmVmssVMDiskEncryptionAlias is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPrivateDiagnosticsConfiguration,The length of the parameter storageAccountNameInPrivateConfig is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the parameter storageAccountNameInPublicConfig is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the parameter storageAccountNameInPrivateConfig is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,,The length of the parameter DiagnosticsConfigurationElemStr is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,,The length of the parameter DiagnosticMonitorConfigurationElemStr is 37.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,,The length of the parameter EventHubSharedAccessKeyNameAttr is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,Utils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\Utils.cs,,The length of the parameter MIN_NUMBER_CORES_FOR_ACCEL_NET is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionConstants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionConstants.cs,,The length of the parameter enableEncryptionFormatAllOperation is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionConstants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionConstants.cs,,The length of the parameter queryEncryptionStatusOperation is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionContext,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionContext.cs,,The length of the parameter LinuxExtensionDefaultPublisher is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionContext,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionContext.cs,,The length of the parameter LinuxExtensionSinglePassVersion is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureVmssDiskEncryptionExtensionContext,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\AzureVmssDiskEncryptionExtensionContext.cs,,The length of the parameter LinuxExtensionDefaultPublisher is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the parameter virtualMachineExtensionBaseCmdlet is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the parameter virtualMachineExtensionBaseCmdlet is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,,The length of the parameter backupExtensionIdentityMetadataName is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.Chef,GetAzureRmVMChefExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Chef\GetAzureRmVMChefExtension.cs,ExecuteCmdlet,The length of the parameter virtualMachineExtensionGetResponse is 34.
Long Identifier,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,GetSingleAstRequiredModules,The length of the parameter importDscResourcefunctionEntry is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,UploadConfigurationDataToBlob,The length of the parameter configurationDataBlobReference is 30.
Long Identifier,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC,DscExtensionCmdletConstants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionCmdletConstants.cs,,The length of the parameter UploadArchiveAllowedFileExtensions is 34.
Long Identifier,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC,DscExtensionCmdletConstants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionCmdletConstants.cs,,The length of the parameter CreateArchiveAllowedFileExtensions is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the parameter vNetworkInterfaceConfigurations is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the parameter vApplicationGatewayBackendAddressPools is 38.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the parameter vLoadBalancerBackendAddressPools is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\RemoveAzureRmVmssNetworkInterfaceConfigurationCommand.cs,ProcessRecord,The length of the parameter vNetworkInterfaceConfigurations is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\AddAzureVhdCommand.cs,,The length of the parameter DefaultNumberOfUploaderThreads is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.StorageServices,SaveAzureVhdCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\SaveAzureVhdCommand.cs,,The length of the parameter DefaultNumberOfUploaderThreads is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,VirtualMachineScaleSetStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\VirtualMachineScaleSetStrategy.cs,CreateVirtualMachineScaleSetConfig,The length of the parameter doNotRunExtensionsOnOverprovisionedVMs is 38.
Long Identifier,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,,The length of the parameter asyncMachineCompletionCallback is 30.
Long Identifier,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,,The length of the parameter WindowsAzureCreatorApplicationName is 34.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureAvailabilitySetCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\AvailabilitySets\GetAzureAvailabilitySetCommand.cs,ExecuteCmdlet,The length of the statement  "                    var result = this.AvailabilitySetClient.ListBySubscriptionWithHttpMessagesAsync("virtualMachines/$ref").GetAwaiter().GetResult(); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureAvailabilitySetCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\AvailabilitySets\GetAzureAvailabilitySetCommand.cs,ExecuteCmdlet,The length of the statement  "                        var pageResult = this.AvailabilitySetClient.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink).GetAwaiter().GetResult(); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureAvailabilitySetCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\AvailabilitySets\GetAzureAvailabilitySetCommand.cs,ExecuteCmdlet,The length of the statement  "                    var result = this.AvailabilitySetClient.GetWithHttpMessagesAsync(this.ResourceGroupName' this.Name).GetAwaiter().GetResult(); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureAvailabilitySetCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\AvailabilitySets\RemoveAzureAvailabilitySetCommand.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.AvailabilitySetRemovalConfirmation' Properties.Resources.AvailabilitySetRemovalCaption))) " is 133.
Long Statement,Microsoft.Azure.Commands.Compute,ComputeAutoMapperProfile,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeAutoMapperProfile.cs,Initialize,The length of the statement  "                    .ForMember(c => c.OperationId' o => o.MapFrom(r => ComputeClientBaseCmdlet.GetOperationIdFromUrlString(r.Request.RequestUri.ToString()))) " is 137.
Long Statement,Microsoft.Azure.Commands.Compute,ComputeAutoMapperProfile,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeAutoMapperProfile.cs,Initialize,The length of the statement  "                    .ForMember(c => c.OperationId' o => o.MapFrom(r => ComputeClientBaseCmdlet.GetOperationIdFromUrlString(r.Request.RequestUri.ToString()))) " is 137.
Long Statement,Microsoft.Azure.Commands.Compute,ComputeAutoMapperProfile,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeAutoMapperProfile.cs,Initialize,The length of the statement  "                    .ForMember(c => c.OperationId' o => o.MapFrom(r => ComputeClientBaseCmdlet.GetOperationIdFromUrlString(r.Request.RequestUri.ToString()))) " is 137.
Long Statement,Microsoft.Azure.Commands.Compute,ComputeAutoMapperProfile,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeAutoMapperProfile.cs,Initialize,The length of the statement  "                    .ForMember(c => c.OperationId' o => o.MapFrom(r => ComputeClientBaseCmdlet.GetOperationIdFromUrlString(r.Request.RequestUri.ToString()))) " is 137.
Long Statement,Microsoft.Azure.Commands.Compute,ComputeClientBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeClientBaseCmdlet.cs,SetManagedDisk,The length of the statement  "            if (string.IsNullOrWhiteSpace(managedDiskId) && string.IsNullOrWhiteSpace(diskEncryptionSetId) && string.IsNullOrWhiteSpace(storageAccountType)) " is 144.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' " is 136.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.Publisher.Equals(AEMExtensionConstants.AEMExtensionPublisher[OSType]' StringComparison.InvariantCultureIgnoreCase) && " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.VirtualMachineExtensionType.Equals(AEMExtensionConstants.AEMExtensionType[OSType]' StringComparison.InvariantCultureIgnoreCase)) " is 138.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,WriteError,The length of the statement  "            base.WriteError(new ErrorRecord(new Exception(String.Format(message' args))' "Error"' ErrorCategory.NotSpecified' null)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "            this._Helper = new AEMHelper((err) => this.WriteError(err)' (msg) => this.WriteVerbose(msg)' (msg) => this.WriteWarning(msg)' " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager)' " is 151.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var aemExtension = this._Helper.GetExtension(virtualMachine' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]); " is 172.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        WriteWarning(string.Format(CultureInfo.InvariantCulture' Properties.Resources.AEMExtensionNotFound' this.ResourceGroupName' this.VMName)); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var op = this.VirtualMachineExtensionClient.BeginDeleteWithHttpMessagesAsync(this.ResourceGroupName' this.VMName' this.Name).GetAwaiter().GetResult(); " is 150.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var op = this.VirtualMachineExtensionClient.DeleteWithHttpMessagesAsync(this.ResourceGroupName' this.VMName' this.Name).GetAwaiter().GetResult(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "            this._Helper = new AEMHelper((err) => this.WriteError(err)' (msg) => this.WriteVerbose(msg)' (msg) => this.WriteWarning(msg)' " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var selectedVMStatus = ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView; " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("No virtual machine with name {0} in resource group {1} in subscription {2} found"' this.VMName' this.ResourceGroupName' subscriptionId); " is 161.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                sapmonPublicConfig.Add(new KeyValuePair() { Key = "script.version"' Value = AEMExtensionConstants.CurrentScriptVersion }); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available."); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD }); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteVerbose("Done - Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString()); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_ULTRA_MD }); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = diskMD.DiskMBpsReadWrite }); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available."); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetDiskName(disk.Vhd.Uri) }); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteVerbose("Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString()); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM }); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteVerbose("Done - Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString()); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_STANDARD }); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connminute." + diskNumber' Value = (accountName + ".minute") }); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteHost("[INFO] {0} is of type {1} - Storage Account Metrics are not available for Premium Type Storage."' storage.Name' storage.SkuName()); " is 155.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        wadstorage = new KeyValuePair(this.WADStorageAccountName' this._Helper.GetAzureStorageKeyFromCache(WADStorageAccountName)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteError("A standard storage account is required. Please use parameter WADStorageAccountName to specify a standard storage account you want to use for this VM."); " is 177.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                Version aemVersion = this._Helper.GetExtensionVersion(selectedVM' selectedVMStatus' OSType' AEMExtensionConstants.AEMExtensionType[OSType]' AEMExtensionConstants.AEMExtensionPublisher[OSType]); " is 193.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system."); " is 182.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzVMAEMExtension commandlet."); " is 135.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system."); " is 182.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzVMAEMExtension commandlet."); " is 135.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The length of the statement  "                    xDoc.SelectSingleNode("WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters").Attributes["scheduledTransferPeriod"].Value = "PT1M"; " is 136.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The length of the statement  "                            SelectSingleNode("WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration[@counterSpecifier = '" + perfCounter.counterSpecifier + "']"); " is 170.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The length of the statement  "            jPublicConfig.Add("xmlCfg"' new Newtonsoft.Json.Linq.JValue(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(xpublicConfig.InnerXml)))); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "            this._Helper = new AEMHelper((err) => this.WriteError(err)' (msg) => this.WriteVerbose(msg)' (msg) => this.WriteWarning(msg)' " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager)' " is 151.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var selectedVMStatus = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView; " is 157.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var monExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]); " is 168.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' false)); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' true)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                GenerateFilterConditionForDate("Timestamp"' "gt"' DateTime.Now.AddMinutes(AEMExtensionConstants.ContentAgeInMinutes * -1)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            if (storageConfigOk && this._Helper.CheckTableAndContent(account' "$MetricsMinutePrimaryTransactionsBlob"' filterMinute' "."' false' this.WaitTimeInMinutes)) " is 157.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics not available for Premium Storage account {0}"' true' account)); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Size"' "vmsize"' sapmonPublicConfig' vmSize.ToString()' aemConfigResult); " is 186.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Memory"' "vm.memory.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult); " is 191.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM CPU"' "vm.cpu.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult); " is 185.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: Script Version"' "script.version"' sapmonPublicConfig' aemConfigResult); " is 183.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA IOPS"' "vm.sla.iops"' sapmonPublicConfig' vmSLA.IOPS' aemConfigResult); " is 188.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA Throughput"' "vm.sla.throughput"' sapmonPublicConfig' vmSLA.TP' aemConfigResult); " is 198.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult' false); " is 178.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult' false); " is 176.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Key"' "osdisk.connminute"' sapmonPublicConfig' osaccountName + ".minute"' aemConfigResult); " is 216.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Value"' osaccountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult); " is 212.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Name"' osaccountName + ".minute.name"' sapmonPublicConfig' osaccountName' aemConfigResult); " is 216.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult); " is 221.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult); " is 202.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 204.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult); " is 224.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult); " is 202.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 204.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk name"' "osdisk.name"' sapmonPublicConfig' this._Helper.GetDiskName(osdisk.Vhd.Uri)' aemConfigResult); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult); " is 257.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult); " is 235.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 237.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult); " is 257.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' diskMD.DiskMBpsReadWrite' aemConfigResult); " is 253.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' diskMD.DiskIOPSReadWrite' aemConfigResult); " is 253.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " LUN"' "disk.lun." + diskNumber' sapmonPublicConfig' disk.Lun' aemConfigResult); " is 221.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Key"' "disk.connminute." + diskNumber' sapmonPublicConfig' accountName + ".minute"' aemConfigResult); " is 247.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Value"' accountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult); " is 231.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Name"' accountName + ".minute.name"' sapmonPublicConfig' accountName' aemConfigResult); " is 233.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult); " is 255.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult); " is 254.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult); " is 235.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 237.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " name"' "disk.name." + diskNumber' sapmonPublicConfig' this._Helper.GetDiskName(disk.Vhd.Uri)' aemConfigResult); " is 253.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        aemConfigResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks"' true)); " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteHost("\tAzure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks "' false); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var wadExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.WADExtensionType[this.OSType]' AEMExtensionConstants.WADExtensionPublisher[this.OSType]); " is 168.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteHost("\t\tIaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            var currentCounter = currentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration[@counterSpecifier = '" + perfCounter.counterSpecifier + "']"); " is 206.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' true)); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false)); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        var extStatuses = this._Helper.GetExtension(selectedVM' selectedVMStatus' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]); " is 185.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            aemStatus = extStatuses.Statuses.FirstOrDefault(stat => Regex.Match(stat.Message' "deploymentId=(\\S*) roleInstance=(\\S*)").Success); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        if (!this.SkipStorageCheck.IsPresent && (!String.IsNullOrEmpty(deploymentId)) && (!String.IsNullOrEmpty(roleName)) && (!String.IsNullOrEmpty(wadstorage))) " is 154.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteHost("The script found some configuration issues. Please run the Set-AzureRmVMExtension commandlet to update the configuration of the virtual machine!"); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 156.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 156.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        this.TypeHandlerVersion = string.IsNullOrEmpty(this.TypeHandlerVersion) ? this.InputObject.TypeHandlerVersion : this.TypeHandlerVersion; " is 136.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                            string.Format(CultureInfo.CurrentUICulture' "The current VM is a Linux VM.  Custom script extension can be set only to Windows VM."))' " is 134.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                            DefaultProfile.DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix) : this.StorageEndpointSuffix; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                                WriteWarning(Microsoft.Azure.Commands.Compute.Properties.Resources.CustomScriptExtensionTryToUseTheFirstSpecifiedFileAsRunScript); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetStorageKey,The length of the statement  "                var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetSasUrlStr,The length of the statement  "            var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetPrivateConfiguration,The length of the statement  "            if (string.IsNullOrEmpty(this.StorageAccountName) && string.IsNullOrEmpty(this.StorageAccountKey) && this.FileUri == null) " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\GetAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.Publisher.Equals(DiagnosticsExtensionConstants.ExtensionPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 124.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\GetAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.VirtualMachineExtensionType.Equals(DiagnosticsExtensionConstants.ExtensionType' StringComparison.InvariantCultureIgnoreCase)) " is 135.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\RemoveAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.Publisher.Equals(DiagnosticsExtensionConstants.ExtensionPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 124.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\RemoveAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.VirtualMachineExtensionType.Equals(DiagnosticsExtensionConstants.ExtensionType' StringComparison.InvariantCultureIgnoreCase)) " is 135.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\RemoveAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                        WriteWarning(string.Format(CultureInfo.InvariantCulture' Properties.Resources.DiagnosticsExtensionNotFound' this.ResourceGroupName' this.VMName)); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\RemoveAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                        this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = extensions.Except(diagnosticsExtensions).ToList(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMDiagnosticsExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\SetAzureRmVMDiagnosticsExtension.cs,InitializeStorageAccountKey,The length of the statement  "                DiagnosticsHelper.InitializeStorageAccountKey(this.StorageClient' this.StorageAccountName' this.DiagnosticsConfigurationPath); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\GetAzureVMExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        var result = this.VirtualMachineExtensionClient.ListWithHttpMessagesAsync(this.ResourceGroupName' this.VMName).GetAwaiter().GetResult().Body.Value; " is 147.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\RemoveAzureVMExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.ShouldProcess(String.Format(VMName' Name' VMName)' string.Format(Properties.Resources.RemoveExtensionAction' Name)) " is 124.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\RemoveAzureVMExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    VirtualMachineExtension virtualMachineExtension = vm.Resources.Where(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace)).FirstOrDefault(); " is 180.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "            string sqlConfiguration = extension.SubStatuses.First(s => s.Code.Equals(SqlConfigurationSubStatusCode' StringComparison.InvariantCultureIgnoreCase)).Message; " is 158.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "                AzureVMSqlServerConfiguration settings = JsonConvert.DeserializeObject<AzureVMSqlServerConfiguration>(sqlConfiguration); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "                        BackupScheduleType = string.IsNullOrEmpty(settings.AutoBackup.BackupScheduleType) ? null : AutoBackupScheduleTypeMap[settings.AutoBackup.BackupScheduleType]' " is 157.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "                        PatchCategory = string.IsNullOrEmpty(settings.AutoPatching.PatchCategory) ? null : AutoPatchingCategoryMap[settings.AutoPatching.PatchCategory] " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The length of the statement  "                    autoBackupSettings.StorageAccessKey = (StorageKey == null) ? null : ConversionUtilities.SecureStringToString(StorageKey); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The length of the statement  "            autoBackupSettings.Password = (CertificatePassword == null) ? null : ConversionUtilities.SecureStringToString(CertificatePassword); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The length of the statement  "            if (!string.IsNullOrEmpty(BackupScheduleType) && string.Equals(BackupScheduleType' ValidateSetValues.Manual' StringComparison.InvariantCultureIgnoreCase)) " is 154.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,GetStorageKey,The length of the statement  "                var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ValidateBackupScheduleSettings,The length of the statement  "                throw new Exception("LogBackupFrequencyInMinutes cannot be null or should be multiple of 5 when BackupScheduleType is set to Manual"); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\RemoveAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    Name = VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace + "." + VirtualMachineSqlServerExtensionContext.ExtensionPublishedName; " is 146.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\RemoveAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption)) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\SetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachineExtension extension = vm.Resources.Where(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace)).FirstOrDefault(); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\SetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                TypeHandlerVersion = string.IsNullOrEmpty(this.Version) ? VirtualMachineSqlServerExtensionContext.ExtensionDefaultVersion : this.Version' " is 137.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 150.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 150.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMAccessExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VMAccess\RemoveAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                if (nic.IpConfigurations.First().PublicIPAddress != null && !string.IsNullOrEmpty(nic.IpConfigurations.First().PublicIPAddress.Id)) " is 131.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                else if (nic.IpConfigurations.First().LoadBalancerInboundNatRules !=  null && nic.IpConfigurations.First().LoadBalancerInboundNatRules.Any()) " is 141.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                        throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicLoadBalancer); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicIPOrPublicLoadBalancer); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMUsageCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Usage\GetAzureVMUsageCommand.cs,ExecuteCmdlet,The length of the statement  "                AzureOperationResponse<IPage<Usage>> result = this.UsageClient.ListWithHttpMessagesAsync(this.Location.Canonicalize()).GetAwaiter().GetResult(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,ExecuteCmdlet,The length of the statement  "                    result = this.VirtualMachineSizeClient.ListWithHttpMessagesAsync(this.Location.Canonicalize()).GetAwaiter().GetResult(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.ParameterSetName.Equals(RestartIdParameterSet) || this.ParameterSetName.Equals(PerformMaintenanceIdParameterSet)) " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\SetAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "            if (this.ParameterSetName.Equals(GeneralizeIdParameterSet) || this.ParameterSetName.Equals(RedeployIdParameterSet) || this.ParameterSetName.Equals(ReapplyIdParameterSet)) " is 170.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                    && (this.Force.IsPresent || this.ShouldContinue(Properties.Resources.VirtualMachineStoppingConfirmation' Properties.Resources.VirtualMachineStoppingCaption))) " is 158.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                            op = this.VirtualMachineClient.BeginPowerOffWithHttpMessagesAsync(this.ResourceGroupName' this.Name' skipShutdown' null' CancellationToken.None).GetAwaiter().GetResult(); " is 170.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                            op = this.VirtualMachineClient.PowerOffWithHttpMessagesAsync(this.ResourceGroupName' this.Name' skipShutdown' null' CancellationToken.None).GetAwaiter().GetResult(); " is 165.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                            op = this.VirtualMachineClient.BeginDeallocateWithHttpMessagesAsync(this.ResourceGroupName' this.Name' null' CancellationToken.None).GetAwaiter().GetResult(); " is 158.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                            op = this.VirtualMachineClient.DeallocateWithHttpMessagesAsync(this.ResourceGroupName' this.Name' null' CancellationToken.None).GetAwaiter().GetResult(); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVaultSecretGroupCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\AddAzureVMSecretCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.VM.OSProfile.Secrets[i].SourceVault != null && this.VM.OSProfile.Secrets[i].SourceVault.Id.Equals(this.SourceVaultId)) " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\NewAzureVMConfigCommand.cs,ExecuteCmdlet,The length of the statement  "                Identity = this.AssignIdentity.IsPresent ? new VirtualMachineIdentity(null' null' ResourceIdentityType.SystemAssigned) : null' " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMNetworkInterfaceCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\RemoveAzureVMNetworkInterfaceCommand.cs,ExecuteCmdlet,The length of the statement  "                            var nicReference = networkProfile.NetworkInterfaces.First(nic => string.Equals(nic.Id' id' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,The length of the statement  "                CustomData = string.IsNullOrWhiteSpace(this.CustomData) ? null : Convert.ToBase64String(Encoding.UTF8.GetBytes(this.CustomData))' " is 129.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,The length of the statement  "            if (this.ParameterSetName.Equals(WindowsAndDiskEncryptionParameterSet) || this.ParameterSetName.Equals(LinuxAndDiskEncryptionParameterSet)) " is 139.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,The length of the statement  "            this.VM.StorageProfile.OsDisk.ManagedDisk = SetManagedDisk(this.ManagedDiskId' this.DiskEncryptionSetId' this.StorageAccountType' this.VM.StorageProfile.OsDisk.ManagedDisk); " is 173.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,ReturnListVMObject,The length of the statement  "                    vmListResult = listNextFunction(vmListResult.Body.NextPageLink' null' default(CancellationToken)).GetAwaiter().GetResult(); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,DefaultExecuteCmdlet,The length of the statement  "                         && !string.Equals(this.ComputeClient?.ComputeManagementClient?.SubscriptionId' resourceId?.SubscriptionId' StringComparison.OrdinalIgnoreCase)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetVMIdentityFromArgs,The length of the statement  "                           (SystemAssignedIdentity.IsPresent ? CM.ResourceIdentityType.SystemAssignedUserAssigned : CM.ResourceIdentityType.UserAssigned)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetBginfoExtension,The length of the statement  "            var publisher = publishers.FirstOrDefault(e => e.Name.Equals(VirtualMachineBGInfoExtensionContext.ExtensionDefaultPublisher)); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,TryToChooseExistingStandardStorageAccount,The length of the statement  "                storageAccountList = client.StorageAccounts.List().Where(e => e.Location.Canonicalize().Equals(this.Location.Canonicalize())); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,UpdateAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\UpdateAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                        parameters.Identity.UserAssignedIdentities = new Dictionary<string' VirtualMachineIdentityUserAssignedIdentitiesValue>(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The length of the statement  "            foreach (var property in objType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetChildProperties,The length of the statement  "            foreach (var property in objType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,InstanceViewMethod,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeClientInstancViewMethod.cs,ListWithInstanceView,The length of the statement  "                    vmExtension.InstanceView = iVmExtensionOperations.GetWithInstanceView(rgName' vmName' vmExtension.Name).Body.InstanceView; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,AutoFillMetricsConfig,The length of the statement  "            var configurationElem = wadCfgElement.Elements().FirstOrDefault(d => d.Name.LocalName == DiagnosticMonitorConfigurationElemStr); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPublicConfigFromJsonFile,The length of the statement  "            var storageAccountProperty = properties.FirstOrDefault(p => p.Equals(StorageAccount' StringComparison.OrdinalIgnoreCase)); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPrivateDiagnosticsConfiguration,The length of the statement  "                throw new ArgumentException(Properties.Resources.DiagnosticsExtensionMismatchStorageAccountName' StorageAccountNameTag); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,AddEventHubPrivateConfig,The length of the statement  "            var eventHubSharedAccessKeyName = GetConfigValueFromPrivateConfig(configurationPath' EventHubElemStr' EventHubSharedAccessKeyNameAttr); " is 135.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,AddEventHubPrivateConfig,The length of the statement  "            var eventHubSharedAccessKey = GetConfigValueFromPrivateConfig(configurationPath' EventHubElemStr' EventHubSharedAccessKeyAttr); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,AddEventHubPrivateConfig,The length of the statement  "            if (!string.IsNullOrEmpty(eventHubUrl) || !string.IsNullOrEmpty(eventHubSharedAccessKeyName) || !string.IsNullOrEmpty(eventHubSharedAccessKey)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPublicConfigJObjectFromJsonFile,The length of the statement  "            // If the json config has the public config as a property' we extract it. Otherwise' the root object is the public config. " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetPublicConfigJObjectFromJsonFile,The length of the statement  "            var publicConfigProperty = properties.FirstOrDefault(p => p.Equals(PublicConfigElemStr' StringComparison.OrdinalIgnoreCase)); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigValueFromPrivateConfig,The length of the statement  "                    var configElem = privateConfigElem == null ? null : privateConfigElem.Elements().FirstOrDefault(ele => ele.Name.LocalName == elementName); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigValueFromPrivateConfig,The length of the statement  "                    var attribute = configElem == null ? null : configElem.Attributes().FirstOrDefault(a => string.Equals(a.Name.LocalName' attributeName)); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountName,The length of the statement  "                var storageNode = publicConfig == null ? null : publicConfig.Elements().FirstOrDefault(ele => ele.Name.LocalName == StorageAccountElemStr); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountName,The length of the statement  "                var storageAccountProperty = properties.FirstOrDefault(p => p.Equals(StorageAccount' StringComparison.OrdinalIgnoreCase)); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountKey,The length of the statement  "                var account = new ARMStorageProvider(storageClient).GetCloudStorageAccount(storageAccount.Name' ARMStorageService.ParseResourceGroupFromId(storageAccount.Id)); " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The length of the statement  "                var context = CreateStorageContext(new Uri(endpoints.Blob)' new Uri(endpoints.Queue)' new Uri(endpoints.Table)' new Uri(endpoints.File)' storageAccountName' storageAccountKey); " is 176.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The length of the statement  "                storageAccountEndpoint = GetConfigValueFromPrivateConfig(configurationPath' StorageAccountElemStr' PrivConfEndpointAttr))) " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The length of the statement  "                var context = CreateStorageContext(blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint' storageAccountName' storageAccountKey); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,TryGetStorageAccount,The length of the statement  "                storageAccount = storageAccounts == null ? null : storageAccounts.FirstOrDefault(account => account.Name.Equals(storageAccountName)); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,CreateStorageContext,The length of the statement  "            var cloudStorageAccount = new CloudStorageAccount(credentials' blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the statement  "                !string.Equals(storageAccountNameInPrivateConfig' storageAccountNameInPublicConfig' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the statement  "                throw new ArgumentException(Properties.Resources.DiagnosticsExtensionMismatchStorageAccountName' StorageAccountNameTag); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the statement  "            var storageAccountEndpoint = storageAccountKey == null? null: InitializeStorageAccountEndpoint(storageAccountNameInPublicConfig' storageAccountKey' storageClient); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,IsDiagnosticsExtension,The length of the statement  "            return extension.Publisher.Equals(DiagnosticsExtensionConstants.ExtensionPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Common,Utils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\Utils.cs,DoesConfigSupportAcceleratedNetwork,The length of the statement  "                if (sizeInfo == null || sizeInfo.FirstOrDefault() == null || sizeInfo.FirstOrDefault().NumberOfCores < MIN_NUMBER_CORES_FOR_ACCEL_NET) " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Common,Utils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\Utils.cs,DoesConfigSupportAcceleratedNetwork,The length of the statement  "            var distribuition = DistributionsForAccelNet.Where(d => d.Matches(imageInfo.Image.Publisher' imageInfo.Image.Offer' imageInfo.Image.Sku)); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Common,ImageTypeForAccelNet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\Utils.cs,Matches,The length of the statement  "                return (Publisher.Equals(publisher) && (offer == null || offer.Equals(Offer)) && (sku == null || SkuPattern == null || (new Regex(SkuPattern)).IsMatch(sku))); " is 158.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,LogProgress,The length of the statement  "            var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' activityId' activity' message' (int)remainingTime.TotalSeconds' (int)precentComplete); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,LogProgressComplete,The length of the statement  "            var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' activityId' activity' Rsrc.PSSyncOutputEventsLogProgressCompleteCompleted); " is 179.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The length of the statement  "                    var progressCommand1 = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionCompleted); " is 213.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The length of the statement  "                var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100); " is 303.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,WriteVerboseWithTimestamp,The length of the statement  "            var messageWithTimeStamp = string.Format(CultureInfo.CurrentCulture' "{0:T} - {1}"' DateTime.Now' string.Format(message' args)); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Models,VhdUploaderModel,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\VhdUploaderModel.cs,Upload,The length of the statement  "                blobCreator = new PatchingBlobCreator(uploadParameters.LocalFilePath' uploadParameters.DestinationUri' uploadParameters.BaseImageUri' uploadParameters.BlobObjectFactory' uploadParameters.OverWrite); " is 198.
Long Statement,Microsoft.Azure.Commands.Compute.Models,VhdUploaderModel,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\VhdUploaderModel.cs,Upload,The length of the statement  "                blobCreator = new BlobCreator(uploadParameters.LocalFilePath' uploadParameters.DestinationUri' uploadParameters.BlobObjectFactory' uploadParameters.OverWrite); " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Models,VhdUploaderModel,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\VhdUploaderModel.cs,Upload,The length of the statement  "                    return new VhdUploadContext { LocalFilePath = uploadParameters.LocalFilePath' DestinationUri = uploadParameters.DestinationUri.Uri }; " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetStorageAccountFromCache,The length of the statement  "            var account = listResponse.First(accTemp => accTemp.Name.Equals(accountName' StringComparison.InvariantCultureIgnoreCase)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetCoreEndpoint,The length of the statement  "                WriteWarning("Could not extract endpoint information from Azure Storage Account ({0}). Using default {1}"' ex.Message' AEMExtensionConstants.AzureEndpoint); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetCoreEndpoint,The length of the statement  "            WriteWarning("Could not extract endpoint information from Azure Storage Account. Using default {0}"' AEMExtensionConstants.AzureEndpoint); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,WriteError,The length of the statement  "                this._ErrorAction(new ErrorRecord(new Exception(String.Format(message' args))' "Error"' ErrorCategory.NotSpecified' null)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetExtensionVersion,The length of the statement  "            else if (AEMExtensionConstants.WADExtensionPublisher[osType].Equals(publisher' StringComparison.InvariantCultureIgnoreCase) " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The length of the statement  "            || (!CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/@scheduledTransferPeriod"). " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The length of the statement  "            || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration") == null)) " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetStorageAnalytics,The length of the statement  "            return cloudStorageAccount.CreateCloudBlobClient().GetServicePropertiesAsync().ConfigureAwait(false).GetAwaiter().GetResult(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.disableEncryptionOperation); " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,UpdateVmEncryptionSettings,The length of the statement  "                                "Set-AzDiskEncryptionExtension can enable encryption only on a VM that was already created and has appropriate storageProfile and OS disk"))' " is 141.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachine virtualMachineResponse = (this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName' InstanceViewTypes.InstanceView)); " is 174.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                                    "Disable-AzDiskEncryption can disable encryption only on a VM that was already created and has appropriate storageProfile and OS disk"))' " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                    this.ShouldContinue(Properties.Resources.DisableAzureDiskEncryptionConfirmation' Properties.Resources.DisableAzureDiskEncryptionCaption))) " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                    if ((OperatingSystemTypes.Windows.Equals(currentOSType) && parameters.TypeHandlerVersion.Equals(AzureDiskEncryptionExtensionContext.ExtensionSinglePassVersion)) || " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                        (OperatingSystemTypes.Linux.Equals(currentOSType) && parameters.TypeHandlerVersion.Equals(AzureDiskEncryptionExtensionContext.LinuxExtensionSinglePassVersion)) || " is 162.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                        (OperatingSystemTypes.Windows.Equals(currentOSType) && !string.IsNullOrEmpty(VolumeType) && VolumeType.Equals(AzureDiskEncryptionExtensionContext.VolumeTypeData' StringComparison.InvariantCultureIgnoreCase))) " is 208.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetDualPassQueryVmExtensionParameters,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.queryEncryptionStatusOperation); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetDualPassQueryVmExtensionParameters,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "Get-AzDiskEncryptionExtension can enable encryption only on a VM that was already created "))' " is 202.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetDualPassQueryVmExtensionParameters,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetDualPassQueryVmExtensionParameters,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher; " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                throw new KeyNotFoundException(string.Format(CultureInfo.CurrentUICulture' "Encryption extension not found on VM Instance View")); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                if ((extensionInstanceView == null) || (extensionInstanceView.Substatuses == null) || (extensionInstanceView.Substatuses.Count < 1)) " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,DataVolumeInExtensionConfig,The length of the statement  "                    (adeExtension.VolumeType.Equals(AzureDiskEncryptionExtensionContext.VolumeTypeData' StringComparison.InvariantCultureIgnoreCase)) || " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,DataVolumeInExtensionConfig,The length of the statement  "                    (adeExtension.VolumeType.Equals(AzureDiskEncryptionExtensionContext.VolumeTypeAll' StringComparison.InvariantCultureIgnoreCase))) " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExtensionProvisioningSucceeded,The length of the statement  "            var extensionStatusViewresult = this.VirtualMachineExtensionClient.GetWithInstanceView(this.ResourceGroupName' this.VMName' adeExtension.Name); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExtensionProvisioningSucceeded,The length of the statement  "            if (adeExtensionWithStatus.ProvisioningState.Equals(AzureDiskEncryptionExtensionContext.StatusSucceeded' StringComparison.InvariantCultureIgnoreCase)) " is 150.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,AreWindowsDataVolumesEncryptedDualPass,The length of the statement  "                if (adeExtension.EncryptionOperation.Equals(AzureDiskEncryptionExtensionConstants.enableEncryptionOperation' StringComparison.InvariantCultureIgnoreCase)) " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,validateRetreivedVirtualMachine,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' errorString))' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,isVMRunning,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "VM instance view statuses array was null. Could not get VM status."))' " is 184.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,getStatusDualPass,The length of the statement  "                        ProgressMessage = string.Format(CultureInfo.CurrentUICulture' "OsVolume: {0}' DataVolumes: {1}"' osVolumeEncrypted' dataVolumesEncrypted) " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,getStatusDualPass,The length of the statement  "                        OsVolumeEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultOsKey])' " is 160.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,getStatusDualPass,The length of the statement  "                        DataVolumesEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultDataKey])' " is 165.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,getStatusDualPass,The length of the statement  "                    ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "OS type unknown."))' " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,getStatusSinglePass,The length of the statement  "                    status.OsVolumeEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultOsKey]); " is 167.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,getStatusSinglePass,The length of the statement  "                    status.DataVolumesEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultDataKey]); " is 172.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\RemoveAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachine virtualMachineResponse = (this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\RemoveAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ValidateInputParameters,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "Invalid DiskEncryptionKeyVaultUrl. Please provide a valid KeyVault URI for DiskEncryptionKeyVaultUrl"))' " is 209.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ValidateInputParameters,The length of the statement  "                    ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "Invalid KeyEncryptionKeyUrl. Please provide a valid KeyVault URI for KeyEncryptionKeyUrl"))' " is 197.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "            AzureOperationResponse<VirtualMachineExtension> extensionResult = this.VirtualMachineExtensionClient.GetWithInstanceView(this.ResourceGroupName' this.VMName' this.Name); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Failed to retrieve extension status"))' " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Missing extension publisher and type info"))' " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher; " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                    ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Invalid extension status"))' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Extension publisher and type mismatched"))' " is 157.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,UpdateVmEncryptionSettings,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "Set-AzDiskEncryptionExtension can enable encryption only on a VM that was already created and has appropriate storageProfile and OS disk"))' " is 248.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.aadClientCertThumbprintKey' AadClientCertThumbprint ?? String.Empty); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.keyVaultResourceIdKey' DiskEncryptionKeyVaultId ?? string.Empty); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.kekVaultResourceIdKey' KeyEncryptionKeyVaultId ?? string.Empty); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "                publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.enableEncryptionFormatAllOperation); " is 155.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "                publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.enableEncryptionOperation); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetVmExtensionParameters,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "Set-AzDiskEncryptionExtension can enable encryption only on a VM that was already created "))' " is 202.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,CreateVMBackupForLinx,The length of the statement  "                WriteWarning(string.Format("one snapshot for disks are created with tag'{0}' you can use {1}-{2} to remove it."' tag' VerbsCommon.Remove' " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,CreateVMBackupForLinx,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' e.ToString()))' " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                this.ShouldContinue(Properties.Resources.EnableAzureDiskEncryptionConfirmation' Properties.Resources.EnableAzureDiskEncryptionCaption))) " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                            ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' Resources.EnableDiskEncryptionMissingSkipVmBackup))' " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                    AzureOperationResponse<VirtualMachineExtension> firstPass = this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync( " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureVmssDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\DisableAzureVmssDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureVmssDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\DisableAzureVmssDiskEncryption.cs,GetDisalbeEncryptionSetting,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.disableEncryptionOperation); " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\GetAzureVmssDiskEncryptionStatus.cs,GetVmssDiskStatus,The length of the statement  "                    VirtualMachineScaleSetVMInstanceView vmiv = this.VirtualMachineScaleSetVMsClient.GetInstanceView(rgName' vmssName' pageItem.InstanceId); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDiskStatus,The length of the statement  "                psResult.Extension = vmssVMInstanceView.Extensions.DefaultIfEmpty(null).FirstOrDefault(e => e.Name.Equals(this.ExtensionName)); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.keyVaultResourceIdKey' DiskEncryptionKeyVaultId ?? string.Empty); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.kekVaultResourceIdKey' KeyEncryptionKeyVaultId ?? string.Empty); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.enableEncryptionOperation); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                this.ShouldContinue(Properties.Resources.EnableAzureDiskEncryptionConfirmation' Properties.Resources.EnableAzureDiskEncryptionCaption))) // Change this. " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "            string regexString = @"/subscriptions/(?<subId>\S+)/resourceGroups/(?<rgName>\S+)/providers/Microsoft.KeyVault/vaults/(?<vaultName>\S+)(.*?)"; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "                        WriteWarning("Cannot access the given key vault.  Please check if 'enabledForDiskEncryption' of the key vault is set."); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "                        WriteWarning("Cannot access the given key vault.  Please check if 'enabledForDiskEncryption' of the key vault is set."); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "                    if (!returnedKeyVault.Location.Replace(" "' "").Equals(thisVmss.Location.Replace(" "' "")' StringComparison.OrdinalIgnoreCase)) " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,FindSnapshot,The length of the statement  "                    CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(sc' azContext.Environment.GetEndpointSuffix(AzureEnvironment.Endpoint.StorageEndpointSuffix)' true); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GetResourceGroupFromId,The length of the statement  "                throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    StorageManagementClient storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(azContext' AzureEnvironment.Endpoint.ResourceManager); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    var account = listResponse.First(accTemp => accTemp.Name.Equals(osBlobUri.StorageAccountName' StringComparison.InvariantCultureIgnoreCase)); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resourceGroupName' storageClient' azContext.Subscription); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    CloudPageBlobObjectFactory cloudPageBlobObjectFactory = new CloudPageBlobObjectFactory(storageCredentialsFactory' TimeSpan.FromMinutes(1)); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            var virtualMachineResponse = virtualMachineExtensionBaseCmdlet.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(vmConfig.ResourceGroupName' vmConfig.VMName); " is 182.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            StorageManagementClient storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager); " is 225.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(vmConfig.ResourceGroupName' storageClient' virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext.Subscription); " is 205.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            AzureVMBackupBlobSasUris blobSASUris = this.GenerateBlobSasUris(blobUris' virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            List<CloudPageBlob> snapshots = this.FindSnapshot(virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext' blobSASUris.pageBlobUri' blobSASUris.storageCredentialsFactory' snapshotQuery); " is 194.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the statement  "            var virtualMachine = virtualMachineExtensionBaseCmdlet.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView( " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the statement  "            AzureVMBackupBlobSasUris blobSASUris = this.GenerateBlobSasUris(vmPageBlobUris' virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the statement  "                List<CloudPageBlob> snapshotsFound = this.FindSnapshot(virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext' blobSASUris.pageBlobUri' blobSASUris.storageCredentialsFactory' snapshotQuery); " is 199.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,RemoveAzureVMBackup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\RemoveAzureVMBackup.cs,ExecuteCmdlet,The length of the statement  "            var virtualMachineResponse = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' VMName); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,RemoveAzureVMBackup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\RemoveAzureVMBackup.cs,ExecuteCmdlet,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "The VM should be a Linux VM"))' " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Chef,GetAzureRmVMChefExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Chef\GetAzureRmVMChefExtension.cs,ExecuteCmdlet,The length of the statement  "                var returnedExtension = virtualMachineExtensionGetResponse.ToPSVirtualMachineExtension(this.ResourceGroupName' this.VMName); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Chef,RemoveAzureRmVMChefExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Chef\RemoveAzureRmVMChefExtension.cs,ExecuteCmdlet,The length of the statement  "                            WriteWarning(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ChefExtensionNotFound' this.ResourceGroupName' this.VMName)); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Chef,SetAzureVMChefExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Chef\SetAzureVMChefExtension.cs,GetLatestChefExtensionVersion,The length of the statement  "            var result = ComputeClient.ComputeManagementClient.VirtualMachineExtensionImages.ListVersionsWithHttpMessagesAsync(this.Location' ExtensionDefaultPublisher' this.Name).GetAwaiter().GetResult(); " is 193.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = new List<VirtualMachineScaleSetExtension>(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                        || ShouldContinue(Properties.Resources.DiagnosticsExtensionOverwrittingConfirmation' Properties.Resources.DiagnosticsExtensionOverwrittingCaption)) " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                        this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = extensions.Where(extension => !DiagnosticsHelper.IsDiagnosticsExtension(extension)).ToList(); " is 173.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    Tuple<Hashtable' Hashtable> settings = DiagnosticsHelper.GetConfigurationsFromFiles(this.SettingFilePath' this.ProtectedSettingFilePath' this.VirtualMachineScaleSet.Id' this' storageClient); " is 190.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,GetSingleAstRequiredModules,The length of the statement  "            using (System.Management.Automation.PowerShell powerShell = System.Management.Automation.PowerShell.Create(initialSessionState)) " is 128.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,GetModuleNameForDscResource,The length of the statement  "                            AddCommand("Where-Object").AddParameter("Property"' "ResourceType").AddParameter("Value"' resourceName).AddParameter("EQ"' true). " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,GetRequiredModulesFromAst,The length of the statement  "            IEnumerable<CommandAst> legacyConfigurationAsts = ast.FindAll(IsLegacyAstConfiguration' true).Select(x => (CommandAst)x); " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,GetRequiredModulesFromAst,The length of the statement  "                var resourceParams = GetLegacyTopLevelParametersFromAst(legacyConfigurationAst' "ResourceDefinition").Select(GetModuleNameForDscResource); " is 138.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                if (!DscExtensionCmdletConstants.UploadArchiveAllowedFileExtensions.Contains(Path.GetExtension(configurationFileExtension))) " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                    ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionUploadArchiveConfigFileInvalidExtension' configurationPath); " is 161.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                if (!DscExtensionCmdletConstants.CreateArchiveAllowedFileExtensions.Contains(Path.GetExtension(configurationFileExtension))) " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                    ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionCreateArchiveConfigFileInvalidExtension' configurationPath); " is 161.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationDataPath,The length of the statement  "                ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscInvalidConfigurationDataFile); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,The length of the statement  "                            new UnauthorizedAccessException(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscArchiveAlreadyExists' archive))' " is 172.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,The length of the statement  "                WriteVerbose(String.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionTempFolderVerbose' tempArchiveFolder)); " is 171.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The length of the statement  "                string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscUploadToBlobStorageAction' archivePath)' " is 148.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The length of the statement  "                                        Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscStorageBlobAlreadyExists' modulesBlob.Uri.AbsoluteUri))' " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The length of the statement  "                        Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionArchiveUploadedMessage' modulesBlob.Uri.AbsoluteUri)); " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeletedFileMessage' file)); " is 159.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeleteErrorMessage' file' e.Message)); " is 170.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeletedFileMessage' directory)); " is 164.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeleteErrorMessage' directory' e.Message)); " is 175.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,DscExtensionCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionCmdletCommonBase.cs,GetStorageCredentials,The length of the statement  "                        new UnauthorizedAccessException(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscDefaultStorageCredentialsNotFound)' " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,DscExtensionCmdletCommonBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\DscExtensionCmdletCommonBase.cs,GetStorageCredentials,The length of the statement  "                ThrowInvalidArgumentError(cmdlet' Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscStorageContextMustIncludeAccountName); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,GetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\GetAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                Name = DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,GetAzureVMDscExtensionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\GetAzureVMDscExtensionStatusCommand.cs,ExecuteCmdlet,The length of the statement  "                Name = DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,RemoveAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\RemoveAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                Name = DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,RemoveAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\RemoveAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.DscExtensionRemovalConfirmation' Name)' Microsoft.Azure.Commands.Compute.Properties.Resources.DscExtensionRemovalCaption)) " is 238.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscNullArchiveNoConfiguragionParameters); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscNullArchiveNoStorageParameters); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscConfigurationDataFileShouldNotIncludePath); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                        this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscInvalidConfigurationDataFile); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscExtensionInvalidVersion); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,CreateConfiguration,The length of the statement  "                        Name ?? DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName' " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,CreateConfiguration,The length of the statement  "                            Name ?? DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName' " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The length of the statement  "            foreach (var property in objType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetResourceName,The length of the statement  "                      : new Regex(@"(.*?)/" + resourceName + @"/(?<rgname>\S+)/" + instanceName + @"/(?<instanceId>\S+)"' RegexOptions.IgnoreCase); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetInstanceId,The length of the statement  "                    ? new Regex(@"(.*?)/" + resourceName + @"/(?<rgname>\S+)/" + instanceName + @"/(?<instanceId>\S+)"' RegexOptions.IgnoreCase) " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetInstanceId,The length of the statement  "                    : new Regex(@"(.*?)/" + resourceName + @"/(?<rgname>\S+)/" + instanceName + @"/(?<instanceId>\S+)/" + version + @"/(?<version>\S+)"' RegexOptions.IgnoreCase); " is 158.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetVersion,The length of the statement  "            Regex r = new Regex(@"(.*?)/" + resourceName + @"/(?<rgname>\S+)/" + instanceName + @"/(?<instanceId>\S+)/" + version + @"/(?<version>\S+)"' RegexOptions.IgnoreCase); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmContainerServiceConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ContainerService\Config\NewAzureRmContainerServiceConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmContainerService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ContainerService\ContainerServiceDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = ContainerServicesClient.DeleteWithHttpMessagesAsync(resourceGroupName' containerServiceName).GetAwaiter().GetResult(); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmDedicatedHostGroup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DedicatedHostGroup\DedicatedHostGroupDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = DedicatedHostGroupsClient.DeleteWithHttpMessagesAsync(resourceGroupName' hostGroupName).GetAwaiter().GetResult(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmDedicatedHost,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DedicatedHost\DedicatedHostDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = DedicatedHostsClient.DeleteWithHttpMessagesAsync(resourceGroupName' hostGroupName' hostName).GetAwaiter().GetResult(); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmDedicatedHost,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DedicatedHost\DedicatedHostGetMethod.cs,ExecuteCmdlet,The length of the statement  "                if (!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(hostGroupName) && !string.IsNullOrEmpty(hostName)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskEncryptionSetConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DiskEncryptionSet\Config\NewAzureRmDiskEncryptionSetConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskEncryptionSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DiskEncryptionSet\DiskEncryptionSetCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSDiskEncryptionSet' DiskEncryptionSet>(this.InputObject' diskEncryptionSet); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmDiskEncryptionSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\DiskEncryptionSet\DiskEncryptionSetDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = DiskEncryptionSetsClient.DeleteWithHttpMessagesAsync(resourceGroupName' diskEncryptionSetName).GetAwaiter().GetResult(); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\NewAzureRmDiskConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskUpdateConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\NewAzureRmDiskUpdateConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey = new KeyVaultAndSecretReference(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey = new KeyVaultAndSecretReference(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                this.DiskUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey.SourceVault.Id = this.SourceVaultId; " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Disk\Config\SetAzureRmDiskUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                this.DiskUpdate.EncryptionSettingsCollection.EncryptionSettings[0].KeyEncryptionKey.SourceVault.Id = this.SourceVaultId; " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                            galleryImageVersion.PublishingProfile.TargetRegions.Add(new TargetRegion((string)t["Name"]' (int?)t["ReplicaCount"]' (string)t["StorageAccountType"])); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = GalleryImageVersionsClient.CreateOrUpdate(resourceGroupName' galleryName' galleryImageName' galleryImageVersionName' galleryImageVersion); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<PSGalleryImageVersion' GalleryImageVersion>(this.InputObject' galleryImageVersion); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                        galleryImageVersion = GalleryImageVersionsClient.Get(resourceGroupName' galleryName' galleryImageName' galleryImageVersionName); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = GalleryImageVersionsClient.CreateOrUpdate(resourceGroupName' galleryName' galleryImageName' galleryImageVersionName' galleryImageVersion); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = GalleryImageVersionsClient.DeleteWithHttpMessagesAsync(resourceGroupName' galleryName' galleryImageName' galleryImageVersionName).GetAwaiter().GetResult(); " is 168.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionGetMethod.cs,ExecuteCmdlet,The length of the statement  "                if (!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(galleryName) && !string.IsNullOrEmpty(galleryImageName)  " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionGetMethod.cs,ExecuteCmdlet,The length of the statement  "                    && !string.IsNullOrEmpty(galleryImageVersionName) && !WildcardPattern.ContainsWildcardCharacters(galleryImageVersionName)) " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionGetMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = GalleryImageVersionsClient.Get(resourceGroupName' galleryName' galleryImageName' galleryImageVersionName' expand); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmGalleryImage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImage\GalleryImageDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = GalleryImagesClient.DeleteWithHttpMessagesAsync(resourceGroupName' galleryName' galleryImageName).GetAwaiter().GetResult(); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmImageConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Image\Config\NewAzureRmImageConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmImage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Image\ImageCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    parameters.Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null; " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmImage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Image\ImageCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                        parameters.HyperVGeneration = HyperVGenerationTypes.V1; // temporarily unblock create image until this parameter is added. " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ExportAzureRmLogAnalyticRequestRateByInterval,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\LogAnalytic\LogAnalyticExportRequestRateByIntervalMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<LogAnalyticsOperationResult' PSLogAnalyticsOperationResult>(result' psObject); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ExportAzureRmLogAnalyticRequestRateByInterval,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\LogAnalytic\LogAnalyticExportRequestRateByIntervalMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<LogAnalyticsOperationResult' PSLogAnalyticsOperationResult>(result' psObject); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ExportAzureRmLogAnalyticThrottledRequests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\LogAnalytic\LogAnalyticExportThrottledRequestsMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<LogAnalyticsOperationResult' PSLogAnalyticsOperationResult>(result' psObject); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ExportAzureRmLogAnalyticThrottledRequests,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\LogAnalytic\LogAnalyticExportThrottledRequestsMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<LogAnalyticsOperationResult' PSLogAnalyticsOperationResult>(result' psObject); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmProximityPlacementGroup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ProximityPlacementGroup\ProximityPlacementGroupCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    parameters.Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null; " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmProximityPlacementGroup,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ProximityPlacementGroup\ProximityPlacementGroupDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = ProximityPlacementGroupsClient.DeleteWithHttpMessagesAsync(resourceGroupName' proximityPlacementGroupName).GetAwaiter().GetResult(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\NewAzureRmSnapshotConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotUpdateConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\NewAzureRmSnapshotUpdateConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey = new KeyVaultAndSecretReference(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey = new KeyVaultAndSecretReference(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey.SourceVault = new SourceVault(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].DiskEncryptionKey.SourceVault.Id = this.SourceVaultId; " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].KeyEncryptionKey = new KeyVaultAndKeyReference(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].KeyEncryptionKey = new KeyVaultAndKeyReference(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].KeyEncryptionKey.SourceVault = new SourceVault(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                this.SnapshotUpdate.EncryptionSettingsCollection.EncryptionSettings[0].KeyEncryptionKey.SourceVault.Id = this.SourceVaultId; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RevokeAzureRmSnapshotAccess,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\Snapshot\SnapshotRevokeAccessMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = SnapshotsClient.RevokeAccessWithHttpMessagesAsync(resourceGroupName' snapshotName).GetAwaiter().GetResult(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StopAzureRmVmssRollingUpgrade,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetRollingUpgrade\VirtualMachineScaleSetRollingUpgradeCancelMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachineScaleSetRollingUpgradesClient.CancelWithHttpMessagesAsync(resourceGroupName' vmScaleSetName).GetAwaiter().GetResult(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StartAzureRmVmssRollingOSUpgrade,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetRollingUpgrade\VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachineScaleSetRollingUpgradesClient.StartOSUpgradeWithHttpMessagesAsync(resourceGroupName' vmScaleSetName).GetAwaiter().GetResult(); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ExecuteCmdlet,The length of the statement  "                if (!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(vmScaleSetName) && !string.IsNullOrEmpty(instanceId)) " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetVMInstanceView' PSVirtualMachineScaleSetVMInstanceView>(result' psObject); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ExecuteCmdlet,The length of the statement  "                            psObject.Add(ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetVM' PSVirtualMachineScaleSetVMList>(r)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ExecuteCmdlet,The length of the statement  "                            psObject.Add(ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetVM' PSVirtualMachineScaleSetVMList>(r)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetVMsClient.ReimageAllWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceId).GetAwaiter().GetResult(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetVMsClient.RedeployWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceId).GetAwaiter().GetResult(); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetVMsClient.PerformMaintenanceWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceId).GetAwaiter().GetResult(); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetVMsClient.ReimageWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceId).GetAwaiter().GetResult(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureRmVmssVMRunCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMRunCommandMethod.cs,ExecuteCmdlet,The length of the statement  "                            vmScaleSetName = GetResourceName(this.VirtualMachineScaleSetVM.Id' "Microsoft.Compute/virtualMachineScaleSets"' "virtualMachines"); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureRmVmssVMRunCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMRunCommandMethod.cs,ExecuteCmdlet,The length of the statement  "                            instanceId = GetInstanceId(this.VirtualMachineScaleSetVM.Id' "Microsoft.Compute/virtualMachineScaleSets"' "virtualMachines"); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureRmVmssVMRunCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMRunCommandMethod.cs,ExecuteCmdlet,The length of the statement  "                        string fileContent = Commands.Common.Authentication.Abstractions.FileUtilities.DataStore.ReadFileAsText(filePath.FullName); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                            vmScaleSetName = GetResourceName(this.VirtualMachineScaleSetVM.Id' "Microsoft.Compute/virtualMachineScaleSets"' "virtualMachines"); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                            instanceId = GetInstanceId(this.VirtualMachineScaleSetVM.Id' "Microsoft.Compute/virtualMachineScaleSets"' "virtualMachines"); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmssVM,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSVirtualMachineScaleSetVM' VirtualMachineScaleSetVM>(this.VirtualMachineScaleSetVM' parameters); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.AdditionalUnattendContent = new List<AdditionalUnattendContent>(); " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "            vAdditionalUnattendContent.ComponentName = this.IsParameterBound(c => c.ComponentName) ? this.ComponentName : (ComponentNames?)null; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "            vAdditionalUnattendContent.SettingName = this.IsParameterBound(c => c.SettingName) ? this.SettingName : (SettingNames?)null; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "            this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.AdditionalUnattendContent.Add(vAdditionalUnattendContent); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssDataDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssDataDiskCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.DataDisks = new List<VirtualMachineScaleSetDataDisk>(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssExtensionCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = new List<VirtualMachineScaleSetExtension>(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssExtensionCommand.cs,Run,The length of the statement  "            vExtensions.AutoUpgradeMinorVersion = this.IsParameterBound(c => c.AutoUpgradeMinorVersion) ? this.AutoUpgradeMinorVersion : (bool?)null; " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssExtensionCommand.cs,Run,The length of the statement  "            vExtensions.ProvisionAfterExtensions = this.IsParameterBound(c => c.ProvisionAfterExtension) ? this.ProvisionAfterExtension : null; " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations = new List<VirtualMachineScaleSetNetworkConfiguration>(); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "            vNetworkInterfaceConfigurations.IpConfigurations = this.IsParameterBound(c => c.IpConfiguration) ? this.IpConfiguration : null; " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "            this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.Add(vNetworkInterfaceConfigurations); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSshPublicKeyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSshPublicKeyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.Ssh.PublicKeys = new List<SshPublicKey>(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssWinRMListenerCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssWinRMListenerCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.WinRM.Listeners = new List<WinRMListener>(); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                vVirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile.Enable = this.TerminateScheduledEvents.IsPresent; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                vVirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile.NotBeforeTimeout = XmlConvert.ToString(new TimeSpan(0' this.TerminateScheduledEventNotBeforeTimeoutInMinutes' 0)); " is 189.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                PlatformFaultDomainCount = this.IsParameterBound(c => c.PlatformFaultDomainCount) ? this.PlatformFaultDomainCount : (int?)null' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                Tags = this.IsParameterBound(c => c.Tag) ? this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value) : null' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "            vIpConfigurations.PrivateIPAddressVersion = this.IsParameterBound(c => c.PrivateIPAddressVersion) ? this.PrivateIPAddressVersion : null; " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                vIpConfigurations.PublicIPAddressConfiguration.IdleTimeoutInMinutes = this.PublicIPAddressConfigurationIdleTimeoutInMinutes; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                    vIpConfigurations.PublicIPAddressConfiguration.DnsSettings = new VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings(); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\RemoveAzureRmVmssNetworkInterfaceConfigurationCommand.cs,ProcessRecord,The length of the statement  "            var vNetworkInterfaceConfigurations = this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.First " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmssNetworkInterfaceConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\RemoveAzureRmVmssNetworkInterfaceConfigurationCommand.cs,ProcessRecord,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.Remove(vNetworkInterfaceConfigurations); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = this.WindowsConfigurationProvisionVMAgent; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = this.WindowsConfigurationEnableAutomaticUpdate; " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.AdditionalUnattendContent = this.AdditionalUnattendContent; " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = this.LinuxConfigurationDisablePasswordAuthentication; " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = this.MaxUnhealthyInstancePercent; " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = this.MaxUnhealthyUpgradedInstancePercent; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = this.ImageReferencePublisher; " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "            this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.WriteAcceleratorEnabled = this.OsDiskWriteAccelerator.IsPresent; " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new VirtualMachineScaleSetManagedDiskParameters(); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = this.ManagedDisk; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new VirtualMachineScaleSetManagedDiskParameters(); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.DiskEncryptionSet = new DiskEncryptionSetParameters(); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.DiskEncryptionSet.Id = this.DiskEncryptionSetId; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                            ComputeAutomationAutoMapperProfile.Mapper.Map<PSVirtualMachineScaleSet' VirtualMachineScaleSet>(this.VirtualMachineScaleSet' parameters); " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetCreateOrUpdateMethod.cs,SimpleParameterSetExecuteCmdlet,The length of the statement  "            // preexisting check. The most common scenario is users will let the cmdlet create and name the LB for them with the default " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetCreateOrUpdateMethod.cs,SimpleParameterSetExecuteCmdlet,The length of the statement  "            // config. We do not want to block that scenario in case the cmdlet failed mid operation and tthe user kicks it off again. " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetCreateOrUpdateMethod.cs,GetVmssIdentityFromArgs,The length of the statement  "                           (SystemAssignedIdentity.IsPresent ? ResourceIdentityType.SystemAssignedUserAssigned : ResourceIdentityType.UserAssigned)' " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StopAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetDeallocateMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.PowerOffWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' skipShutdown' instanceIds).GetAwaiter().GetResult(); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StopAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetDeallocateMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.DeallocateWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetDeleteInstancesMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.DeleteInstancesWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 149.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetDeleteInstancesMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.DeleteWithHttpMessagesAsync(resourceGroupName' vmScaleSetName).GetAwaiter().GetResult(); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RepairAzureRmVmssServiceFabricUpdateDomain,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetForceRecoveryServiceFabricPlatformUpdateDomainWalkMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachineScaleSetsClient.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(resourceGroupName' vmScaleSetName' platformUpdateDomain); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetGetMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetInstanceView' PSVirtualMachineScaleSetInstanceView>(result' psObject); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetGetMethod.cs,ExecuteCmdlet,The length of the statement  "                            psObject.Add(ComputeAutomationAutoMapperProfile.Mapper.Map<UpgradeOperationHistoricalStatusInfo' PSUpgradeOperationHistoricalStatusInfo>(r)); " is 141.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.ReimageAllWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.RedeployWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.PerformMaintenanceWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        result = VirtualMachineScaleSetsClient.ReimageWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' vmScaleSetReimageInput).GetAwaiter().GetResult(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RestartAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetRestartMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachineScaleSetsClient.RestartWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StartAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetStartMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachineScaleSetsClient.StartWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmssInstance,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateInstancesMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachineScaleSetsClient.UpdateInstancesWithHttpMessagesAsync(resourceGroupName' vmScaleSetName' instanceIds).GetAwaiter().GetResult(); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSVirtualMachineScaleSet' VirtualMachineScaleSet>(this.VirtualMachineScaleSet' parameters); " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.AutomaticOSUpgradePolicy.EnableAutomaticOSUpgrade = this.AutomaticOSUpgrade; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.AutomaticRepairsPolicy.MaxInstanceRepairsPercent = this.AutomaticRepairMaxInstanceRepairsPercent; " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.Enabled = this.BootDiagnosticsEnabled; " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.StorageUri = this.BootDiagnosticsStorageUri; " is 135.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.AutomaticOSUpgradePolicy.DisableAutomaticRollback = this.DisableAutoRollback; " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = this.DisablePasswordAuthentication; " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = this.EnableAutomaticUpdate; " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.Identity.UserAssignedIdentities = new Dictionary<string' VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue>(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                        this.VirtualMachineScaleSetUpdate.Identity.UserAssignedIdentities.Add(id' new VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue()); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = this.ImageReferencePublisher; " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Version = this.ImageReferenceVersion; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new VirtualMachineScaleSetManagedDiskParameters(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = this.ManagedDiskStorageAccountType; " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxBatchInstancePercent = this.MaxBatchInstancePercent; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = this.MaxUnhealthyInstancePercent; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = this.MaxUnhealthyUpgradedInstancePercent; " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.WriteAcceleratorEnabled = this.OsDiskWriteAccelerator; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.PauseTimeBetweenBatches = this.PauseTimeBetweenBatches; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = this.ProvisionVMAgent; " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.Tags = this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                if (this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile == null) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile = new TerminateNotificationProfile(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile.NotBeforeTimeout = XmlConvert.ToString(new TimeSpan(0' this.TerminateScheduledEventNotBeforeTimeoutInMinutes' 0)); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                if (this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile == null) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile = new TerminateNotificationProfile(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile.Enable = this.TerminateScheduledEvents; " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new VirtualMachineScaleSetUpdateStorageProfile(); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new VirtualMachineScaleSetUpdateOSDisk(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.AutomaticRepairsPolicy.MaxInstanceRepairsPercent = this.AutomaticRepairMaxInstanceRepairsPercent; " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.Enabled = this.BootDiagnosticsEnabled; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.StorageUri = this.BootDiagnosticsStorageUri; " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = this.DisablePasswordAuthentication; " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = this.EnableAutomaticUpdate; " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.Identity.UserAssignedIdentities = new Dictionary<string' VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue>(); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                        this.VirtualMachineScaleSet.Identity.UserAssignedIdentities.Add(id' new VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue()); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = this.ImageReferencePublisher; " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new VirtualMachineScaleSetManagedDiskParameters(); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = this.ManagedDiskStorageAccountType; " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = this.MaxUnhealthyInstancePercent; " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = this.MaxUnhealthyUpgradedInstancePercent; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.WriteAcceleratorEnabled = this.OsDiskWriteAccelerator; " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = this.ProvisionVMAgent; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.Tags = this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile = new TerminateNotificationProfile(); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile.NotBeforeTimeout = XmlConvert.ToString(new TimeSpan(0' this.TerminateScheduledEventNotBeforeTimeoutInMinutes' 0)); " is 216.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile = new TerminateNotificationProfile(); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.ScheduledEventsProfile.TerminateNotificationProfile.Enable = this.TerminateScheduledEvents; " is 141.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ConvertToAzureRmVMManagedDisk,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachine\VirtualMachineConvertToManagedDisksMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachinesClient.ConvertToManagedDisksWithHttpMessagesAsync(resourceGroupName' vmName).GetAwaiter().GetResult(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureRmVMReimage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachine\VirtualMachineReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                    var result = VirtualMachinesClient.ReimageWithHttpMessagesAsync(resourceGroupName' vmName' tempDisk).GetAwaiter().GetResult(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureRmVMRunCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachine\VirtualMachineRunCommandMethod.cs,ExecuteCmdlet,The length of the statement  "                        string fileContent = Commands.Common.Authentication.Abstractions.FileUtilities.DataStore.ReadFileAsText(filePath.FullName); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Manual\VirtualMachineScaleSetCreateOrUpdateMethod.cs,CreateConfigAsync,The length of the statement  "                var proximityPlacementGroup = resourceGroup.CreateProximityPlacementGroupSubResourceFunc(_cmdlet.ProximityPlacementGroup); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\AddAzureVhdCommand.cs,CreateStorageCredentialsFactory,The length of the statement  "                storageCredentialsFactory = new StorageCredentialsFactory(this.ResourceGroupName' storageClient' DefaultContext.Subscription); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,GetGalleryImageAndOsTypeAsync,The length of the statement  "                var localImageVersion = await compute.GalleryImageVersions.GetAsync(resourceGroupName' GetGaleryName(resourceId)' GetImageName(resourceId)' GetImageVersion(resourceId)); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,GetGalleryImageAndOsTypeAsync,The length of the statement  "            var localImage = await compute.GalleryImages.GetAsync(resourceGroupName' GetGaleryName(resourceId)' GetImageName(resourceId)); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,GetGaleryName,The length of the statement  "            Regex r = new Regex(@"(.*?)/" + RESOURCE_NAME_STRING + @"/(?<rgname>\S+)/" + INSTANCE_NAME_STRING + @"/(?<instanceId>\S+)"' RegexOptions.IgnoreCase); " is 149.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,GetImageName,The length of the statement  "                    ? new Regex(@"(.*?)/" + RESOURCE_NAME_STRING + @"/(?<rgname>\S+)/" + INSTANCE_NAME_STRING + @"/(?<instanceId>\S+)/" + VERSION_STRING + @"/(?<version>\S+)"' RegexOptions.IgnoreCase) " is 180.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,GetImageName,The length of the statement  "                    : new Regex(@"(.*?)/" + RESOURCE_NAME_STRING + @"/(?<rgname>\S+)/" + INSTANCE_NAME_STRING + @"/(?<instanceId>\S+)"' RegexOptions.IgnoreCase); " is 141.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,GetImageVersion,The length of the statement  "            Regex r = new Regex(@"(.*?)/" + RESOURCE_NAME_STRING + @"/(?<rgname>\S+)/" + INSTANCE_NAME_STRING + @"/(?<instanceId>\S+)/" + VERSION_STRING + @"/(?<version>\S+)"' RegexOptions.IgnoreCase); " is 189.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,Images,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\Images.cs,GenerateImageDictionary,The length of the statement  "                Dictionary<string' object> jsonFile = (Dictionary<string' object>)JsonConvert.DeserializeObject(reader.ReadToEnd()' typeof(Dictionary<string' object>)); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,Images,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\Images.cs,GenerateImageDictionary,The length of the statement  "                    Dictionary<string' object> osDict = (Dictionary<string' object>)JsonConvert.DeserializeObject(jsonFile[oSType].ToString()' typeof(Dictionary<string' object>)); " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,Images,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\Images.cs,GenerateImageDictionary,The length of the statement  "                        Dictionary<string' string> computerDict = (Dictionary<string' string>)JsonConvert.DeserializeObject(osDict[computerType].ToString()' typeof(Dictionary<string' string>)); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Strategies.Network,LoadBalancerStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\LoadBalancerStrategy.cs,EvaluatePreExistingConfig,The length of the statement  "            throw new System.ArgumentException("Existing loadbalancer config is not compatible with what is required by the cmdlet. Kindly rerun the cmdlet after deleting the existing LB with name : " + configToCompare.Name + " and ID : " + configToCompare.Id); " is 249.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobHandle.cs,GetPageRanges,The length of the statement  "            IEnumerable<PageRange> pageRanges = pageBlob.GetPageRangesAsync(null' null' new AccessCondition()' blobRequestOptions' operationContext: null) " is 142.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobHandle.cs,OpenStream,The length of the statement  "            return this.container.GetPageBlobReference(blobUri.BlobName).OpenReadAsync(new AccessCondition()' blobRequestOptions' operationContext: null) " is 141.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,ToString,The length of the statement  "                if (((!flag || (key == null)) || !key.StartsWith("__VIEWSTATE"' StringComparison.Ordinal)) && (((excludeKeys == null) || (key == null)) || (excludeKeys[key] == null))) " is 167.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,Download,The length of the statement  "                    var message = String.Format("File already exists' you can use Overwrite option to delete it:'{0}'"' parameters.LocalFilePath); " is 126.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,Download,The length of the statement  "                using (new ProgressTracker(downloadStatus' parameters.ProgressDownloadStatus' parameters.ProgressDownloadComplete' TimeSpan.FromSeconds(1))) " is 140.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,Download,The length of the statement  "                    using (var fileStream = new FileStream(parameters.LocalFilePath' FileMode.OpenOrCreate' FileAccess.Write' FileShare.Write' 8 * megaByte' FileOptions.WriteThrough)) " is 163.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,TryValidateFreeDiskSpace,The length of the statement  "                    string message = String.Format("Insufficient disk space: Blob's size is {0}' however available space is {1}."' blobLength' info.AvailableFreeSpace); " is 148.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\BlobCreatorBase.cs,AssertIfValidVhdSize,The length of the statement  "                    string message = String.Format("VHD size is too large ('{0}')' maximum allowed size is '{1}'."' lengthString' expectedLengthString); " is 132.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\BlobCreatorBase.cs,Create,The length of the statement  "                    destinationBlob.DeleteIfExistsAsync(DeleteSnapshotsOption.IncludeSnapshots' null' requestOptions' operationContext: null) " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\BlobCreatorBase.cs,AssertMetaDataExists,The length of the statement  "                throw new InvalidOperationException("There is no CsUpload metadata on the blob' so CsUpload cannot resume. Use the overwrite option."); " is 135.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\BlobCreatorBase.cs,AssertMetaDataMatch,The length of the statement  "            if (String.Compare(systemInformation.MachineName' Environment.MachineName' CultureInfo.InvariantCulture' CompareOptions.IgnoreCase) != 0) " is 137.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\BlobCreatorBase.cs,CompareFileMetaData,The length of the statement  "                var message = String.Format("Last modified date of VHD file in blob storage ({0}) and local VHD file ({1}) does not match "' " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,CloudPageBlobExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\ExtensionMethods.cs,ListContainerBlobs,The length of the statement  "                var listingResult = container.ListBlobsSegmentedAsync(prefix' useFlatBlobListing' details' maxBlobsPerRequest' continuationToken' options' null) " is 144.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,ExceptionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\ExtensionMethods.cs,DumpStorageExceptionErrorDetails,The length of the statement  "                message.Append(key).Append(":").Append(storageException.RequestInformation.ExtendedErrorInformation.AdditionalDetails[key]); " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\PatchingBlobCreator.cs,CreateRemoteBlob,The length of the statement  "                throw new InvalidOperationException(String.Format("Base image to patch doesn't exist in blob storage: {0}"' baseVhdBlobUri.Uri)); " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\PatchingBlobCreator.cs,CreateRemoteBlob,The length of the statement  "                var message = String.Format("Patching cannot proceed' MD5 hash of base image in blob storage ({0}) and base VHD file ({1}) does not match "' " is 140.
Long Statement,Microsoft.WindowsAzure.Commands.Sync.Upload,PatchingBlobCreator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\PatchingBlobCreator.cs,CopyBaseImageToDestination,The length of the statement  "            using (new ProgressTracker(copyStatus' Program.SyncOutput.ProgressCopyStatus' Program.SyncOutput.ProgressCopyComplete' TimeSpan.FromSeconds(1))) " is 144.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncOperation,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,AsyncCallback,The length of the statement  "            // this.CheckOperationCompletion will set AsyncOperation.IsCompleted to false if quorum is reached or timeout is expired' " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncOperation,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,AsyncCallback,The length of the statement  "            if (!this.IsCompleted && this.EndAsynchronousOperation != null && Interlocked.CompareExchange(ref this.isEndOperationCalled' True' False) == False) " is 147.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The length of the statement  "            machine.Start(engine(machine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' param11)); " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,MoveNextInternal,The length of the statement  "                // Call to asynchronous I/O was completed synchronously (i.e. this thread is currently executing MoveNext down the stack) " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The length of the statement  "            machine.Start(engine(machine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' param11)); " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Common.General,AsyncMachine<TReturn;T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Async\AsyncMachine.cs,BeginAsyncMachine,The length of the statement  "            machine.Start(engine(machine' param1' param2' param3' param4' param5' param6' param7' param8' param9' param10' param11)); " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,AttributeHelper<T>,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\AttributeHelper.cs,GetEntityAttribute,The length of the statement  "                throw new InvalidOperationException(String.Format("Entity must have the attribute:{0}"' typeof(VhdEntityAttribute).Name)); " is 122.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdValidator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Model.cs,BeginValidate,The length of the statement  "            return AsyncMachine<IList<VhdValidationResult>>.BeginAsyncMachine(ValidateAsync' validation' vhdStream' callback' state); " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,Equals,The length of the statement  "            return Equals(other.Cookie' Cookie) && Equals(other.Features' Features) && Equals(other.FileFormatVersion' FileFormatVersion) && other.HeaderOffset == HeaderOffset && other.TimeStamp.Equals(TimeStamp) && Equals(other.CreatorApplication' CreatorApplication) && Equals(other.CreatorVersion' CreatorVersion) && Equals(other.CreatorHostOsType' CreatorHostOsType) && other.PhsyicalSize == PhsyicalSize && other.VirtualSize == VirtualSize && Equals(other.DiskGeometry' DiskGeometry) && Equals(other.DiskType' DiskType) && other.CheckSum == CheckSum && other.UniqueId.Equals(UniqueId) && other.SavedState.Equals(SavedState) && Equals(other.Reserved' Reserved) && Equals(other.RawData' RawData); " is 687.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,BeginReadString,The length of the statement  "            return AsyncMachine<string>.BeginAsyncMachine(ReadStringAsync' this.reader.BaseStream.Position' count' callback' state); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFileFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFileFactory.cs,Create,The length of the statement  "                        var parentPath = streamSource.VhdDirectory == null ? header.ParentPath : Path.Combine(streamSource.VhdDirectory' header.GetRelativeParentPath()); " is 145.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFileFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFileFactory.cs,CreateAsync,The length of the statement  "                    var parentPath = streamSource.VhdDirectory == null ? header.ParentPath : Path.Combine(streamSource.VhdDirectory' header.GetRelativeParentPath()); " is 145.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,CreateFooterAsync,The length of the statement  "            BeginReadVhdFileFormatVersion(attributeHelper.GetAttribute(() => footer.FileFormatVersion)' machine.CompletionCallback' null); " is 126.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,CreateFooterAsync,The length of the statement  "            BeginReadCreatorApplication(attributeHelper.GetAttribute(() => footer.CreatorApplication)' machine.CompletionCallback' null); " is 125.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,CreateFooterAsync,The length of the statement  "            BeginReadCreatorHostOsType(attributeHelper.GetAttribute(() => footer.CreatorHostOsType)' machine.CompletionCallback' null); " is 123.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,ReadDiskGeometry,The length of the statement  "            diskGeometry.Cylinder = dataReader.ReadInt16(offset + attributeHelper.GetAttribute(() => diskGeometry.Cylinder).Offset); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,ReadDiskGeometryAsync,The length of the statement  "            dataReader.BeginReadInt16(offset + attributeHelper.GetAttribute(() => diskGeometry.Cylinder).Offset' machine.CompletionCallback' null); " is 135.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,ReadDiskGeometryAsync,The length of the statement  "            dataReader.BeginReadByte(offset + attributeHelper.GetAttribute(() => diskGeometry.Heads).Offset' machine.CompletionCallback' null); " is 131.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterFactory.cs,ReadDiskGeometryAsync,The length of the statement  "            dataReader.BeginReadByte(offset + attributeHelper.GetAttribute(() => diskGeometry.Sectors).Offset' machine.CompletionCallback' null); " is 133.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdParentLocatorFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdParentLocatorFactory.cs,CreateParentLocator,The length of the statement  "            BeginReadPlatformDataSpace(attributeHelper.GetAttribute(() => locator.PlatformDataSpace)' machine.CompletionCallback' null); " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdParentLocatorFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdParentLocatorFactory.cs,CreateParentLocator,The length of the statement  "            BeginReadPlatformDataLength(attributeHelper.GetAttribute(() => locator.PlatformDataLength)' machine.CompletionCallback' null); " is 126.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdParentLocatorFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdParentLocatorFactory.cs,CreateParentLocator,The length of the statement  "            BeginReadPlatformDataOffset(attributeHelper.GetAttribute(() => locator.PlatformDataOffset)' machine.CompletionCallback' null); " is 126.
Long Statement,Microsoft.WindowsAzure.Commands.Tools.Vhd,VirtualDiskStream,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\VirtualDiskStream.cs,Read,The length of the statement  "                    Buffer.BlockCopy(currentBlock.Data' (int)copyStartIndex' buffer' offset + writtenCount' (int)rangeToReadInBlock.Length); " is 120.
Complex Conditional,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The conditional expression  "!this.SkipStorageCheck.IsPresent && (!String.IsNullOrEmpty(deploymentId)) && (!String.IsNullOrEmpty(roleName)) && (!String.IsNullOrEmpty(wadstorage))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,The conditional expression  "(string.IsNullOrEmpty(this.KeyEncryptionKeyVaultId) && !string.IsNullOrEmpty(this.KeyEncryptionKeyUrl))                  || (!string.IsNullOrEmpty(this.KeyEncryptionKeyVaultId) && string.IsNullOrEmpty(this.KeyEncryptionKeyUrl))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute,GetAzureVMBootDiagnosticsDataCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMBootDiagnosticsDataCommand.cs,ExecuteCmdlet,The conditional expression  "result.Body.DiagnosticsProfile == null                      || result.Body.DiagnosticsProfile.BootDiagnostics == null                      || result.Body.DiagnosticsProfile.BootDiagnostics.Enabled == null                      || !result.Body.DiagnosticsProfile.BootDiagnostics.Enabled.Value                      || result.Body.DiagnosticsProfile.BootDiagnostics.StorageUri == null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetStorageAccountNameFromStorageProfile,The conditional expression  "this.VM == null                  || this.VM.StorageProfile == null                  || this.VM.StorageProfile.OsDisk == null                  || this.VM.StorageProfile.OsDisk.Vhd == null                  || this.VM.StorageProfile.OsDisk.Vhd.Uri == null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The conditional expression  "(CurrentConfig == null)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration") == null)              || (int.Parse(CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/@overallQuotaInMB").Value) < 4096)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters") == null)              || (!CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/@scheduledTransferPeriod").                      Value.Equals("PT1M"' StringComparison.InvariantCultureIgnoreCase))              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration") == null)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckStorageAnalytics,The conditional expression  "(currentConfig == null)                  || (currentConfig.Logging == null)                  || ((currentConfig.Logging.LoggingOperations & LoggingOperations.All) != LoggingOperations.All)                  || (currentConfig.MinuteMetrics == null)                  || (currentConfig.MinuteMetrics.MetricsLevel <= 0)                  || (currentConfig.MinuteMetrics.RetentionDays < 0)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The conditional expression  "(OperatingSystemTypes.Windows.Equals(currentOSType) && parameters.TypeHandlerVersion.Equals(AzureDiskEncryptionExtensionContext.ExtensionSinglePassVersion)) ||                          (OperatingSystemTypes.Linux.Equals(currentOSType) && parameters.TypeHandlerVersion.Equals(AzureDiskEncryptionExtensionContext.LinuxExtensionSinglePassVersion)) ||                          (OperatingSystemTypes.Windows.Equals(currentOSType) && !string.IsNullOrEmpty(VolumeType) && VolumeType.Equals(AzureDiskEncryptionExtensionContext.VolumeTypeData' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsWindowsOsVolumeEncryptedDualPass,The conditional expression  "osEncryptionSettings != null                          && osEncryptionSettings.DiskEncryptionKey != null                          && !string.IsNullOrEmpty(osEncryptionSettings.DiskEncryptionKey.SecretUrl)                          && osEncryptionSettings.Enabled == true"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,FindEncryptionExtensionInstanceView,The conditional expression  "!string.IsNullOrWhiteSpace(extension.Type) &&                      extension.Type.StartsWith(extensionPublisher' StringComparison.InvariantCultureIgnoreCase) &&                      !string.IsNullOrWhiteSpace(extension.Name) &&                      extension.Name.Equals(extensionName' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The conditional expression  "(context == null) ||                      (context.Statuses == null) ||                      (context.Statuses.Count < 1) ||                      (string.IsNullOrWhiteSpace(context.Statuses[0].Message))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\VmssDiskEncryption\GetAzureVmssDiskEncryptionStatus.cs,GetVmssDiskStatus,The conditional expression  "vmssResult.VirtualMachineProfile == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile.Extensions == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile.Extensions.Count == 0"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmGalleryImageVersion,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImageVersion\GalleryImageVersionGetMethod.cs,ExecuteCmdlet,The conditional expression  "!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(galleryName) && !string.IsNullOrEmpty(galleryImageName)                       && !string.IsNullOrEmpty(galleryImageVersionName) && !WildcardPattern.ContainsWildcardCharacters(galleryImageVersionName)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmGalleryImage,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\GalleryImage\GalleryImageGetMethod.cs,ExecuteCmdlet,The conditional expression  "!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(galleryName)                       && !string.IsNullOrEmpty(galleryImageName) && !WildcardPattern.ContainsWildcardCharacters(galleryImageName)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The conditional expression  "this.VirtualMachineScaleSetUpdate != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration != null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The conditional expression  "this.VirtualMachineScaleSet != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration != null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,The conditional expression  "resourceId == null                      || resourceId.ResourceType.Namespace != ComputeStrategy.Namespace                      || ( resourceId.ResourceType.Provider != "images")                         && resourceId.ResourceType.Provider != "galleries""  is complex.
Complex Conditional,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,UrlDecodeStringFromStringInternal,The conditional expression  "((num3 < 0) || (num4 < 0)) || ((num5 < 0) || (num6 < 0))"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,IsSafe,The conditional expression  "(((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z'))) || ((ch >= '0') && (ch <= '9'))"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Commands.Sync.Download,HttpValueCollection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,ToString,The conditional expression  "((!flag || (key == null)) || !key.StartsWith("__VIEWSTATE"' StringComparison.Ordinal)) && (((excludeKeys == null) || (key == null)) || (excludeKeys[key] == null))"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.Compute,ComputeClientBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\ComputeClientBaseCmdlet.cs,ExecuteClientAction,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,GetPowerstate,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigFileType,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Common\DiagnosticsHelper.cs,GetConfigFileType,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,The method has an empty catch block.
Empty Catch Block,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,TryValidateFreeDiskSpace,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  this._Helper.WriteVerbose("Retrieving VM...");                    var selectedVM = ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName);                  var selectedVMStatus = ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView;                    if (selectedVM == null)                  {                      var subscriptionId = this.DefaultContext.Subscription.Id;                      this._Helper.WriteError("No virtual machine with name {0} in resource group {1} in subscription {2} found"' this.VMName' this.ResourceGroupName' subscriptionId);                      return;                  }                    var osdisk = selectedVM.StorageProfile.OsDisk;                    if (String.IsNullOrEmpty(this.OSType))                  {                      this.OSType = osdisk.OsType.ToString();                  }                  if (String.IsNullOrEmpty(this.OSType))                  {                      this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"'                          AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux);                      return;                  }                    var disks = selectedVM.StorageProfile.DataDisks;                    var sapmonPublicConfig = new List<KeyValuePair>();                  var sapmonPrivateConfig = new List<KeyValuePair>();                  var cpuOvercommit = 0;                  var memOvercommit = 0;                  var vmsize = selectedVM.HardwareProfile.VmSize;                  switch (vmsize)                  {                      case AEMExtensionConstants.VMSizeExtraSmall:                      case AEMExtensionConstants.VMSizeStandard_A0:                      case AEMExtensionConstants.VMSizeBasic_A0:                          vmsize = "ExtraSmall (A0)";                          WriteVerbose("VM Size is ExtraSmall - setting overcommitted setting");                          cpuOvercommit = 1;                          break;                      case "Small":                          vmsize = "Small (A1)";                          break;                      case "Medium":                          vmsize = "Medium (A2)";                          break;                      case "Large":                          vmsize = "Large (A3)";                          break;                      case "ExtraLarge":                          vmsize = "ExtraLarge (A4)";                          break;                  }                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vmsize"' Value = vmsize });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.role"' Value = "IaaS" });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.memory.isovercommitted"' Value = memOvercommit });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.cpu.isovercommitted"' Value = cpuOvercommit });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "script.version"' Value = AEMExtensionConstants.CurrentScriptVersion });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "verbose"' Value = "0" });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "href"' Value = "http://aka.ms/sapaem" });                    var vmSLA = this._Helper.GetVMSLA(selectedVM);                  if (vmSLA.HasSLA)                  {                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.sla.throughput"' Value = vmSLA.TP });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.sla.iops"' Value = vmSLA.IOPS });                  }                    // Get Disks                  var accounts = new Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase);                  if (osdisk.ManagedDisk == null)                  {                      var accountName = this._Helper.GetStorageAccountFromUri(osdisk.Vhd.Uri);                      var storageKey = this._Helper.GetAzureStorageKeyFromCache(accountName);                      accounts.Add(accountName' storageKey);                        this._Helper.WriteHost("[INFO] Adding configuration for OS disk");                        var caching = osdisk.Caching;                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = this._Helper.GetDiskName(osdisk.Vhd.Uri) });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.caching"' Value = caching });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.account"' Value = accountName });                      if (this._Helper.IsPremiumStorageAccount(accountName))                      {                          WriteVerbose("OS Disk Storage Account is a premium account - adding SLAs for OS disk");                          var sla = this._Helper.GetDiskSLA(osdisk);                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.throughput"' Value = sla.TP });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.iops"' Value = sla.IOPS });                      }                      else                      {                          WriteVerbose("OS Disk Storage Account is a standard account");                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_STANDARD });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.connminute"' Value = (accountName + ".minute") });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.connhour"' Value = (accountName + ".hour") });                      }                  }                  else                  {                      var resId = new ResourceIdentifier(osdisk.ManagedDisk.Id);                        var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(resId.ResourceGroupName' resId.ResourceName);                      if (osDiskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                      {                          WriteVerbose("OS Disk is a Premium Managed Disk - adding SLAs for OS disk");                          var sla = this._Helper.GetDiskSLA(osDiskMD.DiskSizeGB' null);                          var caching = osdisk.Caching;                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = resId.ResourceName });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.caching"' Value = caching });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.throughput"' Value = sla.TP });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.iops"' Value = sla.IOPS });                      }                      else                      {                          this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available.");                      }                  }                    // Get Storage accounts from disks                  var diskNumber = 1;                  foreach (var disk in disks)                  {                      if (disk.ManagedDisk != null)                      {                          var resId = new ResourceIdentifier(disk.ManagedDisk.Id);                            var diskMD = ComputeClient.ComputeManagementClient.Disks.Get(resId.ResourceGroupName' resId.ResourceName);                            if (diskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                          {                              this._Helper.WriteVerbose("Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                              var cachingMD = disk.Caching;                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = resId.ResourceName });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = cachingMD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = sla.TP });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = sla.IOPS });                              this._Helper.WriteVerbose("Done - Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString());                          }                          else if (diskMD.Sku.Name == StorageAccountTypes.UltraSSDLRS)                          {                              this._Helper.WriteVerbose("Data Disk {0} is an UltraSSD Disk - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                              var cachingMD = disk.Caching;                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = resId.ResourceName });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = cachingMD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_ULTRA_MD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = diskMD.DiskMBpsReadWrite });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = diskMD.DiskIOPSReadWrite });                              this._Helper.WriteVerbose("Done - Data Disk {0} is an UltraSSD Disk - adding SLAs for disk"' diskNumber.ToString());                          }                          else                          {                              this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available.");                            }                      }                      else                      {                            var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                          if (!accounts.ContainsKey(accountName))                          {                              var storageKey = this._Helper.GetAzureStorageKeyFromCache(accountName);                              accounts.Add(accountName' storageKey);                          }                            this._Helper.WriteHost("[INFO] Adding configuration for data disk {0}"' disk.Name);                          var caching = disk.Caching;                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetDiskName(disk.Vhd.Uri) });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = caching });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.account." + diskNumber' Value = accountName });                            if (this._Helper.IsPremiumStorageAccount(accountName))                          {                              this._Helper.WriteVerbose("Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(disk);                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = sla.TP });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = sla.IOPS });                              this._Helper.WriteVerbose("Done - Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString());                            }                          else                          {                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_STANDARD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connminute." + diskNumber' Value = (accountName + ".minute") });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connhour." + diskNumber' Value = (accountName + ".hour") });                          }                      }                      diskNumber += 1;                  }                    //Check storage accounts for analytics                  foreach (var account in accounts)                  {                      this._Helper.WriteVerbose("Testing Storage Metrics for {0}"' account.Key);                        var storage = this._Helper.GetStorageAccountFromCache(account.Key);                        if (!this._Helper.IsPremiumStorageAccount(storage))                      {                          if (!this.SkipStorage.IsPresent)                          {                              var currentConfig = this._Helper.GetStorageAnalytics(storage.Name);                                if (!this._Helper.CheckStorageAnalytics(storage.Name' currentConfig))                              {                                  this._Helper.WriteHost("[INFO] Enabling Storage Account Metrics for storage account {0}"' storage.Name);                                    // Enable analytics on storage accounts                                  this.SetStorageAnalytics(storage.Name);                              }                          }                            var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                          var hourUri = endpoint + "$MetricsHourPrimaryTransactionsBlob";                          var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                            this._Helper.WriteHost("[INFO] Adding Storage Account Metric information for storage account {0}"' storage.Name);                            sapmonPrivateConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.key")' Value = account.Value });                          sapmonPrivateConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.key")' Value = account.Value });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.uri")' Value = hourUri });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.uri")' Value = minuteUri });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.name")' Value = storage.Name });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.name")' Value = storage.Name });                      }                      else                      {                          this._Helper.WriteHost("[INFO] {0} is of type {1} - Storage Account Metrics are not available for Premium Type Storage."' storage.Name' storage.SkuName());                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.ispremium")' Value = 1 });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.ispremium")' Value = 1 });                      }                  }                    WriteVerbose("Chechking if WAD needs to be configured");                  // Enable VM Diagnostics                  if (this.EnableWAD.IsPresent)                  {                      this._Helper.WriteHost("[INFO] Enabling IaaSDiagnostics for VM {0}"' selectedVM.Name);                      KeyValuePair wadstorage = null;                      if (String.IsNullOrEmpty(this.WADStorageAccountName))                      {                          KeyValuePair<string' string>? wadstorageTemp = accounts.Cast<KeyValuePair<string' string>?>().                              FirstOrDefault(accTemp => !this._Helper.IsPremiumStorageAccount(accTemp.Value.Key));                          if (wadstorageTemp.HasValue)                          {                              wadstorage = new KeyValuePair(wadstorageTemp.Value.Key' wadstorageTemp.Value.Value);                          }                      }                      else                      {                          wadstorage = new KeyValuePair(this.WADStorageAccountName' this._Helper.GetAzureStorageKeyFromCache(WADStorageAccountName));                      }                        if (wadstorage == null)                      {                          this._Helper.WriteError("A standard storage account is required. Please use parameter WADStorageAccountName to specify a standard storage account you want to use for this VM.");                          return;                      }                        selectedVM = SetAzureVMDiagnosticsExtensionC(selectedVM' selectedVMStatus' wadstorage.Key' wadstorage.Value as string);                        var storage = this._Helper.GetStorageAccountFromCache(wadstorage.Key);                      var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                      var wadUri = endpoint + AEMExtensionConstants.WadTableName;                        sapmonPrivateConfig.Add(new KeyValuePair() { Key = "wad.key"' Value = wadstorage.Value });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.name"' Value = wadstorage.Key });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.isenabled"' Value = 1 });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.uri"' Value = wadUri });                  }                  else                  {                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.isenabled"' Value = 0 });                  }                    ExtensionConfig jsonPublicConfig = new ExtensionConfig();                  jsonPublicConfig.Config = sapmonPublicConfig;                    ExtensionConfig jsonPrivateConfig = new ExtensionConfig();                  jsonPrivateConfig.Config = sapmonPrivateConfig;                    this._Helper.WriteHost("[INFO] Updating Azure Enhanced Monitoring Extension for SAP configuration - Please wait...");                    WriteVerbose("Installing AEM extension");                    Version aemVersion = this._Helper.GetExtensionVersion(selectedVM' selectedVMStatus' OSType' AEMExtensionConstants.AEMExtensionType[OSType]' AEMExtensionConstants.AEMExtensionPublisher[OSType]);                    if (NoWait.IsPresent)                  {                      var op = this.VirtualMachineExtensionClient.BeginCreateOrUpdateWithHttpMessagesAsync(                          this.ResourceGroupName' this.VMName' AEMExtensionConstants.AEMExtensionDefaultName[OSType]'                          new VirtualMachineExtension()                          {                              Publisher = AEMExtensionConstants.AEMExtensionPublisher[OSType]'                              VirtualMachineExtensionType = AEMExtensionConstants.AEMExtensionType[OSType]'                              TypeHandlerVersion = aemVersion.ToString(2)'                              Settings = jsonPublicConfig'                              ProtectedSettings = jsonPrivateConfig'                              Location = selectedVM.Location'                              AutoUpgradeMinorVersion = true'                              ForceUpdateTag = DateTime.Now.Ticks.ToString()                          }).GetAwaiter().GetResult();                        this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system.");                      this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzVMAEMExtension commandlet.");                        var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                      WriteObject(result);                  }                  else                  {                      var op = this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                          this.ResourceGroupName' this.VMName' AEMExtensionConstants.AEMExtensionDefaultName[OSType]'                          new VirtualMachineExtension()                          {                              Publisher = AEMExtensionConstants.AEMExtensionPublisher[OSType]'                              VirtualMachineExtensionType = AEMExtensionConstants.AEMExtensionType[OSType]'                              TypeHandlerVersion = aemVersion.ToString(2)'                              Settings = jsonPublicConfig'                              ProtectedSettings = jsonPrivateConfig'                              Location = selectedVM.Location'                              AutoUpgradeMinorVersion = true'                              ForceUpdateTag = DateTime.Now.Ticks.ToString()                          }).GetAwaiter().GetResult();                        this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system.");                      this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzVMAEMExtension commandlet.");                        var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                      WriteObject(result);                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  this._Helper.WriteVerbose("Retrieving VM...");                    var selectedVM = ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName);                  var selectedVMStatus = ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView;                    if (selectedVM == null)                  {                      var subscriptionId = this.DefaultContext.Subscription.Id;                      this._Helper.WriteError("No virtual machine with name {0} in resource group {1} in subscription {2} found"' this.VMName' this.ResourceGroupName' subscriptionId);                      return;                  }                    var osdisk = selectedVM.StorageProfile.OsDisk;                    if (String.IsNullOrEmpty(this.OSType))                  {                      this.OSType = osdisk.OsType.ToString();                  }                  if (String.IsNullOrEmpty(this.OSType))                  {                      this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"'                          AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux);                      return;                  }                    var disks = selectedVM.StorageProfile.DataDisks;                    var sapmonPublicConfig = new List<KeyValuePair>();                  var sapmonPrivateConfig = new List<KeyValuePair>();                  var cpuOvercommit = 0;                  var memOvercommit = 0;                  var vmsize = selectedVM.HardwareProfile.VmSize;                  switch (vmsize)                  {                      case AEMExtensionConstants.VMSizeExtraSmall:                      case AEMExtensionConstants.VMSizeStandard_A0:                      case AEMExtensionConstants.VMSizeBasic_A0:                          vmsize = "ExtraSmall (A0)";                          WriteVerbose("VM Size is ExtraSmall - setting overcommitted setting");                          cpuOvercommit = 1;                          break;                      case "Small":                          vmsize = "Small (A1)";                          break;                      case "Medium":                          vmsize = "Medium (A2)";                          break;                      case "Large":                          vmsize = "Large (A3)";                          break;                      case "ExtraLarge":                          vmsize = "ExtraLarge (A4)";                          break;                  }                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vmsize"' Value = vmsize });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.role"' Value = "IaaS" });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.memory.isovercommitted"' Value = memOvercommit });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.cpu.isovercommitted"' Value = cpuOvercommit });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "script.version"' Value = AEMExtensionConstants.CurrentScriptVersion });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "verbose"' Value = "0" });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "href"' Value = "http://aka.ms/sapaem" });                    var vmSLA = this._Helper.GetVMSLA(selectedVM);                  if (vmSLA.HasSLA)                  {                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.sla.throughput"' Value = vmSLA.TP });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.sla.iops"' Value = vmSLA.IOPS });                  }                    // Get Disks                  var accounts = new Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase);                  if (osdisk.ManagedDisk == null)                  {                      var accountName = this._Helper.GetStorageAccountFromUri(osdisk.Vhd.Uri);                      var storageKey = this._Helper.GetAzureStorageKeyFromCache(accountName);                      accounts.Add(accountName' storageKey);                        this._Helper.WriteHost("[INFO] Adding configuration for OS disk");                        var caching = osdisk.Caching;                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = this._Helper.GetDiskName(osdisk.Vhd.Uri) });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.caching"' Value = caching });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.account"' Value = accountName });                      if (this._Helper.IsPremiumStorageAccount(accountName))                      {                          WriteVerbose("OS Disk Storage Account is a premium account - adding SLAs for OS disk");                          var sla = this._Helper.GetDiskSLA(osdisk);                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.throughput"' Value = sla.TP });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.iops"' Value = sla.IOPS });                      }                      else                      {                          WriteVerbose("OS Disk Storage Account is a standard account");                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_STANDARD });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.connminute"' Value = (accountName + ".minute") });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.connhour"' Value = (accountName + ".hour") });                      }                  }                  else                  {                      var resId = new ResourceIdentifier(osdisk.ManagedDisk.Id);                        var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(resId.ResourceGroupName' resId.ResourceName);                      if (osDiskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                      {                          WriteVerbose("OS Disk is a Premium Managed Disk - adding SLAs for OS disk");                          var sla = this._Helper.GetDiskSLA(osDiskMD.DiskSizeGB' null);                          var caching = osdisk.Caching;                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = resId.ResourceName });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.caching"' Value = caching });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.throughput"' Value = sla.TP });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.iops"' Value = sla.IOPS });                      }                      else                      {                          this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available.");                      }                  }                    // Get Storage accounts from disks                  var diskNumber = 1;                  foreach (var disk in disks)                  {                      if (disk.ManagedDisk != null)                      {                          var resId = new ResourceIdentifier(disk.ManagedDisk.Id);                            var diskMD = ComputeClient.ComputeManagementClient.Disks.Get(resId.ResourceGroupName' resId.ResourceName);                            if (diskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                          {                              this._Helper.WriteVerbose("Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                              var cachingMD = disk.Caching;                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = resId.ResourceName });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = cachingMD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = sla.TP });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = sla.IOPS });                              this._Helper.WriteVerbose("Done - Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString());                          }                          else if (diskMD.Sku.Name == StorageAccountTypes.UltraSSDLRS)                          {                              this._Helper.WriteVerbose("Data Disk {0} is an UltraSSD Disk - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                              var cachingMD = disk.Caching;                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = resId.ResourceName });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = cachingMD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_ULTRA_MD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = diskMD.DiskMBpsReadWrite });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = diskMD.DiskIOPSReadWrite });                              this._Helper.WriteVerbose("Done - Data Disk {0} is an UltraSSD Disk - adding SLAs for disk"' diskNumber.ToString());                          }                          else                          {                              this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available.");                            }                      }                      else                      {                            var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                          if (!accounts.ContainsKey(accountName))                          {                              var storageKey = this._Helper.GetAzureStorageKeyFromCache(accountName);                              accounts.Add(accountName' storageKey);                          }                            this._Helper.WriteHost("[INFO] Adding configuration for data disk {0}"' disk.Name);                          var caching = disk.Caching;                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetDiskName(disk.Vhd.Uri) });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = caching });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.account." + diskNumber' Value = accountName });                            if (this._Helper.IsPremiumStorageAccount(accountName))                          {                              this._Helper.WriteVerbose("Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(disk);                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = sla.TP });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = sla.IOPS });                              this._Helper.WriteVerbose("Done - Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString());                            }                          else                          {                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_STANDARD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connminute." + diskNumber' Value = (accountName + ".minute") });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connhour." + diskNumber' Value = (accountName + ".hour") });                          }                      }                      diskNumber += 1;                  }                    //Check storage accounts for analytics                  foreach (var account in accounts)                  {                      this._Helper.WriteVerbose("Testing Storage Metrics for {0}"' account.Key);                        var storage = this._Helper.GetStorageAccountFromCache(account.Key);                        if (!this._Helper.IsPremiumStorageAccount(storage))                      {                          if (!this.SkipStorage.IsPresent)                          {                              var currentConfig = this._Helper.GetStorageAnalytics(storage.Name);                                if (!this._Helper.CheckStorageAnalytics(storage.Name' currentConfig))                              {                                  this._Helper.WriteHost("[INFO] Enabling Storage Account Metrics for storage account {0}"' storage.Name);                                    // Enable analytics on storage accounts                                  this.SetStorageAnalytics(storage.Name);                              }                          }                            var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                          var hourUri = endpoint + "$MetricsHourPrimaryTransactionsBlob";                          var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                            this._Helper.WriteHost("[INFO] Adding Storage Account Metric information for storage account {0}"' storage.Name);                            sapmonPrivateConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.key")' Value = account.Value });                          sapmonPrivateConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.key")' Value = account.Value });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.uri")' Value = hourUri });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.uri")' Value = minuteUri });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.name")' Value = storage.Name });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.name")' Value = storage.Name });                      }                      else                      {                          this._Helper.WriteHost("[INFO] {0} is of type {1} - Storage Account Metrics are not available for Premium Type Storage."' storage.Name' storage.SkuName());                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.ispremium")' Value = 1 });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.ispremium")' Value = 1 });                      }                  }                    WriteVerbose("Chechking if WAD needs to be configured");                  // Enable VM Diagnostics                  if (this.EnableWAD.IsPresent)                  {                      this._Helper.WriteHost("[INFO] Enabling IaaSDiagnostics for VM {0}"' selectedVM.Name);                      KeyValuePair wadstorage = null;                      if (String.IsNullOrEmpty(this.WADStorageAccountName))                      {                          KeyValuePair<string' string>? wadstorageTemp = accounts.Cast<KeyValuePair<string' string>?>().                              FirstOrDefault(accTemp => !this._Helper.IsPremiumStorageAccount(accTemp.Value.Key));                          if (wadstorageTemp.HasValue)                          {                              wadstorage = new KeyValuePair(wadstorageTemp.Value.Key' wadstorageTemp.Value.Value);                          }                      }                      else                      {                          wadstorage = new KeyValuePair(this.WADStorageAccountName' this._Helper.GetAzureStorageKeyFromCache(WADStorageAccountName));                      }                        if (wadstorage == null)                      {                          this._Helper.WriteError("A standard storage account is required. Please use parameter WADStorageAccountName to specify a standard storage account you want to use for this VM.");                          return;                      }                        selectedVM = SetAzureVMDiagnosticsExtensionC(selectedVM' selectedVMStatus' wadstorage.Key' wadstorage.Value as string);                        var storage = this._Helper.GetStorageAccountFromCache(wadstorage.Key);                      var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                      var wadUri = endpoint + AEMExtensionConstants.WadTableName;                        sapmonPrivateConfig.Add(new KeyValuePair() { Key = "wad.key"' Value = wadstorage.Value });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.name"' Value = wadstorage.Key });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.isenabled"' Value = 1 });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.uri"' Value = wadUri });                  }                  else                  {                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.isenabled"' Value = 0 });                  }                    ExtensionConfig jsonPublicConfig = new ExtensionConfig();                  jsonPublicConfig.Config = sapmonPublicConfig;                    ExtensionConfig jsonPrivateConfig = new ExtensionConfig();                  jsonPrivateConfig.Config = sapmonPrivateConfig;                    this._Helper.WriteHost("[INFO] Updating Azure Enhanced Monitoring Extension for SAP configuration - Please wait...");                    WriteVerbose("Installing AEM extension");                    Version aemVersion = this._Helper.GetExtensionVersion(selectedVM' selectedVMStatus' OSType' AEMExtensionConstants.AEMExtensionType[OSType]' AEMExtensionConstants.AEMExtensionPublisher[OSType]);                    if (NoWait.IsPresent)                  {                      var op = this.VirtualMachineExtensionClient.BeginCreateOrUpdateWithHttpMessagesAsync(                          this.ResourceGroupName' this.VMName' AEMExtensionConstants.AEMExtensionDefaultName[OSType]'                          new VirtualMachineExtension()                          {                              Publisher = AEMExtensionConstants.AEMExtensionPublisher[OSType]'                              VirtualMachineExtensionType = AEMExtensionConstants.AEMExtensionType[OSType]'                              TypeHandlerVersion = aemVersion.ToString(2)'                              Settings = jsonPublicConfig'                              ProtectedSettings = jsonPrivateConfig'                              Location = selectedVM.Location'                              AutoUpgradeMinorVersion = true'                              ForceUpdateTag = DateTime.Now.Ticks.ToString()                          }).GetAwaiter().GetResult();                        this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system.");                      this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzVMAEMExtension commandlet.");                        var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                      WriteObject(result);                  }                  else                  {                      var op = this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                          this.ResourceGroupName' this.VMName' AEMExtensionConstants.AEMExtensionDefaultName[OSType]'                          new VirtualMachineExtension()                          {                              Publisher = AEMExtensionConstants.AEMExtensionPublisher[OSType]'                              VirtualMachineExtensionType = AEMExtensionConstants.AEMExtensionType[OSType]'                              TypeHandlerVersion = aemVersion.ToString(2)'                              Settings = jsonPublicConfig'                              ProtectedSettings = jsonPrivateConfig'                              Location = selectedVM.Location'                              AutoUpgradeMinorVersion = true'                              ForceUpdateTag = DateTime.Now.Ticks.ToString()                          }).GetAwaiter().GetResult();                        this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system.");                      this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzVMAEMExtension commandlet.");                        var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                      WriteObject(result);                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The following statement contains a magic number: vmExtParameters.TypeHandlerVersion = wadVersion.ToString(2);
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetStorageAnalytics,The following statement contains a magic number: int retentionDays = 13;
Magic Number,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,TestAzureRmVMAEMExtension,The following statement contains a magic number: this.WaitTimeInMinutes = 15;
Magic Number,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  AEMTestResult rootResult = new AEMTestResult();                  rootResult.TestName = "Azure Enhanced Monitoring Test";                    //#################################################                  //# Check if VM exists                  //#################################################                  this._Helper.WriteHost("VM Existence check for {0} ..."' false' this.VMName);                  var selectedVM = this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName);                  var selectedVMStatus = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView;                      if (selectedVM == null)                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Existence check for {0}"' false' this.VMName));                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      return;                  }                  else                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Existence check for {0}"' true' this.VMName));                      this._Helper.WriteHost("OK "' ConsoleColor.Green);                    }                  //#################################################                      //#################################################                  var osdisk = selectedVM.StorageProfile.OsDisk;                  if (String.IsNullOrEmpty(this.OSType))                  {                      this.OSType = osdisk.OsType.ToString();                  }                  if (String.IsNullOrEmpty(this.OSType))                  {                      this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux);                      return;                  }                  //#################################################                  //# Check for Guest Agent                  //#################################################                  this._Helper.WriteHost("VM Guest Agent check..."' false);                  var vmAgentStatus = false;                    //# It is not possible to detect if VM Agent is installed on ARM                  vmAgentStatus = true;                  if (!vmAgentStatus)                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Guest Agent check"' false));                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      this._Helper.WriteWarning(AEMExtensionConstants.MissingGuestAgentWarning);                      return;                  }                  else                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Guest Agent check"' true));                      this._Helper.WriteHost("OK "' ConsoleColor.Green);                  }                  //#################################################                      //#################################################                      //#################################################                  //# Check for Azure Enhanced Monitoring Extension for SAP                  //#################################################                  this._Helper.WriteHost("Azure Enhanced Monitoring Extension for SAP Installation check..."' false);                    string monPublicConfig = null;                  var monExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]);                  if (monExtension != null)                  {                      monPublicConfig = monExtension.Settings.ToString();                  }                    if (monExtension == null || String.IsNullOrEmpty(monPublicConfig))                  {                      rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' false));                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                  }                  else                  {                      rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' true));                      this._Helper.WriteHost("OK "' ConsoleColor.Green);                  }                  //#################################################                      //#################################################                    var accounts = new List<string>();                  //var osdisk = selectedVM.StorageProfile.OsDisk;                    var osaccountName = String.Empty;                  if (osdisk.ManagedDisk == null)                  {                      var accountName = this._Helper.GetStorageAccountFromUri(osdisk.Vhd.Uri);                      osaccountName = accountName;                      accounts.Add(accountName);                  }                    var dataDisks = selectedVM.StorageProfile.DataDisks;                  foreach (var disk in dataDisks)                  {                      if (disk.ManagedDisk != null)                      {                                                  continue;                      }                      var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                      if (!accounts.Contains(accountName))                      {                          accounts.Add(accountName);                      }                  }                    //#################################################                  //# Check storage metrics                  //#################################################                  this._Helper.WriteHost("Storage Metrics check...");                  var metricsResult = new AEMTestResult("Storage Metrics check");                  rootResult.PartialResults.Add(metricsResult);                  if (!this.SkipStorageCheck.IsPresent)                  {                      foreach (var account in accounts)                      {                          var accountResult = new AEMTestResult("Storage Metrics check for {0}"' account);                          metricsResult.PartialResults.Add(accountResult);                            this._Helper.WriteHost("\tStorage Metrics check for {0}..."' account);                          var storage = this._Helper.GetStorageAccountFromCache(account);                            if (!this._Helper.IsPremiumStorageAccount(storage))                          {                              this._Helper.WriteHost("\t\tStorage Metrics configuration check for {0}..."' false' account);                              var currentConfig = this._Helper.GetStorageAnalytics(account);                                bool storageConfigOk = false;                              if (!this._Helper.CheckStorageAnalytics(account' currentConfig))                              {                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics configuration check for {0}"' false' account));                                  this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                                }                              else                              {                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics configuration check for {0}"' true' account));                                  this._Helper.WriteHost("OK "' ConsoleColor.Green);                                  storageConfigOk = true;                              }                                this._Helper.WriteHost("\t\tStorage Metrics data check for {0}..."' false' account);                              var filterMinute = Microsoft.WindowsAzure.Storage.Table.TableQuery.                                  GenerateFilterConditionForDate("Timestamp"' "gt"' DateTime.Now.AddMinutes(AEMExtensionConstants.ContentAgeInMinutes * -1));                                if (storageConfigOk && this._Helper.CheckTableAndContent(account' "$MetricsMinutePrimaryTransactionsBlob"' filterMinute' "."' false' this.WaitTimeInMinutes))                                {                                  this._Helper.WriteHost("OK "' ConsoleColor.Green);                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics data check for {0}"' true' account));                              }                              else                              {                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics data check for {0}"' false' account));                                  this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                              }                          }                          else                          {                              accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics not available for Premium Storage account {0}"' true' account));                              this._Helper.WriteHost("\t\tStorage Metrics not available for Premium Storage account {0}..."' false' account);                              this._Helper.WriteHost("OK "' ConsoleColor.Green);                          }                      }                      if (accounts.Count == 0)                      {                          metricsResult.Result = true;                      }                  }                  else                  {                      metricsResult.Result = true;                      this._Helper.WriteHost("Skipped "' ConsoleColor.Yellow);                  }                  //#################################################                   //#################################################                          //#################################################                  //# Check Azure Enhanced Monitoring Extension for SAP Configuration                  //#################################################                  this._Helper.WriteHost("Azure Enhanced Monitoring Extension for SAP public configuration check..."' false);                  var aemConfigResult = new AEMTestResult("Azure Enhanced Monitoring Extension for SAP public configuration check");                  rootResult.PartialResults.Add(aemConfigResult);                    JObject sapmonPublicConfig = null;                  if (monExtension != null)                  {                      this._Helper.WriteHost(""); //New Line                        sapmonPublicConfig = JsonConvert.DeserializeObject(monPublicConfig) as JObject;                        StorageAccount storage = null;                      var osaccountIsPremium = false;                      if (!String.IsNullOrEmpty(osaccountName))                      {                          storage = this._Helper.GetStorageAccountFromCache(osaccountName);                          osaccountIsPremium = this._Helper.IsPremiumStorageAccount(osaccountName);                      }                        var vmSize = selectedVM.HardwareProfile.VmSize;                      this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Size"' "vmsize"' sapmonPublicConfig' vmSize.ToString()' aemConfigResult);                      this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Memory"' "vm.memory.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult);                      this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM CPU"' "vm.cpu.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult);                      this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: Script Version"' "script.version"' sapmonPublicConfig' aemConfigResult);                        var vmSLA = this._Helper.GetVMSLA(selectedVM);                      if (vmSLA.HasSLA)                      {                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA IOPS"' "vm.sla.iops"' sapmonPublicConfig' vmSLA.IOPS' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA Throughput"' "vm.sla.throughput"' sapmonPublicConfig' vmSLA.TP' aemConfigResult);                      }                        int wadEnabled;                      if (this._Helper.GetMonPropertyValue("wad.isenabled"' sapmonPublicConfig' out wadEnabled))                      {                          if (wadEnabled == 1)                          {                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult);                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult);                          }                          else                          {                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult' false);                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult' false);                          }                      }                      else                      {                          string message = "Azure Enhanced Monitoring Extension for SAP public configuration check:";                          aemConfigResult.PartialResults.Add(new AEMTestResult(message' false));                          this._Helper.WriteHost(message + "..."' false);                          this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      }                        if (!osaccountIsPremium && storage != null)                      {                          var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                          var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Key"' "osdisk.connminute"' sapmonPublicConfig' osaccountName + ".minute"' aemConfigResult);                          //# TODO: check uri config                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Value"' osaccountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Name"' osaccountName + ".minute.name"' sapmonPublicConfig' osaccountName' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult);                        }                      else if (storage != null)                      {                          var sla = this._Helper.GetDiskSLA(osdisk);                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult);                        }                      else                      {                          var resId = new ResourceIdentifier(osdisk.ManagedDisk.Id);                            var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(resId.ResourceGroupName' resId.ResourceName);                          if (osDiskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                          {                              var sla = this._Helper.GetDiskSLA(osDiskMD.DiskSizeGB' null);                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult);                              this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult);                              this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult);                          }                          else                          {                              this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported.");                          }                      }                        if (osdisk.ManagedDisk == null)                      {                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk name"' "osdisk.name"' sapmonPublicConfig' this._Helper.GetDiskName(osdisk.Vhd.Uri)' aemConfigResult);                      }                          var diskNumber = 1;                      foreach (var disk in dataDisks)                      {                          if (disk.ManagedDisk != null)                          {                              var resId = new ResourceIdentifier(disk.ManagedDisk.Id);                                var diskMD = ComputeClient.ComputeManagementClient.Disks.Get(resId.ResourceGroupName' resId.ResourceName);                                if (diskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                              {                                  var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult);                              }                              else if (diskMD.Sku.Name == StorageAccountTypes.UltraSSDLRS)                              {                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' diskMD.DiskMBpsReadWrite' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' diskMD.DiskIOPSReadWrite' aemConfigResult);                              }                              else                              {                                  this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported.");                                }                          }                          else                          {                                var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                              storage = this._Helper.GetStorageAccountFromCache(accountName);                              var accountIsPremium = this._Helper.IsPremiumStorageAccount(storage);                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " LUN"' "disk.lun." + diskNumber' sapmonPublicConfig' disk.Lun' aemConfigResult);                              if (!accountIsPremium)                              {                                  var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                                  var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Key"' "disk.connminute." + diskNumber' sapmonPublicConfig' accountName + ".minute"' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Value"' accountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Name"' accountName + ".minute.name"' sapmonPublicConfig' accountName' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult);                                }                              else                              {                                  var sla = this._Helper.GetDiskSLA(disk);                                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult);                              }                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " name"' "disk.name." + diskNumber' sapmonPublicConfig' this._Helper.GetDiskName(disk.Vhd.Uri)' aemConfigResult);                          }                            diskNumber += 1;                      }                      if (dataDisks.Count == 0)                      {                          aemConfigResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks"' true));                          this._Helper.WriteHost("\tAzure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks "' false);                          this._Helper.WriteHost("OK "' ConsoleColor.Green);                      }                  }                  else                  {                      aemConfigResult.Result = false;                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                  }                  //#################################################                   //#################################################                          //#################################################                  //# Check WAD Configuration                  //#################################################                  int iswadEnabled;                  if (this._Helper.GetMonPropertyValue("wad.isenabled"' sapmonPublicConfig' out iswadEnabled) && iswadEnabled == 1)                  {                      var wadConfigResult = new AEMTestResult("IaaSDiagnostics check");                      rootResult.PartialResults.Add(wadConfigResult);                        string wadPublicConfig = null;                      var wadExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.WADExtensionType[this.OSType]' AEMExtensionConstants.WADExtensionPublisher[this.OSType]);                      if (wadExtension != null)                      {                          wadPublicConfig = wadExtension.Settings.ToString();                      }                        this._Helper.WriteHost("IaaSDiagnostics check..."' false);                      if (wadExtension != null)                      {                          this._Helper.WriteHost(""); //New Line                          this._Helper.WriteHost("\tIaaSDiagnostics configuration check..."' false);                            var currentJSONConfig = JsonConvert.DeserializeObject(wadPublicConfig) as Newtonsoft.Json.Linq.JObject;                          var base64 = currentJSONConfig["xmlCfg"] as Newtonsoft.Json.Linq.JValue;                          System.Xml.XmlDocument currentConfig = new System.Xml.XmlDocument();                          currentConfig.LoadXml(Encoding.UTF8.GetString(System.Convert.FromBase64String(base64.Value.ToString())));                              if (!this._Helper.CheckWADConfiguration(currentConfig))                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics configuration check"' false));                              this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                          }                          else                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics configuration check"' true));                              this._Helper.WriteHost("OK "' ConsoleColor.Green);                          }                            this._Helper.WriteHost("\tIaaSDiagnostics performance counters check...");                          var wadPerfCountersResult = new AEMTestResult("IaaSDiagnostics performance counters check");                          wadConfigResult.PartialResults.Add(wadPerfCountersResult);                            foreach (var perfCounter in AEMExtensionConstants.PerformanceCounters[this.OSType])                          {                              this._Helper.WriteHost("\t\tIaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false);                              var currentCounter = currentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration[@counterSpecifier = '" + perfCounter.counterSpecifier + "']");                              if (currentCounter != null)                              {                                  wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' true));                                  this._Helper.WriteHost("OK "' ConsoleColor.Green);                              }                              else                              {                                  wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false));                                  this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                              }                          }                            string wadstorage;                          if (!this._Helper.GetMonPropertyValue<string>("wad.name"' sapmonPublicConfig' out wadstorage))                          {                              wadstorage = null;                          }                            this._Helper.WriteHost("\tIaaSDiagnostics data check..."' false);                            var deploymentId = String.Empty;                          var roleName = String.Empty;                            var extStatuses = this._Helper.GetExtension(selectedVM' selectedVMStatus' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]);                          InstanceViewStatus aemStatus = null;                          if (extStatuses != null && extStatuses.Statuses != null)                          {                              aemStatus = extStatuses.Statuses.FirstOrDefault(stat => Regex.Match(stat.Message' "deploymentId=(\\S*) roleInstance=(\\S*)").Success);                          }                            if (aemStatus != null)                          {                              var match = Regex.Match(aemStatus.Message' "deploymentId=(\\S*) roleInstance=(\\S*)");                              deploymentId = match.Groups[1].Value;                              roleName = match.Groups[2].Value;                          }                          else                          {                              this._Helper.WriteWarning("DeploymentId and RoleInstanceName could not be parsed from extension status");                          }                              var ok = false;                          if (!this.SkipStorageCheck.IsPresent && (!String.IsNullOrEmpty(deploymentId)) && (!String.IsNullOrEmpty(roleName)) && (!String.IsNullOrEmpty(wadstorage)))                          {                                if (this.OSType.Equals(AEMExtensionConstants.OSTypeLinux' StringComparison.InvariantCultureIgnoreCase))                              {                                  ok = this._Helper.CheckDiagnosticsTable(wadstorage' deploymentId'                                      selectedVM.OsProfile.ComputerName' "."' this.OSType' this.WaitTimeInMinutes);                              }                              else                              {                                  string filterMinute = "Role eq '" + AEMExtensionConstants.ROLECONTENT + "' and DeploymentId eq '"                                      + deploymentId + "' and RoleInstance eq '" + roleName + "' and PartitionKey gt '0"                                      + DateTime.UtcNow.AddMinutes(AEMExtensionConstants.ContentAgeInMinutes * -1).Ticks + "'";                                  ok = this._Helper.CheckTableAndContent(wadstorage' AEMExtensionConstants.WadTableName'                                      filterMinute' "."' false' this.WaitTimeInMinutes);                              }                              }                          if (ok && !this.SkipStorageCheck.IsPresent)                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics data check"' true));                              this._Helper.WriteHost("OK "' ConsoleColor.Green);                          }                          else if (!this.SkipStorageCheck.IsPresent)                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics data check"' false));                              this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                          }                          else                          {                              this._Helper.WriteHost("Skipped "' ConsoleColor.Yellow);                          }                      }                      else                      {                          wadConfigResult.Result = false;                          this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      }                  }                  //#################################################                   //#################################################                    if (!rootResult.Result)                  {                      this._Helper.WriteHost("The script found some configuration issues. Please run the Set-AzureRmVMExtension commandlet to update the configuration of the virtual machine!");                  }                    this._Helper.WriteVerbose("TestAzureRmVMAEMExtension Done (" + rootResult.Result + ")");                    var result = ComputeAutoMapperProfile.Mapper.Map<AEMTestResult>(rootResult);                  WriteObject(result);              });
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>                  {                      if (this.VMObject != null)                      {                          this.ResourceGroupName = this.VMObject.ResourceGroupName;                          this.VMName = this.VMObject.Name;                      }                        if (this.InputObject != null)                      {                          this.ResourceGroupName = this.InputObject.ResourceGroupName;                          this.VMName = this.InputObject.VMName;                          this.Name = this.InputObject.Name;                            this.Location = string.IsNullOrEmpty(this.Location) ? this.InputObject.Location : this.Location;                          this.TypeHandlerVersion = string.IsNullOrEmpty(this.TypeHandlerVersion) ? this.InputObject.TypeHandlerVersion : this.TypeHandlerVersion;                            string cmdToExe = this.InputObject.CommandToExecute;                          int startIndexFile = cmdToExe.IndexOf("-file ");                          if (startIndexFile > 0)                          {                              string cmdToExeFinal = cmdToExe.Substring(startIndexFile + 6);                              string[] splits = cmdToExeFinal.Split(new char[0]' StringSplitOptions.RemoveEmptyEntries);                              this.Run = string.IsNullOrEmpty(this.Run) ? splits[0] : this.Run;                              this.Argument = string.IsNullOrEmpty(this.Argument) ? string.Join(" "' splits.Skip(1)) : this.Argument;                          }                      }                        if (!string.IsNullOrEmpty(this.ResourceId))                      {                          var identifier = new ResourceIdentifier(this.ResourceId);                          this.ResourceGroupName = identifier.ResourceGroupName;                          this.VMName = identifier.ParentResource.Split('/').Last();                          this.Name = identifier.ResourceName;                      }                        var vmResponse = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithHttpMessagesAsync(                          this.ResourceGroupName'                          this.VMName                          ).GetAwaiter().GetResult();                        if (vmResponse.Body.OsProfile.LinuxConfiguration != null)                      {                          ThrowTerminatingError(new ErrorRecord(new ArgumentException(                              string.Format(CultureInfo.CurrentUICulture' "The current VM is a Linux VM.  Custom script extension can be set only to Windows VM."))'                              "InvalidArgument"'                              ErrorCategory.InvalidArgument'                              null));                      }                        if (this.ParameterSetName.Contains(WithContainerAndFileNamesParameterSet))                      {                          this.StorageEndpointSuffix = string.IsNullOrEmpty(this.StorageEndpointSuffix) ?                              DefaultProfile.DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix) : this.StorageEndpointSuffix;                          var sName = string.IsNullOrEmpty(this.StorageAccountName) ? GetStorageName() : this.StorageAccountName;                          var sKey = string.IsNullOrEmpty(this.StorageAccountKey) ? GetStorageKey(sName) : this.StorageAccountKey;                            if (this.FileName != null && this.FileName.Any())                          {                              this.FileUri = (from blobName in this.FileName                                              select GetSasUrlStr(sName' sKey' this.ContainerName' blobName)).ToArray();                                if (string.IsNullOrEmpty(this.Run))                              {                                  WriteWarning(Microsoft.Azure.Commands.Compute.Properties.Resources.CustomScriptExtensionTryToUseTheFirstSpecifiedFileAsRunScript);                                  this.Run = this.FileName[0];                              }                          }                      }                        var policyStr = string.Format(policyFormatStr' defaultPolicyStr);                      var commandToExecute = string.Format(poshCmdFormatStr' policyStr' this.Run' this.Argument);                        var privateSettings = GetPrivateConfiguration();                        var publicSettings = new Hashtable();                        if (this.SecureExecution.IsPresent)                      {                          if (privateSettings == null)                          {                              privateSettings = new Hashtable();                          }                          privateSettings.Add(commandToExecuteKey' commandToExecute ?? "");                      }                      else                      {                          publicSettings.Add(commandToExecuteKey' commandToExecute ?? "");                      }                        var parameters = new VirtualMachineExtension                      {                          Location = this.Location'                          Publisher = VirtualMachineCustomScriptExtensionContext.ExtensionDefaultPublisher'                          VirtualMachineExtensionType = VirtualMachineCustomScriptExtensionContext.ExtensionDefaultName'                          TypeHandlerVersion = (this.TypeHandlerVersion) ?? VirtualMachineCustomScriptExtensionContext.ExtensionDefaultVersion'                          Settings = publicSettings'                          ProtectedSettings = privateSettings'                          AutoUpgradeMinorVersion = !this.DisableAutoUpgradeMinorVersion.IsPresent'                          ForceUpdateTag = this.ForceRerun                      };                        if (NoWait.IsPresent)                      {                          var op = this.VirtualMachineExtensionClient.BeginCreateOrUpdateWithHttpMessagesAsync(                              this.ResourceGroupName'                              this.VMName'                              this.Name'                              parameters).GetAwaiter().GetResult();                          var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                          WriteObject(result);                      }                      else                      {                          var op = this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                              this.ResourceGroupName'                              this.VMName'                              this.Name'                              parameters).GetAwaiter().GetResult();                          var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                          WriteObject(result);                      }                  });
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetSasUrlStr,The following statement contains a magic number: var sasToken = cloudBlob.GetSharedAccessSignature(                  new SharedAccessBlobPolicy()                  {                      SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                      Permissions = SharedAccessBlobPermissions.Read                  });
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ValidateBackupScheduleSettings,The following statement contains a magic number: LogBackupFrequencyInMinutes == null || LogBackupFrequencyInMinutes % 5 != 0
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureSqlServerExtensionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\SetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The following statement contains a magic number: count <= 2
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  const string fullAddressPrefix = "full address:s:";                  const string promptCredentials = "prompt for credentials:i:1";                  const int defaultPort = 3389;                    string address = string.Empty;                  int port = defaultPort;                    // Get Azure VM                  var vmResponse = this.VirtualMachineClient.Get(this.ResourceGroupName' this.Name);                    var nicId = vmResponse.NetworkProfile.NetworkInterfaces.First().Id;                    // Get the NIC                  var nicResourceGroupName = this.GetResourceGroupName(nicId);                    var nicName = this.GetResourceName(nicId' NetworkInterfaceResouce);                    var nic = this.NetworkClient.NetworkManagementClient.NetworkInterfaces.Get(nicResourceGroupName' nicName);                    if (nic.IpConfigurations.First().PublicIPAddress != null && !string.IsNullOrEmpty(nic.IpConfigurations.First().PublicIPAddress.Id))                  {                      // Get PublicIPAddress resource if present                      address = this.GetAddressFromPublicIPResource(nic.IpConfigurations.First().PublicIPAddress.Id);                  }                  else if (nic.IpConfigurations.First().LoadBalancerInboundNatRules !=  null && nic.IpConfigurations.First().LoadBalancerInboundNatRules.Any())                  {                      address = string.Empty;                        // Get ipaddress and port from loadbalancer                      foreach (var nicRuleRef in nic.IpConfigurations.First().LoadBalancerInboundNatRules)                      {                          var lbName = this.GetResourceName(nicRuleRef.Id' LoadBalancerResouce);                          var lbResourceGroupName = this.GetResourceGroupName(nicRuleRef.Id);                            var loadbalancer =                              this.NetworkClient.NetworkManagementClient.LoadBalancers.Get(lbResourceGroupName' lbName);                            // Iterate over the InboundNatRules where Backendport = 3389                          var inboundRule =                              loadbalancer.InboundNatRules.Where(                                  rule =>                                  rule.BackendPort == defaultPort                                  && string.Equals(                                      rule.Id'                                      nicRuleRef.Id'                                      StringComparison.OrdinalIgnoreCase));                            if (inboundRule.Any())                          {                              port = inboundRule.First().FrontendPort.Value;                                // Get the corresponding frontendIPConfig -> publicIPAddress                              var frontendIPConfig =                                  loadbalancer.FrontendIPConfigurations.First(                                      frontend =>                                      string.Equals(                                          inboundRule.First().FrontendIPConfiguration.Id'                                          frontend.Id'                                          StringComparison.OrdinalIgnoreCase));                                if (frontendIPConfig.PublicIPAddress != null)                              {                                  address = this.GetAddressFromPublicIPResource(frontendIPConfig.PublicIPAddress.Id);                                  break;                              }                          }                      }                        if (string.IsNullOrEmpty(address))                      {                          throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicLoadBalancer);                      }                  }                  else                  {                      throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicIPOrPublicLoadBalancer);                  }                    // Write to file                  string rdpFilePath = this.LocalPath ?? Path.GetTempFileName();                    using (var file = new StreamWriter(rdpFilePath))                  {                      file.WriteLine(fullAddressPrefix + address + ":" + port);                      file.WriteLine(promptCredentials);                  }                    if (Launch.IsPresent)                  {                      var startInfo = new ProcessStartInfo                      {                          CreateNoWindow = true'                          WindowStyle = ProcessWindowStyle.Hidden                      };                        if (this.LocalPath == null)                      {                          string scriptGuid = Guid.NewGuid().ToString();                            string launchRDPScript = Path.GetTempPath() + scriptGuid + ".bat";                          using (var scriptStream = File.OpenWrite(launchRDPScript))                          {                              var writer = new StreamWriter(scriptStream);                              writer.WriteLine("start /wait mstsc.exe " + rdpFilePath);                              writer.Flush();                          }                            startInfo.FileName = launchRDPScript;                      }                      else                      {                          startInfo.FileName = "mstsc.exe";                          startInfo.Arguments = rdpFilePath;                      }                        Process.Start(startInfo);                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,GetResourceGroupName,The following statement contains a magic number: return resourceId.Split('/')[4];
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureVMBootDiagnosticsDataCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMBootDiagnosticsDataCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  LocalPath = ResolveUserPath(LocalPath);                  if (!LocalPath.EndsWith(Path.DirectorySeparatorChar.ToString()))                  {                      LocalPath = LocalPath + Path.DirectorySeparatorChar;                  }                  var result = this.VirtualMachineClient.GetWithInstanceView(this.ResourceGroupName' this.Name);                  if (result == null || result.Body == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no virtual machine"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.DiagnosticsProfile == null                      || result.Body.DiagnosticsProfile.BootDiagnostics == null                      || result.Body.DiagnosticsProfile.BootDiagnostics.Enabled == null                      || !result.Body.DiagnosticsProfile.BootDiagnostics.Enabled.Value                      || result.Body.DiagnosticsProfile.BootDiagnostics.StorageUri == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no diagnostic profile enabled"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.InstanceView == null                      || result.Body.InstanceView.BootDiagnostics == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no boot diagnostic"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (this.Windows.IsPresent                      || (this.Linux.IsPresent && !string.IsNullOrEmpty(this.LocalPath)))                  {                      var screenshotUri = new Uri(result.Body.InstanceView.BootDiagnostics.ConsoleScreenshotBlobUri);                      var localFile = this.LocalPath + screenshotUri.Segments[2];                      DownloadFromBlobUri(screenshotUri' localFile);                  }                      if (this.Linux.IsPresent)                  {                      var logUri = new Uri(result.Body.InstanceView.BootDiagnostics.SerialConsoleLogBlobUri);                        var localFile = (this.LocalPath ?? Path.GetTempPath()) + logUri.Segments[2];                        DownloadFromBlobUri(logUri' localFile);                        var sb = new StringBuilder();                      using (var reader = new StreamReader(localFile))                      {                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              sb.AppendLine(line);                          }                      };                        WriteObject(sb.ToString());                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureVMBootDiagnosticsDataCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\GetAzureVMBootDiagnosticsDataCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  LocalPath = ResolveUserPath(LocalPath);                  if (!LocalPath.EndsWith(Path.DirectorySeparatorChar.ToString()))                  {                      LocalPath = LocalPath + Path.DirectorySeparatorChar;                  }                  var result = this.VirtualMachineClient.GetWithInstanceView(this.ResourceGroupName' this.Name);                  if (result == null || result.Body == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no virtual machine"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.DiagnosticsProfile == null                      || result.Body.DiagnosticsProfile.BootDiagnostics == null                      || result.Body.DiagnosticsProfile.BootDiagnostics.Enabled == null                      || !result.Body.DiagnosticsProfile.BootDiagnostics.Enabled.Value                      || result.Body.DiagnosticsProfile.BootDiagnostics.StorageUri == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no diagnostic profile enabled"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.InstanceView == null                      || result.Body.InstanceView.BootDiagnostics == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no boot diagnostic"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (this.Windows.IsPresent                      || (this.Linux.IsPresent && !string.IsNullOrEmpty(this.LocalPath)))                  {                      var screenshotUri = new Uri(result.Body.InstanceView.BootDiagnostics.ConsoleScreenshotBlobUri);                      var localFile = this.LocalPath + screenshotUri.Segments[2];                      DownloadFromBlobUri(screenshotUri' localFile);                  }                      if (this.Linux.IsPresent)                  {                      var logUri = new Uri(result.Body.InstanceView.BootDiagnostics.SerialConsoleLogBlobUri);                        var localFile = (this.LocalPath ?? Path.GetTempPath()) + logUri.Segments[2];                        DownloadFromBlobUri(logUri' localFile);                        var sb = new StringBuilder();                      using (var reader = new StreamReader(localFile))                      {                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              sb.AppendLine(line);                          }                      };                        WriteObject(sb.ToString());                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,StrategyExecuteCmdletAsync,The following statement contains a magic number: vds.DiskType == DiskType.Fixed && filePath.Length % 512 != 0
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,StrategyExecuteCmdletAsync,The following statement contains a magic number: var uploadParameters = new UploadParameters(parameters.DestinationUri' null' filePath' true' 2)                  {                      Cmdlet = this'                      BlobObjectFactory = new CloudPageBlobObjectFactory(storageCredentialsFactory' TimeSpan.FromMinutes(1))                  };
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetRandomStorageAccountName,The following statement contains a magic number: const int maxSubLength = 5;
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetRandomStorageAccountName,The following statement contains a magic number: const int maxResLength = 6;
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetRandomStorageAccountName,The following statement contains a magic number: const int maxVMLength = 4;
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,FormatObject,The following statement contains a magic number: string preTab = new string(' '' t.Item3 * 2);
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,FormatObject,The following statement contains a magic number: string postTab = new string(' '' totalTab - t.Item3 * 2 - t.Item1.Length);
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: var xmlCfgString = objStringValue.Substring(i + 7);
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: max = Math.Max(max' depth * 2 + property.Name.Length);
Magic Number,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The following statement contains a magic number: var progressCommand1 = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionCompleted);
Magic Number,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The following statement contains a magic number: var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100);
Magic Number,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The following statement contains a magic number: var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100);
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: var sasToken = cloudBlob.GetSharedAccessSignature(                          new SharedAccessBlobPolicy()                          {                              SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                              Permissions = SharedAccessBlobPermissions.Read                          });
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                  case "Standard_E4-2s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                  case "Standard_E8-2s_v3":                  case "Standard_E8-4s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                  case "Standard_E16-4s_v3":                  case "Standard_E16-8s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                  case "Standard_E32-8s_v3":                  case "Standard_E32-16s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M8-2ms":                  case "Standard_M8-4ms":                  case "Standard_M8ms":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_M16-4ms":                  case "Standard_M16-8ms":                  case "Standard_M16ms":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_M32-8ms":                  case "Standard_M32-16ms":                  case "Standard_M32ms":                  case "Standard_M32ls":                  case "Standard_M32ts":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                  case "Standard_M64ls":                  case "Standard_M64-16ms":                  case "Standard_M64-32ms":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                  case "Standard_M128ms":                  case "Standard_M128-32ms":                  case "Standard_M128-64ms":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                  case "Standard_E64-16s_v3":                  case "Standard_E64-32s_v3":                  case "Standard_E64is_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: diskSize = 127;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: sla.IOPS = 120;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: sla.TP = 25;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: diskSize > 0 && diskSize <= 32
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The following statement contains a magic number: (CurrentConfig == null)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration") == null)              || (int.Parse(CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/@overallQuotaInMB").Value) < 4096)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters") == null)              || (!CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/@scheduledTransferPeriod").                      Value.Equals("PT1M"' StringComparison.InvariantCultureIgnoreCase))              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration") == null)
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The following statement contains a magic number: TestMockSupport.Delay(5000);
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\AEMHelper.cs,CheckDiagnosticsTable,The following statement contains a magic number: var searchTime = DateTime.UtcNow.AddMinutes(-5);
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GetResourceGroupFromId,The following statement contains a magic number: !result.Success || result.Groups == null || result.Groups.Count < 3
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GetResourceGroupFromId,The following statement contains a magic number: return result.Groups[2].Value;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The following statement contains a magic number: sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddMinutes(5);
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The following statement contains a magic number: int timePeriod = 5000;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The following statement contains a magic number: int loopingTimes = ((int)TimeSpan.FromMinutes(10).TotalMilliseconds / timePeriod);
Magic Number,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\ConfigurationParsingHelper.cs,IsLegacyAstConfiguration,The following statement contains a magic number: return                  commandNode.CommandElements.Count >= 7 &&                  String.Equals(commandParameter.Extent.Text' "configuration"' StringComparison.OrdinalIgnoreCase) &&                  String.Equals(commandParameter.Value' @"PSDesiredStateConfiguration\Configuration"'                      StringComparison.OrdinalIgnoreCase);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,FormatObject,The following statement contains a magic number: string preTab = new string(' '' t.Item3 * 2);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,FormatObject,The following statement contains a magic number: string postTab = new string(' '' totalTab - t.Item3 * 2 - t.Item1.Length);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: var xmlCfgString = objStringValue.Substring(i + 7);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: max = Math.Max(max' depth * 2 + property.Name.Length);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmss,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetCreateOrUpdateMethod.cs,SimpleParameterSetExecuteCmdlet,The following statement contains a magic number: var range =                      FirstPortRangeStart.ToString() +                      ".." +                      (FirstPortRangeStart + InstanceCount * 2 - 1).ToString();
Magic Number,Microsoft.Azure.Commands.Compute.Automation,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Manual\VirtualMachineScaleSetCreateOrUpdateMethod.cs,CreateConfigAsync,The following statement contains a magic number: var PortRangeSize = _cmdlet.InstanceCount * 2;
Magic Number,Microsoft.Azure.Commands.Compute.Automation,Parameters,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Manual\VirtualMachineScaleSetCreateOrUpdateMethod.cs,CreateConfigAsync,The following statement contains a magic number: var ports = _cmdlet                      .NatBackendPort                      ?.Select((port' i) => Tuple.Create(                          port'                          FirstPortRangeStart + i * 2000))                      .ToList();
Magic Number,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\AddAzureVhdCommand.cs,ValidateParameters,The following statement contains a magic number: long divisor = Convert.ToInt64(Math.Pow(2' 9));
Magic Number,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\AddAzureVhdCommand.cs,ValidateParameters,The following statement contains a magic number: long divisor = Convert.ToInt64(Math.Pow(2' 9));
Magic Number,Microsoft.Azure.Commands.Compute.StorageServices,CloudPageBlobObjectFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\StorageServices\CloudPageBlobObjectFactory.cs,CreateRequestOptions,The following statement contains a magic number: return new BlobRequestOptions              {                  ServerTimeout = this.operationTimeout'                  RetryPolicy = new LinearRetry(delayBetweenRetries' 5)              };
Magic Number,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,The following statement contains a magic number: imageArray.Length != 4
Magic Number,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,The following statement contains a magic number: var image = new ImageReference                  {                      Publisher = imageArray[0]'                      Offer = imageArray[1]'                      Sku = imageArray[2]'                      Version = imageArray[3]'                  };
Magic Number,Microsoft.Azure.Commands.Compute.Strategies.ComputeRp,ImageEx,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\ComputeRp\ImageEx.cs,UpdateImageAndOsTypeAsync,The following statement contains a magic number: var image = new ImageReference                  {                      Publisher = imageArray[0]'                      Offer = imageArray[1]'                      Sku = imageArray[2]'                      Version = imageArray[3]'                  };
Magic Number,Microsoft.Azure.Commands.Compute.Strategies.Network,PublicIPAddressStrategy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Strategies\Network\PublicIPAddressStrategy.cs,UpdateDomainNameLabelAsync,The following statement contains a magic number: domainNameLabel = (name + '-' + UniqueId.Create().Substring(0' 6)).ToLower();
Magic Number,Microsoft.WindowsAzure.Commands.Sync,ProgressStatus,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\ProgressStatus.cs,Progress,The following statement contains a magic number: double avtThroughputMbps = 8.0 * computeAvg;
Magic Number,Microsoft.WindowsAzure.Commands.Sync,ProgressStatus,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\ProgressStatus.cs,PercentComplete,The following statement contains a magic number: return 100.0 * this.BytesProcessed / ((double)this.TotalLength);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobHandle.cs,BlobHandle,The following statement contains a magic number: this.blobRequestOptions = new BlobRequestOptions              {                  ServerTimeout = TimeSpan.FromMinutes(5)'                  RetryPolicy = new LinearRetry(TimeSpan.FromMinutes(1)' 3)              };
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobHandle.cs,BlobHandle,The following statement contains a magic number: this.blobRequestOptions = new BlobRequestOptions              {                  ServerTimeout = TimeSpan.FromMinutes(5)'                  RetryPolicy = new LinearRetry(TimeSpan.FromMinutes(1)' 3)              };
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobHandle,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobHandle.cs,GetUploadableRanges,The following statement contains a magic number: ranges = Enumerable.ToList<IndexRange>(IndexRangeHelper.ChunkRangesBySize(ranges' 2 * MegaByte));
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,TryParseUri,The following statement contains a magic number: hostSegments.Length < 2
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,BlobUri,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,TryParseUri,The following statement contains a magic number: segments.Length < 2
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,HexToInt,The following statement contains a magic number: return ((h - 'a') + 10);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,HexToInt,The following statement contains a magic number: return ((h - 'A') + 10);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,IntToHex,The following statement contains a magic number: n <= 9
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,IntToHex,The following statement contains a magic number: return (char)((n - 10) + 0x61);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: const int megaByte = 1024 * 1024;
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: const int megaByte = 1024 * 1024;
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Download,Downloader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\Downloader.cs,Download,The following statement contains a magic number: var bufferManager = BufferManager.CreateBufferManager(Int32.MaxValue' 20 * megaByte);
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Upload,BlobCreatorBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\BlobCreatorBase.cs,AcquireSingleInstanceMutex,The following statement contains a magic number: !singleInstanceMutex.WaitOne(TimeSpan.FromSeconds(5)' false)
Magic Number,Microsoft.WindowsAzure.Commands.Sync.Upload,CloudPageBlobExtensions,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Upload\ExtensionMethods.cs,ListContainerBlobs,The following statement contains a magic number: const int maxBlobsPerRequest = 10;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,BlockAllocationTable,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\BlockAllocationTable.cs,GetBitmapSizeInBytes,The following statement contains a magic number: return (int)(blockSize / VhdConstants.VHD_SECTOR_LENGTH / 8);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors = 65535 * 16 * 255;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors = 65535 * 16 * 255;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors = 65535 * 16 * 255;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors > 65535 * 16 * 255
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors > 65535 * 16 * 255
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors > 65535 * 16 * 255
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: sectorsPerTrack = 255;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: heads = 16;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors >= 65535 * 16 * 63
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors >= 65535 * 16 * 63
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,CreateFromVirtualSize,The following statement contains a magic number: totalSectors >= 65535 * 16 * 63
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Heads.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,DiskGeometry,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\DiskGeometry.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Sectors.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,IndexRangeComparer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\IndexRangeComparer.cs,GetHashCode,The following statement contains a magic number: var hash = 17 + range.StartIndex.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,IndexRangeComparer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\IndexRangeComparer.cs,GetHashCode,The following statement contains a magic number: hash = hash * 17 + range.EndIndex.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdValidator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Model.cs,DoValidate,The following statement contains a magic number: validationResult.ErrorCode = 1000;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdValidator,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Model.cs,DoValidate,The following statement contains a magic number: validationResult.ErrorCode = 1001;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Features.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (FileFormatVersion != null ? FileFormatVersion.GetHashCode() : 0);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ HeaderOffset.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ TimeStamp.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (CreatorApplication != null ? CreatorApplication.GetHashCode() : 0);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (CreatorVersion != null ? CreatorVersion.GetHashCode() : 0);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ CreatorHostOsType.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ PhsyicalSize.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ VirtualSize.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (DiskGeometry != null ? DiskGeometry.GetHashCode() : 0);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ DiskType.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ CheckSum.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ UniqueId.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ SavedState.GetHashCode();
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (Reserved != null ? Reserved.GetHashCode() : 0);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model,VhdFooter,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\VhdFooter.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (RawData != null ? RawData.GetHashCode() : 0);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,BitMapFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\BitMapFactory.cs,ReverseBitsIfLittleEndian,The following statement contains a magic number: bytes[bit] = (byte)(((bytes[bit] * 0x80200802UL) & 0x0884422110UL) * 0x0101010101UL >> 32);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,DiskTypeFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\DiskTypeFactory.cs,Create,The following statement contains a magic number: switch (diskType)              {                  case 0: return DiskType.None;                  case 2: return DiskType.Fixed;                  case 3: return DiskType.Dynamic;                  case 4: return DiskType.Differencing;                  default:                      throw new VhdParsingException(String.Format("Unsupported format: DiskType is {0}"' diskType));              }
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,DiskTypeFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\DiskTypeFactory.cs,Create,The following statement contains a magic number: switch (diskType)              {                  case 0: return DiskType.None;                  case 2: return DiskType.Fixed;                  case 3: return DiskType.Dynamic;                  case 4: return DiskType.Differencing;                  default:                      throw new VhdParsingException(String.Format("Unsupported format: DiskType is {0}"' diskType));              }
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,DiskTypeFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\DiskTypeFactory.cs,Create,The following statement contains a magic number: switch (diskType)              {                  case 0: return DiskType.None;                  case 2: return DiskType.Fixed;                  case 3: return DiskType.Dynamic;                  case 4: return DiskType.Differencing;                  default:                      throw new VhdParsingException(String.Format("Unsupported format: DiskType is {0}"' diskType));              }
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,VhdDataReader,The following statement contains a magic number: this.m_buffer = new byte[16];
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,BeginReadInt16,The following statement contains a magic number: return AsyncMachine.BeginAsyncMachine(FillBuffer' 2' callback' state);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadInt16,The following statement contains a magic number: short value = (short)(m_buffer[0] | m_buffer[1] << 8);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,BeginReadUInt32,The following statement contains a magic number: return AsyncMachine.BeginAsyncMachine(FillBuffer' 4' callback' state);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt32,The following statement contains a magic number: var value = (m_buffer[0] | m_buffer[1] << 8 | m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt32,The following statement contains a magic number: var value = (m_buffer[0] | m_buffer[1] << 8 | m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt32,The following statement contains a magic number: var value = (m_buffer[0] | m_buffer[1] << 8 | m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt32,The following statement contains a magic number: var value = (m_buffer[0] | m_buffer[1] << 8 | m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt32,The following statement contains a magic number: var value = (m_buffer[0] | m_buffer[1] << 8 | m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,BeginReadUInt32,The following statement contains a magic number: return AsyncMachine.BeginAsyncMachine(FillBuffer' 4' callback' state);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,BeginReadUInt64,The following statement contains a magic number: return AsyncMachine.BeginAsyncMachine(FillBuffer' 8' callback' state);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint lo = (uint)(m_buffer[0] | m_buffer[1] << 8 |                               m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint lo = (uint)(m_buffer[0] | m_buffer[1] << 8 |                               m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint lo = (uint)(m_buffer[0] | m_buffer[1] << 8 |                               m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint lo = (uint)(m_buffer[0] | m_buffer[1] << 8 |                               m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint lo = (uint)(m_buffer[0] | m_buffer[1] << 8 |                               m_buffer[2] << 16 | m_buffer[3] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: uint hi = (uint)(m_buffer[4] | m_buffer[5] << 8 |                               m_buffer[6] << 16 | m_buffer[7] << 24);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,EndReadUInt64,The following statement contains a magic number: ulong value = ((ulong)hi) << 32 | lo;
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,ReadGuid,The following statement contains a magic number: return new Guid(this.ReadBytes(offset' 16));
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdDataReader,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdDataReader.cs,BeginReadGuid,The following statement contains a magic number: return BeginReadBytes(offset' 16' callback' state);
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFileFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFileFactory.cs,Create,The following statement contains a magic number: var streamSource = new StreamSource              {                  Stream = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read' 1024)'                  VhdDirectory = Path.GetDirectoryName(path)'                  DisposeOnException = true              };
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFileFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFileFactory.cs,BeginCreate,The following statement contains a magic number: var streamSource = new StreamSource              {                  Stream = new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read' 1024)'                  VhdDirectory = Path.GetDirectoryName(path)'                  DisposeOnException = true              };
Magic Number,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdFooterSerializer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdFooterSerializer.cs,ComputeCheckSum,The following statement contains a magic number: i < VhdConstants.VHD_FOOTER_OFFSET_CHECKSUM || i >= (VhdConstants.VHD_FOOTER_OFFSET_CHECKSUM + 4)
Duplicate Code,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The method contains a code clone-set at the following line numbers (starting from the method definition): ((270' 290)' (295' 315))
Missing Default,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (vmsize)                  {                      case AEMExtensionConstants.VMSizeExtraSmall:                      case AEMExtensionConstants.VMSizeStandard_A0:                      case AEMExtensionConstants.VMSizeBasic_A0:                          vmsize = "ExtraSmall (A0)";                          WriteVerbose("VM Size is ExtraSmall - setting overcommitted setting");                          cpuOvercommit = 1;                          break;                      case "Small":                          vmsize = "Small (A1)";                          break;                      case "Medium":                          vmsize = "Medium (A2)";                          break;                      case "Large":                          vmsize = "Large (A3)";                          break;                      case "ExtraLarge":                          vmsize = "ExtraLarge (A4)";                          break;                  }
Missing Default,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case StorageContextParamSetName:                      autoBackupSettings.StorageUrl = StorageContext.BlobEndPoint;                      autoBackupSettings.StorageAccessKey = this.GetStorageKey();                      break;                    case StorageUriParamSetName:                      autoBackupSettings.StorageUrl = (StorageUri == null) ? null : StorageUri.ToString();                      autoBackupSettings.StorageAccessKey = (StorageKey == null) ? null : ConversionUtilities.SecureStringToString(StorageKey);                      break;              }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,FindEncryptionExtensionInstanceView,The following switch statement is missing a default case: switch(vm.StorageProfile.OsDisk.OsType)              {                  case OperatingSystemTypes.Linux:                      extensionPublisher = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher;                      extensionName = this.Name ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultName;                      break;                  case OperatingSystemTypes.Windows:                      extensionPublisher = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher;                      extensionName = this.Name ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultName;                      break;              }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,FindEncryptionExtension,The following switch statement is missing a default case: switch(vm.StorageProfile.OsDisk.OsType)              {                  case OperatingSystemTypes.Linux:                      extensionPublisher = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher;                      extensionType = this.ExtensionType ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultType;                      break;                  case OperatingSystemTypes.Windows:                      extensionPublisher = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher;                      extensionType = this.ExtensionType ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultType;                      break;              }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetAzureDiskEncryptionMode,The following switch statement is missing a default case: switch(vmWithInstanceView.StorageProfile.OsDisk.OsType)              {                  case OperatingSystemTypes.Linux:                      extensionSinglePassVersion = AzureDiskEncryptionExtensionContext.LinuxExtensionSinglePassVersion;                      break;                  case OperatingSystemTypes.Windows:                      extensionSinglePassVersion = AzureDiskEncryptionExtensionContext.ExtensionSinglePassVersion;                      break;              }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (adeMode)                  {                      case AzureDiskEncryptionMode.SinglePass:                          status = this.getStatusSinglePass(virtualMachineResponse);                          break;                      case AzureDiskEncryptionMode.DualPass:                          status = this.getStatusDualPass(virtualMachineResponse);                          break;                      case AzureDiskEncryptionMode.None:                          status = new AzureDiskEncryptionStatusContext                          {                              OsVolumeEncrypted = EncryptionStatus.NotEncrypted'                              DataVolumesEncrypted = EncryptionStatus.NotEncrypted'                              OsVolumeEncryptionSettings = null'                              ProgressMessage = "No Encryption extension or metadata found on the VM"                          };                          break;                  }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.DSC,PublishAzureVMDscConfigurationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Extension\DSC\PublishAzureVMDscConfigurationCommand.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case CreateArchiveParameterSetName:                          OutputArchivePath = GetUnresolvedProviderPathFromPSPath(OutputArchivePath);                          break;                      case UploadArchiveParameterSetName:                          _storageCredentials = this.GetStorageCredentials(ResourceGroupName' StorageAccountName);                          if (ContainerName == null)                          {                              ContainerName = DscExtensionCmdletConstants.DefaultContainerName;                          }                          if (StorageEndpointSuffix == null)                          {                              StorageEndpointSuffix =                                  DefaultProfile.DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix);                          }                          break;                  }
Missing Default,Microsoft.WindowsAzure.Commands.Sync.Download,HttpUtility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\Sync\Download\BlobUri.cs,IsSafe,The following switch statement is missing a default case: switch (ch)              {                  case '\'':                  case '(':                  case ')':                  case '*':                  case '-':                  case '.':                  case '_':                  case '!':                      return true;              }
Missing Default,Microsoft.WindowsAzure.Commands.Tools.Vhd.Model.Persistence,VhdParentLocatorFactory,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Compute\Compute\VhdManagement\Model\Persistence\VhdParentLocatorFactory.cs,CreateFileLocator,The following switch statement is missing a default case: switch (locator.PlatformCode)              {                  case PlatformCode.None:                      return String.Empty;                  case PlatformCode.Wi2R:                  case PlatformCode.Wi2K:                      throw new VhdParsingException(String.Format("Deprecated PlatformCode:{0}"' locator.PlatformCode));                  case PlatformCode.W2Ru:                      //TODO: Add differencing disks path name' this is relative path                      return Encoding.Unicode.GetString(fileLocator);                  case PlatformCode.W2Ku:                      return Encoding.Unicode.GetString(fileLocator);                  case PlatformCode.Mac:                      //TODO: Mac OS alias stored as a blob?                      throw new NotImplementedException(String.Format("PlatformCode: {0}"' locator.PlatformCode));                  case PlatformCode.MacX:                      return Encoding.UTF8.GetString(fileLocator);              }
