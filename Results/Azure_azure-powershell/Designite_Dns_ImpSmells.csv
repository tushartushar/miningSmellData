Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,FillRecordsForType,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Commands.Dns,DnsRecordBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsRecordSet.cs,FromMamlRecord,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Commands.Dns,AddAzureDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\AddAzureDnsRecordConfig.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 15
Complex Method,Microsoft.Azure.Commands.Dns,NewAzureRmDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\NewAzureRmDnsRecordConfig.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordConfig.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordSet.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Dns,SetAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\SetAzureDnsZone.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,CreateDnsZone,The method has 6 parameters. Parameters: name' resourceGroupName' tags' zoneType' registrationVirtualNetworks' resolutionVirtualNetworks
Long Parameter List,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,CreateDnsRecordSet,The method has 9 parameters. Parameters: zoneName' resourceGroupName' relativeRecordSetName' ttl' recordType' tags' overwrite' resourceRecords' targetResourceId
Long Parameter List,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,ConstructRecordSetPropeties,The method has 6 parameters. Parameters: recordSetName' recordType' ttl' tags' resourceRecords' targetResourceId
Long Statement,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,CreateDnsRecordSet,The length of the statement  "            var recordSet = ConstructRecordSetPropeties(relativeRecordSetName' recordType' ttl' tags' resourceRecords' targetResourceId); " is 125.
Long Statement,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,ConstructRecordSetPropeties,The length of the statement  "                    throw new ArgumentException(string.Format(ProjectResources.Error_AddRecordTypeMismatch' mismatchedRecord.GetType()' recordType)); " is 129.
Long Statement,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,UpdateDnsRecordSet,The length of the statement  "                    TargetResource = string.IsNullOrWhiteSpace(recordSet.TargetResourceId) ? null : new Sdk.SubResource(recordSet.TargetResourceId)' " is 128.
Long Statement,Microsoft.Azure.Commands.Dns,AddAzureDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\AddAzureDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                throw new ArgumentException(string.Format(ProjectResources.Error_AddRecordTypeMismatch' this.ParameterSetName' this.RecordSet.RecordType)); " is 139.
Long Statement,Microsoft.Azure.Commands.Dns,AddAzureDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\AddAzureDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                        result.Records.Add(new SrvRecord { Priority = this.Priority' Port = this.Port' Target = this.Target' Weight = this.Weight }); " is 125.
Long Statement,Microsoft.Azure.Commands.Dns,GetAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\GetAzureDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' zoneName)); " is 121.
Long Statement,Microsoft.Azure.Commands.Dns,NewAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\NewAzureDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' zoneName)); " is 121.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                throw new ArgumentException(string.Format(ProjectResources.Error_RemoveRecordTypeMismatch' this.ParameterSetName' this.RecordSet.RecordType)); " is 142.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                    this.WriteWarning(string.Format("Modifying recordset name to remove terminating '.'.  Recordset name used is \"{0}\"."' this.Name)); " is 132.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                    this.WriteWarning(string.Format("Modifying recordset name to remove terminating '.'.  Recordset name used is \"{0}\"."' this.Name)); " is 132.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' recordSetToDelete.ZoneName)); " is 139.
Long Statement,Microsoft.Azure.Commands.Dns,SetAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\SetAzureDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                        this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' recordSetToUpdate.ZoneName)); " is 139.
Long Statement,Microsoft.Azure.Commands.Dns,GetAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\GetAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                    this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' this.Name)); " is 122.
Long Statement,Microsoft.Azure.Commands.Dns,NewAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\NewAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' this.Name)); " is 122.
Long Statement,Microsoft.Azure.Commands.Dns,NewAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\NewAzureDnsZone.cs,ParseParentZoneFromArguments,The length of the statement  "                    throw new PSArgumentException(string.Format(ProjectResources.Error_NSDelegationSubscriptionMisMatch' this.Name' parentZoneName)); " is 129.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\RemoveAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' this.Name)); " is 122.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\RemoveAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "            // There is a bug in sdk where it doesn't handle non existing zones on delete. Hence' handling the condition in powershell " is 122.
Long Statement,Microsoft.Azure.Commands.Dns,RemoveAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\RemoveAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                    this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' zoneToDelete.Name)); " is 130.
Long Statement,Microsoft.Azure.Commands.Dns,SetAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\SetAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                    this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' this.Name)); " is 122.
Long Statement,Microsoft.Azure.Commands.Dns,SetAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\SetAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                        zoneToUpdate.RegistrationVirtualNetworkIds = this.RegistrationVirtualNetwork.Select(virtualNetwork => virtualNetwork.Id).ToList(); " is 130.
Long Statement,Microsoft.Azure.Commands.Dns,SetAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\SetAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                        zoneToUpdate.ResolutionVirtualNetworkIds = this.ResolutionVirtualNetwork.Select(virtualNetwork => virtualNetwork.Id).ToList(); " is 126.
Long Statement,Microsoft.Azure.Commands.Dns,SetAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\SetAzureDnsZone.cs,ExecuteCmdlet,The length of the statement  "                this.WriteWarning(string.Format("Modifying zone name to remove terminating '.'.  Zone name used is \"{0}\"."' zoneToUpdate.Name)); " is 130.
Complex Conditional,Microsoft.Azure.Commands.Dns,NewAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\NewAzureDnsZone.cs,AddDnsNameserverDelegation,The conditional expression  "zone != null && parent != null && zone.NameServers != null && zone.NameServers.Count > 0"  is complex.
Magic Number,Microsoft.Azure.Commands.Dns,NewAzureDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Zones\NewAzureDnsZone.cs,AddDnsNameserverDelegation,The following statement contains a magic number: recordSet = this.DnsClient.CreateDnsRecordSet(                      parent.Name'                      this.ResourceGroupName'                      recordName'                      3600'                      RecordType.NS'                      null'                      true'                      resourceRecords'                      null);
Missing Default,Microsoft.Azure.Commands.Dns.Models,DnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Models\DnsClient.cs,FillRecordsForType,The following switch statement is missing a default case: switch (recordType)              {                  case RecordType.A:                      properties.ARecords = resourceRecords.Select(x => (Sdk.ARecord) (x as ARecord).ToMamlRecord()).ToList();                      break;                  case RecordType.AAAA:                      properties.AaaaRecords = resourceRecords.Select(x => (Sdk.AaaaRecord)(x as AaaaRecord).ToMamlRecord()).ToList();                      break;                  case RecordType.CNAME:                      if (resourceRecords.Length > 1)                      {                          throw new ArgumentException(ProjectResources.Error_AddRecordMultipleCnames);                      }                        properties.CnameRecord = (Sdk.CnameRecord) resourceRecords[0].ToMamlRecord();                      break;                  case RecordType.MX:                      properties.MxRecords = resourceRecords.Select(x => (Sdk.MxRecord)(x as MxRecord).ToMamlRecord()).ToList();                      break;                  case RecordType.NS:                      properties.NsRecords = resourceRecords.Select(x => (Sdk.NsRecord)(x as NsRecord).ToMamlRecord()).ToList();                      break;                  case RecordType.PTR:                      properties.PtrRecords = resourceRecords.Select(x => (Sdk.PtrRecord)(x as PtrRecord).ToMamlRecord()).ToList();                      break;                  case RecordType.SRV:                      properties.SrvRecords = resourceRecords.Select(x => (Sdk.SrvRecord)(x as SrvRecord).ToMamlRecord()).ToList();                      break;                  case RecordType.TXT:                      properties.TxtRecords = resourceRecords.Select(x => (Sdk.TxtRecord)(x as TxtRecord).ToMamlRecord()).ToList();                      break;                  case RecordType.SOA:                      properties.SoaRecord = (Sdk.SoaRecord) resourceRecords[0].ToMamlRecord();                      break;                  case RecordType.CAA:                      properties.CaaRecords = resourceRecords.Select(x => (Sdk.CaaRecord)(x as CaaRecord).ToMamlRecord()).ToList();                      break;              }
Missing Default,Microsoft.Azure.Commands.Dns,RemoveAzureDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Dns\Dns\Records\RemoveAzureDnsRecordConfig.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (result.RecordType)                  {                      case RecordType.A:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is ARecord                                  && ((ARecord)record).Ipv4Address == this.Ipv4Address);                              break;                          }                        case RecordType.AAAA:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is AaaaRecord                                  && ((AaaaRecord)record).Ipv6Address == this.Ipv6Address);                              break;                          }                        case RecordType.MX:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is MxRecord                                  && string.Equals(((MxRecord)record).Exchange' this.Exchange' System.StringComparison.OrdinalIgnoreCase)                                  && ((MxRecord)record).Preference == this.Preference);                              break;                          }                        case RecordType.NS:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is NsRecord                                  && string.Equals(((NsRecord)record).Nsdname' this.Nsdname' System.StringComparison.OrdinalIgnoreCase));                              break;                          }                      case RecordType.SRV:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is SrvRecord                                  && ((SrvRecord)record).Priority == this.Priority                                  && ((SrvRecord)record).Port == this.Port                                  && string.Equals(((SrvRecord)record).Target' this.Target' System.StringComparison.OrdinalIgnoreCase)                                  && ((SrvRecord)record).Weight == this.Weight);                              break;                          }                      case RecordType.TXT:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is TxtRecord                                  && ((TxtRecord)record).Value == this.Value);                              break;                          }                      case RecordType.PTR:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is PtrRecord                                  && ((PtrRecord)record).Ptrdname == this.Ptrdname);                              break;                          }                      case RecordType.CNAME:                          {                              removedCount = result.Records.RemoveAll(record =>                                  record is CnameRecord                                  && string.Equals(((CnameRecord)record).Cname' this.Cname' System.StringComparison.OrdinalIgnoreCase));                              break;                          }                      case RecordType.CAA:                          {                              // CAAValue is considered binary. So' not doing a case-insensitive search                              removedCount = result.Records.RemoveAll(record =>                                  record is CaaRecord                                  && string.Equals(((CaaRecord)record).Tag' this.CaaTag' System.StringComparison.OrdinalIgnoreCase)                                  && string.Equals(((CaaRecord)record).Value' this.CaaValue)                                  && ((CaaRecord)record).Flags == this.CaaFlags);                              break;                          }                  }
