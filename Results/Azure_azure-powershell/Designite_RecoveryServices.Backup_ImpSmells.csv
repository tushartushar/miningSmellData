Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,EnableAzureRmRecoveryServicesBackupProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\EnableAzureRmRecoveryServicesBackupProtection.cs,ExecuteCmdlet,The method has 109 lines of code.
Long Method,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupProtectionPolicy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\ProtectionPolicy\GetAzureRmRecoveryServicesBackupProtectionPolicy.cs,ExecuteCmdlet,The method has 140 lines of code.
Long Method,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,ExecuteCmdlet,The method has 135 lines of code.
Complex Method,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,RecoveryServicesBackupCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\RecoveryServicesBackupCmdletBase.cs,HandleException,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetTargetPath,The method has 5 parameters. Parameters: path' name' type' DataDirectoryPaths' offset
Long Identifier,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,DisableAzureRmRecoveryServicesBackupAutoProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\DisableAzureRmRecoveryServicesBackupAutoProtection.cs,ExecuteCmdlet,The length of the parameter isDisableAutoProtectionSuccessful is 33.
Long Identifier,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,EnableAzureRmRecoveryServicesBackupProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\EnableAzureRmRecoveryServicesBackupProtection.cs,,The length of the parameter AzureVMClassicComputeParameterSet is 33.
Long Identifier,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupProtectionPolicy,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\ProtectionPolicy\GetAzureRmRecoveryServicesBackupProtectionPolicy.cs,,The length of the parameter WorkloadBackupMangementTypeParamSet is 35.
Long Identifier,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,Item,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\ParamHelpMsgs.cs,,The length of the parameter AzureFileStorageAccountResourceGroupName is 40.
Long Identifier,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,RestoreDisk,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\ParamHelpMsgs.cs,,The length of the parameter StorageAccountResourceGroupName is 31.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupStatus,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Backup\GetAzureRmRecoveryServicesBackupStatus.cs,ExecuteCmdlet,The length of the statement  "                BackupStatusResponse backupStatus = ServiceClientAdapter.CheckBackupStatus(Type' resourceId' resource.Location' ProtectableObjectName).Body; " is 140.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupProtectableItem,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\GetAzureRMRecoveryServicesBackupProtectableItem.cs,ExecuteCmdlet,The length of the statement  "                    protectableItem.Split(new string[] { ";" }' System.StringSplitOptions.None)[0].ToLower() == "sqlavailabilitygroupcontainer") " is 124.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetResourceId,The length of the statement  "                resourceIdentifier.ResourceGroupName = RecoveryPoint.ContainerName.Split(new string[] { ";" }' StringSplitOptions.None)[1]; " is 123.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,RecoveryServicesBackupCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\RecoveryServicesBackupCmdletBase.cs,InitializeAzureBackupCmdlet,The length of the statement  "            RmClient = AzureSession.Instance.ClientFactory.CreateArmClient<ResourcesNS.ResourceManagementClient>(DefaultContext' AzureEnvironment.Endpoint.ResourceManager); " is 160.
Complex Conditional,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,UnregisterAzureRmRecoveryServicesBackupContainer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Container\UnregisterAzureRmRecoveryServicesBackupContainer.cs,ExecuteCmdlet,The conditional expression  "!((Container.ContainerType == ContainerType.Windows &&                         Container.BackupManagementType == BackupManagementType.MARS) ||                      (Container.ContainerType == ContainerType.AzureSQL &&                       Container.BackupManagementType == BackupManagementType.AzureSQL) ||                       (Container.ContainerType == ContainerType.AzureStorage &&                         Container.BackupManagementType == BackupManagementType.AzureStorage) ||                         (Container.ContainerType == ContainerType.AzureVMAppContainer &&                         Container.BackupManagementType == BackupManagementType.AzureWorkload))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,EnableAzureRmRecoveryServicesBackupProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\EnableAzureRmRecoveryServicesBackupProtection.cs,ExecuteCmdlet,The conditional expression  "string.Compare(((AzureWorkloadProtectableItem)itemModels[protitemindex]).Name'                                  ProtectableItem.Name) == 0 &&                              string.Compare(((AzureWorkloadProtectableItem)itemModels[protitemindex]).ServerName'                              ((AzureWorkloadProtectableItem)ProtectableItem).ServerName) == 0 &&                              string.Compare(((AzureWorkloadProtectableItem)itemModels[protitemindex]).ProtectableItemType'                              ((AzureWorkloadProtectableItem)ProtectableItem).ProtectableItemType) == 0 &&                              ((AzureWorkloadProtectableItem)itemModels[protitemindex]).Subinquireditemcount > 0"  is complex.
Complex Conditional,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets.Container,UnregisterAzureRmRecoveryServicesBackupManagementServer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Container\UnregisterAzureRmRecoveryServicesBackupManagementServer.cs,ExecuteCmdlet,The conditional expression  "(AzureRmBackupManagementServer.BackupEngineType !=                      BackupEngineType.DpmBackupEngine.ToString() &&                      AzureRmBackupManagementServer.BackupEngineType !=                      BackupEngineType.AzureBackupServerEngine.ToString()) ||                      AzureRmBackupManagementServer.BackupManagementType.ToString() !=                      BackupManagementType.SCDPM.ToString() &&                      AzureRmBackupManagementServer.BackupManagementType.ToString() !=                      BackupManagementType.AzureBackupServer.ToString()"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,DisableAzureRmRecoveryServicesBackupAutoProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\DisableAzureRmRecoveryServicesBackupAutoProtection.cs,ExecuteCmdlet,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,EnableAzureRmRecoveryServicesBackupAutoProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\EnableAzureRmRecoveryServicesBackupAutoProtection.cs,ExecuteCmdlet,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,RegisterAzureRmRecoveryServicesBackupContainer,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Container\RegisterAzureRmRecoveryServicesBackupContainer.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  string containerName = Container != null ? Container.Name : ResourceId.Split('/')[8];                  ConfirmAction(                      Force.IsPresent'                      string.Format(Resources.RegisterContainerWarning' containerName)'                      Resources.RegisterContainerMessage'                      containerName' () =>                      {                          base.ExecuteCmdlet();                            ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                          string vaultName = resourceIdentifier.ResourceName;                          string vaultResourceGroupName = resourceIdentifier.ResourceGroupName;                            PsBackupProviderManager providerManager =                              new PsBackupProviderManager(new Dictionary<Enum' object>()                              {                                  { VaultParams.VaultName' vaultName }'                                  { VaultParams.ResourceGroupName' vaultResourceGroupName }'                                  { ContainerParams.Name' containerName }'                                  { ContainerParams.ContainerType' ServiceClientHelpers.GetServiceClientWorkloadType(WorkloadType).ToString() }'                                  { ContainerParams.BackupManagementType' BackupManagementType.ToString() }'                                  { ContainerParams.Container' Container}                              }' ServiceClientAdapter);                            IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(WorkloadType' BackupManagementType);                          psBackupProvider.RegisterContainer();                            // List containers                          string backupManagementType = BackupManagementType.ToString();                          ODataQuery<BMSContainerQueryObject> queryParams = new ODataQuery<BMSContainerQueryObject>(                          q => q.FriendlyName == containerName &&                          q.BackupManagementType == backupManagementType);                            var listResponse = ServiceClientAdapter.ListContainers(queryParams'                              vaultName: vaultName' resourceGroupName: vaultResourceGroupName);                          var containerModels = ConversionHelpers.GetContainerModelList(listResponse);                          WriteObject(containerModels' enumerateCollection: true);                      });              }' ShouldProcess(ResourceId' VerbsLifecycle.Register));
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,DisableAzureRmRecoveryServicesBackupAutoProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\DisableAzureRmRecoveryServicesBackupAutoProtection.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    string shouldProcessName = InputItem.Id;                    string itemType = "";                  string itemName = "";                  string containerUri = "";                  if (ShouldProcess(shouldProcessName' VerbsLifecycle.Disable))                  {                      Dictionary<UriEnums' string> keyValueDict =                      HelperUtils.ParseUri(InputItem.Id);                        itemType = HelperUtils.GetProtectableItemUri(                          keyValueDict' InputItem.Id).Split(';')[0];                      itemName = HelperUtils.GetProtectableItemUri(                          keyValueDict' InputItem.Id).Split(';')[1];                      containerUri = HelperUtils.GetContainerUri(                          keyValueDict' InputItem.Id);                        bool isDisableAutoProtectionSuccessful = false;                        try                      {                          ODataQuery<ServiceClientModel.ProtectionIntentQueryObject> queryParams = null;                          string backupManagementType = ServiceClientModel.BackupManagementType.AzureWorkload;                          queryParams = new ODataQuery<ServiceClientModel.ProtectionIntentQueryObject>(                          q => q.ItemType == itemType &&                          q.ItemName == itemName &&                          q.ParentName == containerUri &&                          q.BackupManagementType == backupManagementType);                            var itemResponses = ServiceClientAdapter.ListProtectionIntent(                          queryParams'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                            string intentName = null;                          foreach (var itemResponse in itemResponses)                          {                              string itemNameResponse = "";                              string containerNameResponse = "";                                Dictionary<UriEnums' string> keyValueDictResponse =                              HelperUtils.ParseUri(itemResponse.Properties.ItemId);                              itemNameResponse = HelperUtils.GetProtectableItemUri(                              keyValueDictResponse' itemResponse.Properties.ItemId).ToLower();                              containerNameResponse = HelperUtils.GetContainerUri(                              keyValueDictResponse' itemResponse.Properties.ItemId);                                if (String.Compare(itemNameResponse' itemName' true) == 0 &&                              String.Compare(containerUri.Split(';')[3]' containerNameResponse.Split(';')[2]' true) == 0)                              {                                  intentName = itemResponse.Name;                                  break;                              }                          }                            var deleteResponse = ServiceClientAdapter.DeleteProtectionIntent(                          intentName'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                            isDisableAutoProtectionSuccessful = true;                      }                      catch                      {                        }                      if (PassThru.IsPresent)                      {                          WriteObject(isDisableAutoProtectionSuccessful);                      }                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,DisableAzureRmRecoveryServicesBackupAutoProtection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Item\DisableAzureRmRecoveryServicesBackupAutoProtection.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    string shouldProcessName = InputItem.Id;                    string itemType = "";                  string itemName = "";                  string containerUri = "";                  if (ShouldProcess(shouldProcessName' VerbsLifecycle.Disable))                  {                      Dictionary<UriEnums' string> keyValueDict =                      HelperUtils.ParseUri(InputItem.Id);                        itemType = HelperUtils.GetProtectableItemUri(                          keyValueDict' InputItem.Id).Split(';')[0];                      itemName = HelperUtils.GetProtectableItemUri(                          keyValueDict' InputItem.Id).Split(';')[1];                      containerUri = HelperUtils.GetContainerUri(                          keyValueDict' InputItem.Id);                        bool isDisableAutoProtectionSuccessful = false;                        try                      {                          ODataQuery<ServiceClientModel.ProtectionIntentQueryObject> queryParams = null;                          string backupManagementType = ServiceClientModel.BackupManagementType.AzureWorkload;                          queryParams = new ODataQuery<ServiceClientModel.ProtectionIntentQueryObject>(                          q => q.ItemType == itemType &&                          q.ItemName == itemName &&                          q.ParentName == containerUri &&                          q.BackupManagementType == backupManagementType);                            var itemResponses = ServiceClientAdapter.ListProtectionIntent(                          queryParams'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                            string intentName = null;                          foreach (var itemResponse in itemResponses)                          {                              string itemNameResponse = "";                              string containerNameResponse = "";                                Dictionary<UriEnums' string> keyValueDictResponse =                              HelperUtils.ParseUri(itemResponse.Properties.ItemId);                              itemNameResponse = HelperUtils.GetProtectableItemUri(                              keyValueDictResponse' itemResponse.Properties.ItemId).ToLower();                              containerNameResponse = HelperUtils.GetContainerUri(                              keyValueDictResponse' itemResponse.Properties.ItemId);                                if (String.Compare(itemNameResponse' itemName' true) == 0 &&                              String.Compare(containerUri.Split(';')[3]' containerNameResponse.Split(';')[2]' true) == 0)                              {                                  intentName = itemResponse.Name;                                  break;                              }                          }                            var deleteResponse = ServiceClientAdapter.DeleteProtectionIntent(                          intentName'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                            isDisableAutoProtectionSuccessful = true;                      }                      catch                      {                        }                      if (PassThru.IsPresent)                      {                          WriteObject(isDisableAutoProtectionSuccessful);                      }                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupJob,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Jobs\GetAzureRmRecoveryServicesBackupJob.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeStart = DateTime.UtcNow.AddDays(-1);                  DateTime rangeEnd = DateTime.UtcNow;                    if (From.HasValue)                  {                      rangeStart = From.Value;                  }                    if (!From.HasValue && To.HasValue)                  {                      throw new Exception(Resources.JobFromNotProvided);                  }                    if (To.HasValue)                  {                      rangeEnd = To.Value;                  }                    if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                  {                      throw new Exception(Resources.JobTimeFiltersShouldBeSpecifiedInUtc);                  }                    // validate filters                  if (rangeEnd <= rangeStart)                  {                      throw new Exception(Resources.JobToShouldBeGreaterThanFrom);                  }                  else if (rangeEnd.Subtract(rangeStart) > TimeSpan.FromDays(30))                  {                      throw new Exception(Resources.JobAllowedDateTimeRangeExceeded);                  }                  else if (rangeStart > DateTime.UtcNow)                  {                      throw new Exception(Resources.JobStartTimeShouldBeLessThanCurrent);                  }                    // validate JobId and Job objects                  if (!string.IsNullOrEmpty(JobId))                  {                      // if JobId and Job are provided together and they don't match then throw exception                      if (Job != null && JobId != Job.JobId)                      {                          throw new Exception(Resources.JobJobIdAndJobMismatch);                      }                  }                  else if (Job != null)                  {                      JobId = Job.JobId;                  }                    List<JobBase> result = new List<JobBase>();                    WriteDebug(string.Format("Filters provided are: StartTime - {0} " +                      "EndTime - {1} Status - {2} Operation - {3} Type - {4}"'                      From'                      To'                      Status'                      Operation'                      BackupManagementType));                    int resultCount = 0;                    var adapterResponse = ServiceClientAdapter.GetJobs(                      JobId'                      ServiceClientHelpers.GetServiceClientJobStatus(Status)'                      Operation.ToString()'                      rangeStart'                      rangeEnd'                      ServiceClientHelpers.GetServiceClientBackupManagementType(                          BackupManagementType)'                      vaultName: vaultName'                      resourceGroupName: resourceGroupName);                    JobConversions.AddServiceClientJobsToPSList(                      adapterResponse' result' ref resultCount);                    WriteDebug("Number of jobs fetched: " + result.Count);                  WriteObject(result' enumerateCollection: true);              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,WaitAzureRmRecoveryServicesBackupJob,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Jobs\WaitAzureRmRecoveryServicesBackupJob.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    List<string> jobsToWaitOn = new List<string>();                  List<JobBase> finalJobs = new List<JobBase>();                    object castedObj;                  if (GetCastedObjFromPSObj<JobBase>(Job' out castedObj))                  {                      JobBase justJob = castedObj as JobBase;                      jobsToWaitOn.Add(justJob.JobId);                  }                  else if (GetCastedObjFromPSObj<List<JobBase>>(Job' out castedObj))                  {                      List<JobBase> jobsList = castedObj as List<JobBase>;                      foreach (var job in jobsList)                      {                          jobsToWaitOn.Add(job.JobId);                      }                  }                  else if (Job.GetType() == typeof(object[]))                  {                      object[] castedJobsList = Job as object[];                      object castedJob;                      foreach (var job in castedJobsList)                      {                          if (GetCastedObjFromPSObj<JobBase>(job' out castedJob))                          {                              jobsToWaitOn.Add((castedJob as JobBase).JobId);                          }                          else                          {                              throw new Exception(string.Format(Resources.JobWaitJobInvalidInput'                                  Job.GetType().FullName));                          }                      }                  }                  else                  {                      // not a valid object. throw exception.                      throw new Exception(string.Format(Resources.JobWaitJobInvalidInput'                          Job.GetType().FullName));                  }                    // now wait until timeout happens or all jobs complete execution                  DateTime waitBeginning = DateTime.UtcNow;                    while (true)                  {                      if (Timeout.HasValue)                      {                          if (DateTime.UtcNow.Subtract(waitBeginning) >=                              TimeSpan.FromSeconds(Timeout.Value))                          {                              break;                          }                      }                        bool hasUnfinishedJob = false;                      finalJobs.Clear();                      for (int i = 0; i < jobsToWaitOn.Count; i++)                      {                          string jobId = jobsToWaitOn[i];                          var updatedJob = JobConversions.GetPSJob(                              ServiceClientAdapter.GetJob(                                  jobId'                                  vaultName: vaultName'                                  resourceGroupName: resourceGroupName));                            if (IsJobInProgress(updatedJob))                          {                              hasUnfinishedJob = true;                          }                          else                          {                              // removing finished job from list                              jobsToWaitOn.RemoveAt(i);                              i--;                          }                            finalJobs.Add(updatedJob);                      }                        if (!hasUnfinishedJob)                      {                          break;                      }                        // sleep for 30 seconds before checking again                      TestMockSupport.Delay(30 * 1000);                  }                    WriteObject(finalJobs' enumerateCollection: true);              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,WaitAzureRmRecoveryServicesBackupJob,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Jobs\WaitAzureRmRecoveryServicesBackupJob.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    List<string> jobsToWaitOn = new List<string>();                  List<JobBase> finalJobs = new List<JobBase>();                    object castedObj;                  if (GetCastedObjFromPSObj<JobBase>(Job' out castedObj))                  {                      JobBase justJob = castedObj as JobBase;                      jobsToWaitOn.Add(justJob.JobId);                  }                  else if (GetCastedObjFromPSObj<List<JobBase>>(Job' out castedObj))                  {                      List<JobBase> jobsList = castedObj as List<JobBase>;                      foreach (var job in jobsList)                      {                          jobsToWaitOn.Add(job.JobId);                      }                  }                  else if (Job.GetType() == typeof(object[]))                  {                      object[] castedJobsList = Job as object[];                      object castedJob;                      foreach (var job in castedJobsList)                      {                          if (GetCastedObjFromPSObj<JobBase>(job' out castedJob))                          {                              jobsToWaitOn.Add((castedJob as JobBase).JobId);                          }                          else                          {                              throw new Exception(string.Format(Resources.JobWaitJobInvalidInput'                                  Job.GetType().FullName));                          }                      }                  }                  else                  {                      // not a valid object. throw exception.                      throw new Exception(string.Format(Resources.JobWaitJobInvalidInput'                          Job.GetType().FullName));                  }                    // now wait until timeout happens or all jobs complete execution                  DateTime waitBeginning = DateTime.UtcNow;                    while (true)                  {                      if (Timeout.HasValue)                      {                          if (DateTime.UtcNow.Subtract(waitBeginning) >=                              TimeSpan.FromSeconds(Timeout.Value))                          {                              break;                          }                      }                        bool hasUnfinishedJob = false;                      finalJobs.Clear();                      for (int i = 0; i < jobsToWaitOn.Count; i++)                      {                          string jobId = jobsToWaitOn[i];                          var updatedJob = JobConversions.GetPSJob(                              ServiceClientAdapter.GetJob(                                  jobId'                                  vaultName: vaultName'                                  resourceGroupName: resourceGroupName));                            if (IsJobInProgress(updatedJob))                          {                              hasUnfinishedJob = true;                          }                          else                          {                              // removing finished job from list                              jobsToWaitOn.RemoveAt(i);                              i--;                          }                            finalJobs.Add(updatedJob);                      }                        if (!hasUnfinishedJob)                      {                          break;                      }                        // sleep for 30 seconds before checking again                      TestMockSupport.Delay(30 * 1000);                  }                    WriteObject(finalJobs' enumerateCollection: true);              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupRecoveryLogChain,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\RecoveryPoint\GetAzureRmRecoveryServicesBackupRecoveryLogChain.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  //Validate start time < end time                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeEnd = DateTime.UtcNow;                  DateTime rangeStart = rangeEnd.AddDays(-30);                    Dictionary<Enum' object> providerParameters = new Dictionary<Enum' object>();                  providerParameters.Add(VaultParams.VaultName' vaultName);                  providerParameters.Add(VaultParams.ResourceGroupName' resourceGroupName);                  providerParameters.Add(RecoveryPointParams.Item' Item);                    if (ParameterSetName == DateTimeFilterParameterSet ||                      ParameterSetName == NoFilterParameterSet)                  {                      // if both start and end date are given by user                      if (StartDate.HasValue && EndDate.HasValue)                      {                          rangeStart = StartDate.Value;                          rangeEnd = EndDate.Value;                      }                      // if only start date is given by user                      else if (StartDate.HasValue && EndDate.HasValue == false)                      {                          rangeStart = StartDate.Value;                          rangeEnd = rangeStart.AddDays(30);                      }                      // if only end date is given by user                      else if (EndDate.HasValue && StartDate.HasValue == false)                      {                          rangeEnd = EndDate.Value;                          rangeStart = rangeEnd.AddDays(-30);                      }                        //User want list of RPs between given time range                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                        "StartDate = {0} EndDate = {1}' Item.Name = {2}' Item.ContainerName = {3}"'                         rangeStart' rangeEnd' Item.Name' Item.ContainerName));                      if (rangeStart >= rangeEnd)                      {                          throw new ArgumentException(Resources.RecoveryPointEndDateShouldBeGreater);                      }                        if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                      {                          throw new ArgumentException(Resources.GetRPErrorInputDatesShouldBeInUTC);                      }                        if (rangeStart > DateTime.UtcNow)                      {                          throw new ArgumentException(                              Resources.GetRPErrorStartTimeShouldBeLessThanUTCNow);                      }                        providerParameters.Add(RecoveryPointParams.StartDate' rangeStart);                      providerParameters.Add(RecoveryPointParams.EndDate' rangeEnd);                      providerParameters.Add(RecoveryPointParams.RestorePointQueryType' "Log");                        PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      var rpList = psBackupProvider.GetLogChains();                        WriteObject(rpList' enumerateCollection: true);                  }                  else                  {                      throw new Exception(Resources.RecoveryPointUnsupportedParamet);                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupRecoveryLogChain,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\RecoveryPoint\GetAzureRmRecoveryServicesBackupRecoveryLogChain.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  //Validate start time < end time                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeEnd = DateTime.UtcNow;                  DateTime rangeStart = rangeEnd.AddDays(-30);                    Dictionary<Enum' object> providerParameters = new Dictionary<Enum' object>();                  providerParameters.Add(VaultParams.VaultName' vaultName);                  providerParameters.Add(VaultParams.ResourceGroupName' resourceGroupName);                  providerParameters.Add(RecoveryPointParams.Item' Item);                    if (ParameterSetName == DateTimeFilterParameterSet ||                      ParameterSetName == NoFilterParameterSet)                  {                      // if both start and end date are given by user                      if (StartDate.HasValue && EndDate.HasValue)                      {                          rangeStart = StartDate.Value;                          rangeEnd = EndDate.Value;                      }                      // if only start date is given by user                      else if (StartDate.HasValue && EndDate.HasValue == false)                      {                          rangeStart = StartDate.Value;                          rangeEnd = rangeStart.AddDays(30);                      }                      // if only end date is given by user                      else if (EndDate.HasValue && StartDate.HasValue == false)                      {                          rangeEnd = EndDate.Value;                          rangeStart = rangeEnd.AddDays(-30);                      }                        //User want list of RPs between given time range                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                        "StartDate = {0} EndDate = {1}' Item.Name = {2}' Item.ContainerName = {3}"'                         rangeStart' rangeEnd' Item.Name' Item.ContainerName));                      if (rangeStart >= rangeEnd)                      {                          throw new ArgumentException(Resources.RecoveryPointEndDateShouldBeGreater);                      }                        if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                      {                          throw new ArgumentException(Resources.GetRPErrorInputDatesShouldBeInUTC);                      }                        if (rangeStart > DateTime.UtcNow)                      {                          throw new ArgumentException(                              Resources.GetRPErrorStartTimeShouldBeLessThanUTCNow);                      }                        providerParameters.Add(RecoveryPointParams.StartDate' rangeStart);                      providerParameters.Add(RecoveryPointParams.EndDate' rangeEnd);                      providerParameters.Add(RecoveryPointParams.RestorePointQueryType' "Log");                        PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      var rpList = psBackupProvider.GetLogChains();                        WriteObject(rpList' enumerateCollection: true);                  }                  else                  {                      throw new Exception(Resources.RecoveryPointUnsupportedParamet);                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupRecoveryLogChain,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\RecoveryPoint\GetAzureRmRecoveryServicesBackupRecoveryLogChain.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  //Validate start time < end time                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeEnd = DateTime.UtcNow;                  DateTime rangeStart = rangeEnd.AddDays(-30);                    Dictionary<Enum' object> providerParameters = new Dictionary<Enum' object>();                  providerParameters.Add(VaultParams.VaultName' vaultName);                  providerParameters.Add(VaultParams.ResourceGroupName' resourceGroupName);                  providerParameters.Add(RecoveryPointParams.Item' Item);                    if (ParameterSetName == DateTimeFilterParameterSet ||                      ParameterSetName == NoFilterParameterSet)                  {                      // if both start and end date are given by user                      if (StartDate.HasValue && EndDate.HasValue)                      {                          rangeStart = StartDate.Value;                          rangeEnd = EndDate.Value;                      }                      // if only start date is given by user                      else if (StartDate.HasValue && EndDate.HasValue == false)                      {                          rangeStart = StartDate.Value;                          rangeEnd = rangeStart.AddDays(30);                      }                      // if only end date is given by user                      else if (EndDate.HasValue && StartDate.HasValue == false)                      {                          rangeEnd = EndDate.Value;                          rangeStart = rangeEnd.AddDays(-30);                      }                        //User want list of RPs between given time range                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                        "StartDate = {0} EndDate = {1}' Item.Name = {2}' Item.ContainerName = {3}"'                         rangeStart' rangeEnd' Item.Name' Item.ContainerName));                      if (rangeStart >= rangeEnd)                      {                          throw new ArgumentException(Resources.RecoveryPointEndDateShouldBeGreater);                      }                        if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                      {                          throw new ArgumentException(Resources.GetRPErrorInputDatesShouldBeInUTC);                      }                        if (rangeStart > DateTime.UtcNow)                      {                          throw new ArgumentException(                              Resources.GetRPErrorStartTimeShouldBeLessThanUTCNow);                      }                        providerParameters.Add(RecoveryPointParams.StartDate' rangeStart);                      providerParameters.Add(RecoveryPointParams.EndDate' rangeEnd);                      providerParameters.Add(RecoveryPointParams.RestorePointQueryType' "Log");                        PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      var rpList = psBackupProvider.GetLogChains();                        WriteObject(rpList' enumerateCollection: true);                  }                  else                  {                      throw new Exception(Resources.RecoveryPointUnsupportedParamet);                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupRecoveryPoint,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\RecoveryPoint\GetAzureRmRecoveryServicesBackupRecoveryPoint.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  //Validate start time < end time                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeEnd = DateTime.UtcNow;                  DateTime rangeStart = rangeEnd.AddDays(-30);                    Dictionary<Enum' object> providerParameters = new Dictionary<Enum' object>();                  providerParameters.Add(VaultParams.VaultName' vaultName);                  providerParameters.Add(VaultParams.ResourceGroupName' resourceGroupName);                  providerParameters.Add(RecoveryPointParams.Item' Item);                    if (ParameterSetName == DateTimeFilterParameterSet ||                      ParameterSetName == NoFilterParameterSet)                  {                      // if both start and end date are given by user                      if (StartDate.HasValue && EndDate.HasValue)                      {                          rangeStart = StartDate.Value;                          rangeEnd = EndDate.Value;                      }                      // if only start date is given by user                      else if (StartDate.HasValue && EndDate.HasValue == false)                      {                          rangeStart = StartDate.Value;                          rangeEnd = rangeStart.AddDays(30);                      }                      // if only end date is given by user                      else if (EndDate.HasValue && StartDate.HasValue == false)                      {                          rangeEnd = EndDate.Value;                          rangeStart = rangeEnd.AddDays(-30);                      }                        //User want list of RPs between given time range                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                         "StartDate = {0} EndDate = {1}' Item.Name = {2}' Item.ContainerName = {3}"'                         rangeStart' rangeEnd' Item.Name' Item.ContainerName));                      if (rangeStart >= rangeEnd)                      {                          throw new ArgumentException(Resources.RecoveryPointEndDateShouldBeGreater);                      }                        if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                      {                          throw new ArgumentException(Resources.GetRPErrorInputDatesShouldBeInUTC);                      }                        if (rangeStart > DateTime.UtcNow)                      {                          throw new ArgumentException(                              Resources.GetRPErrorStartTimeShouldBeLessThanUTCNow);                      }                        providerParameters.Add(RecoveryPointParams.StartDate' rangeStart);                      providerParameters.Add(RecoveryPointParams.EndDate' rangeEnd);                      if (string.Compare(Item.BackupManagementType.ToString()'                          BackupManagementType.AzureWorkload.ToString()) == 0)                      {                          providerParameters.Add(RecoveryPointParams.RestorePointQueryType' "FullAndDifferential");                      }                        PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      var rpList = psBackupProvider.ListRecoveryPoints();                        WriteDebug(string.Format("RPCount in Response = {0}"' rpList.Count));                      WriteObject(rpList' enumerateCollection: true);                  }                  else if (ParameterSetName == RecoveryPointIdParameterSet)                  {                      //User want details of a particular recovery point                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                          "StartDate = {0} EndDate = {1}' RPId = {2}' KeyFileDownloadLocation = {3}"'                          StartDate' EndDate' RecoveryPointId' KeyFileDownloadLocation));                        providerParameters.Add(RecoveryPointParams.RecoveryPointId' RecoveryPointId);                      providerParameters.Add(                          RecoveryPointParams.KeyFileDownloadLocation' KeyFileDownloadLocation);                      PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      WriteObject(psBackupProvider.GetRecoveryPointDetails());                  }                  else                  {                      throw new Exception(Resources.RecoveryPointUnsupportedParamet);                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupRecoveryPoint,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\RecoveryPoint\GetAzureRmRecoveryServicesBackupRecoveryPoint.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  //Validate start time < end time                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeEnd = DateTime.UtcNow;                  DateTime rangeStart = rangeEnd.AddDays(-30);                    Dictionary<Enum' object> providerParameters = new Dictionary<Enum' object>();                  providerParameters.Add(VaultParams.VaultName' vaultName);                  providerParameters.Add(VaultParams.ResourceGroupName' resourceGroupName);                  providerParameters.Add(RecoveryPointParams.Item' Item);                    if (ParameterSetName == DateTimeFilterParameterSet ||                      ParameterSetName == NoFilterParameterSet)                  {                      // if both start and end date are given by user                      if (StartDate.HasValue && EndDate.HasValue)                      {                          rangeStart = StartDate.Value;                          rangeEnd = EndDate.Value;                      }                      // if only start date is given by user                      else if (StartDate.HasValue && EndDate.HasValue == false)                      {                          rangeStart = StartDate.Value;                          rangeEnd = rangeStart.AddDays(30);                      }                      // if only end date is given by user                      else if (EndDate.HasValue && StartDate.HasValue == false)                      {                          rangeEnd = EndDate.Value;                          rangeStart = rangeEnd.AddDays(-30);                      }                        //User want list of RPs between given time range                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                         "StartDate = {0} EndDate = {1}' Item.Name = {2}' Item.ContainerName = {3}"'                         rangeStart' rangeEnd' Item.Name' Item.ContainerName));                      if (rangeStart >= rangeEnd)                      {                          throw new ArgumentException(Resources.RecoveryPointEndDateShouldBeGreater);                      }                        if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                      {                          throw new ArgumentException(Resources.GetRPErrorInputDatesShouldBeInUTC);                      }                        if (rangeStart > DateTime.UtcNow)                      {                          throw new ArgumentException(                              Resources.GetRPErrorStartTimeShouldBeLessThanUTCNow);                      }                        providerParameters.Add(RecoveryPointParams.StartDate' rangeStart);                      providerParameters.Add(RecoveryPointParams.EndDate' rangeEnd);                      if (string.Compare(Item.BackupManagementType.ToString()'                          BackupManagementType.AzureWorkload.ToString()) == 0)                      {                          providerParameters.Add(RecoveryPointParams.RestorePointQueryType' "FullAndDifferential");                      }                        PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      var rpList = psBackupProvider.ListRecoveryPoints();                        WriteDebug(string.Format("RPCount in Response = {0}"' rpList.Count));                      WriteObject(rpList' enumerateCollection: true);                  }                  else if (ParameterSetName == RecoveryPointIdParameterSet)                  {                      //User want details of a particular recovery point                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                          "StartDate = {0} EndDate = {1}' RPId = {2}' KeyFileDownloadLocation = {3}"'                          StartDate' EndDate' RecoveryPointId' KeyFileDownloadLocation));                        providerParameters.Add(RecoveryPointParams.RecoveryPointId' RecoveryPointId);                      providerParameters.Add(                          RecoveryPointParams.KeyFileDownloadLocation' KeyFileDownloadLocation);                      PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      WriteObject(psBackupProvider.GetRecoveryPointDetails());                  }                  else                  {                      throw new Exception(Resources.RecoveryPointUnsupportedParamet);                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupRecoveryPoint,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\RecoveryPoint\GetAzureRmRecoveryServicesBackupRecoveryPoint.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  //Validate start time < end time                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    // initialize values to default                  DateTime rangeEnd = DateTime.UtcNow;                  DateTime rangeStart = rangeEnd.AddDays(-30);                    Dictionary<Enum' object> providerParameters = new Dictionary<Enum' object>();                  providerParameters.Add(VaultParams.VaultName' vaultName);                  providerParameters.Add(VaultParams.ResourceGroupName' resourceGroupName);                  providerParameters.Add(RecoveryPointParams.Item' Item);                    if (ParameterSetName == DateTimeFilterParameterSet ||                      ParameterSetName == NoFilterParameterSet)                  {                      // if both start and end date are given by user                      if (StartDate.HasValue && EndDate.HasValue)                      {                          rangeStart = StartDate.Value;                          rangeEnd = EndDate.Value;                      }                      // if only start date is given by user                      else if (StartDate.HasValue && EndDate.HasValue == false)                      {                          rangeStart = StartDate.Value;                          rangeEnd = rangeStart.AddDays(30);                      }                      // if only end date is given by user                      else if (EndDate.HasValue && StartDate.HasValue == false)                      {                          rangeEnd = EndDate.Value;                          rangeStart = rangeEnd.AddDays(-30);                      }                        //User want list of RPs between given time range                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                         "StartDate = {0} EndDate = {1}' Item.Name = {2}' Item.ContainerName = {3}"'                         rangeStart' rangeEnd' Item.Name' Item.ContainerName));                      if (rangeStart >= rangeEnd)                      {                          throw new ArgumentException(Resources.RecoveryPointEndDateShouldBeGreater);                      }                        if (rangeStart.Kind != DateTimeKind.Utc || rangeEnd.Kind != DateTimeKind.Utc)                      {                          throw new ArgumentException(Resources.GetRPErrorInputDatesShouldBeInUTC);                      }                        if (rangeStart > DateTime.UtcNow)                      {                          throw new ArgumentException(                              Resources.GetRPErrorStartTimeShouldBeLessThanUTCNow);                      }                        providerParameters.Add(RecoveryPointParams.StartDate' rangeStart);                      providerParameters.Add(RecoveryPointParams.EndDate' rangeEnd);                      if (string.Compare(Item.BackupManagementType.ToString()'                          BackupManagementType.AzureWorkload.ToString()) == 0)                      {                          providerParameters.Add(RecoveryPointParams.RestorePointQueryType' "FullAndDifferential");                      }                        PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      var rpList = psBackupProvider.ListRecoveryPoints();                        WriteDebug(string.Format("RPCount in Response = {0}"' rpList.Count));                      WriteObject(rpList' enumerateCollection: true);                  }                  else if (ParameterSetName == RecoveryPointIdParameterSet)                  {                      //User want details of a particular recovery point                      WriteDebug(string.Format("ParameterSet = DateTimeFilterParameterSet. \n" +                          "StartDate = {0} EndDate = {1}' RPId = {2}' KeyFileDownloadLocation = {3}"'                          StartDate' EndDate' RecoveryPointId' KeyFileDownloadLocation));                        providerParameters.Add(RecoveryPointParams.RecoveryPointId' RecoveryPointId);                      providerParameters.Add(                          RecoveryPointParams.KeyFileDownloadLocation' KeyFileDownloadLocation);                      PsBackupProviderManager providerManager =                          new PsBackupProviderManager(providerParameters' ServiceClientAdapter);                      IPsBackupProvider psBackupProvider =                          providerManager.GetProviderInstance(Item.ContainerType' Item.BackupManagementType);                      WriteObject(psBackupProvider.GetRecoveryPointDetails());                  }                  else                  {                      throw new Exception(Resources.RecoveryPointUnsupportedParamet);                  }              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    if (!OriginalWorkloadRestore.IsPresent && !AlternateWorkloadRestore.IsPresent)                  {                      throw new ArgumentException(string.Format(Resources.AzureWorkloadRestoreLocationException));                  }                    AzureWorkloadRecoveryConfig azureWorkloadRecoveryConfig = GetConfigObject();                  azureWorkloadRecoveryConfig.SourceResourceId = Item != null ? Item.SourceResourceId : GetResourceId();                  DateTime currentTime = DateTime.Now;                  TimeSpan timeSpan = DateTime.UtcNow - new DateTime(1970' 1' 1);                  int offset = (int)timeSpan.TotalSeconds;                  string targetDb = "";                  if (ParameterSetName == RpParameterSet)                  {                      Dictionary<UriEnums' string> keyValueDict = HelperUtils.ParseUri(RecoveryPoint.Id);                      string itemUri = HelperUtils.GetProtectedItemUri(keyValueDict' RecoveryPoint.Id);                      targetDb = itemUri.Split(new string[] { ";" }' StringSplitOptions.None)[2];                  }                    if (OriginalWorkloadRestore.IsPresent)                  {                      azureWorkloadRecoveryConfig.RestoredDBName = Item != null ?                      ((AzureWorkloadSQLDatabaseProtectedItem)Item).FriendlyName : targetDb;                      azureWorkloadRecoveryConfig.OverwriteWLIfpresent = "No";                      azureWorkloadRecoveryConfig.NoRecoveryMode = "Disabled";                      azureWorkloadRecoveryConfig.ContainerId = Item != null ?                      GetContainerId(Item.Id) : GetContainerId(GetItemId(RecoveryPoint.Id));                  }                  else if (AlternateWorkloadRestore.IsPresent && Item == null)                  {                      if (string.Compare(((AzureWorkloadProtectableItem)TargetItem).ProtectableItemType'                          ProtectableItemType.SQLInstance.ToString()) != 0)                      {                          throw new ArgumentException(string.Format(Resources.AzureWorkloadRestoreProtectableItemException));                      }                        azureWorkloadRecoveryConfig.RestoredDBName =                      GetRestoredDBName(RecoveryPoint.ItemName' currentTime);                      azureWorkloadRecoveryConfig.OverwriteWLIfpresent = "No";                      azureWorkloadRecoveryConfig.NoRecoveryMode = "Disabled";                      List<SQLDataDirectoryMapping> targetPhysicalPath = new List<SQLDataDirectoryMapping>();                        //Get target workload item                      ODataQuery<BMSWorkloadItemQueryObject> queryParams = null;                      string backupManagementType = ServiceClientModel.BackupManagementType.AzureWorkload;                      queryParams = new ODataQuery<BMSWorkloadItemQueryObject>(                      q => q.WorkloadItemType == WorkloadItemType.SQLInstance &&                      q.BackupManagementType == backupManagementType);                        var itemResponses = ServiceClientAdapter.ListWorkloadItem(                          TargetItem.ContainerName'                          queryParams'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                        foreach (var itemResponse in itemResponses)                      {                          if (string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).FriendlyName'                              ((AzureWorkloadProtectableItem)TargetItem).FriendlyName) == 0 &&                              string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).ServerName'                              ((AzureWorkloadProtectableItem)TargetItem).ServerName) == 0)                          {                              string itemId = GetItemId(RecoveryPoint.Id);                              IList<SQLDataDirectory> dataDirectoryPaths = GetRpDetails(vaultName' resourceGroupName);                              foreach (var dataDirectoryPath in dataDirectoryPaths)                              {                                  targetPhysicalPath.Add(new SQLDataDirectoryMapping()                                  {                                      MappingType = dataDirectoryPath.Type'                                      SourceLogicalName = dataDirectoryPath.LogicalName'                                      SourcePath = dataDirectoryPath.Path'                                      TargetPath = GetTargetPath(dataDirectoryPath.Path' dataDirectoryPath.LogicalName' dataDirectoryPath.Type'                                      ((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).DataDirectoryPaths                                      as List<SQLDataDirectory>' offset)                                  });                              }                              break;                          }                      }                      azureWorkloadRecoveryConfig.targetPhysicalPath = targetPhysicalPath;                      azureWorkloadRecoveryConfig.ContainerId = GetContainerId(TargetItem.Id);                  }                  else if (Item != null && TargetItem != null)                  {                      if (string.Compare(((AzureWorkloadProtectableItem)TargetItem).ProtectableItemType'                          ProtectableItemType.SQLDataBase.ToString()) == 0)                      {                          throw new ArgumentException(string.Format(Resources.AzureWorkloadRestoreProtectableItemException));                      }                        azureWorkloadRecoveryConfig.RestoredDBName =                      GetRestoredDBName(Item.Name' currentTime);                      azureWorkloadRecoveryConfig.OverwriteWLIfpresent = "No";                      azureWorkloadRecoveryConfig.NoRecoveryMode = "Disabled";                      List<SQLDataDirectoryMapping> targetPhysicalPath = new List<SQLDataDirectoryMapping>();                        //Get target workload item                      ODataQuery<BMSWorkloadItemQueryObject> queryParams = null;                      string backupManagementType = ServiceClientModel.BackupManagementType.AzureWorkload;                      queryParams = new ODataQuery<BMSWorkloadItemQueryObject>(                      q => q.WorkloadItemType == WorkloadItemType.SQLInstance &&                      q.BackupManagementType == backupManagementType);                        var itemResponses = ServiceClientAdapter.ListWorkloadItem(                          TargetItem.ContainerName'                          queryParams'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                        foreach (var itemResponse in itemResponses)                      {                          if (string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).FriendlyName'                              ((AzureWorkloadProtectableItem)TargetItem).FriendlyName) == 0 &&                              string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).ServerName'                              ((AzureWorkloadProtectableItem)TargetItem).ServerName) == 0)                          {                              List<SQLDataDirectory> dataDirectory = GetDataDirectory(vaultName' resourceGroupName' Item.Id' PointInTime);                              foreach (var dataDirectoryPath in dataDirectory)                              {                                  targetPhysicalPath.Add(new SQLDataDirectoryMapping()                                  {                                      MappingType = dataDirectoryPath.Type'                                      SourceLogicalName = dataDirectoryPath.LogicalName'                                      SourcePath = dataDirectoryPath.Path'                                      TargetPath = GetTargetPath(dataDirectoryPath.Path' dataDirectoryPath.LogicalName' dataDirectoryPath.Type'                                      ((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).DataDirectoryPaths                                      as List<SQLDataDirectory>' offset)                                  });                              }                              break;                          }                      }                        azureWorkloadRecoveryConfig.targetPhysicalPath = targetPhysicalPath;                      azureWorkloadRecoveryConfig.ContainerId = GetContainerId(TargetItem.Id);                  }                  RecoveryConfigBase baseobj = azureWorkloadRecoveryConfig;                  WriteObject(baseobj);              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,ExecuteCmdlet,The following statement contains a magic number: ExecutionBlock(() =>              {                  base.ExecuteCmdlet();                    ResourceIdentifier resourceIdentifier = new ResourceIdentifier(VaultId);                  string vaultName = resourceIdentifier.ResourceName;                  string resourceGroupName = resourceIdentifier.ResourceGroupName;                    if (!OriginalWorkloadRestore.IsPresent && !AlternateWorkloadRestore.IsPresent)                  {                      throw new ArgumentException(string.Format(Resources.AzureWorkloadRestoreLocationException));                  }                    AzureWorkloadRecoveryConfig azureWorkloadRecoveryConfig = GetConfigObject();                  azureWorkloadRecoveryConfig.SourceResourceId = Item != null ? Item.SourceResourceId : GetResourceId();                  DateTime currentTime = DateTime.Now;                  TimeSpan timeSpan = DateTime.UtcNow - new DateTime(1970' 1' 1);                  int offset = (int)timeSpan.TotalSeconds;                  string targetDb = "";                  if (ParameterSetName == RpParameterSet)                  {                      Dictionary<UriEnums' string> keyValueDict = HelperUtils.ParseUri(RecoveryPoint.Id);                      string itemUri = HelperUtils.GetProtectedItemUri(keyValueDict' RecoveryPoint.Id);                      targetDb = itemUri.Split(new string[] { ";" }' StringSplitOptions.None)[2];                  }                    if (OriginalWorkloadRestore.IsPresent)                  {                      azureWorkloadRecoveryConfig.RestoredDBName = Item != null ?                      ((AzureWorkloadSQLDatabaseProtectedItem)Item).FriendlyName : targetDb;                      azureWorkloadRecoveryConfig.OverwriteWLIfpresent = "No";                      azureWorkloadRecoveryConfig.NoRecoveryMode = "Disabled";                      azureWorkloadRecoveryConfig.ContainerId = Item != null ?                      GetContainerId(Item.Id) : GetContainerId(GetItemId(RecoveryPoint.Id));                  }                  else if (AlternateWorkloadRestore.IsPresent && Item == null)                  {                      if (string.Compare(((AzureWorkloadProtectableItem)TargetItem).ProtectableItemType'                          ProtectableItemType.SQLInstance.ToString()) != 0)                      {                          throw new ArgumentException(string.Format(Resources.AzureWorkloadRestoreProtectableItemException));                      }                        azureWorkloadRecoveryConfig.RestoredDBName =                      GetRestoredDBName(RecoveryPoint.ItemName' currentTime);                      azureWorkloadRecoveryConfig.OverwriteWLIfpresent = "No";                      azureWorkloadRecoveryConfig.NoRecoveryMode = "Disabled";                      List<SQLDataDirectoryMapping> targetPhysicalPath = new List<SQLDataDirectoryMapping>();                        //Get target workload item                      ODataQuery<BMSWorkloadItemQueryObject> queryParams = null;                      string backupManagementType = ServiceClientModel.BackupManagementType.AzureWorkload;                      queryParams = new ODataQuery<BMSWorkloadItemQueryObject>(                      q => q.WorkloadItemType == WorkloadItemType.SQLInstance &&                      q.BackupManagementType == backupManagementType);                        var itemResponses = ServiceClientAdapter.ListWorkloadItem(                          TargetItem.ContainerName'                          queryParams'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                        foreach (var itemResponse in itemResponses)                      {                          if (string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).FriendlyName'                              ((AzureWorkloadProtectableItem)TargetItem).FriendlyName) == 0 &&                              string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).ServerName'                              ((AzureWorkloadProtectableItem)TargetItem).ServerName) == 0)                          {                              string itemId = GetItemId(RecoveryPoint.Id);                              IList<SQLDataDirectory> dataDirectoryPaths = GetRpDetails(vaultName' resourceGroupName);                              foreach (var dataDirectoryPath in dataDirectoryPaths)                              {                                  targetPhysicalPath.Add(new SQLDataDirectoryMapping()                                  {                                      MappingType = dataDirectoryPath.Type'                                      SourceLogicalName = dataDirectoryPath.LogicalName'                                      SourcePath = dataDirectoryPath.Path'                                      TargetPath = GetTargetPath(dataDirectoryPath.Path' dataDirectoryPath.LogicalName' dataDirectoryPath.Type'                                      ((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).DataDirectoryPaths                                      as List<SQLDataDirectory>' offset)                                  });                              }                              break;                          }                      }                      azureWorkloadRecoveryConfig.targetPhysicalPath = targetPhysicalPath;                      azureWorkloadRecoveryConfig.ContainerId = GetContainerId(TargetItem.Id);                  }                  else if (Item != null && TargetItem != null)                  {                      if (string.Compare(((AzureWorkloadProtectableItem)TargetItem).ProtectableItemType'                          ProtectableItemType.SQLDataBase.ToString()) == 0)                      {                          throw new ArgumentException(string.Format(Resources.AzureWorkloadRestoreProtectableItemException));                      }                        azureWorkloadRecoveryConfig.RestoredDBName =                      GetRestoredDBName(Item.Name' currentTime);                      azureWorkloadRecoveryConfig.OverwriteWLIfpresent = "No";                      azureWorkloadRecoveryConfig.NoRecoveryMode = "Disabled";                      List<SQLDataDirectoryMapping> targetPhysicalPath = new List<SQLDataDirectoryMapping>();                        //Get target workload item                      ODataQuery<BMSWorkloadItemQueryObject> queryParams = null;                      string backupManagementType = ServiceClientModel.BackupManagementType.AzureWorkload;                      queryParams = new ODataQuery<BMSWorkloadItemQueryObject>(                      q => q.WorkloadItemType == WorkloadItemType.SQLInstance &&                      q.BackupManagementType == backupManagementType);                        var itemResponses = ServiceClientAdapter.ListWorkloadItem(                          TargetItem.ContainerName'                          queryParams'                          vaultName: vaultName'                          resourceGroupName: resourceGroupName);                        foreach (var itemResponse in itemResponses)                      {                          if (string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).FriendlyName'                              ((AzureWorkloadProtectableItem)TargetItem).FriendlyName) == 0 &&                              string.Compare(((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).ServerName'                              ((AzureWorkloadProtectableItem)TargetItem).ServerName) == 0)                          {                              List<SQLDataDirectory> dataDirectory = GetDataDirectory(vaultName' resourceGroupName' Item.Id' PointInTime);                              foreach (var dataDirectoryPath in dataDirectory)                              {                                  targetPhysicalPath.Add(new SQLDataDirectoryMapping()                                  {                                      MappingType = dataDirectoryPath.Type'                                      SourceLogicalName = dataDirectoryPath.LogicalName'                                      SourcePath = dataDirectoryPath.Path'                                      TargetPath = GetTargetPath(dataDirectoryPath.Path' dataDirectoryPath.LogicalName' dataDirectoryPath.Type'                                      ((AzureVmWorkloadSQLInstanceWorkloadItem)itemResponse.Properties).DataDirectoryPaths                                      as List<SQLDataDirectory>' offset)                                  });                              }                              break;                          }                      }                        azureWorkloadRecoveryConfig.targetPhysicalPath = targetPhysicalPath;                      azureWorkloadRecoveryConfig.ContainerId = GetContainerId(TargetItem.Id);                  }                  RecoveryConfigBase baseobj = azureWorkloadRecoveryConfig;                  WriteObject(baseobj);              });
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetTargetPath,The following statement contains a magic number: fileNameParts.Count == 2
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetResourceId,The following statement contains a magic number: resourceIdentifier.ResourceName = RecoveryPoint.ContainerName.Split(new string[] { ";" }' StringSplitOptions.None)[2];
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetItemId,The following statement contains a magic number: return string.Join("/"' split.ToList().GetRange(0' split.Length - 2));
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetContainerId,The following statement contains a magic number: return string.Join("/"' split.ToList().GetRange(0' split.Length - 2));
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,GetConfigObject,The following statement contains a magic number: targetServer = containerUri.Split(new string[] { ";" }' StringSplitOptions.None)[3];
Duplicate Code,Microsoft.Azure.Commands.RecoveryServices.Backup.Cmdlets,GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\RecoveryServices\RecoveryServices.Backup\Cmdlets\Restore\GetAzureRmRecoveryServicesBackupWorkloadRecoveryConfig.cs,ExecuteCmdlet,The method contains a code clone-set at the following line numbers (starting from the method definition): ((47' 70)' (101' 124))
