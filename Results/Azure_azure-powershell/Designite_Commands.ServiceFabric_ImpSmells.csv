Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The method has 260 lines of code.
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetProfiles,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ParseTemplate,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,Validate,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricDurability,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\UpdateAzureRmServiceFabricDurability.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricReliability,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\UpdateAzureRmServiceFabricReliability.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,SetParameters,The method has 12 parameters. Parameters: parameters' keyVault' certificateUrl' thumbprint' durabilityLevel' reliability' location' clusterName' vmUserName' adminPassword' sku' vmSize
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The method has 5 parameters. Parameters: subjectName' keyVaultUrl' thumbprint' certificateBundle' outputFilePath
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GetKeyVaultReady,The method has 5 parameters. Parameters: vault' certificateBundle' thumbprint' pfxOutputPath' srcPfxPath
Long Parameter List,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricCmdletBase.cs,ImportCertificateToAzureKeyVault,The method has 5 parameters. Parameters: keyVaultName' certificateName' pfxFilePath' password' thumbprint
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,,The length of the parameter MultipleUpdatesWithCommonNameSet is 32.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,,The length of the parameter MultipleUpdatesWithThumbprintSet is 32.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricSettingsCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricSettingsCmdletBase.cs,,The length of the parameter updatedSettingsSectionDescriptionList is 37.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricCmdletBase.cs,,The length of the parameter NewCreatedKeyVaultWaitTimeInSec is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricCmdletBase.cs,,The length of the parameter DefaultPermissionsToCertificates is 32.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricApplicationCertificate is 42.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricClientCertificate is 37.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricClusterCertificate is 38.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricUpgradeType is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricDurability is 30.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,CmdletNoun,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\CmdletNoun.cs,,The length of the parameter AzureRmServiceFabricReliability is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,Constants,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\Constants.cs,,The length of the parameter DefaultClientConnectionEndpoint is 31.
Long Identifier,Microsoft.Azure.Commands.ServiceFabric.Common,Constants,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Common\Constants.cs,,The length of the parameter ServiceFabricWindowsNodeExtName is 31.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,ExecuteCmdlet,The length of the statement  "                throw new PSArgumentException("Only Standard_D15_v2 and Standard_G5 supports Gold durability'please specify -VmSku to right value"); " is 132.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\RemoveAzureRmServiceFabricNodeType.cs,ExecuteCmdlet,The length of the statement  "                 "you need to run 'Remove-ServiceFabricNodeState' on those nodes to fix them' read this document for details on how to " + " is 121.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target:  this.ResourceGroupName' action: string.Format("Create an new cluster {0} "' this.Name ??this.ResourceGroupName))) " is 140.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,ExtractParametersWithDefaultTemplate,The length of the statement  "            this.domainNameLabel = TryGetParameter((JObject)parameters' this.domainNameLabelParameter) ?? this.domainNameLabelParameter; " is 124.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,Validate,The length of the statement  "                    throw new PSArgumentException(string.Format(ServiceFabricProperties.Resources.InvalidDirectory' this.CertificateOutputFolder)); " is 127.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "            while (retry-- >= 0 && operation != null && operation.Error == null && operation.Status.Equals("inProgress"' StringComparison.OrdinalIgnoreCase)) " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "                WriteVerboseWithTimestamp(string.Format("Creating self signed certificate {0} with status {1}"' this.keyVaultCertificateName' operation.Status)); " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "            WriteVerboseWithTimestamp(string.Format("Self signed certificate created: {0}"' certificateBundle.CertificateIdentifier)); " is 122.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The length of the statement  "                var protectedCertificateBytes = certCollection.Export(X509ContentType.Pkcs12' this.CertificatePassword?.ConvertToString()); " is 123.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GeneratePfxName,The length of the statement  "            while (File.Exists(ret = Path.Combine(dir' string.Concat(this.keyVaultCertificateName' suffx' fileExt))) && ++retry <= 50) " is 122.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCmdlet.cs,GetDurabilityLevel,The length of the statement  "                throw new PSInvalidOperationException(string.Format(ServiceFabricProperties.Resources.CannotFindTheNodeType' nodeTypeName)); " is 124.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricCmdletBase.cs,ImportCertificateToAzureKeyVault,The length of the statement  "            WriteVerboseWithTimestamp(string.Format("Certificate imported Azure KeyVault {0}"' certificateBundle.CertificateIdentifier)); " is 125.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,SetAzureRmServiceFabricSetting,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\SetAzureRmServiceFabricSetting.cs,ExecuteCmdlet,The length of the statement  "                    settings[setting.Name] = new System.Collections.Generic.Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase); " is 126.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricDurability,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\UpdateAzureRmServiceFabricDurability.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.Name' action: string.Format("Update fabric durability level to {0} of {1}"' this.DurabilityLevel' this.NodeType))) " is 145.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricReliability,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\UpdateAzureRmServiceFabricReliability.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(target: this.Name' action: string.Format("Update fabric reliability level to {0}"' this.ReliabilityLevel))) " is 125.
Long Statement,Microsoft.Azure.Commands.ServiceFabric.Commands,UpdateAzureRmServiceFabricNodeBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\UpdateAzureRmServiceFabricNodeBase.cs,ExecuteCmdlet,The length of the statement  "            var updateTask = this.ComputeClient.VirtualMachineScaleSets.CreateOrUpdateAsync(this.ResourceGroupName' vmss.Name' vmss); " is 121.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetStorageRandomName,The conditional expression  "(n >= 'a' && n <= 'z') || (n >= '0' && n <= '9')"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,ParseArgumentsForThumbprint,The conditional expression  "(this.AdminClientThumbprint == null || !this.AdminClientThumbprint.Any()) &&                             (this.ReadonlyClientThumbprint == null || !this.ReadonlyClientThumbprint.Any())"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The conditional expression  "retry-- >= 0 && operation != null && operation.Error == null && operation.Status.Equals("inProgress"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricCmdletBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricCmdletBase.cs,SafeGetResource,The conditional expression  "e.Body?.Error != null &&                      (e.Body.Error.Code.Equals("ResourceGroupNotFound"' StringComparison.OrdinalIgnoreCase) ||                       e.Body.Error.Code.Equals("ResourceNotFound"' StringComparison.OrdinalIgnoreCase)||                       e.Body.Error.Code.Equals("NotFound"' StringComparison.OrdinalIgnoreCase))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.ServiceFabric.Models,PSCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Models\PSCluster.cs,ToString,The conditional expression  "value is CertificateDescription ||                           value is AzureActiveDirectory ||                           value is DiagnosticsStorageAccountConfig ||                           value is ClusterUpgradePolicy"  is complex.
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateStorageAccount,The following statement contains a magic number: for (int i = 0' start = 0; i < Constants.StorageAccountsPerNodeType; i++)              {                  string accountName = string.Empty;                  int retry = 10;                  while (retry-- >= 0)                  {                      try                      {                          start++;                          accountName = randomName + start;                          StorageManagementClient.StorageAccounts.Create(                               this.ResourceGroupName'                               accountName'                               new StorageAccountCreateParameters()                               {                                   Sku = new Management.Storage.Models.Sku(SkuName.StandardLRS)'                                   Location = GetLocation()'                                   Tags = GetServiceFabricTags()                               });                            break;                      }                      catch (Rest.Azure.CloudException e)                      {                          if (e.Body.Code == "StorageAccountAlreadyExists")                          {                              continue;                          }                            throw;                      }                  }                    if (retry < 0)                  {                      throw new PSInvalidOperationException(ServiceFabricProperties.Resources.FailedToCreateStorageAccount);                  }                    var account = StorageManagementClient.StorageAccounts.GetProperties(this.ResourceGroupName' accountName);                  accounts.Add(account);              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetStorageRandomName,The following statement contains a magic number: if (!dontRandom)              {                  do                  {                      name = string.Concat(                          name'                          System.IO.Path.GetFileNameWithoutExtension(System.IO.Path.GetRandomFileName()));                        StringBuilder sb = new StringBuilder();                      foreach (var n in name)                      {                          if ((n >= 'a' && n <= 'z') || (n >= '0' && n <= '9'))                          {                              sb.Append(n);                          }                      }                        name = sb.ToString();                  } while (name.Length < 3);              }              else              {                  // for testing                  name = "powershelltest";              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetStorageRandomName,The following statement contains a magic number: if (name.Length > 22)              {                  name = name.Substring(0' 22);              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,GetStorageRandomName,The following statement contains a magic number: if (name.Length > 22)              {                  name = name.Substring(0' 22);              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var retry = 5;
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAdressPollName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Network.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolsName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAdressPollName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Network.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolsName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAdressPollName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Network.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolsName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAdressPollName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Network.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolsName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAdressPollName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Network.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolsName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricNodeType,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricNodeType.cs,CreateNetworkResource,The following statement contains a magic number: var newLoadBalancer = new LoadBalancer(newLoadBalancerId' lbName)              {                  Location = GetLocation()'                  FrontendIPConfigurations = new List<FrontendIPConfiguration>()                  {                      new FrontendIPConfiguration()                      {                          Name= frontendIpConfigurationName'                          PublicIPAddress = new PublicIPAddress()                          {                              Id = publicIp.Id                          }                      }                  }'                  BackendAddressPools = new List<BackendAddressPool>()                  {                      new BackendAddressPool()                      {                          Name = backendAdressPollName                      }                  }'                  LoadBalancingRules = new List<LoadBalancingRule>()                  {                      new LoadBalancingRule()                      {                          Name = "LBRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultTcpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                         FrontendPort = Constants.DefaultTcpPort'                         IdleTimeoutInMinutes = 5'                         Protocol = "tcp"'                         Probe = new Management.Network.Models.SubResource()                         {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeName)                         }                      }'                      new LoadBalancingRule()                      {                          Name = "LBHttpRule"'                          BackendAddressPool = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                 BackendAddressIdFormat'                                 NetworkManagementClient.SubscriptionId'                                 this.ResourceGroupName'                                 lbName'                                 backendAdressPollName)                          }'                          BackendPort = Constants.DefaultHttpPort'                          EnableFloatingIP = false'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                              Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPort = Constants.DefaultHttpPort'                          IdleTimeoutInMinutes = 5'                          Protocol = "tcp"'                          Probe = new Management.Network.Models.SubResource()                          {                             Id = string.Format(                                  ProbeIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  probeHTTPName)                         }                      }                  }'                  Probes = new List<Probe>()                  {                      new Probe()                      {                          Name = probeName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultTcpPort                      }'                      new Probe()                      {                          Name = probeHTTPName'                          IntervalInSeconds = 5'                          NumberOfProbes = 2'                          Port= Constants.DefaultHttpPort                      }'                  }'                  InboundNatPools = new List<InboundNatPool>()                  {                      new InboundNatPool()                      {                          Name = inboundNatPoolsName'                          BackendPort = Constants.DefaultBackendPort'                          FrontendIPConfiguration = new Management.Network.Models.SubResource()                          {                               Id = string.Format(                                  FrontendIDFormat'                                  NetworkManagementClient.SubscriptionId'                                  this.ResourceGroupName'                                  lbName'                                  frontendIpConfigurationName)                          }'                          FrontendPortRangeStart = Constants.DefaultFrontendPortRangeStart'                          FrontendPortRangeEnd = Constants.DefaultFrontendPortRangeEnd'                          Protocol = "tcp"                      }                  }              };
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,The following statement contains a magic number: if (ParameterSetName.Equals(ByDefaultArmTemplate))              {                  if (this.VmPassword == null)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }                    var plainPassword = this.VmPassword.ConvertToString();                  if (plainPassword.Length < 12 || plainPassword.Length > 123)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }                    int requirements = 0;                    if (plainPassword.Any(char.IsUpper))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsLower))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsDigit))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsLetterOrDigit))                  {                      ++requirements;                  }                    if (requirements < 3)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,The following statement contains a magic number: if (ParameterSetName.Equals(ByDefaultArmTemplate))              {                  if (this.VmPassword == null)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }                    var plainPassword = this.VmPassword.ConvertToString();                  if (plainPassword.Length < 12 || plainPassword.Length > 123)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }                    int requirements = 0;                    if (plainPassword.Any(char.IsUpper))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsLower))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsDigit))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsLetterOrDigit))                  {                      ++requirements;                  }                    if (requirements < 3)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,NewAzureRmServiceFabricCluster,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\NewAzureRmServiceFabricCluster.cs,Validate,The following statement contains a magic number: if (ParameterSetName.Equals(ByDefaultArmTemplate))              {                  if (this.VmPassword == null)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }                    var plainPassword = this.VmPassword.ConvertToString();                  if (plainPassword.Length < 12 || plainPassword.Length > 123)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }                    int requirements = 0;                    if (plainPassword.Any(char.IsUpper))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsLower))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsDigit))                  {                      ++requirements;                  }                    if (plainPassword.Any(char.IsLetterOrDigit))                  {                      ++requirements;                  }                    if (requirements < 3)                  {                      throw new PSArgumentException(ServiceFabricProperties.Resources.InvalidPassword);                  }              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateSelfSignedCertificate,The following statement contains a magic number: var retry = 120;
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GeneratePfxName,The following statement contains a magic number: while (File.Exists(ret = Path.Combine(dir' string.Concat(this.keyVaultCertificateName' suffx' fileExt))) && ++retry <= 50)              {                  suffx = retry.ToString();              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,GeneratePfxName,The following statement contains a magic number: if (retry > 50)              {                  throw new PSInvalidOperationException("Failed to generate the file' please clean the folder with old file");              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateDefaultKeyVaultName,The following statement contains a magic number: while (sb.Length < 3)              {                  foreach (var c in targetCopy)                  {                      if (IsValidKeyVaultChar(c))                      {                          sb.Append(c);                      }                  }                    // resource group name can't be used for key vault name                  // use random string instread                  if (sb.Length == 0)                  {                      targetCopy = Path.GetFileNameWithoutExtension(Path.GetRandomFileName());                  }              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateDefaultKeyVaultName,The following statement contains a magic number: if (sb.Length > 24)              {                  return sb.ToString().Substring(0' 24);              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,CreateDefaultKeyVaultName,The following statement contains a magic number: if (sb.Length > 24)              {                  return sb.ToString().Substring(0' 24);              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,ExtractSecretNameFromSecretIdentifier,The following statement contains a magic number: if (tokens.Length != 5)              {                  throw new PSArgumentException(secretIdentifier);              }
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,ExtractSecretNameFromSecretIdentifier,The following statement contains a magic number: vaultSecretName = tokens[3];
Magic Number,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClusterCertificateCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClusterCertificateCmdlet.cs,ExtractSecretNameFromSecretIdentifier,The following statement contains a magic number: version = tokens[4];
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,AddAzureRmServiceFabricClientCertificate,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\AddAzureRmServiceFabricClientCertificate.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case SingleUpdateWithThumbprintSet:                      case MultipleUpdatesWithThumbprintSet:                          {                              var oldCertThumbprints = cluster.ClientCertificateThumbprints;                              var allCertThumbprints = ParseArgumentsForThumbprint();                                if (oldCertThumbprints != null)                              {                                  allCertThumbprints.AddRange(oldCertThumbprints);                              }                                var patchRequest = new ClusterUpdateParameters                              {                                  ClientCertificateThumbprints = allCertThumbprints'                                  ClientCertificateCommonNames = cluster.ClientCertificateCommonNames                              };                                var psCluster = SendPatchRequest(patchRequest);                              WriteObject(psCluster' true);                              break;                          }                        case SingleUpdateWithCommonNameSet:                      case MultipleUpdatesWithCommonNameSet:                          {                              var oldCommonNames = cluster.ClientCertificateCommonNames;                              var allNewCommonNames = ParseArgumentsForCommonName(false);                                if (oldCommonNames != null)                              {                                  allNewCommonNames.AddRange(oldCommonNames);                              }                                var patchRequest = new ClusterUpdateParameters                              {                                  ClientCertificateCommonNames = allNewCommonNames'                                  ClientCertificateThumbprints = cluster.ClientCertificateThumbprints                              };                                var psCluster = SendPatchRequest(patchRequest);                              WriteObject(psCluster' true);                              break;                          }                  }
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,ParseArgumentsForThumbprint,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case MultipleUpdatesWithThumbprintSet:                      {                            if ((this.AdminClientThumbprint == null || !this.AdminClientThumbprint.Any()) &&                             (this.ReadonlyClientThumbprint == null || !this.ReadonlyClientThumbprint.Any()))                          {                              throw new PSArgumentException(                                  "Both AdminClientThumbprints and ReadonlyClientThumbprints are empty");                          }                            if (this.AdminClientThumbprint != null && this.AdminClientThumbprint.Any())                          {                              allCertThumbprints.AddRange(                                  this.AdminClientThumbprint.Select(t => new ClientCertificateThumbprint()                                  {                                      CertificateThumbprint = t'                                      IsAdmin = true                                  }));                          }                            if (this.ReadonlyClientThumbprint != null && this.ReadonlyClientThumbprint.Any())                          {                              allCertThumbprints.AddRange(                                  this.ReadonlyClientThumbprint.Select(t => new ClientCertificateThumbprint()                                  {                                      CertificateThumbprint = t'                                      IsAdmin = false                                  }));                          }                            return allCertThumbprints;                      }                    case SingleUpdateWithThumbprintSet:                        {                          allCertThumbprints.Add(new ClientCertificateThumbprint()                          {                              CertificateThumbprint = this.Thumbprint'                              IsAdmin = this.IsAdmin                          });                          return allCertThumbprints;                      }              }
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,ServiceFabricClientCertificateBase,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\ServiceFabricClientCertificateBase.cs,ParseArgumentsForCommonName,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case MultipleUpdatesWithCommonNameSet:                      {                          allCommonNames = this.ClientCertificateCommonName.Select(                              c => new ClientCertificateCommonName(                                  c.IsAdmin'                                  c.CertificateCommonName'                                  c.CertificateIssuerThumbprint)).ToList();                          break;                      }                  case SingleUpdateWithCommonNameSet:                        {                          allCommonNames.Add(                              new ClientCertificateCommonName()                              {                                  CertificateCommonName = this.CommonName'                                  CertificateIssuerThumbprint = this.IssuerThumbprint'                                  IsAdmin = this.IsAdmin                              });                          break;                      }              }
Missing Default,Microsoft.Azure.Commands.ServiceFabric.Commands,RemoveAzureRmServiceFabricClientCertificate,C:\repos\Azure_azure-powershell\src\ResourceManager\ServiceFabric\Commands.ServiceFabric\Commands\RemoveAzureRmServiceFabricClientCertificate.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case SingleUpdateWithThumbprintSet:                      case MultipleUpdatesWithThumbprintSet:                      {                          var oldCertThumbprints = cluster.ClientCertificateThumbprints.Select(                              c => c.CertificateThumbprint).ToDictionary(                                  c => c'                                  StringComparer.OrdinalIgnoreCase);                            var toRemoveThumbprints = ParseArgumentsForThumbprint();                            if (oldCertThumbprints.Any())                          {                              var notExist = toRemoveThumbprints.SingleOrDefault(                                  c => !oldCertThumbprints.ContainsKey(                                      c.CertificateThumbprint));                                if (notExist != null)                              {                                  throw new PSArgumentException(                                      string.Format(                                          ServiceFabricProperties.Resources.CannotFindCertificateInCluster'                                          notExist.CertificateThumbprint));                              }                          }                          else                          {                              throw new PSArgumentException(                                  string.Format(                                      ServiceFabricProperties.Resources.NoneCertificateFound));                          }                            var thumbprintList = cluster.ClientCertificateThumbprints.ToList();                          foreach (var thumbprint in toRemoveThumbprints)                          {                              thumbprintList.RemoveAll(c => string.Equals(                                  c.CertificateThumbprint'                                  thumbprint.CertificateThumbprint'                                  StringComparison.InvariantCultureIgnoreCase));                          }                            var patchRequest = new ClusterUpdateParameters                          {                              ClientCertificateThumbprints = thumbprintList '                              ClientCertificateCommonNames = cluster.ClientCertificateCommonNames                          };                            var psCluster = SendPatchRequest(patchRequest);                          WriteObject(psCluster' true);                          break;                      }                        case SingleUpdateWithCommonNameSet:                      case MultipleUpdatesWithCommonNameSet:                      {                          var oldCommonNames = cluster.ClientCertificateCommonNames.Select(                              c => c.CertificateCommonName + c.CertificateIssuerThumbprint).                              ToDictionary(c => c' StringComparer.OrdinalIgnoreCase);                            var toRemoveCommonName = ParseArgumentsForCommonName(true);                            if (oldCommonNames.Any())                          {                              var notExist = toRemoveCommonName.SingleOrDefault(                                  c => !oldCommonNames.ContainsKey(                                      c.CertificateCommonName + c.CertificateIssuerThumbprint));                                if (notExist != null)                              {                                  throw new PSArgumentException(                                      string.Format(                                          ServiceFabricProperties.Resources.CannotFindCommonNameAndIssuer'                                          notExist.CertificateCommonName'                                          notExist.CertificateIssuerThumbprint));                              }                          }                          else                          {                              throw new PSArgumentException(string.Format(                                  ServiceFabricProperties.Resources.NoneCertificateFound));                          }                            var commonNames = cluster.ClientCertificateCommonNames.ToList();                          foreach (var commonName in toRemoveCommonName)                          {                              commonNames.RemoveAll(c => string.Equals(                                  commonName.CertificateCommonName + commonName.CertificateIssuerThumbprint'                                  c.CertificateCommonName + c.CertificateIssuerThumbprint'                                  StringComparison.OrdinalIgnoreCase));                          }                            var patchRequest = new ClusterUpdateParameters                          {                              ClientCertificateCommonNames = commonNames'                              ClientCertificateThumbprints = cluster.ClientCertificateThumbprints                          };                            var psCluster = SendPatchRequest(patchRequest);                          WriteObject(psCluster' true);                          break;                      }                  }
