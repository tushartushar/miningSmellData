Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.MarketplaceOrdering.Cmdlets.Agreements,SetAzureRmMarketplaceTerms,D:\research\architectureSmells\repos\Azure_azure-powershell\src\MarketplaceOrdering\MarketplaceOrdering\Cmdlets\Agreements\SetAzureRmMarketplaceTerms.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Long Identifier,Microsoft.Azure.Commands.MarketplaceOrdering.Common,AzureMarketplaceOrderingCmdletBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\MarketplaceOrdering\MarketplaceOrdering\Common\AzureMarketplaceOrderingCmdletBase.cs,,The length of the parameter _marketplaceOrderingAgreementsClient is 36.
Long Statement,Microsoft.Azure.Commands.MarketplaceOrdering.Cmdlets.Agreements,GetAzureRmMarketplaceTerms,D:\research\architectureSmells\repos\Azure_azure-powershell\src\MarketplaceOrdering\MarketplaceOrdering\Cmdlets\Agreements\GetAzureRmMarketplaceTerms.cs,ExecuteCmdlet,The length of the statement  "                var agreementTerms = new PSAgreementTerms(MarketplaceOrderingAgreementsClient.MarketplaceAgreements.Get(Publisher' Product' Name)); " is 131.
Missing Default,Microsoft.Azure.Commands.MarketplaceOrdering.Cmdlets.Agreements,SetAzureRmMarketplaceTerms,D:\research\architectureSmells\repos\Azure_azure-powershell\src\MarketplaceOrdering\MarketplaceOrdering\Cmdlets\Agreements\SetAzureRmMarketplaceTerms.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case Constants.ParameterSetNames.AgreementAcceptParameterSet:                      {                          if (Terms != null)                          {                              Terms.Accepted = true;                              var agreementTerms = new PSAgreementTerms(MarketplaceOrderingAgreementsClient.MarketplaceAgreements.Create(                                              Publisher' Product' Name' Terms.ToAgreementTerms()));                              WriteObject(agreementTerms);                          }                          else                          {//Accept but there is no terms object                              WriteWarning("Terms parameter is mandatory to accept the legal terms.");                          }                      }                          break;                      case Constants.ParameterSetNames.AgreementRejectParameterSet:                      {                          Terms = new PSAgreementTerms                          {                              Accepted = false                          };                          var agreementTerms = new PSAgreementTerms(MarketplaceOrderingAgreementsClient.MarketplaceAgreements.Create(                                              Publisher' Product' Name' Terms.ToAgreementTerms()));                          WriteObject(agreementTerms);                      }                          break;                      case Constants.ParameterSetNames.InputObjectAcceptParametrSet:                          if (InputObject != null)                          {                              InputObject.Accepted = true;                              var agreementTerms = new PSAgreementTerms(MarketplaceOrderingAgreementsClient.MarketplaceAgreements.Create(                                                      InputObject.Publisher' InputObject.Product' InputObject.Plan' InputObject.ToAgreementTerms()));                              WriteObject(agreementTerms);                          }                          else                          {                              WriteWarning("Terms parameter is mandatory when passing it as pipeline.");                          }                          break;                      case Constants.ParameterSetNames.InputObjectRejectParametrSet:                          if (InputObject != null)                          {                              InputObject.Accepted = false;                              var agreementTerms = new PSAgreementTerms(MarketplaceOrderingAgreementsClient.MarketplaceAgreements.Create(                                                      InputObject.Publisher' InputObject.Product' InputObject.Plan' InputObject.ToAgreementTerms()));                              WriteObject(agreementTerms);                          }                          else                          {                              WriteWarning("Terms parameter is mandatory when passing it as pipeline.");                          }                          break;                  }
