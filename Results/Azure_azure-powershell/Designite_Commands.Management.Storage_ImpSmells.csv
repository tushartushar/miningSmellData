Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.Management.Storage,UpdateAzureStorageAccountRuleSetCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\UpdateAzureStorageAccountNetworkRuleSet.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Management.Storage,NewAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\NewAzureStorageAccount.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Management.Storage,SetAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\SetAzureStorageAccount.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,ParseEncryption,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,ParseEncryption,The method has 7 parameters. Parameters: EnableService' DisableService' storageEncryption' keyVaultEncryption' keyName' keyVersion' keyVaultUri
Long Identifier,Microsoft.Azure.Commands.Management.Storage,SetAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\SetAzureStorageAccount.cs,,The length of the parameter KeyvaultEncryptionParameterSet is 30.
Long Identifier,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,,The length of the parameter StorageAccountNameAvailabilityStr is 33.
Long Statement,Microsoft.WindowsAzure.Commands.Storage.Adapters,AzureContextAdapterExtensions,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Storage\Adapters\WindowsAzure.Storage.6\AzureContextAdapterExtensions.cs,GetStorageContext,The length of the statement  "            return new AzureStorageContext(new CloudStorageAccount(new StorageCredentials(service.Name' service.AuthenticationKeys.First())' " is 128.
Long Statement,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The length of the statement  "                                throw new ArgumentOutOfRangeException("VirtualNetworkResourceId"' String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}"' rule.VirtualNetworkResourceId)); " is 193.
Long Statement,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The length of the statement  "                                throw new ArgumentOutOfRangeException("IPAddressOrRange"' String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}"' rule.IPAddressOrRange)); " is 171.
Long Statement,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The length of the statement  "                            if (!RemoveNetworkRule(storageACL.VirtualNetworkRules' PSNetworkRuleSet.ParseStorageNetworkRuleVirtualNetworkRule(rule))) " is 121.
Long Statement,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The length of the statement  "                                throw new ArgumentOutOfRangeException("VirtualNetworkRule"' String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}"' rule.VirtualNetworkResourceId)); " is 187.
Long Statement,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The length of the statement  "                                throw new ArgumentOutOfRangeException("IPRule"' String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}"' rule.IPAddressOrRange)); " is 161.
Long Statement,Microsoft.Azure.Commands.Management.Storage,UpdateAzureStorageAccountRuleSetCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\UpdateAzureStorageAccountNetworkRuleSet.cs,ExecuteCmdlet,The length of the statement  "                    throw new System.ArgumentNullException("IPRules' VirtualNetworkRules' Bypass' DefaultAction"' "Request must specify an account NetworkRule property to update."); " is 161.
Long Statement,Microsoft.Azure.Commands.Management.Storage,NewAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\NewAzureStorageAccount.cs,ExecuteCmdlet,The length of the statement  "            CheckNameAvailabilityResult checkNameAvailabilityResult = this.StorageClient.StorageAccounts.CheckNameAvailability(this.Name); " is 126.
Long Statement,Microsoft.Azure.Commands.Management.Storage,SetAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\SetAzureStorageAccount.cs,ExecuteCmdlet,The length of the statement  "                if (this.force || this.AccessTier == null || ShouldContinue("Changing the access tier may result in additional charges. See (http://go.microsoft.com/fwlink/?LinkId=786482) to learn more."' "")) " is 193.
Long Statement,Microsoft.Azure.Commands.Management.Storage,SetAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\SetAzureStorageAccount.cs,ExecuteCmdlet,The length of the statement  "                    if (this.EnableEncryptionService != null || this.DisableEncryptionService != null || StorageEncryption || (ParameterSetName == KeyvaultEncryptionParameterSet)) " is 159.
Long Statement,Microsoft.Azure.Commands.Management.Storage,SetAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\SetAzureStorageAccount.cs,ExecuteCmdlet,The length of the statement  "                        updateParameters.Encryption = ParseEncryption(EnableEncryptionService' DisableEncryptionService' StorageEncryption' keyvaultEncryption' KeyName' KeyVersion' KeyVaultUri); " is 170.
Long Statement,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,ParseEncryption,The length of the statement  "                    throw new ArgumentOutOfRangeException("EnableEncryptionService' DisableEncryptionService"' String.Format("EnableEncryptionService and DisableEncryptionService should not have overlap Service: {0}"' DisableService & EnableService)); " is 231.
Long Statement,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,ParseEncryption,The length of the statement  "            if (DisableService != null && (DisableService & EncryptionSupportServiceEnum.Blob) == EncryptionSupportServiceEnum.Blob) " is 120.
Long Statement,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,ParseEncryption,The length of the statement  "            if (DisableService != null && (DisableService & EncryptionSupportServiceEnum.File) == EncryptionSupportServiceEnum.File) " is 120.
Complex Conditional,Microsoft.Azure.Commands.Management.Storage,UpdateAzureStorageAccountRuleSetCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\UpdateAzureStorageAccountNetworkRuleSet.cs,ExecuteCmdlet,The conditional expression  "IPRule == null && VirtualNetworkRule == null && bypass == null && defaultAction == null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Management.Storage,SetAzureStorageAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\SetAzureStorageAccount.cs,ExecuteCmdlet,The conditional expression  "this.EnableEncryptionService != null || this.DisableEncryptionService != null || StorageEncryption || (ParameterSetName == KeyvaultEncryptionParameterSet)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Management.Storage,StorageAccountBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\StorageAccountBaseCmdlet.cs,ParseEncryption,The conditional expression  "(EnableService == EncryptionSupportServiceEnum.None || EnableService == null) &&                  (DisableService == EncryptionSupportServiceEnum.None || DisableService == null) &&                  (!keyVaultEncryption) && (!storageEncryption)"  is complex.
Magic Number,Microsoft.Azure.Commands.Management.Storage.Models,ARMStorageService,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Storage\Adapters\ARM.Storage.6\ARMStorageService.cs,ParseResourceGroupFromId,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceId))              {                  string[] tokens = resourceId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens == null || tokens.Length < 4)                  {                      throw new ArgumentOutOfRangeException("resourceId");                  }                  return tokens[3];              }
Magic Number,Microsoft.Azure.Commands.Management.Storage.Models,ARMStorageService,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Storage\Adapters\ARM.Storage.6\ARMStorageService.cs,ParseResourceGroupFromId,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceId))              {                  string[] tokens = resourceId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens == null || tokens.Length < 4)                  {                      throw new ArgumentOutOfRangeException("resourceId");                  }                  return tokens[3];              }
Magic Number,Microsoft.Azure.Commands.Management.Storage.Models,PSStorageAccount,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\Models\PSStorageAccount.cs,ParseResourceGroupFromId,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                    return tokens[3];              }
Missing Default,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case NetWorkRuleStringParameterSet:                          if (storageACL.VirtualNetworkRules == null)                              storageACL.VirtualNetworkRules = new List<VirtualNetworkRule>();                          foreach (string s in VirtualNetworkResourceId)                          {                              VirtualNetworkRule rule = new VirtualNetworkRule(s);                              if (!RemoveNetworkRule(storageACL.VirtualNetworkRules' rule))                                  throw new ArgumentOutOfRangeException("VirtualNetworkResourceId"' String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}"' rule.VirtualNetworkResourceId));                          }                          break;                      case IpRuleStringParameterSet:                          if (storageACL.IpRules == null)                              storageACL.IpRules = new List<IPRule>();                          foreach (string s in IPAddressOrRange)                          {                              IPRule rule = new IPRule(s);                              if (!RemoveIpRule(storageACL.IpRules' rule))                                  throw new ArgumentOutOfRangeException("IPAddressOrRange"' String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}"' rule.IPAddressOrRange));                          }                          break;                      case NetworkRuleObjectParameterSet:                          if (storageACL.VirtualNetworkRules == null)                              storageACL.VirtualNetworkRules = new List<VirtualNetworkRule>();                          foreach (PSVirtualNetworkRule rule in VirtualNetworkRule)                          {                              if (!RemoveNetworkRule(storageACL.VirtualNetworkRules' PSNetworkRuleSet.ParseStorageNetworkRuleVirtualNetworkRule(rule)))                                  throw new ArgumentOutOfRangeException("VirtualNetworkRule"' String.Format("Can't remove VirtualNetworkRule with specific ResourceId since not exist: {0}"' rule.VirtualNetworkResourceId));                          }                          break;                      case IpRuleObjectParameterSet:                          if (storageACL.IpRules == null)                              storageACL.IpRules = new List<IPRule>();                          foreach (PSIpRule rule in IPRule)                          {                              if (!RemoveIpRule(storageACL.IpRules' PSNetworkRuleSet.ParseStorageNetworkRuleIPRule(rule)))                                  throw new ArgumentOutOfRangeException("IPRule"' String.Format("Can't remove IpRule with specific IPAddressOrRange since not exist: {0}"' rule.IPAddressOrRange));                          }                          break;                  }
Missing Default,Microsoft.Azure.Commands.Management.Storage,RemoveAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\RemoveAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case NetWorkRuleStringParameterSet:                      case NetworkRuleObjectParameterSet:                          WriteObject(PSNetworkRuleSet.ParsePSNetworkRule(storageAccount.NetworkAcls).VirtualNetworkRules);                          break;                      case IpRuleStringParameterSet:                      case IpRuleObjectParameterSet:                          WriteObject(PSNetworkRuleSet.ParsePSNetworkRule(storageAccount.NetworkAcls).IpRules);                          break;                  }
Missing Default,Microsoft.Azure.Commands.Management.Storage,AddAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\AddAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case NetWorkRuleStringParameterSet:                          if (storageACL.VirtualNetworkRules == null)                              storageACL.VirtualNetworkRules = new List<VirtualNetworkRule>();                          foreach (string s in VirtualNetworkResourceId)                          {                              VirtualNetworkRule rule = new VirtualNetworkRule(s);                              storageACL.VirtualNetworkRules.Add(rule);                          }                          break;                      case IpRuleStringParameterSet:                          if (storageACL.IpRules == null)                              storageACL.IpRules = new List<IPRule>();                          foreach (string s in IPAddressOrRange)                          {                              IPRule rule = new IPRule(s);                              storageACL.IpRules.Add(rule);                          }                          break;                      case NetworkRuleObjectParameterSet:                          if (storageACL.VirtualNetworkRules == null)                              storageACL.VirtualNetworkRules = new List<VirtualNetworkRule>();                          foreach (PSVirtualNetworkRule rule in VirtualNetworkRule)                          {                              storageACL.VirtualNetworkRules.Add(PSNetworkRuleSet.ParseStorageNetworkRuleVirtualNetworkRule(rule));                          }                          break;                      case IpRuleObjectParameterSet:                          if (storageACL.IpRules == null)                              storageACL.IpRules = new List<IPRule>();                          foreach (PSIpRule rule in IPRule)                          {                              storageACL.IpRules.Add(PSNetworkRuleSet.ParseStorageNetworkRuleIPRule(rule));                          }                          break;                  }
Missing Default,Microsoft.Azure.Commands.Management.Storage,AddAzureStorageAccountNetworkRuleCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Storage\Commands.Management.Storage\StorageAccount\AddAzureStorageAccountNetworkRule.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case NetWorkRuleStringParameterSet:                      case NetworkRuleObjectParameterSet:                          WriteObject(PSNetworkRuleSet.ParsePSNetworkRule(storageAccount.NetworkAcls).VirtualNetworkRules);                          break;                      case IpRuleStringParameterSet:                      case IpRuleObjectParameterSet:                          WriteObject(PSNetworkRuleSet.ParsePSNetworkRule(storageAccount.NetworkAcls).IpRules);                          break;                  }
