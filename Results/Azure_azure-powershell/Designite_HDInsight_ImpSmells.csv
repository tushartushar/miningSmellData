Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.WindowsAzure.Commands.HDInsight.Cmdlet.PSCmdlets,SetAzureHDInsightClusterSizeCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\SetAzureHDInsightClusterSizeCmdlet.cs,EndProcessing,The method has 111 lines of code.
Complex Method,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightJobOutputCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightJobOutputCmdlet.cs,EndProcessing,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.WindowsAzure.Commands.HDInsight.Cmdlet.PSCmdlets,SetAzureHDInsightClusterSizeCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\SetAzureHDInsightClusterSizeCmdlet.cs,EndProcessing,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GatewayUriResolver,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GatewayUriResolver.cs,GetGatewayUri,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,ServiceLocationAssemblySweep,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocationAssemblySweep.cs,GetRegistrarTypes,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightCommandExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightCommandExtensions.cs,GetJobSubmissionClientCredentials,The method has 5 parameters. Parameters: command' currentSubscription' environment' cluster' profile
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter AzureHDInsightHiveJobDefinition is 31.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter AzureHDInsightHttpServicesAccess is 32.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter AzureHDInsightMapReduceJobDefinition is 36.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter AzureHDInsightPigJobDefinition is 30.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter AzureHDInsightSqoopJobDefinition is 32.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter AzureHDInsightStreamingMapReduceJobDefinition is 45.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetClusterByConfigWithSpecificSubscriptionCredentials is 62.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetClusterByNameWithSpecificSubscriptionCredentials is 60.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetConfigClusterSizeInNodesOnly is 40.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetDefaultStorageAccount is 33.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetJobHistoryByNameAndJobId is 36.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetResizingWithPiping is 30.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetJobHistoryByNameWithSpecificSubscriptionCredentials is 63.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHdInsightPowerShellConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHdInsightPowerShellHardCodes.cs,,The length of the parameter ParameterSetStartJobByNameWithSpecificSubscriptionCredentials is 61.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,AzureHDInsightStorageHandler,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\AzureHDInsightStorageHandler.cs,,The length of the parameter ProductionStorageAccountEndpointUriTemplate is 43.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GatewayUriResolver,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GatewayUriResolver.cs,,The length of the parameter AzureGatewayUriPortNumberVersion15AndBelow is 42.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GatewayUriResolver,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GatewayUriResolver.cs,,The length of the parameter AzureGatewayUriPortNumberVersion16AndAbove is 42.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GetAzureHDInsightJobOutputCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GetAzureHDInsightJobOutputCommand.cs,,The length of the parameter TaskLogDownloadCompleteTemplate is 31.
Long Identifier,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,ClientOnClusterProvisioning,The length of the parameter clusterProvisioningStatusEventArgs is 34.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AddAzureHDInsightConfigValuesCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AddAzureHDInsightConfigValuesCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AddAzureHDInsightMetastoreCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AddAzureHDInsightMetastoreCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AddAzureHDInsightScriptActionCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AddAzureHDInsightScriptActionCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AddAzureHDInsightStorageCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AddAzureHDInsightStorageCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHDInsightCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHDInsightCmdlet.cs,GetCurrentSubscription,The length of the statement  "                this.WriteWarning("The -Subscription parameter is deprecated' Please use Select-AzureSubscription -Current to select a subscription to use."); " is 142.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,AzureHDInsightCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\AzureHDInsightCmdlet.cs,GetCurrentSubscription,The length of the statement  "                ProfileClient client = new ProfileClient(new AzureSMProfile(Path.Combine(AzureSession.Instance.ProfileDirectory' AzureSession.Instance.ProfileFile))); " is 150.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GrantAzureHdinsightRdpAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GrantAzureHdinsightRdpAccessCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Grant-AzureRmHDInsightRdpServicesAccess")); " is 122.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GrantAzureHdinsightRdpAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GrantAzureHdinsightRdpAccessCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightJobCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightJobOutputCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightJobOutputCmdlet.cs,EndProcessing,The length of the statement  "                this.WriteWarning(String.Format("This cmdlet supports specifying only one job output type. Only {0} will be returned"' selectedOutputType)); " is 140.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightJobOutputCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightJobOutputCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightPropertiesCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightPropertiesCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GrantAzureHDInsightHttpServicesAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GrantAzureHDInsightHttpServicesAccessCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Grant-AzureRmHDInsightHttpServicesAccess")); " is 123.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GrantAzureHDInsightHttpServicesAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GrantAzureHDInsightHttpServicesAccessCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,InvokeHiveCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\InvokeHiveCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "            string msg = string.Format(CultureInfo.CurrentCulture' "Create Cluster Started : {0}"' start.ToString(CultureInfo.CurrentCulture)); " is 131.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "            msg = string.Format(CultureInfo.CurrentCulture' "Create Cluster Stopped : {0}"' DateTime.Now.ToString(CultureInfo.CurrentCulture)); " is 131.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightHiveJobDefinitionCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightHiveJobDefinitionCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "New-AzureRmHDInsightHiveJobDefinition")); " is 120.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightMapReduceDefinitionCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightMapReduceDefinitionCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "New-AzureRmHDInsightMapReduceJobDefinition")); " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightSqoopJobDefinitionCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightSqoopJobDefinitionCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "New-AzureRmHDInsightSqoopJobDefinition")); " is 121.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightStreamingJobDefinitionCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightStreamingJobDefinitionCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "New-AzureRmHDInsightStreamingMapReduceJobDefinition")); " is 134.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RemoveClusterHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RemoveClusterHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RevokeAzureHDInsightRdpAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RevokeAzureHDInsightRdpAccessCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Revoke-AzureRmHDInsightRdpServicesAccess")); " is 123.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RevokeAzureHDInsightRdpAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RevokeAzureHDInsightRdpAccessCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RevokeAzureHDInsightHttpServicesAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RevokeAzureHDInsightHttpServicesAccessCmdlet.cs,EndProcessing,The length of the statement  "            this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Revoke-AzureRmHDInsightHttpServicesAccess")); " is 124.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RevokeAzureHDInsightHttpServicesAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RevokeAzureHDInsightHttpServicesAccessCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StartAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StartAzureHDInsightJobCmdlet.cs,EndProcessing,The length of the statement  "                    this.WriteWarning("When submitting a query use the -RunAsFile switch to prevent errors with query lengths or special characters"); " is 130.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StartAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StartAzureHDInsightJobCmdlet.cs,EndProcessing,The length of the statement  "                    this.WriteWarning("Running queries is deprecated due to inability to process special characters and multiple lines. Please upload the query to a file in storage and re-submit the job using the -File parameter"); " is 211.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StartAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StartAzureHDInsightJobCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StopAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StopAzureHDInsightJobCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,UseAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\UseAzureHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "                var sessionManager = ServiceLocator.Instance.Locate<IAzureHDInsightConnectionSessionManagerFactory>().Create(this.SessionState); " is 128.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,UseAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\UseAzureHDInsightClusterCmdlet.cs,EndProcessing,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,WaitAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\WaitAzureHDInsightJobCmdlet.cs,ProcessRecord,The length of the statement  "            string msg = string.Format(CultureInfo.CurrentCulture' "Waiting for jobDetails Started : {0}"' start.ToString(CultureInfo.CurrentCulture)); " is 139.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,WaitAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\WaitAzureHDInsightJobCmdlet.cs,ProcessRecord,The length of the statement  "                if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException)) " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,WaitAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\WaitAzureHDInsightJobCmdlet.cs,ProcessRecord,The length of the statement  "            msg = string.Format(CultureInfo.CurrentCulture' "Waiting for jobDetails Stopped : {0}"' DateTime.Now.ToString(CultureInfo.CurrentCulture)); " is 139.
Long Statement,Microsoft.WindowsAzure.Commands.HDInsight.Cmdlet.PSCmdlets,SetAzureHDInsightClusterSizeCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\SetAzureHDInsightClusterSizeCmdlet.cs,EndProcessing,The length of the statement  "                            "You are requesting a cluster size that is less than the current cluster size. We recommend not running jobs till the operation is complete as all running jobs will fail at end of resize operation and may impact the health of your cluster. Do you want to continue?"' " is 266.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,AddAzureHDInsightConfigValuesCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\AddAzureHDInsightConfigValuesCommand.cs,EndProcessing,The length of the statement  "                this.Config.OozieConfiguration.AdditionalSharedLibraries = this.Oozie.AdditionalSharedLibraries.ToWabStorageAccountConfiguration(); " is 131.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,ManageAzureHDInsightHttpAccessCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\ManageAzureHDInsightHttpAccessCommand.cs,EndProcessing,The length of the statement  "                await client.EnableHttpAsync(this.Name' this.Location' this.Credential.UserName' this.Credential.GetCleartextPassword()); " is 121.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,ManageAzureHDInsightRdpAccessCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\ManageAzureHDInsightRdpAccessCommand.cs,EndProcessing,The length of the statement  "                await client.EnableRdpAsync(this.Name' this.Location' this.RdpCredential.UserName' this.RdpCredential.GetCleartextPassword()' RdpAccessExpiry); " is 143.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "            createClusterRequest.MapReduceConfiguration.ConfigurationCollection.AddRange(this.MapReduceConfiguration.ConfigurationCollection); " is 130.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "            createClusterRequest.HiveConfiguration.ConfigurationCollection.AddRange(this.HiveConfiguration.ConfigurationCollection); " is 120.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "            createClusterRequest.OozieConfiguration.ConfigurationCollection.AddRange(this.OozieConfiguration.ConfigurationCollection); " is 122.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "            createClusterRequest.OozieConfiguration.AdditionalActionExecutorLibraries = this.OozieConfiguration.AdditionalActionExecutorLibraries; " is 134.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "            createClusterRequest.HBaseConfiguration.ConfigurationCollection.AddRange(this.HBaseConfiguration.ConfigurationCollection); " is 122.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "                this.AdditionalStorageAccounts.Select(act => new WabStorageAccountConfiguration(act.StorageAccountName' act.StorageAccountKey))); " is 129.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,NewAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\NewAzureHDInsightClusterCommand.cs,GetClusterCreateParameters,The length of the statement  "            if (!string.IsNullOrEmpty(this.HeadNodeSize) && !this.HeadNodeSize.Equals("Default"' StringComparison.OrdinalIgnoreCase)) " is 121.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,StartAzureHDInsightJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\StartAzureHDInsightJobCommand.cs,SubmitPigJob,The length of the statement  "            var pigJobDefinition = new PigJobCreateParameters { Query = azurePigJobDefinition.Query' File = azurePigJobDefinition.File }; " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,UseAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\UseAzureHDInsightClusterCommand.cs,EndProcessing,The length of the statement  "            ProfileClient profileClient = new ProfileClient(new AzureSMProfile(Path.Combine(AzureSession.Instance.ProfileDirectory' AzureSession.Instance.ProfileFile))); " is 157.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,UseAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\UseAzureHDInsightClusterCommand.cs,EndProcessing,The length of the statement  "                throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture' "Failed to connect to cluster :{0}"' this.Name)); " is 125.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,UseAzureHDInsightClusterCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\UseAzureHDInsightClusterCommand.cs,EndProcessing,The length of the statement  "                    string.Format(CultureInfo.InvariantCulture' "Cluster {0} is in an invalid state : {1}"' this.Name' cluster.State.ToString())); " is 126.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,WaitAzureHDInsightJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\WaitAzureHDInsightJobCommand.cs,ProcessRecord,The length of the statement  "                jobDetail = await client.WaitForJobCompletionAsync(job' TimeSpan.FromSeconds(this.WaitTimeoutInSeconds)' this.tokenSource.Token); " is 129.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.DataObjects,AzureHDInsightConfig,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\DataObjects\AzureHDInsightConfig.cs,CopyFrom,The length of the statement  "                value.OozieConfiguration.AdditionalActionExecutorLibraries ?? this.OozieConfiguration.AdditionalActionExecutorLibraries; " is 120.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.DataObjects,AzureHDInsightSqoopJobDefinition,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\DataObjects\AzureHDInsightSqoopJobDefinition.cs,ToSqoopJobCreateParameters,The length of the statement  "            var soopJobDefinition = new SqoopJobCreateParameters { Command = this.Command' File = this.File' StatusFolder = this.StatusFolder }; " is 132.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightClusterCommandBase,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightClusterCommandBase.cs,GetClient,The length of the statement  "            ProfileClient client = new ProfileClient(new AzureSMProfile(Path.Combine(AzureSession.Instance.ProfileDirectory' AzureSession.Instance.ProfileFile))); " is 150.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightClusterCommandBase,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightClusterCommandBase.cs,GetClient,The length of the statement  "            var clientInstance = ServiceLocator.Instance.Locate<IAzureHDInsightClusterManagementClientFactory>().Create(subscriptionCredentials' ignoreSslErrors); " is 150.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightCommandExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightCommandExtensions.cs,GetSubscriptionCredentials,The length of the statement  "                return GetSubscriptionCertificateCredentials(command' currentSubscription' profile.AccountTable[accountId]' environment); " is 121.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightCommandExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightCommandExtensions.cs,GetAccessTokenCredentials,The length of the statement  "            ProfileClient profileClient = new ProfileClient(new AzureSMProfile(Path.Combine(AzureSession.Instance.ProfileDirectory' AzureSession.Instance.ProfileFile))); " is 157.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightCommandExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightCommandExtensions.cs,GetAccessTokenCredentials,The length of the statement  "            var cloudCredentials = AzureSession.Instance.AuthenticationFactory.GetSubscriptionCloudCredentials(azureContext) as AccessTokenCredential; " is 138.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightCommandExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightCommandExtensions.cs,GetAccessTokenCredentials,The length of the statement  "                var field= typeof(AccessTokenCredential).GetField("token"' BindingFlags.NonPublic | BindingFlags.GetField | BindingFlags.Instance); " is 131.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,AzureHDInsightJobCommandExecutorBase,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\AzureHDInsightJobCommandExecutorBase.cs,GetClient,The length of the statement  "            ProfileClient profileClient = new ProfileClient(new AzureSMProfile(Path.Combine(AzureSession.Instance.ProfileDirectory' AzureSession.Instance.ProfileFile))); " is 157.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters,InvokeAzureHDInsightJobCommandBase,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\InvokeAzureHDInsightJobCommandBase.cs,UploadFileToStorage,The length of the statement  "            WabStorageAccountConfiguration storageAccount = currentConnection.Cluster.DefaultStorageAccount.ToWabStorageAccountConfiguration(); " is 131.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters.Extensions,TaskExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\Extensions\TaskExtensions.cs,WaitForResult,The length of the statement  "            if (task.Status != TaskStatus.RanToCompletion && task.Status != TaskStatus.Faulted && task.Status != TaskStatus.Canceled) " is 121.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.GetAzureHDInsightClusters.Extensions,TaskExtensions,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\Extensions\TaskExtensions.cs,WaitForResult,The length of the statement  "            if (task.Status != TaskStatus.RanToCompletion && task.Status != TaskStatus.Faulted && task.Status != TaskStatus.Canceled) " is 121.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,ServiceLocationAssemblySweep,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocationAssemblySweep.cs,GetRegistrarTypes,The length of the statement  "                (from s in scansedAssemblies from r in proxyAssemblies where s.GetReferencedAssemblies().Contains(r' comparer) select s).ToList(); " is 130.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,AssemblyNameEqualityComparer,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocationAssemblySweep.cs,Equals,The length of the statement  "                if (x.Name.Equals(y.Name' StringComparison.Ordinal) && x.Version.Equals(y.Version) && x.CultureInfo.Equals(y.CultureInfo) && " is 124.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,ServiceLocator,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocator.cs,ThrowIfInvalidRegistration,The length of the statement  "                    CultureInfo.InvariantCulture' "An attempt was made to register or override the restrictive service '{0}'"' type.FullName); " is 122.
Long Statement,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,ServiceLocator,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocator.cs,ThrowIfInvalidRegistration,The length of the statement  "                    "An attempt was made to register or override the service '{0}' for the type '{1}' which was not derived from the service"' " is 122.
Complex Conditional,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StartAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StartAzureHDInsightJobCmdlet.cs,EndProcessing,The conditional expression  "jobDef.IsNotNull() && jobDef.Query.IsNotNullOrEmpty() && !jobDef.RunAsFileJob && this.Credential.IsNull()"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,AssemblyNameEqualityComparer,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocationAssemblySweep.cs,Equals,The conditional expression  "x.Name.Equals(y.Name' StringComparison.Ordinal) && x.Version.Equals(y.Version) && x.CultureInfo.Equals(y.CultureInfo) &&                      (ReferenceEquals(x.KeyPair' y.KeyPair) ||                       (x.KeyPair.IsNotNull() && y.KeyPair.IsNotNull() && x.KeyPair.PublicKey.SequenceEqual(y.KeyPair.PublicKey)))"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,ServiceLocator,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocator.cs,ThrowIfInvalidRegistration,The conditional expression  "type == typeof(IServiceLocationRuntimeManager) || type == typeof(IServiceLocationSimulationManager) ||                  type == typeof(IServiceLocationIndividualTestManager) || type == typeof(IServiceLocator)"  is complex.
Complex Conditional,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.ServiceLocation,ServiceLocator,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\GetAzureHDInsightClusters\ServiceLocation\ServiceLocator.cs,InternalLocate,The conditional expression  "!((this.mockingLevel == ServiceLocationMockingLevel.ApplyFullMocking ||                     this.mockingLevel == ServiceLocationMockingLevel.ApplyIndividualTestMockingOnly) &&                    this.individualTestServices.TryGetValue(type' out overrideVersion)) && // Next try to get a TestRun Mock                  !((this.mockingLevel == ServiceLocationMockingLevel.ApplyFullMocking ||                     this.mockingLevel == ServiceLocationMockingLevel.ApplyTestRunMockingOnly) &&                    this.testRunServices.TryGetValue(type' out fakeVersion)) && // Finally try to get the actual service                  !this.runtimeServices.TryGetValue(type' out runtimeVersion)"  is complex.
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GrantAzureHdinsightRdpAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GrantAzureHdinsightRdpAccessCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightCluster output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightClusterCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Get-AzureRmHDInsightCluster"));                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  this.command.Logger = this.Logger;                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightCluster output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightJobCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Get-AzureRmHDInsightJob"));                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  this.command.Logger = this.Logger;                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightJob output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightJobOutputCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightJobOutputCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (Stream output in this.command.Output)                  {                      string contents = new StreamReader(output).ReadToEnd();                      this.WriteObject(contents);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GetAzureHDInsightPropertiesCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GetAzureHDInsightPropertiesCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  if (this.MyInvocation.BoundParameters.ContainsKey("Debug"))                  {                      this.WriteObject(this.command.Output.SelectMany(output => output.Capabilities));                  }                  else                  {                      if (this.Versions.IsPresent)                      {                          foreach (AzureHDInsightCapabilities output in this.command.Output)                          {                              this.WriteObject(output.Versions);                          }                      }                      else if (this.Locations.IsPresent)                      {                          foreach (AzureHDInsightCapabilities output in this.command.Output)                          {                              this.WriteObject(output.Locations);                          }                      }                      else                      {                          foreach (AzureHDInsightCapabilities output in this.command.Output)                          {                              this.WriteObject(output);                          }                      }                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                    this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,GrantAzureHDInsightHttpServicesAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\GrantAzureHDInsightHttpServicesAccessCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightCluster output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,InvokeHiveCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\InvokeHiveCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.WriteWarning(string.Format(AzureHdInsightPowerShellConstants.AsmWarning' "Invoke-AzureRmHDInsightHiveJob"));                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(string.Empty' null);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                      if (this.command.JobDetailsStatus.IsNotNull())                      {                          string msg = string.Format(CultureInfo.CurrentCulture' "Waiting for jobDetails : {0}"' this.command.JobId);                          var record = new ProgressRecord(                              0' msg' this.command.JobDetailsStatus.StatusCode.ToString() + " : " + this.command.JobDetailsStatus.PercentComplete);                          this.WriteProgress(record);                      }                      while (this.queue.Count > 0)                      {                          lock (this.queue)                          {                              this.WriteObject(this.queue.Dequeue()' true);                          }                      }                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,NewAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\NewAzureHDInsightClusterCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      msg = string.Format(CultureInfo.CurrentCulture' "Creating Cluster: {0}"' this.Name);                      this.WriteProgress(new ProgressRecord(0' msg' this.command.State.ToString()));                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightCluster output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RemoveClusterHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RemoveClusterHDInsightClusterCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  this.command.Logger = this.Logger;                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RevokeAzureHDInsightRdpAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RevokeAzureHDInsightRdpAccessCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightCluster output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,RevokeAzureHDInsightHttpServicesAccessCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\RevokeAzureHDInsightHttpServicesAccessCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightCluster output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StartAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StartAzureHDInsightJobCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  AzureHDInsightHiveJobDefinition jobDef = this.command.JobDefinition as AzureHDInsightHiveJobDefinition;                  //If the credential is null then they are connected to the subscription.                  if(jobDef.IsNotNull() && jobDef.Query.IsNotNullOrEmpty() && !jobDef.RunAsFileJob && this.Credential.IsNull())                  {                      this.WriteWarning("When submitting a query use the -RunAsFile switch to prevent errors with query lengths or special characters");                  }                  else if(jobDef.IsNotNull() && jobDef.Query.IsNotNullOrEmpty() && this.Credential.IsNotNull())                  {                      //If they are only connected to the cluster' then they should submit via file.                      this.WriteWarning("Running queries is deprecated due to inability to process special characters and multiple lines. Please upload the query to a file in storage and re-submit the job using the -File parameter");                  }                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightJob output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,StopAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\StopAzureHDInsightJobCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightJob output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,UseAzureHDInsightClusterCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\UseAzureHDInsightClusterCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  AzureHDInsightClusterConnection connection = this.command.Output.FirstOrDefault();                  var sessionManager = ServiceLocator.Instance.Locate<IAzureHDInsightConnectionSessionManagerFactory>().Create(this.SessionState);                  sessionManager.SetCurrentCluster(connection);                  this.WriteObject(string.Format(CultureInfo.InvariantCulture' "Successfully connected to cluster {0}"' this.Name));                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,WaitAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\WaitAzureHDInsightJobCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.EndProcessing();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      task.Wait(1000' token);                  }                  if (task.IsFaulted)                  {                      throw new AggregateException(task.Exception);                  }                  foreach (AzureHDInsightJob output in this.command.Output)                  {                      this.WriteObject(output);                  }                  this.WriteDebugLog();              }              catch (AggregateException ex)              {                  this.WriteObject(this.FormatException(ex));                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  throw ex.InnerException;              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.PSCmdlets,WaitAzureHDInsightJobCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\WaitAzureHDInsightJobCmdlet.cs,ProcessRecord,The following statement contains a magic number: try              {                  this.command.Logger = this.Logger;                  this.command.CurrentSubscription = this.GetCurrentSubscription(this.Subscription' this.Certificate);                  Task task = this.command.ProcessRecord();                  CancellationToken token = this.command.CancellationToken;                  while (!task.IsCompleted)                  {                      this.WriteDebugLog();                      if (this.command.JobDetailsStatus.IsNotNull())                      {                          msg = string.Format(CultureInfo.CurrentCulture' "Waiting for jobDetails : {0}"' this.JobId);                          var record = new ProgressRecord(                              0' msg' this.command.JobDetailsStatus.StatusCode.ToString() + " : " + this.command.JobDetailsStatus.PercentComplete);                          this.WriteProgress(record);                      }                      task.Wait(1000' token);                  }                  this.WriteDebugLog();              }              catch (Exception ex)              {                  Type type = ex.GetType();                  this.Logger.Log(Severity.Error' Verbosity.Normal' this.FormatException(ex));                  this.WriteDebugLog();                  if (type == typeof(AggregateException) || type == typeof(TargetInvocationException) || type == typeof(TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.HDInsight.Cmdlet.PSCmdlets,SetAzureHDInsightClusterSizeCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\SetAzureHDInsightClusterSizeCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  command.Logger = Logger;                  var currentSubscription = GetCurrentSubscription(Subscription' Certificate);                  command.CurrentSubscription = currentSubscription;                  Func<Task> action = () => command.EndProcessing();                  var token = command.CancellationToken;                    //get cluster                  AzureHDInsightCluster cluster = Cluster;                  if (cluster == null)                  {                      var getCommand = ServiceLocator.Instance.Locate<IAzureHDInsightCommandFactory>().CreateGet();                      getCommand.CurrentSubscription = currentSubscription;                      getCommand.Name = Name;                      var getTask = getCommand.EndProcessing();                      this.WriteObject("This operation may take several minutes...");                      while (!getTask.IsCompleted)                      {                          WriteDebugLog();                          getTask.Wait(1000' token);                      }                      if (getTask.IsFaulted)                      {                          throw new AggregateException(getTask.Exception);                      }                      if (getCommand.Output == null || getCommand.Output.Count == 0)                      {                          throw new InvalidOperationException(string.Format("Could not find cluster {0}"' Name));                      }                      cluster = getCommand.Output.First();                  }                    //prep cluster resize operation                  command.Location = cluster.Location;                  if (ClusterSizeInNodes < cluster.ClusterSizeInNodes)                  {                      Task task;                      if (cluster.ClusterType == ClusterType.Hadoop)                      {                          task = ConfirmSetAction(                              "You are requesting a cluster size that is less than the current cluster size. We recommend not running jobs till the operation is complete as all running jobs will fail at end of resize operation and may impact the health of your cluster. Do you want to continue?"'                              "Continuing with set cluster operation."'                              ClusterSizeInNodes.ToString(CultureInfo.InvariantCulture)'                              action);                      }                      else                      {                          task = action();                      }                      if (task == null)                      {                          throw new OperationCanceledException("The change cluster size operation was aborted.");                      }                      while (!task.IsCompleted)                      {                          WriteDebugLog();                          task.Wait(1000' token);                      }                      if (task.IsFaulted)                      {                          throw new AggregateException(task.Exception);                      }                  }                  else                  {                      var task = action();                      while (!task.IsCompleted)                      {                          WriteDebugLog();                          task.Wait(1000' token);                      }                      if (task.IsFaulted)                      {                          throw new AggregateException(task.Exception);                      }                  }                  //print cluster details                  foreach (var output in command.Output)                  {                      WriteObject(output);                  }                  WriteDebugLog();              }              catch (Exception ex)              {                  var type = ex.GetType();                  Logger.Log(Severity.Error' Verbosity.Normal' FormatException(ex));                  WriteDebugLog();                  if (type == typeof (AggregateException) || type == typeof (TargetInvocationException) ||                      type == typeof (TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.HDInsight.Cmdlet.PSCmdlets,SetAzureHDInsightClusterSizeCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\SetAzureHDInsightClusterSizeCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  command.Logger = Logger;                  var currentSubscription = GetCurrentSubscription(Subscription' Certificate);                  command.CurrentSubscription = currentSubscription;                  Func<Task> action = () => command.EndProcessing();                  var token = command.CancellationToken;                    //get cluster                  AzureHDInsightCluster cluster = Cluster;                  if (cluster == null)                  {                      var getCommand = ServiceLocator.Instance.Locate<IAzureHDInsightCommandFactory>().CreateGet();                      getCommand.CurrentSubscription = currentSubscription;                      getCommand.Name = Name;                      var getTask = getCommand.EndProcessing();                      this.WriteObject("This operation may take several minutes...");                      while (!getTask.IsCompleted)                      {                          WriteDebugLog();                          getTask.Wait(1000' token);                      }                      if (getTask.IsFaulted)                      {                          throw new AggregateException(getTask.Exception);                      }                      if (getCommand.Output == null || getCommand.Output.Count == 0)                      {                          throw new InvalidOperationException(string.Format("Could not find cluster {0}"' Name));                      }                      cluster = getCommand.Output.First();                  }                    //prep cluster resize operation                  command.Location = cluster.Location;                  if (ClusterSizeInNodes < cluster.ClusterSizeInNodes)                  {                      Task task;                      if (cluster.ClusterType == ClusterType.Hadoop)                      {                          task = ConfirmSetAction(                              "You are requesting a cluster size that is less than the current cluster size. We recommend not running jobs till the operation is complete as all running jobs will fail at end of resize operation and may impact the health of your cluster. Do you want to continue?"'                              "Continuing with set cluster operation."'                              ClusterSizeInNodes.ToString(CultureInfo.InvariantCulture)'                              action);                      }                      else                      {                          task = action();                      }                      if (task == null)                      {                          throw new OperationCanceledException("The change cluster size operation was aborted.");                      }                      while (!task.IsCompleted)                      {                          WriteDebugLog();                          task.Wait(1000' token);                      }                      if (task.IsFaulted)                      {                          throw new AggregateException(task.Exception);                      }                  }                  else                  {                      var task = action();                      while (!task.IsCompleted)                      {                          WriteDebugLog();                          task.Wait(1000' token);                      }                      if (task.IsFaulted)                      {                          throw new AggregateException(task.Exception);                      }                  }                  //print cluster details                  foreach (var output in command.Output)                  {                      WriteObject(output);                  }                  WriteDebugLog();              }              catch (Exception ex)              {                  var type = ex.GetType();                  Logger.Log(Severity.Error' Verbosity.Normal' FormatException(ex));                  WriteDebugLog();                  if (type == typeof (AggregateException) || type == typeof (TargetInvocationException) ||                      type == typeof (TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Commands.HDInsight.Cmdlet.PSCmdlets,SetAzureHDInsightClusterSizeCmdlet,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Cmdlet\SetAzureHDInsightClusterSizeCmdlet.cs,EndProcessing,The following statement contains a magic number: try              {                  command.Logger = Logger;                  var currentSubscription = GetCurrentSubscription(Subscription' Certificate);                  command.CurrentSubscription = currentSubscription;                  Func<Task> action = () => command.EndProcessing();                  var token = command.CancellationToken;                    //get cluster                  AzureHDInsightCluster cluster = Cluster;                  if (cluster == null)                  {                      var getCommand = ServiceLocator.Instance.Locate<IAzureHDInsightCommandFactory>().CreateGet();                      getCommand.CurrentSubscription = currentSubscription;                      getCommand.Name = Name;                      var getTask = getCommand.EndProcessing();                      this.WriteObject("This operation may take several minutes...");                      while (!getTask.IsCompleted)                      {                          WriteDebugLog();                          getTask.Wait(1000' token);                      }                      if (getTask.IsFaulted)                      {                          throw new AggregateException(getTask.Exception);                      }                      if (getCommand.Output == null || getCommand.Output.Count == 0)                      {                          throw new InvalidOperationException(string.Format("Could not find cluster {0}"' Name));                      }                      cluster = getCommand.Output.First();                  }                    //prep cluster resize operation                  command.Location = cluster.Location;                  if (ClusterSizeInNodes < cluster.ClusterSizeInNodes)                  {                      Task task;                      if (cluster.ClusterType == ClusterType.Hadoop)                      {                          task = ConfirmSetAction(                              "You are requesting a cluster size that is less than the current cluster size. We recommend not running jobs till the operation is complete as all running jobs will fail at end of resize operation and may impact the health of your cluster. Do you want to continue?"'                              "Continuing with set cluster operation."'                              ClusterSizeInNodes.ToString(CultureInfo.InvariantCulture)'                              action);                      }                      else                      {                          task = action();                      }                      if (task == null)                      {                          throw new OperationCanceledException("The change cluster size operation was aborted.");                      }                      while (!task.IsCompleted)                      {                          WriteDebugLog();                          task.Wait(1000' token);                      }                      if (task.IsFaulted)                      {                          throw new AggregateException(task.Exception);                      }                  }                  else                  {                      var task = action();                      while (!task.IsCompleted)                      {                          WriteDebugLog();                          task.Wait(1000' token);                      }                      if (task.IsFaulted)                      {                          throw new AggregateException(task.Exception);                      }                  }                  //print cluster details                  foreach (var output in command.Output)                  {                      WriteObject(output);                  }                  WriteDebugLog();              }              catch (Exception ex)              {                  var type = ex.GetType();                  Logger.Log(Severity.Error' Verbosity.Normal' FormatException(ex));                  WriteDebugLog();                  if (type == typeof (AggregateException) || type == typeof (TargetInvocationException) ||                      type == typeof (TaskCanceledException))                  {                      ex.Rethrow();                  }                  else                  {                      throw;                  }              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GatewayUriResolver,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GatewayUriResolver.cs,GetGatewayUri,The following statement contains a magic number: if (index >= 0)              {                  computedEndpoint = "http://" + clusterDnsNameOrEndpoint.Substring(index + 3);                  originalScheme = clusterDnsNameOrEndpoint.Substring(0' index);              }              else              {                  computedEndpoint = "http://" + clusterDnsNameOrEndpoint;                  originalScheme = "http";              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GatewayUriResolver,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GatewayUriResolver.cs,GetGatewayUri,The following statement contains a magic number: if (tempUri.Port == 80)              {                  if (tempUri.Host == "localhost")                  {                      return new Uri(originalScheme + "://" + tempUri.Host + ":50111");                  }                    tempUri = new Uri("https://" + tempUri.Host);              }
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,WaitAzureHDInsightJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\WaitAzureHDInsightJobCommand.cs,WaitAzureHDInsightJobCommand,The following statement contains a magic number: this.WaitTimeoutInSeconds = 30 * 60;
Magic Number,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,WaitAzureHDInsightJobCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\WaitAzureHDInsightJobCommand.cs,WaitAzureHDInsightJobCommand,The following statement contains a magic number: this.WaitTimeoutInSeconds = 30 * 60;
Missing Default,Microsoft.WindowsAzure.Management.HDInsight.Cmdlet.Commands.CommandImplementations,GetAzureHDInsightJobOutputCommand,C:\repos\Azure_azure-powershell\src\ServiceManagement\HDInsight\Commands.HDInsight\Model\Commands\CommandImplementations\GetAzureHDInsightJobOutputCommand.cs,GetJobOutput,The following switch statement is missing a default case: switch (this.OutputType)              {                  case JobOutputType.StandardError:                      outputStream = await hadoopClient.GetJobErrorLogsAsync(jobId);                      break;                  case JobOutputType.StandardOutput:                      outputStream = await hadoopClient.GetJobOutputAsync(jobId);                      break;                  case JobOutputType.TaskSummary:                      outputStream = await hadoopClient.GetJobTaskLogSummaryAsync(jobId);                      break;                  case JobOutputType.TaskLogs:                      this.TaskLogsDirectory.ArgumentNotNullOrEmpty("TaskLogsDirectory");                      await hadoopClient.DownloadJobTaskLogsAsync(jobId' this.TaskLogsDirectory);                      var messageStream = new MemoryStream();                      string downloadCompleteMessage = string.Format(                          CultureInfo.InvariantCulture' TaskLogDownloadCompleteTemplate' this.JobId' this.TaskLogsDirectory);                      byte[] messageBytes = Encoding.UTF8.GetBytes(downloadCompleteMessage);                      messageStream.Write(messageBytes' 0' messageBytes.Length);                      messageStream.Seek(0' SeekOrigin.Begin);                      outputStream = messageStream;                      break;              }
