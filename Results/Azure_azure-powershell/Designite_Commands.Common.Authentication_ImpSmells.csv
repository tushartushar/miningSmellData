Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,GetSubscriptionCloudCredentials,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,GetServiceClientCredentials,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,AdalTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\AdalTokenProvider.cs,GetAccessToken,The method has 6 parameters. Parameters: config' promptBehavior' promptAction' userId' password' credentialType
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,ITokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\ITokenProvider.cs,GetAccessToken,The method has 6 parameters. Parameters: config' promptBehavior' promptAction' userId' password' credentialType
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,ServicePrincipalTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\ServicePrincipalTokenProvider.cs,GetAccessToken,The method has 6 parameters. Parameters: config' promptBehavior' promptAction' userId' password' credentialType
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,UserTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\UserTokenProvider.cs,GetAccessToken,The method has 6 parameters. Parameters: config' promptBehavior' promptAction' userId' password' credentialType
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,UserTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\UserTokenProvider.cs,AcquireToken,The method has 5 parameters. Parameters: config' promptBehavior' promptAction' userId' password
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,UserTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\UserTokenProvider.cs,SafeAquireToken,The method has 6 parameters. Parameters: config' showDialog' promptAction' userId' password' ex
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication,UserTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\UserTokenProvider.cs,DoAcquireToken,The method has 5 parameters. Parameters: config' promptBehavior' promptAction' userId' password
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,Authenticate,The method has 8 parameters. Parameters: account' environment' tenant' password' promptBehavior' promptAction' tokenCache' resourceId
Long Parameter List,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,Authenticate,The method has 7 parameters. Parameters: account' environment' tenant' password' promptBehavior' promptAction' resourceId
Long Identifier,Microsoft.Azure.Commands.Common.Authentication.Utilities,NativeMethods,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Utilities\AdalTokenCache.cs,,The length of the parameter INTERNET_OPTION_END_BROWSER_SESSION is 35.
Long Statement,Microsoft.Azure.Commands.Common.Authentication,AdalTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\AdalTokenProvider.cs,GetAccessToken,The length of the statement  "                    return servicePrincipalTokenProvider.GetAccessToken(config' promptBehavior' promptAction' userId' password' credentialType); " is 124.
Long Statement,Microsoft.Azure.Commands.Common.Authentication,ServicePrincipalTokenProvider,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\ServicePrincipalTokenProvider.cs,GetAccessToken,The length of the statement  "            return new ServicePrincipalAccessToken(config' AcquireTokenWithSecret(config' userId' password)' this.RenewWithSecret' userId); " is 127.
Long Statement,Microsoft.Azure.Commands.Common.Authentication,AzureSessionInitializer,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\AzureSessionInitializer.cs,CreateInstance,The length of the statement  "            session.TokenCache = InitializeTokenCache(dataStore' session.TokenCacheDirectory' session.TokenCacheFile' autoSave.Mode); " is 121.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,GetSubscriptionCloudCredentials,The length of the statement  "                return new TokenCloudCredentials(context.Subscription.Id.ToString()' GetEndpointToken(context.Account' targetEndpoint)); " is 120.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,RemoveFromTokenCache,The length of the statement  "            if (cache != null && cache.Count > 0 && account != null && !string.IsNullOrWhiteSpace(account.Id) && !string.IsNullOrWhiteSpace(account.Type)) " is 142.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateClient,The length of the statement  "            SubscriptionCloudCredentials creds = AzureSession.Instance.AuthenticationFactory.GetSubscriptionCloudCredentials(context' endpoint); " is 132.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateClient,The length of the statement  "            var account = profile.Accounts.FirstOrDefault((a) => string.Equals(a.Id' (subscription.GetAccount())' StringComparison.OrdinalIgnoreCase)); " is 139.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateClient,The length of the statement  "                throw new ArgumentException(string.Format("Account with name '{0}' does not exist."' subscription.GetAccount())' "accountName"); " is 128.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateClient,The length of the statement  "            var environment = profile.Environments.FirstOrDefault((e) => string.Equals(e.Name' subscription.GetEnvironment()' StringComparison.OrdinalIgnoreCase)); " is 151.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,RemoveUserAgent,The length of the statement  "                var agents = _userAgents.Keys.Where((k) => k.Product != null && string.Equals(k.Product.Name' name' StringComparison.OrdinalIgnoreCase)); " is 137.
Long Statement,Microsoft.Azure.Commands.Common.Authentication.Models,MemoryDataStore,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Models\MemoryDataStore.cs,GetFiles,The length of the statement  "                if (key.StartsWith(startDirectory) && VirtualStore[key] != FolderKey && Regex.IsMatch(key' WildcardToRegex(filePattern)' RegexOptions.IgnoreCase)) " is 146.
Complex Conditional,Microsoft.Azure.Common,CloudExceptionExtensions,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Extensions\CloudExceptionExtensions.cs,GetRequestId,The conditional expression  "exception == null ||                 exception.Response == null ||                 exception.Response.Headers == null ||                 !exception.Response.Headers.Keys.Contains("x-ms-request-id")"  is complex.
Complex Conditional,Microsoft.Azure.Common,CloudExceptionExtensions,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Extensions\CloudExceptionExtensions.cs,GetRoutingRequestId,The conditional expression  "exception == null ||                 exception.Response == null ||                 exception.Response.Headers == null ||                 !exception.Response.Headers.Keys.Contains("x-ms-routing-request-id")"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,RemoveUser,The conditional expression  "cache!= null && account != null && !string.IsNullOrEmpty(account.Id) && !string.IsNullOrWhiteSpace(account.Type)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,RemoveFromTokenCache,The conditional expression  "cache != null && cache.Count > 0 && account != null && !string.IsNullOrWhiteSpace(account.Id) && !string.IsNullOrWhiteSpace(account.Type)"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.Common.Authentication,IdentityTokenHelpers,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\IdentityTokenHelpers.cs,TryGetIssuer,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Common.Authentication,ServicePrincipalKeyStore,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\ServicePrincipalKeyStore.cs,GetKey,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Common.Authentication,AzureSessionInitializer,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\AzureSessionInitializer.cs,InitializeTokenCache,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Common.Authentication,AzureSessionInitializer,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\AzureSessionInitializer.cs,InitializeSessionSettings,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,RemoveUser,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.Common.Authentication,Credential,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\CredStore.cs,Credential,The following statement contains a magic number: this.credentialBlobSize = (uint)((value.Length + 1) * 2);
Magic Number,Microsoft.Azure.Commands.Common.Authentication,IdentityTokenHelpers,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\IdentityTokenHelpers.cs,TryGetIssuer,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(token))              {                  try                  {                      var tokenParts = token.Split('.');                      if (tokenParts.Length > 1)                      {                          token = tokenParts[1];                      }                        switch (token.Length % 4)                      {                          case 2:                              token += "==";                              break;                          case 3:                              token += "=";                              break;                      }                        var tokenJson = Encoding.UTF8.GetString(Convert.FromBase64String(token));                      var parsedToken = JToken.Parse(tokenJson);                      issuer = parsedToken.Value<string>(IssuerKey);                      result = true;                      TracingAdapter.Information(Resources.TokenIssuerTrace' token' tokenJson' issuer);                  }                  catch (JsonException)                  {                      // ignore Json exceptions                  }              }
Magic Number,Microsoft.Azure.Commands.Common.Authentication,IdentityTokenHelpers,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\IdentityTokenHelpers.cs,TryGetIssuer,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(token))              {                  try                  {                      var tokenParts = token.Split('.');                      if (tokenParts.Length > 1)                      {                          token = tokenParts[1];                      }                        switch (token.Length % 4)                      {                          case 2:                              token += "==";                              break;                          case 3:                              token += "=";                              break;                      }                        var tokenJson = Encoding.UTF8.GetString(Convert.FromBase64String(token));                      var parsedToken = JToken.Parse(tokenJson);                      issuer = parsedToken.Value<string>(IssuerKey);                      result = true;                      TracingAdapter.Information(Resources.TokenIssuerTrace' token' tokenJson' issuer);                  }                  catch (JsonException)                  {                      // ignore Json exceptions                  }              }
Magic Number,Microsoft.Azure.Commands.Common.Authentication,IdentityTokenHelpers,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\IdentityTokenHelpers.cs,TryGetIssuer,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(token))              {                  try                  {                      var tokenParts = token.Split('.');                      if (tokenParts.Length > 1)                      {                          token = tokenParts[1];                      }                        switch (token.Length % 4)                      {                          case 2:                              token += "==";                              break;                          case 3:                              token += "=";                              break;                      }                        var tokenJson = Encoding.UTF8.GetString(Convert.FromBase64String(token));                      var parsedToken = JToken.Parse(tokenJson);                      issuer = parsedToken.Value<string>(IssuerKey);                      result = true;                      TracingAdapter.Information(Resources.TokenIssuerTrace' token' tokenJson' issuer);                  }                  catch (JsonException)                  {                      // ignore Json exceptions                  }              }
Magic Number,Microsoft.Azure.Commands.Common.Authentication,IdentityTokenHelpers,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\IdentityTokenHelpers.cs,TryGetTenantFromIssuer,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(issuer) && issuer.Contains("/"))              {                  var paths = issuer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (paths.Length > 2)                  {                      Guid tenantGuid;                      if (Guid.TryParse(paths.Last()' out tenantGuid))                      {                          result = true;                          tenantId = tenantGuid.ToString();                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Common.Authentication,ServicePrincipalKeyStore,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\ServicePrincipalKeyStore.cs,SaveKey,The following statement contains a magic number: var credential = new CredStore.NativeMethods.Credential              {                  flags = 0'                  type = CredStore.CredentialType.Generic'                  targetName = CreateKey(appId' tenantId)'                  targetAlias = null'                  comment = null'                  lastWritten = new FILETIME { dwHighDateTime = 0' dwLowDateTime = 0 }'                  persist = 2' // persist on local machine                  attibuteCount = 0'                  attributes = IntPtr.Zero'                  userName = keyStoreUserName              };
Magic Number,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateHttpClient,The following statement contains a magic number: HttpClient client = new HttpClient(effectiveHandler)              {                  BaseAddress = serviceAddr'                  MaxResponseContentBufferSize = 30 * 1024 * 1024              };
Magic Number,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateHttpClient,The following statement contains a magic number: HttpClient client = new HttpClient(effectiveHandler)              {                  BaseAddress = serviceAddr'                  MaxResponseContentBufferSize = 30 * 1024 * 1024              };
Magic Number,Microsoft.Azure.Commands.Common.Authentication.Factories,ClientFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\ClientFactory.cs,CreateHttpClient,The following statement contains a magic number: HttpClient client = new HttpClient(effectiveHandler)              {                  BaseAddress = serviceAddr'                  MaxResponseContentBufferSize = 30 * 1024 * 1024              };
Magic Number,Microsoft.Azure.Commands.Common.Authentication.Models,MemoryDataStore,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Models\MemoryDataStore.cs,OpenForExclusiveWrite,The following statement contains a magic number: byte[] buffer = new byte[16384];
Missing Default,Microsoft.Azure.Commands.Common.Authentication,IdentityTokenHelpers,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Authentication\IdentityTokenHelpers.cs,TryGetIssuer,The following switch statement is missing a default case: switch (token.Length % 4)                      {                          case 2:                              token += "==";                              break;                          case 3:                              token += "=";                              break;                      }
Missing Default,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,RemoveUser,The following switch statement is missing a default case: switch (account.Type)                  {                      case AzureAccount.AccountType.AccessToken:                          account.SetProperty(AzureAccount.Property.AccessToken' null);                          account.SetProperty(AzureAccount.Property.GraphAccessToken' null);                          account.SetProperty(AzureAccount.Property.KeyVaultAccessToken' null);                          break;                      case AzureAccount.AccountType.ServicePrincipal:                          try                          {                              ServicePrincipalKeyStore.DeleteKey(account.Id' account.GetTenants().FirstOrDefault());                          }                          catch                          {                              // make best effort to remove credentials                          }                            RemoveFromTokenCache(cache' account);                          break;                      case AzureAccount.AccountType.User:                          RemoveFromTokenCache(cache' account);                          break;                 }
Missing Default,Microsoft.Azure.Commands.Common.Authentication.Factories,AuthenticationFactory,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Authentication\Factories\AuthenticationFactory.cs,MatchCacheItem,The following switch statement is missing a default case: switch(account.Type)                  {                      case AzureAccount.AccountType.ServicePrincipal:                          result = string.Equals(account.Id' item.ClientId' StringComparison.OrdinalIgnoreCase);                          break;                      case AzureAccount.AccountType.User:                          result = string.Equals(account.Id' item.DisplayableId' StringComparison.OrdinalIgnoreCase)                               || (account.TenantMap != null && account.TenantMap.Any(                                  (m) => string.Equals(m.Key' item.TenantId' StringComparison.OrdinalIgnoreCase)                                          && string.Equals(m.Value' item.UniqueId' StringComparison.OrdinalIgnoreCase)));                          break;                  }
