Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,GetSingleAstRequiredModules,The method has 110 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,ComputeAutoMapperProfile,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ComputeAutoMapperProfile.cs,Initialize,The method has 138 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The method has 275 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The method has 446 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The method has 102 lines of code.
Long Method,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The method has 120 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The method has 152 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ProcessRecord,The method has 306 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,GetDynamicParameters,The method has 103 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmContainerServiceConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ContainerService\Config\NewAzureRmContainerServiceConfigCommand.cs,Run,The method has 134 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmImageOsDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Image\Config\SetAzureRmImageOsDiskCommand.cs,Run,The method has 125 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The method has 191 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The method has 216 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The method has 255 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The method has 554 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The method has 418 lines of code.
Long Method,Microsoft.Azure.Commands.Compute.Automation.Models,ComputeAutomationAutoMapperProfile,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Models\ComputeAutoMapperProfile.cs,Initialize,The method has 107 lines of code.
Complex Method,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetChildProperties,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute,AddAzureVMNetworkInterfaceCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\AddAzureVMNetworkInterfaceCommand.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Common,ComputeCloudException,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ComputeCloudException.cs,GetErrorMessageWithRequestIdInfo,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetPublicConfigFromXmlFile,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,FindSnapshot,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmContainerServiceConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ContainerService\Config\NewAzureRmContainerServiceConfigCommand.cs,Run,Cyclomatic complexity of the method is 26
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\NewAzureRmDiskConfigCommand.cs,Run,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskUpdateConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\NewAzureRmDiskUpdateConfigCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmImageOsDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Image\Config\SetAzureRmImageOsDiskCommand.cs,Run,Cyclomatic complexity of the method is 27
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\NewAzureRmSnapshotConfigCommand.cs,Run,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotUpdateConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\NewAzureRmSnapshotUpdateConfigCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,Cyclomatic complexity of the method is 42
Complex Method,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,Cyclomatic complexity of the method is 19
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,Cyclomatic complexity of the method is 46
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,Cyclomatic complexity of the method is 54
Complex Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,Cyclomatic complexity of the method is 138
Complex Method,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,Cyclomatic complexity of the method is 104
Long Parameter List,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,The method has 7 parameters. Parameters: configurationPath' configurationDataPath' additionalPath' configurationArchivePath' force' skipDependencyDetection' parameterSetName
Long Parameter List,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,PublishConfiguration,The method has 11 parameters. Parameters: configurationPath' configurationDataPath' additionalPath' outputArchivePath' storageEndpointSuffix' containerName' parameterSetName' force' skipDependencyDetection' storageCredentials' passThru
Long Parameter List,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The method has 6 parameters. Parameters: storageCredentials' storageEndpointSuffix' containerName' archivePath' force' passThru
Long Parameter List,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The method has 5 parameters. Parameters: obj' max' depth' tupleList' expand
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The method has 6 parameters. Parameters: storageAccountName' storageAccountKey' storageClient' storageContext' configurationPath' defaultContext
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,CreateStorageContext,The method has 6 parameters. Parameters: blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint' storageAccountName' storageAccountKey
Long Parameter List,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The method has 5 parameters. Parameters: publicConfigPath' privateConfigPath' resourceId' cmdlet' storageClient
Long Parameter List,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,LogProgress,The method has 5 parameters. Parameters: activityId' activity' precentComplete' remainingTime' avgThroughputMbps
Long Parameter List,Microsoft.Azure.Commands.Compute.Models,UploadParameters,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\UploadParameters.cs,UploadParameters,The method has 5 parameters. Parameters: destinationUri' baseImageUri' localFilePath' overWrite' numberOfUploaderThreads
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,AEMHelper,The method has 6 parameters. Parameters: errorAction' verboseAction' warningAction' ui' storageClient' subscription
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetExtensionVersion,The method has 5 parameters. Parameters: vm' vmStatus' osType' type' publisher
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,MonitoringPropertyExists,The method has 5 parameters. Parameters: CheckMessage' PropertyName' Properties' parentResult' expectedResult
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckMonitoringProperty,The method has 5 parameters. Parameters: CheckMessage' PropertyName' Properties' expectedValue' parentResult
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has 6 parameters. Parameters: StorageAccountName' TableName' FilterString' WaitChar' UseNewTableNames' TimeoutinMinutes
Long Parameter List,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckDiagnosticsTable,The method has 6 parameters. Parameters: storageAccountName' resId' host' waitChar' osType' TimeoutinMinutes
Long Parameter List,Microsoft.Azure.Commands.Compute.StorageServices,SaveAzureVhdCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\SaveAzureVhdCommand.cs,DownloadFromBlobUri,The method has 7 parameters. Parameters: cmdlet' sourceUri' localFileInfo' storagekey' resourceGroupName' numThreads' overwrite
Long Parameter List,Microsoft.Azure.Commands.Common.Strategies.Compute,ComputePolicy,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Strategies\Compute\ComputeStrategy.cs,Create,The method has 6 parameters. Parameters: type' provider' getOperations' getAsync' createOrUpdateAsync' createTime
Long Parameter List,Microsoft.Azure.Commands.Common.Strategies.Compute,VirtualMachineStrategy,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Strategies\Compute\VirtualMachineStrategy.cs,CreateVirtualMachineConfig,The method has 8 parameters. Parameters: resourceGroup' name' networkInterface' isWindows' adminUsername' adminPassword' image' size
Long Parameter List,Microsoft.Azure.Commands.Common.Strategies.Network,NetworkInterfaceStrategy,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Strategies\Network\NetworkInterfaceStrategy.cs,CreateNetworkInterfaceConfig,The method has 5 parameters. Parameters: resourceGroup' name' subnet' publicIPAddress' networkSecurityGroup
Long Parameter List,Microsoft.Azure.Commands.Common.Strategies.Network,NetworkStrategy,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Strategies\Network\NetworkStrategy.cs,Create,The method has 6 parameters. Parameters: type' provider' getOperations' getAsync' createOrUpdateAsync' createTime
Long Parameter List,Microsoft.Azure.Commands.Compute.Strategies.ResourceManager,ResourceConfigExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Strategies\ResourceManager\ResourceConfigExtensions.cs,CreateResourceConfig,The method has 5 parameters. Parameters: strategy' resourceGroup' name' createModel' dependencies
Long Identifier,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC,DscExtensionCmdletConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\DscExtensionCmdletConstants.cs,,The length of the parameter UploadArchiveAllowedFileExtensions is 34.
Long Identifier,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC,DscExtensionCmdletConstants,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\DscExtensionCmdletConstants.cs,,The length of the parameter CreateArchiveAllowedFileExtensions is 34.
Long Identifier,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,GetSingleAstRequiredModules,The length of the parameter importDscResourcefunctionEntry is 30.
Long Identifier,Microsoft.Azure.Commands.Compute,AEMExtensionConstants,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMExtensionConstants.cs,,The length of the parameter VirtualMachineExtensionResourceType is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the parameter virtualMachineExtensionGetResponse is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter SetCustomScriptExtensionByContainerBlobsParamSetName is 52.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,,The length of the parameter SetCustomScriptExtensionByUrisParamSetName is 42.
Long Identifier,Microsoft.Azure.Commands.Compute,DiagnosticsExtensionConstants,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\DiagnosticsExtensionConstants.cs,,The length of the parameter VirtualMachineExtensionResourceType is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\GetAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the parameter virtualMachineExtensionGetResponse is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,SqlServerPrivateSettings,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\AzureVMSqlServerPrivateSettings.cs,,The length of the parameter PrivateKeyVaultCredentialSettings is 33.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,,The length of the parameter GetSqlServerExtensionParamSetName is 33.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,,The length of the parameter ListVirtualMachineSizeParamSet is 30.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,,The length of the parameter ListAvailableSizesForAvailabilitySet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,,The length of the parameter ListAvailableSizesForVirtualMachine is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\SetAzureVMCommand.cs,,The length of the parameter GeneralizeResourceGroupNameParameterSet is 39.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\SetAzureVMCommand.cs,,The length of the parameter RedeployResourceGroupNameParameterSet is 37.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,,The length of the parameter WindowsAndDiskEncryptionParameterSet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,,The length of the parameter LinuxAndDiskEncryptionParameterSet is 34.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter GetVirtualMachineInResourceGroupParamSet is 40.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter ListVirtualMachineInResourceGroupParamSet is 41.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter ListAllVirtualMachinesParamSet is 30.
Long Identifier,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,,The length of the parameter ListNextLinkVirtualMachinesParamSet is 35.
Long Identifier,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,,The length of the parameter RestartResourceGroupNameParameterSet is 36.
Long Identifier,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,,The length of the parameter PerformMaintenanceResourceGroupNameParameterSet is 47.
Long Identifier,Microsoft.Azure.Commands.Compute,RestartAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\RestartAzureVMCommand.cs,,The length of the parameter PerformMaintenanceIdParameterSet is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetPrivateDiagnosticsConfiguration,The length of the parameter storageAccountNameInPrivateConfig is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the parameter storageAccountNameInPublicConfig is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the parameter storageAccountNameInPrivateConfig is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,,The length of the parameter DiagnosticsConfigurationElemStr is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,,The length of the parameter DiagnosticMonitorConfigurationElemStr is 37.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,,The length of the parameter EventHubSharedAccessKeyNameAttr is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMOSDiskDiskEncryptionKeyVaultId is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMOSDiskKeyEncryptionKeyVaultId is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMBootDiagnosticsResourceGroupName is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,HelpMessages,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VMBootDiagnosticsStorageAccountName is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineADDomainExtension is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineCustomScriptExtension is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineDiagnosticsExtension is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineExtensionImageVersion is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineExtensionImageType is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineScaleSetDiagnosticsExtension is 42.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineDscConfiguration is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineDscExtensionStatus is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerExtension is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerAutoBackupConfig is 39.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerAutoPatchingConfig is 41.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter VirtualMachineSqlServerKeyVaultCredentialConfig is 47.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter AzureVmssDiskEncryptionExtension is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter GetAzureRmVmssDiskEncryptionAlias is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Common,ProfileNouns,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ConstantStringTypes.cs,,The length of the parameter GetAzureRmVmssVMDiskEncryptionAlias is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionConstants,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionConstants.cs,,The length of the parameter enableEncryptionFormatAllOperation is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionConstants,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionConstants.cs,,The length of the parameter queryEncryptionStatusOperation is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureDiskEncryptionExtensionContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\AzureDiskEncryptionExtensionContext.cs,,The length of the parameter LinuxExtensionDefaultPublisher is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,AzureVmssDiskEncryptionExtensionContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\AzureVmssDiskEncryptionExtensionContext.cs,,The length of the parameter LinuxExtensionDefaultPublisher is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the parameter virtualMachineExtensionBaseCmdlet is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the parameter virtualMachineExtensionBaseCmdlet is 33.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,,The length of the parameter backupExtensionIdentityMetadataName is 35.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.Chef,GetAzureRmVMChefExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Chef\GetAzureRmVMChefExtension.cs,ExecuteCmdlet,The length of the parameter virtualMachineExtensionGetResponse is 34.
Long Identifier,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,UploadConfigurationDataToBlob,The length of the parameter configurationDataBlobReference is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the parameter vNetworkInterfaceConfigurations is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the parameter vApplicationGatewayBackendAddressPools is 38.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the parameter vLoadBalancerBackendAddressPools is 32.
Long Identifier,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\RemoveAzureRmVmssNetworkInterfaceConfigurationCommand.cs,ProcessRecord,The length of the parameter vNetworkInterfaceConfigurations is 31.
Long Identifier,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\AddAzureVhdCommand.cs,,The length of the parameter DefaultNumberOfUploaderThreads is 30.
Long Identifier,Microsoft.Azure.Commands.Compute.StorageServices,SaveAzureVhdCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\SaveAzureVhdCommand.cs,,The length of the parameter DefaultNumberOfUploaderThreads is 30.
Long Statement,Microsoft.WindowsAzure.Commands.Storage.Adapters,AzureContextAdapterExtensions,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Storage\Adapters\WindowsAzure.Storage.6\AzureContextAdapterExtensions.cs,GetStorageContext,The length of the statement  "            return new AzureStorageContext(new CloudStorageAccount(new StorageCredentials(service.Name' service.AuthenticationKeys.First())' " is 128.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,GetSingleAstRequiredModules,The length of the statement  "            using (System.Management.Automation.PowerShell powerShell = System.Management.Automation.PowerShell.Create(initialSessionState)) " is 128.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,GetModuleNameForDscResource,The length of the statement  "                            AddCommand("Where-Object").AddParameter("Property"' "ResourceType").AddParameter("Value"' resourceName).AddParameter("EQ"' true). " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,GetRequiredModulesFromAst,The length of the statement  "            IEnumerable<CommandAst> legacyConfigurationAsts = ast.FindAll(IsLegacyAstConfiguration' true).Select(x => (CommandAst)x); " is 121.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,GetRequiredModulesFromAst,The length of the statement  "                var resourceParams = GetLegacyTopLevelParametersFromAst(legacyConfigurationAst' "ResourceDefinition").Select(GetModuleNameForDscResource); " is 138.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                if (!DscExtensionCmdletConstants.UploadArchiveAllowedFileExtensions.Contains(Path.GetExtension(configurationFileExtension))) " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                    ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionUploadArchiveConfigFileInvalidExtension' configurationPath); " is 161.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                if (!DscExtensionCmdletConstants.CreateArchiveAllowedFileExtensions.Contains(Path.GetExtension(configurationFileExtension))) " is 124.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationPath,The length of the statement  "                    ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionCreateArchiveConfigFileInvalidExtension' configurationPath); " is 161.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,ValidateConfigurationDataPath,The length of the statement  "                ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscInvalidConfigurationDataFile); " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,The length of the statement  "                            new UnauthorizedAccessException(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscArchiveAlreadyExists' archive))' " is 172.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,CreateConfigurationArchive,The length of the statement  "                WriteVerbose(String.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionTempFolderVerbose' tempArchiveFolder)); " is 171.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The length of the statement  "                string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscUploadToBlobStorageAction' archivePath)' " is 148.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The length of the statement  "                                        Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscStorageBlobAlreadyExists' modulesBlob.Uri.AbsoluteUri))' " is 120.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,UploadConfigurationArchive,The length of the statement  "                        Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionArchiveUploadedMessage' modulesBlob.Uri.AbsoluteUri)); " is 129.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeletedFileMessage' file)); " is 159.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeleteErrorMessage' file' e.Message)); " is 170.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeletedFileMessage' directory)); " is 164.
Long Statement,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,DscExtensionPublishCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionPublishCmdletCommonBase.cs,DeleteTemporaryFiles,The length of the statement  "                    WriteVerbose(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.PublishVMDscExtensionDeleteErrorMessage' directory' e.Message)); " is 175.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureAvailabilitySetCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\AvailabilitySets\RemoveAzureAvailabilitySetCommand.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.AvailabilitySetRemovalConfirmation' Properties.Resources.AvailabilitySetRemovalCaption))) " is 133.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureAvailabilitySetCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\AvailabilitySets\GetAzureAvailabilitySetCommand.cs,ExecuteCmdlet,The length of the statement  "                    var result = this.AvailabilitySetClient.GetWithHttpMessagesAsync(this.ResourceGroupName' this.Name).GetAwaiter().GetResult(); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMADDomainExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\ADDomain\GetAzureVMADDomainExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineADDomainExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' " is 136.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.Publisher.Equals(AEMExtensionConstants.AEMExtensionPublisher[OSType]' StringComparison.InvariantCultureIgnoreCase) && " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.VirtualMachineExtensionType.Equals(AEMExtensionConstants.AEMExtensionType[OSType]' StringComparison.InvariantCultureIgnoreCase)) " is 138.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\GetAzureRmVMAEMExtension.cs,WriteError,The length of the statement  "            base.WriteError(new ErrorRecord(new Exception(String.Format(message' args))' "Error"' ErrorCategory.NotSpecified' null)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "            this._Helper = new AEMHelper((err) => this.WriteError(err)' (msg) => this.WriteVerbose(msg)' (msg) => this.WriteWarning(msg)' " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager)' " is 151.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var aemExtension = this._Helper.GetExtension(virtualMachine' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]); " is 172.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        WriteWarning(string.Format(CultureInfo.InvariantCulture' Properties.Resources.AEMExtensionNotFound' this.ResourceGroupName' this.VMName)); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\RemoveAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var op = this.VirtualMachineExtensionClient.DeleteWithHttpMessagesAsync(this.ResourceGroupName' this.VMName' this.Name).GetAwaiter().GetResult(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "            this._Helper = new AEMHelper((err) => this.WriteError(err)' (msg) => this.WriteVerbose(msg)' (msg) => this.WriteWarning(msg)' " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                this.CommandRuntime.Host.UI' AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager)' this.DefaultContext.Subscription); " is 215.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var selectedVMStatus = ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView; " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("No virtual machine with name {0} in resource group {1} in subscription {2} found"' this.VMName' this.ResourceGroupName' subscriptionId); " is 161.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                sapmonPublicConfig.Add(new KeyValuePair() { Key = "script.version"' Value = AEMExtensionConstants.CurrentScriptVersion }); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(this._Helper.GetResourceGroupFromId(osdisk.ManagedDisk.Id)'  " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = this._Helper.GetResourceNameFromId(osdisk.ManagedDisk.Id) }); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available."); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetResourceNameFromId(disk.ManagedDisk.Id) }); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD }); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteVerbose("Done - Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString()); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available."); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetDiskName(disk.Vhd.Uri) }); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteVerbose("Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString()); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM }); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteVerbose("Done - Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString()); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_STANDARD }); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connminute." + diskNumber' Value = (accountName + ".minute") }); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteHost("[INFO] {0} is of type {1} - Storage Account Metrics are not available for Premium Type Storage."' storage.Name' storage.SkuName()); " is 155.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        wadstorage = new KeyValuePair(this.WADStorageAccountName' this._Helper.GetAzureStorageKeyFromCache(WADStorageAccountName)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteError("A standard storage account is required. Please use parameter WADStorageAccountName to specify a standard storage account you want to use for this VM."); " is 177.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                Version aemVersion = this._Helper.GetExtensionVersion(selectedVM' selectedVMStatus' OSType' AEMExtensionConstants.AEMExtensionType[OSType]' AEMExtensionConstants.AEMExtensionPublisher[OSType]); " is 193.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system."); " is 182.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzureRmVMAEMExtension commandlet."); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The length of the statement  "                    xDoc.SelectSingleNode("WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters").Attributes["scheduledTransferPeriod"].Value = "PT1M"; " is 136.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The length of the statement  "                            SelectSingleNode("WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration[@counterSpecifier = '" + perfCounter.counterSpecifier + "']"); " is 170.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The length of the statement  "            jPublicConfig.Add("xmlCfg"' new Newtonsoft.Json.Linq.JValue(System.Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(xpublicConfig.InnerXml)))); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "            this._Helper = new AEMHelper((err) => this.WriteError(err)' (msg) => this.WriteVerbose(msg)' (msg) => this.WriteWarning(msg)' " is 125.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager)' " is 151.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var selectedVMStatus = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView; " is 157.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                var monExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]); " is 168.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' false)); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' true)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                GenerateFilterConditionForDate("Timestamp"' "gt"' DateTime.Now.AddMinutes(AEMExtensionConstants.ContentAgeInMinutes * -1)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            if (storageConfigOk && this._Helper.CheckTableAndContent(account' "$MetricsMinutePrimaryTransactionsBlob"' filterMinute' "."' false' this.WaitTimeInMinutes)) " is 157.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics not available for Premium Storage account {0}"' true' account)); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Size"' "vmsize"' sapmonPublicConfig' vmSize' aemConfigResult); " is 175.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Memory"' "vm.memory.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult); " is 191.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM CPU"' "vm.cpu.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult); " is 185.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: Script Version"' "script.version"' sapmonPublicConfig' aemConfigResult); " is 183.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA IOPS"' "vm.sla.iops"' sapmonPublicConfig' vmSLA.IOPS' aemConfigResult); " is 188.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA Throughput"' "vm.sla.throughput"' sapmonPublicConfig' vmSLA.TP' aemConfigResult); " is 198.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult' false); " is 178.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult' false); " is 176.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Key"' "osdisk.connminute"' sapmonPublicConfig' osaccountName + ".minute"' aemConfigResult); " is 216.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Value"' osaccountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult); " is 212.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Name"' osaccountName + ".minute.name"' sapmonPublicConfig' osaccountName' aemConfigResult); " is 216.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult); " is 221.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult); " is 202.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 204.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(this._Helper.GetResourceGroupFromId(osdisk.ManagedDisk.Id)' " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult); " is 224.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult); " is 202.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 204.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk name"' "osdisk.name"' sapmonPublicConfig' this._Helper.GetDiskName(osdisk.Vhd.Uri)' aemConfigResult); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult); " is 257.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult); " is 235.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 237.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " LUN"' "disk.lun." + diskNumber' sapmonPublicConfig' disk.Lun' aemConfigResult); " is 221.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Key"' "disk.connminute." + diskNumber' sapmonPublicConfig' accountName + ".minute"' aemConfigResult); " is 247.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Value"' accountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult); " is 231.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Name"' accountName + ".minute.name"' sapmonPublicConfig' accountName' aemConfigResult); " is 233.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult); " is 255.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult); " is 254.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult); " is 235.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult); " is 237.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " name"' "disk.name." + diskNumber' sapmonPublicConfig' this._Helper.GetDiskName(disk.Vhd.Uri)' aemConfigResult); " is 253.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        aemConfigResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks"' true)); " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        this._Helper.WriteHost("\tAzure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks "' false); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    var wadExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.WADExtensionType[this.OSType]' AEMExtensionConstants.WADExtensionPublisher[this.OSType]); " is 168.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            this._Helper.WriteHost("\t\tIaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            var currentCounter = currentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration[@counterSpecifier = '" + perfCounter.counterSpecifier + "']"); " is 206.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' true)); " is 153.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                                wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false)); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        var extStatuses = this._Helper.GetExtension(selectedVM' selectedVMStatus' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]); " is 185.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                            aemStatus = extStatuses.Statuses.FirstOrDefault(stat => Regex.Match(stat.Message' "deploymentId=(\\S*) roleInstance=(\\S*)").Success); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                        if (!this.SkipStorageCheck.IsPresent && (!String.IsNullOrEmpty(deploymentId)) && (!String.IsNullOrEmpty(roleName)) && (!String.IsNullOrEmpty(wadstorage))) " is 154.
Long Statement,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The length of the statement  "                    this._Helper.WriteHost("The script found some configuration issues. Please run the Set-AzureRmVMExtension commandlet to update the configuration of the virtual machine!"); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 156.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 156.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\GetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineCustomScriptExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                            DefaultProfile.DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix) : this.StorageEndpointSuffix; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                                WriteWarning(Microsoft.Azure.Commands.Compute.Properties.Resources.CustomScriptExtensionTryToUseTheFirstSpecifiedFileAsRunScript); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetStorageKey,The length of the statement  "                var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetSasUrlStr,The length of the statement  "            var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\GetAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.Publisher.Equals(DiagnosticsExtensionConstants.ExtensionPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 124.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\GetAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.VirtualMachineExtensionType.Equals(DiagnosticsExtensionConstants.ExtensionType' StringComparison.InvariantCultureIgnoreCase)) " is 135.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\RemoveAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.Publisher.Equals(DiagnosticsExtensionConstants.ExtensionPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 124.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\RemoveAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                                extension.VirtualMachineExtensionType.Equals(DiagnosticsExtensionConstants.ExtensionType' StringComparison.InvariantCultureIgnoreCase)) " is 135.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\RemoveAzureRmVMDiagnosticsExtension.cs,ExecuteCmdlet,The length of the statement  "                        WriteWarning(string.Format(CultureInfo.InvariantCulture' Properties.Resources.DiagnosticsExtensionNotFound' this.ResourceGroupName' this.VMName)); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\RemoveAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                        this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = extensions.Except(diagnosticsExtensions).ToList(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureRmVMDiagnosticsExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\SetAzureRmVMDiagnosticsExtension.cs,InitializeStorageAccountKey,The length of the statement  "                DiagnosticsHelper.InitializeStorageAccountKey(this.StorageClient' this.StorageAccountName' this.DiagnosticsConfigurationPath); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\RemoveAzureVMExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.ShouldProcess(String.Format(VMName' Name' VMName)' string.Format(Properties.Resources.RemoveExtensionAction' Name)) " is 124.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\RemoveAzureVMExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    VirtualMachineExtension virtualMachineExtension = vm.Resources.Where(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace)).FirstOrDefault(); " is 180.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "            string sqlConfiguration = extension.SubStatuses.First(s => s.Code.Equals(SqlConfigurationSubStatusCode' StringComparison.InvariantCultureIgnoreCase)).Message; " is 158.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "                AzureVMSqlServerConfiguration settings = JsonConvert.DeserializeObject<AzureVMSqlServerConfiguration>(sqlConfiguration); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "                        BackupScheduleType = string.IsNullOrEmpty(settings.AutoBackup.BackupScheduleType) ? null : AutoBackupScheduleTypeMap[settings.AutoBackup.BackupScheduleType]' " is 157.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\GetAzureVMSqlServerExtensionCommand.cs,GetSqlServerExtensionContext,The length of the statement  "                        PatchCategory = string.IsNullOrEmpty(settings.AutoPatching.PatchCategory) ? null : AutoPatchingCategoryMap[settings.AutoPatching.PatchCategory] " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The length of the statement  "                    autoBackupSettings.StorageAccessKey = (StorageKey == null) ? null : ConversionUtilities.SecureStringToString(StorageKey); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The length of the statement  "            autoBackupSettings.Password = (CertificatePassword == null) ? null : ConversionUtilities.SecureStringToString(CertificatePassword); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The length of the statement  "            if (!string.IsNullOrEmpty(BackupScheduleType) && string.Equals(BackupScheduleType' ValidateSetValues.Manual' StringComparison.InvariantCultureIgnoreCase)) " is 154.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,GetStorageKey,The length of the statement  "                var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ValidateBackupScheduleSettings,The length of the statement  "                throw new Exception("LogBackupFrequencyInMinutes cannot be null or should be multiple of 5 when BackupScheduleType is set to Manual"); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\RemoveAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                    Name = VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace + "." + VirtualMachineSqlServerExtensionContext.ExtensionPublishedName; " is 146.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\RemoveAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption)) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\SetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachineExtension extension = vm.Resources.Where(x => x.Publisher.Equals(VirtualMachineSqlServerExtensionContext.ExtensionPublishedNamespace)).FirstOrDefault(); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\SetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                TypeHandlerVersion = string.IsNullOrEmpty(this.Version) ? VirtualMachineSqlServerExtensionContext.ExtensionDefaultVersion : this.Version' " is 137.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 150.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                    if (returnedExtension.Publisher.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 150.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMAccessExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VMAccess\GetAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                        returnedExtension.ExtensionType.Equals(VirtualMachineAccessExtensionContext.ExtensionDefaultName' StringComparison.InvariantCultureIgnoreCase)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMAccessExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VMAccess\RemoveAzureVMAccessExtension.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                if (nic.IpConfigurations.First().PublicIPAddress != null && !string.IsNullOrEmpty(nic.IpConfigurations.First().PublicIPAddress.Id)) " is 131.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                        throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicLoadBalancer); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicIPOrPublicLoadBalancer); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMUsageCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Usage\GetAzureVMUsageCommand.cs,ExecuteCmdlet,The length of the statement  "                AzureOperationResponse<IPage<Usage>> result = this.UsageClient.ListWithHttpMessagesAsync(this.Location.Canonicalize()).GetAwaiter().GetResult(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute,GetAzureVMSizeCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachineSizes\GetAzureVMSizeCommand.cs,ExecuteCmdlet,The length of the statement  "                    result = this.VirtualMachineSizeClient.ListWithHttpMessagesAsync(this.Location.Canonicalize()).GetAwaiter().GetResult(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureAdditionalUnattendContentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\AddAzureVMAdditionalUnattendContentCommand.cs,ExecuteCmdlet,The length of the statement  "                throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureSshPublicKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\AddAzureVMSshPublicKeyCommand.cs,ExecuteCmdlet,The length of the statement  "                throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVaultSecretGroupCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\AddAzureVMSecretCommand.cs,ExecuteCmdlet,The length of the statement  "                if (this.VM.OSProfile.Secrets[i].SourceVault != null && this.VM.OSProfile.Secrets[i].SourceVault.Id.Equals(this.SourceVaultId)) " is 127.
Long Statement,Microsoft.Azure.Commands.Compute,RemoveAzureVMNetworkInterfaceCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\RemoveAzureVMNetworkInterfaceCommand.cs,ExecuteCmdlet,The length of the statement  "                            var nicReference = networkProfile.NetworkInterfaces.First(nic => string.Equals(nic.Id' id' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,The length of the statement  "                OsType = this.Windows.IsPresent ? OperatingSystemTypes.Windows : this.Linux.IsPresent ? OperatingSystemTypes.Linux : (OperatingSystemTypes?)null' " is 145.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,The length of the statement  "                (this.ParameterSetName.Equals(WindowsAndDiskEncryptionParameterSet) || this.ParameterSetName.Equals(LinuxAndDiskEncryptionParameterSet)) " is 136.
Long Statement,Microsoft.Azure.Commands.Compute,UpdateAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\UpdateAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                        Identity = this.AssignIdentity.IsPresent ? new VirtualMachineIdentity(null' null' ResourceIdentityType.SystemAssigned) : this.VM.Identity' " is 138.
Long Statement,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The length of the statement  "            foreach (var property in objType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetChildProperties,The length of the statement  "            foreach (var property in objType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetBginfoExtension,The length of the statement  "            var publisher = publishers.FirstOrDefault(e => e.Name.Equals(VirtualMachineBGInfoExtensionContext.ExtensionDefaultPublisher)); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,TryToChooseExistingStandardStorageAccount,The length of the statement  "                storageAccountList = client.StorageAccounts.List().Where(e => e.Location.Canonicalize().Equals(this.Location.Canonicalize())); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                    && (this.Force.IsPresent || this.ShouldContinue(Properties.Resources.VirtualMachineStoppingConfirmation' Properties.Resources.VirtualMachineStoppingCaption))) " is 158.
Long Statement,Microsoft.Azure.Commands.Compute,StopAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Action\StopAzureVMCommand.cs,ExecuteCmdlet,The length of the statement  "                    Action<Func<string' string' Dictionary<string' List<string>>' CancellationToken' Task<Rest.Azure.AzureOperationResponse<MCM.OperationStatusResponse>>>> call = f => " is 163.
Long Statement,Microsoft.Azure.Commands.Compute,NewAzureVMConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\NewAzureVMConfigCommand.cs,ExecuteCmdlet,The length of the statement  "                Identity = this.AssignIdentity.IsPresent ? new VirtualMachineIdentity(null' null' ResourceIdentityType.SystemAssigned) : null' " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,The length of the statement  "                CustomData = string.IsNullOrWhiteSpace(this.CustomData) ? null : Convert.ToBase64String(Encoding.UTF8.GetBytes(this.CustomData))' " is 129.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute,SetAzureVMOperatingSystemCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOperatingSystemCommand.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,AutoFillMetricsConfig,The length of the statement  "            var configurationElem = wadCfgElement.Elements().FirstOrDefault(d => d.Name.LocalName == DiagnosticMonitorConfigurationElemStr); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetPublicConfigFromJsonFile,The length of the statement  "            var storageAccountProperty = properties.FirstOrDefault(p => p.Equals(StorageAccount' StringComparison.OrdinalIgnoreCase)); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetPrivateDiagnosticsConfiguration,The length of the statement  "                throw new ArgumentException(Properties.Resources.DiagnosticsExtensionMismatchStorageAccountName' StorageAccountNameTag); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,AddEventHubPrivateConfig,The length of the statement  "            var eventHubSharedAccessKeyName = GetConfigValueFromPrivateConfig(configurationPath' EventHubElemStr' EventHubSharedAccessKeyNameAttr); " is 135.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,AddEventHubPrivateConfig,The length of the statement  "            var eventHubSharedAccessKey = GetConfigValueFromPrivateConfig(configurationPath' EventHubElemStr' EventHubSharedAccessKeyAttr); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,AddEventHubPrivateConfig,The length of the statement  "            if (!string.IsNullOrEmpty(eventHubUrl) || !string.IsNullOrEmpty(eventHubSharedAccessKeyName) || !string.IsNullOrEmpty(eventHubSharedAccessKey)) " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetPublicConfigJObjectFromJsonFile,The length of the statement  "            // If the json config has the public config as a property' we extract it. Otherwise' the root object is the public config. " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetPublicConfigJObjectFromJsonFile,The length of the statement  "            var publicConfigProperty = properties.FirstOrDefault(p => p.Equals(PublicConfigElemStr' StringComparison.OrdinalIgnoreCase)); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigValueFromPrivateConfig,The length of the statement  "                    var configElem = privateConfigElem == null ? null : privateConfigElem.Elements().FirstOrDefault(ele => ele.Name.LocalName == elementName); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigValueFromPrivateConfig,The length of the statement  "                    var attribute = configElem == null ? null : configElem.Attributes().FirstOrDefault(a => string.Equals(a.Name.LocalName' attributeName)); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountName,The length of the statement  "                var storageNode = publicConfig == null ? null : publicConfig.Elements().FirstOrDefault(ele => ele.Name.LocalName == StorageAccountElemStr); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountName,The length of the statement  "                var storageAccountProperty = properties.FirstOrDefault(p => p.Equals(StorageAccount' StringComparison.OrdinalIgnoreCase)); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountKey,The length of the statement  "                var account = new ARMStorageProvider(storageClient).GetCloudStorageAccount(storageAccount.Name' ARMStorageService.ParseResourceGroupFromId(storageAccount.Id)); " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The length of the statement  "                var context = CreateStorageContext(new Uri(endpoints.Blob)' new Uri(endpoints.Queue)' new Uri(endpoints.Table)' new Uri(endpoints.File)' storageAccountName' storageAccountKey); " is 176.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The length of the statement  "                storageAccountEndpoint = GetConfigValueFromPrivateConfig(configurationPath' StorageAccountElemStr' PrivConfEndpointAttr))) " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,InitializeStorageAccountEndpoint,The length of the statement  "                var context = CreateStorageContext(blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint' storageAccountName' storageAccountKey); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,TryGetStorageAccount,The length of the statement  "                storageAccount = storageAccounts == null ? null : storageAccounts.FirstOrDefault(account => account.Name.Equals(storageAccountName)); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,CreateStorageContext,The length of the statement  "            var cloudStorageAccount = new CloudStorageAccount(credentials' blobEndpoint' queueEndpoint' tableEndpoint' fileEndpoint); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the statement  "                !string.Equals(storageAccountNameInPrivateConfig' storageAccountNameInPublicConfig' StringComparison.OrdinalIgnoreCase)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the statement  "                throw new ArgumentException(Properties.Resources.DiagnosticsExtensionMismatchStorageAccountName' StorageAccountNameTag); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigurationsFromFiles,The length of the statement  "            var storageAccountEndpoint = storageAccountKey == null? null: InitializeStorageAccountEndpoint(storageAccountNameInPublicConfig' storageAccountKey' storageClient); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,IsDiagnosticsExtension,The length of the statement  "            return extension.Publisher.Equals(DiagnosticsExtensionConstants.ExtensionPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,LogProgress,The length of the statement  "            var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' activityId' activity' message' (int)remainingTime.TotalSeconds' (int)precentComplete); " is 222.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,LogProgressComplete,The length of the statement  "            var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' activityId' activity' Rsrc.PSSyncOutputEventsLogProgressCompleteCompleted); " is 179.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The length of the statement  "                    var progressCommand1 = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionCompleted); " is 213.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The length of the statement  "                var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100); " is 303.
Long Statement,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,WriteVerboseWithTimestamp,The length of the statement  "            var messageWithTimeStamp = string.Format(CultureInfo.CurrentCulture' "{0:T} - {1}"' DateTime.Now' string.Format(message' args)); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Models,VhdUploaderModel,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\VhdUploaderModel.cs,Upload,The length of the statement  "                blobCreator = new PatchingBlobCreator(uploadParameters.LocalFilePath' uploadParameters.DestinationUri' uploadParameters.BaseImageUri' uploadParameters.BlobObjectFactory' uploadParameters.OverWrite); " is 198.
Long Statement,Microsoft.Azure.Commands.Compute.Models,VhdUploaderModel,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\VhdUploaderModel.cs,Upload,The length of the statement  "                blobCreator = new BlobCreator(uploadParameters.LocalFilePath' uploadParameters.DestinationUri' uploadParameters.BlobObjectFactory' uploadParameters.OverWrite); " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Models,VhdUploaderModel,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\VhdUploaderModel.cs,Upload,The length of the statement  "                    return new VhdUploadContext { LocalFilePath = uploadParameters.LocalFilePath' DestinationUri = uploadParameters.DestinationUri.Uri }; " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetStorageAccountFromCache,The length of the statement  "            var account = listResponse.First(accTemp => accTemp.Name.Equals(accountName' StringComparison.InvariantCultureIgnoreCase)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetResourceGroupFromId,The length of the statement  "                throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetResourceNameFromId,The length of the statement  "                throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetCoreEndpoint,The length of the statement  "                WriteWarning("Could not extract endpoint information from Azure Storage Account ({0}). Using default {1}"' ex.Message' AEMExtensionConstants.AzureEndpoint); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetCoreEndpoint,The length of the statement  "            WriteWarning("Could not extract endpoint information from Azure Storage Account. Using default {0}"' AEMExtensionConstants.AzureEndpoint); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,WriteError,The length of the statement  "                this._ErrorAction(new ErrorRecord(new Exception(String.Format(message' args))' "Error"' ErrorCategory.NotSpecified' null)); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetExtensionVersion,The length of the statement  "            else if (AEMExtensionConstants.WADExtensionPublisher[osType].Equals(publisher' StringComparison.InvariantCultureIgnoreCase) " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The length of the statement  "            || (!CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/@scheduledTransferPeriod"). " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The length of the statement  "            || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration") == null)) " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetStorageAnalytics,The length of the statement  "            return cloudStorageAccount.CreateCloudBlobClient().GetServicePropertiesAsync().ConfigureAwait(false).GetAwaiter().GetResult(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.disableEncryptionOperation); " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,UpdateVmEncryptionSettings,The length of the statement  "                                "Set-AzureDiskEncryptionExtension can enable encryption only on a VM that was already created and has appropriate storageProfile and OS disk"))' " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachine virtualMachineResponse = (this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                                    "Disable-AzureDiskEncryption can disable encryption only on a VM that was already created and has appropriate storageProfile and OS disk"))' " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,DisableAzureDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\DisableAzureDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                    this.ShouldContinue(Properties.Resources.DisableAzureDiskEncryptionConfirmation' Properties.Resources.DisableAzureDiskEncryptionCaption))) " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetVmExtensionParameters,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.queryEncryptionStatusOperation); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetVmExtensionParameters,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "Get-AzureDiskEncryptionExtension can enable encryption only on a VM that was already created "))' " is 205.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetVmExtensionParameters,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetVmExtensionParameters,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher; " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsExtensionInstalled,The length of the statement  "            AzureOperationResponse<VirtualMachineExtension> extensionResult = this.VirtualMachineExtensionClient.GetWithInstanceView(this.ResourceGroupName' this.VMName' this.Name); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsExtensionInstalled,The length of the statement  "                if (returnedExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher' " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsExtensionInstalled,The length of the statement  "                    returnedExtension.ExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultType' " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsExtensionInstalled,The length of the statement  "                if (returnedExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 180.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsExtensionInstalled,The length of the statement  "                    returnedExtension.ExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase)) " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "            AzureOperationResponse<VirtualMachineExtension> extensionResult = this.VirtualMachineExtensionClient.GetWithInstanceView(this.ResourceGroupName' this.VMName' this.Name); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Failed to retrieve extension status"))' " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Missing extension publisher and type info"))' " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                if (returnedExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 185.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                    returnedExtension.ExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase)) " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                if (returnedExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase) && " is 180.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                    returnedExtension.ExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase)) " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Extension publisher and type mismatched"))' " is 157.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsAzureDiskEncryptionExtension,The length of the statement  "                        (vmExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase)) && " is 172.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsAzureDiskEncryptionExtension,The length of the statement  "                        (vmExtension.VirtualMachineExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase))) " is 174.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsAzureDiskEncryptionExtension,The length of the statement  "                        (vmExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase)) && " is 177.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsAzureDiskEncryptionExtension,The length of the statement  "                        (vmExtension.VirtualMachineExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase))) " is 179.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,DataVolumeInExtensionConfig,The length of the statement  "                    (adeExtension.VolumeType.Equals(AzureDiskEncryptionExtensionContext.VolumeTypeData' StringComparison.InvariantCultureIgnoreCase)) || " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,DataVolumeInExtensionConfig,The length of the statement  "                    (adeExtension.VolumeType.Equals(AzureDiskEncryptionExtensionContext.VolumeTypeAll' StringComparison.InvariantCultureIgnoreCase))) " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExtensionProvisioningSucceeded,The length of the statement  "            var extensionStatusViewresult = this.VirtualMachineExtensionClient.GetWithInstanceView(this.ResourceGroupName' this.VMName' adeExtension.Name); " is 143.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExtensionProvisioningSucceeded,The length of the statement  "            if (adeExtensionWithStatus.ProvisioningState.Equals(AzureDiskEncryptionExtensionContext.StatusSucceeded' StringComparison.InvariantCultureIgnoreCase)) " is 150.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,AreDataVolumesEncrypted,The length of the statement  "                            AzureDiskEncryptionExtensionContext adeExtension = new AzureDiskEncryptionExtensionContext(vmExtension.ToPSVirtualMachineExtension(this.ResourceGroupName' this.VMName)); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,AreDataVolumesEncrypted,The length of the statement  "                                if (adeExtension.EncryptionOperation.Equals(AzureDiskEncryptionExtensionConstants.enableEncryptionOperation' StringComparison.InvariantCultureIgnoreCase)) " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachine vmParameters = (this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName)); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The length of the statement  "                            ProgressMessage = string.Format(CultureInfo.CurrentUICulture' "OsVolume: {0}' DataVolumes: {1}"' osVolumeEncrypted' dataVolumesEncrypted) " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The length of the statement  "                            OsVolumeEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultOsKey])' " is 160.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The length of the statement  "                            DataVolumesEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultDataKey])' " is 165.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The length of the statement  "                        ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "OS type unknown."))' " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\RemoveAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                VirtualMachine virtualMachineResponse = (this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\RemoveAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ValidateInputParameters,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "Invalid DiskEncryptionKeyVaultUrl. Please provide a valid KeyVault URI for DiskEncryptionKeyVaultUrl"))' " is 209.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ValidateInputParameters,The length of the statement  "                    ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "Invalid KeyEncryptionKeyUrl. Please provide a valid KeyVault URI for KeyEncryptionKeyUrl"))' " is 197.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "            AzureOperationResponse<VirtualMachineExtension> extensionResult = this.VirtualMachineExtensionClient.GetWithInstanceView(this.ResourceGroupName' this.VMName' this.Name); " is 169.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Failed to retrieve extension status"))' " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Missing extension publisher and type info"))' " is 159.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher; " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                this.ExtensionPublisherName = this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                    ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Invalid extension status"))' " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationFailedException(string.Format(CultureInfo.CurrentUICulture' "Extension publisher and type mismatched"))' " is 157.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,UpdateVmEncryptionSettings,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "Set-AzureDiskEncryptionExtension can enable encryption only on a VM that was already created and has appropriate storageProfile and OS disk"))' " is 251.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.aadClientCertThumbprintKey' AadClientCertThumbprint ?? String.Empty); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "                publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.enableEncryptionFormatAllOperation); " is 155.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "                publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.enableEncryptionOperation); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetVmExtensionParameters,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "Set-AzureDiskEncryptionExtension can enable encryption only on a VM that was already created "))' " is 205.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,CreateVMBackupForLinx,The length of the statement  "                WriteWarning(string.Format("one snapshot for disks are created with tag'{0}' you can use {1}-{2} to remove it."' tag' VerbsCommon.Remove' " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,CreateVMBackupForLinx,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' e.ToString()))' " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                this.ShouldContinue(Properties.Resources.EnableAzureDiskEncryptionConfirmation' Properties.Resources.EnableAzureDiskEncryptionCaption))) " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                    AzureOperationResponse<VirtualMachineExtension> extensionPushResult = this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync( " is 141.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssDiskEncryptionStatus.cs,GetVmssDiskStatus,The length of the statement  "            if (psResult.EncryptionSettings.EncryptionOperation.Equals(AzureDiskEncryptionExtensionConstants.enableEncryptionOperation' StringComparison.OrdinalIgnoreCase)) " is 160.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureVmssDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\DisableAzureVmssDiskEncryption.cs,ExecuteCmdlet,The length of the statement  "                    || this.ShouldContinue(Properties.Resources.VirtualMachineExtensionRemovalConfirmation' Properties.Resources.VirtualMachineExtensionRemovalCaption))) " is 149.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,RemoveAzureVmssDiskEncryptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\DisableAzureVmssDiskEncryption.cs,GetDisalbeEncryptionSetting,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.disableEncryptionOperation); " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDiskStatus,The length of the statement  "            psResult.DataVolumesEncrypted = GetDataDiskEncryptionStatus(rgName' vmssName' psResult.DiskEncryptionStatus' vmssVM.StorageProfile); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDataDiskEncryptionStatus,The length of the statement  "                AzureVmssDiskEncryptionExtensionPublicSettings encryptionSettings = JsonConvert.DeserializeObject<AzureVmssDiskEncryptionExtensionPublicSettings>( " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDataDiskEncryptionStatus,The length of the statement  "                if (encryptionSettings.VolumeType.Equals(AzureVmssDiskEncryptionExtensionContext.VolumeTypeAll' StringComparison.OrdinalIgnoreCase) " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDataDiskEncryptionStatus,The length of the statement  "                    || encryptionSettings.VolumeType.Equals(AzureVmssDiskEncryptionExtensionContext.VolumeTypeData' StringComparison.OrdinalIgnoreCase)) " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDataDiskEncryptionStatus,The length of the statement  "                    if (encryptionSettings.EncryptionOperation.Equals(AzureDiskEncryptionExtensionConstants.enableEncryptionOperation' StringComparison.OrdinalIgnoreCase)) " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "			publicSettings.Add(AzureDiskEncryptionExtensionConstants.keyVaultResourceIdKey' DiskEncryptionKeyVaultId ?? string.Empty); " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "			publicSettings.Add(AzureDiskEncryptionExtensionConstants.kekVaultResourceIdKey' KeyEncryptionKeyVaultId ?? string.Empty); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,GetExtensionPublicSettings,The length of the statement  "            publicSettings.Add(AzureDiskEncryptionExtensionConstants.encryptionOperationKey' AzureDiskEncryptionExtensionConstants.enableEncryptionOperation); " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,ExecuteCmdlet,The length of the statement  "                this.ShouldContinue(Properties.Resources.EnableAzureDiskEncryptionConfirmation' Properties.Resources.EnableAzureDiskEncryptionCaption))) // Change this. " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "            string regexString = @"/subscriptions/(?<subId>\S+)/resourceGroups/(?<rgName>\S+)/providers/Microsoft.KeyVault/vaults/(?<vaultName>\S+)(.*?)"; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "                        WriteWarning("Cannot access the given key vault.  Please check if 'enabledForDiskEncryption' of the key vault is set."); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "                        WriteWarning("Cannot access the given key vault.  Please check if 'enabledForDiskEncryption' of the key vault is set."); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureVmssDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\SetAzureVmssDiskEncryptionExtension.cs,VerifyKeyVault,The length of the statement  "                    if (!returnedKeyVault.Location.Replace(" "' "").Equals(thisVmss.Location.Replace(" "' "")' StringComparison.OrdinalIgnoreCase)) " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,FindSnapshot,The length of the statement  "                    CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(sc' azContext.Environment.GetEndpointSuffix(AzureEnvironment.Endpoint.StorageEndpointSuffix)' true); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GetResourceGroupFromId,The length of the statement  "                throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id)); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    StorageManagementClient storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(azContext' AzureEnvironment.Endpoint.ResourceManager); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    var account = listResponse.First(accTemp => accTemp.Name.Equals(osBlobUri.StorageAccountName' StringComparison.InvariantCultureIgnoreCase)); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resourceGroupName' storageClient' azContext.Subscription); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The length of the statement  "                    CloudPageBlobObjectFactory cloudPageBlobObjectFactory = new CloudPageBlobObjectFactory(storageCredentialsFactory' TimeSpan.FromMinutes(1)); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            var virtualMachineResponse = virtualMachineExtensionBaseCmdlet.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(vmConfig.ResourceGroupName' vmConfig.VMName); " is 182.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            StorageManagementClient storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager); " is 225.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(vmConfig.ResourceGroupName' storageClient' virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext.Subscription); " is 205.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            AzureVMBackupBlobSasUris blobSASUris = this.GenerateBlobSasUris(blobUris' virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,RemoveSnapshot,The length of the statement  "            List<CloudPageBlob> snapshots = this.FindSnapshot(virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext' blobSASUris.pageBlobUri' blobSASUris.storageCredentialsFactory' snapshotQuery); " is 194.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the statement  "            var virtualMachine = virtualMachineExtensionBaseCmdlet.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView( " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the statement  "            AzureVMBackupBlobSasUris blobSASUris = this.GenerateBlobSasUris(vmPageBlobUris' virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The length of the statement  "                List<CloudPageBlob> snapshotsFound = this.FindSnapshot(virtualMachineExtensionBaseCmdlet.DefaultProfile.DefaultContext' blobSASUris.pageBlobUri' blobSASUris.storageCredentialsFactory' snapshotQuery); " is 199.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,RemoveAzureVMBackup,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\RemoveAzureVMBackup.cs,ExecuteCmdlet,The length of the statement  "            var virtualMachineResponse = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' VMName); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,RemoveAzureVMBackup,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\RemoveAzureVMBackup.cs,ExecuteCmdlet,The length of the statement  "                ThrowTerminatingError(new ErrorRecord(new ArgumentException(string.Format(CultureInfo.CurrentUICulture' "The VM should be a Linux VM"))' " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Chef,GetAzureRmVMChefExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Chef\GetAzureRmVMChefExtension.cs,ExecuteCmdlet,The length of the statement  "                var returnedExtension = virtualMachineExtensionGetResponse.ToPSVirtualMachineExtension(this.ResourceGroupName' this.VMName); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Chef,RemoveAzureRmVMChefExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Chef\RemoveAzureRmVMChefExtension.cs,ExecuteCmdlet,The length of the statement  "                            WriteWarning(string.Format(CultureInfo.InvariantCulture' Properties.Resources.ChefExtensionNotFound' this.ResourceGroupName' this.VMName)); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Chef,SetAzureVMChefExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Chef\SetAzureVMChefExtension.cs,GetLatestChefExtensionVersion,The length of the statement  "            var result = ComputeClient.ComputeManagementClient.VirtualMachineExtensionImages.ListVersionsWithHttpMessagesAsync(this.Location' ExtensionDefaultPublisher' this.Name).GetAwaiter().GetResult(); " is 193.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetExtensionProfile(); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = new List<Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetExtension>(); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                        || ShouldContinue(Properties.Resources.DiagnosticsExtensionOverwrittingConfirmation' Properties.Resources.DiagnosticsExtensionOverwrittingCaption)) " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                        this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = extensions.Where(extension => !DiagnosticsHelper.IsDiagnosticsExtension(extension)).ToList(); " is 173.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    var storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(DefaultProfile.DefaultContext' AzureEnvironment.Endpoint.ResourceManager); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.Diagnostics,AddAzureRmVmssDiagnosticsExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\Diagnostics\AddAzureRmVmssDiagnosticsExtension.cs,ProcessRecord,The length of the statement  "                    Tuple<Hashtable' Hashtable> settings = DiagnosticsHelper.GetConfigurationsFromFiles(this.SettingFilePath' this.ProtectedSettingFilePath' this.VirtualMachineScaleSet.Id' this' storageClient); " is 190.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,GetAzureVMDscExtensionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\GetAzureVMDscExtensionStatusCommand.cs,ExecuteCmdlet,The length of the statement  "                Name = DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,DscExtensionCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionCmdletCommonBase.cs,GetStorageCredentials,The length of the statement  "                        new UnauthorizedAccessException(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscDefaultStorageCredentialsNotFound)' " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,DscExtensionCmdletCommonBase,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\DscExtensionCmdletCommonBase.cs,GetStorageCredentials,The length of the statement  "                ThrowInvalidArgumentError(cmdlet' Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscStorageContextMustIncludeAccountName); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,RemoveAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\RemoveAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                Name = DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,RemoveAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\RemoveAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "            if (ShouldProcess(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.DscExtensionRemovalConfirmation' Name)' Microsoft.Azure.Commands.Compute.Properties.Resources.DscExtensionRemovalCaption)) " is 238.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscNullArchiveNoConfiguragionParameters); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscNullArchiveNoStorageParameters); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscConfigurationDataFileShouldNotIncludePath); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                        this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscInvalidConfigurationDataFile); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,ValidateParameters,The length of the statement  "                    this.ThrowInvalidArgumentError(Microsoft.Azure.Commands.Compute.Properties.Resources.AzureVMDscExtensionInvalidVersion); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,CreateConfiguration,The length of the statement  "                        Name ?? DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName' " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Extension.DSC,GetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\GetAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The length of the statement  "                Name = DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,GetDynamicParameters,The length of the statement  "                case "ContainerServiceListByResourceGroupNext": return CreateContainerServiceListByResourceGroupNextDynamicParameters(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,GetDynamicParameters,The length of the statement  "                case "VirtualMachineScaleSetRollingUpgradeCancel": return CreateVirtualMachineScaleSetRollingUpgradeCancelDynamicParameters(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,GetDynamicParameters,The length of the statement  "                case "VirtualMachineScaleSetRollingUpgradeGetLatest": return CreateVirtualMachineScaleSetRollingUpgradeGetLatestDynamicParameters(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,GetDynamicParameters,The length of the statement  "                case "VirtualMachineScaleSetRollingUpgradeStartOSUpgrade": return CreateVirtualMachineScaleSetRollingUpgradeStartOSUpgradeDynamicParameters(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,GetDynamicParameters,The length of the statement  "                case "VirtualMachineScaleSetVMGetInstanceView": return CreateVirtualMachineScaleSetVMGetInstanceViewDynamicParameters(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMGetMethod,The length of the statement  "            if (!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(vmScaleSetName) && !string.IsNullOrEmpty(instanceId)) " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMListMethod,The length of the statement  "            Microsoft.Rest.Azure.OData.ODataQuery<VirtualMachineScaleSetVM> odataQuery = (Microsoft.Rest.Azure.OData.ODataQuery<VirtualMachineScaleSetVM>)ParseParameter(invokeMethodInputParameters[2]); " is 189.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureComputeArgumentListCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMListParameters,The length of the statement  "            Microsoft.Rest.Azure.OData.ODataQuery<VirtualMachineScaleSetVM> odataQuery = new Microsoft.Rest.Azure.OData.ODataQuery<VirtualMachineScaleSetVM>(); " is 147.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The length of the statement  "            foreach (var property in objType.GetProperties(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public)) " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmContainerServiceAgentPoolProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ContainerService\Config\AddAzureRmContainerServiceAgentPoolProfileCommand.cs,Run,The length of the statement  "                this.ContainerService.AgentPoolProfiles = new List<Microsoft.Azure.Management.Compute.Models.ContainerServiceAgentPoolProfile>(); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmContainerServiceConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ContainerService\Config\NewAzureRmContainerServiceConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\NewAzureRmDiskConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmDiskUpdateConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\NewAzureRmDiskUpdateConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Disk.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Disk.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Disk.EncryptionSettings.DiskEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Disk.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Disk.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Disk.EncryptionSettings.KeyEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 120.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettings.DiskEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmDiskUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\Config\SetAzureRmDiskUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.DiskUpdate.EncryptionSettings.KeyEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmDisk,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\DiskDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RevokeAzureRmDiskAccess,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Disk\DiskRevokeAccessMethod.cs,ProcessRecord,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmImageConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Image\Config\NewAzureRmImageConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmImage,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Image\ImageDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\NewAzureRmSnapshotConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmSnapshotUpdateConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\NewAzureRmSnapshotUpdateConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Snapshot.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Snapshot.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Snapshot.EncryptionSettings.DiskEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Snapshot.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Snapshot.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.Snapshot.EncryptionSettings.KeyEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettings.DiskEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndSecretReference(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateDiskEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettings.DiskEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 131.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettings.KeyEncryptionKey = new Microsoft.Azure.Management.Compute.Models.KeyVaultAndKeyReference(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\Config\SetAzureRmSnapshotUpdateKeyEncryptionKeyCommand.cs,Run,The length of the statement  "                    this.SnapshotUpdate.EncryptionSettings.KeyEncryptionKey.SourceVault = new Microsoft.Azure.Management.Compute.Models.SourceVault(); " is 130.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmSnapshot,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\SnapshotDeleteMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RevokeAzureRmSnapshotAccess,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\Snapshot\SnapshotRevokeAccessMethod.cs,ProcessRecord,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StopAzureRmVmssRollingUpgrade,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetRollingUpgrade\VirtualMachineScaleSetRollingUpgradeCancelMethod.cs,ProcessRecord,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StartAzureRmVmssRollingOSUpgrade,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetRollingUpgrade\VirtualMachineScaleSetRollingUpgradeStartOSUpgradeMethod.cs,ProcessRecord,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ProcessRecord,The length of the statement  "                if (!string.IsNullOrEmpty(resourceGroupName) && !string.IsNullOrEmpty(vmScaleSetName) && !string.IsNullOrEmpty(instanceId)) " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ProcessRecord,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetVMInstanceView' PSVirtualMachineScaleSetVMInstanceView>(result' psObject); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmssVM,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMGetMethod.cs,ProcessRecord,The length of the statement  "                        psObject.Add(ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetVM' PSVirtualMachineScaleSetVMList>(r)); " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssVM,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMReimageMethod.cs,ProcessRecord,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssVM,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSetVM\VirtualMachineScaleSetVMReimageMethod.cs,ProcessRecord,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.AdditionalUnattendContent = new List<Microsoft.Azure.Management.Compute.Models.AdditionalUnattendContent>(); " is 189.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssAdditionalUnattendContentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssAdditionalUnattendContentCommand.cs,Run,The length of the statement  "            this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.AdditionalUnattendContent.Add(vAdditionalUnattendContent); " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssDataDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssDataDiskCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssDataDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssDataDiskCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssDataDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssDataDiskCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.DataDisks = new List<Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetDataDisk>(); " is 162.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssExtensionCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssExtensionCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetExtensionProfile(); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssExtensionCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.ExtensionProfile.Extensions = new List<Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetExtension>(); " is 166.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetNetworkProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations = new List<Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetNetworkConfiguration>(); " is 195.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "            var vNetworkInterfaceConfigurations = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetNetworkConfiguration(); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "                vNetworkInterfaceConfigurations.DnsSettings = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetNetworkConfigurationDnsSettings(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssNetworkInterfaceConfigurationCommand.cs,Run,The length of the statement  "            this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.Add(vNetworkInterfaceConfigurations); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSecretCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSecretCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSecretCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSecretCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSecretCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSecretCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.Secrets = new List<Microsoft.Azure.Management.Compute.Models.VaultSecretGroup>(); " is 141.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSshPublicKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSshPublicKeyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSshPublicKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSshPublicKeyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSshPublicKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSshPublicKeyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration = new Microsoft.Azure.Management.Compute.Models.LinuxConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSshPublicKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSshPublicKeyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.Ssh = new Microsoft.Azure.Management.Compute.Models.SshConfiguration(); " is 150.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssSshPublicKeyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssSshPublicKeyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.Ssh.PublicKeys = new List<Microsoft.Azure.Management.Compute.Models.SshPublicKey>(); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssWinRMListenerCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssWinRMListenerCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssWinRMListenerCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssWinRMListenerCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssWinRMListenerCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssWinRMListenerCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssWinRMListenerCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssWinRMListenerCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.WinRM = new Microsoft.Azure.Management.Compute.Models.WinRMConfiguration(); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,AddAzureRmVmssWinRMListenerCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\AddAzureRmVmssWinRMListenerCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.WinRM.Listeners = new List<Microsoft.Azure.Management.Compute.Models.WinRMListener>(); " is 167.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                    vVirtualMachineProfile.NetworkProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetNetworkProfile(); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                    vVirtualMachineProfile.NetworkProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetNetworkProfile(); " is 125.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                    vVirtualMachineProfile.ExtensionProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetExtensionProfile(); " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssConfigCommand.cs,Run,The length of the statement  "                Tags = (this.Tag == null) ? null : this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value)' " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                    vIpConfigurations.PublicIPAddressConfiguration = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetPublicIPAddressConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                    vIpConfigurations.PublicIPAddressConfiguration = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetPublicIPAddressConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                vIpConfigurations.PublicIPAddressConfiguration.IdleTimeoutInMinutes = this.PublicIPAddressConfigurationIdleTimeoutInMinutes; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                    vIpConfigurations.PublicIPAddressConfiguration = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetPublicIPAddressConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                    vIpConfigurations.PublicIPAddressConfiguration.DnsSettings = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings(); " is 171.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmssIpConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\NewAzureRmVmssIpConfigCommand.cs,Run,The length of the statement  "                    vIpConfigurations.ApplicationGatewayBackendAddressPools = new List<Microsoft.Azure.Management.Compute.Models.SubResource>(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\RemoveAzureRmVmssNetworkInterfaceConfigurationCommand.cs,ProcessRecord,The length of the statement  "            var vNetworkInterfaceConfigurations = this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.First " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RemoveAzureRmVmssNetworkInterfaceConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\RemoveAzureRmVmssNetworkInterfaceConfigurationCommand.cs,ProcessRecord,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.NetworkProfile.NetworkInterfaceConfigurations.Remove(vNetworkInterfaceConfigurations); " is 136.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile = new Microsoft.Azure.Management.Compute.Models.DiagnosticsProfile(); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new Microsoft.Azure.Management.Compute.Models.BootDiagnostics(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile = new Microsoft.Azure.Management.Compute.Models.DiagnosticsProfile(); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssBootDiagnosticCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssBootDiagnosticCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new Microsoft.Azure.Management.Compute.Models.BootDiagnostics(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = this.WindowsConfigurationProvisionVMAgent; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = this.WindowsConfigurationEnableAutomaticUpdate; " is 153.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.AdditionalUnattendContent = this.AdditionalUnattendContent; " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.WinRM = new Microsoft.Azure.Management.Compute.Models.WinRMConfiguration(); " is 156.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration = new Microsoft.Azure.Management.Compute.Models.LinuxConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = this.LinuxConfigurationDisablePasswordAuthentication; " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration = new Microsoft.Azure.Management.Compute.Models.LinuxConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.Ssh = new Microsoft.Azure.Management.Compute.Models.SshConfiguration(); " is 150.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssOsProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssOsProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = this.MaxUnhealthyInstancePercent; " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = this.MaxUnhealthyUpgradedInstancePercent; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssRollingUpgradePolicyCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssRollingUpgradePolicyCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = this.ImageReferencePublisher; " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.Image = new Microsoft.Azure.Management.Compute.Models.VirtualHardDisk(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetManagedDiskParameters(); " is 178.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = this.ManagedDisk; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmssStorageProfileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\Config\SetAzureRmVmssStorageProfileCommand.cs,Run,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,NewAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetCreateOrUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSVirtualMachineScaleSet' VirtualMachineScaleSet>(this.VirtualMachineScaleSet' parameters); " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StopAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetDeallocateMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StopAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetDeallocateMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,GetAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetGetMethod.cs,ProcessRecord,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<VirtualMachineScaleSetInstanceView' PSVirtualMachineScaleSetInstanceView>(result' psObject); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,SetAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetReimageMethod.cs,ExecuteCmdlet,The length of the statement  "                        ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,RestartAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetRestartMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,StartAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetStartMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmssInstance,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateInstancesMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,ExecuteCmdlet,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<PSVirtualMachineScaleSet' VirtualMachineScaleSet>(this.VirtualMachineScaleSet' parameters); " is 137.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSProfile(); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 158.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = this.EnableAutomaticUpdate; " is 139.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSDisk(); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetManagedDiskParameters(); " is 184.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = this.ManagedDiskStorageAccountType; " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSProfile(); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 158.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = this.ProvisionVMAgent; " is 128.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile = new Microsoft.Azure.Management.Compute.Models.DiagnosticsProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new Microsoft.Azure.Management.Compute.Models.BootDiagnostics(); " is 157.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.Enabled = this.BootDiagnosticsEnabled; " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxBatchInstancePercent = this.MaxBatchInstancePercent; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSProfile(); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 158.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile = new Microsoft.Azure.Management.Compute.Models.DiagnosticsProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new Microsoft.Azure.Management.Compute.Models.BootDiagnostics(); " is 157.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.StorageUri = this.BootDiagnosticsStorageUri; " is 135.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSProfile(); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSProfile(); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration = new Microsoft.Azure.Management.Compute.Models.LinuxConfiguration(); " is 154.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = this.DisablePasswordAuthentication; " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.Tags = this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value); " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = this.MaxUnhealthyUpgradedInstancePercent; " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = this.ImageReferencePublisher; " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSDisk(); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk.Image = new Microsoft.Azure.Management.Compute.Models.VirtualHardDisk(); " is 150.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSDisk(); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.Identity = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetIdentity(); " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = this.MaxUnhealthyInstancePercent; " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.UpgradePolicy.RollingUpgradePolicy.PauseTimeBetweenBatches = this.PauseTimeBetweenBatches; " is 124.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateOSDisk(); " is 163.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateVMProfile(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetUpdateStorageProfile(); " is 164.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                    this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.StorageProfile.ImageReference.Version = this.ImageReferenceVersion; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The length of the statement  "                throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.EnableAutomaticUpdates = this.EnableAutomaticUpdate; " is 133.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetManagedDiskParameters(); " is 178.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.ManagedDisk.StorageAccountType = this.ManagedDiskStorageAccountType; " is 140.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration.ProvisionVMAgent = this.ProvisionVMAgent; " is 122.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile = new Microsoft.Azure.Management.Compute.Models.DiagnosticsProfile(); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new Microsoft.Azure.Management.Compute.Models.BootDiagnostics(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.Enabled = this.BootDiagnosticsEnabled; " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration = new Microsoft.Azure.Management.Compute.Models.WindowsConfiguration(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile = new Microsoft.Azure.Management.Compute.Models.DiagnosticsProfile(); " is 138.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics = new Microsoft.Azure.Management.Compute.Models.BootDiagnostics(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.DiagnosticsProfile.BootDiagnostics.StorageUri = this.BootDiagnosticsStorageUri; " is 129.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSProfile(); " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration = new Microsoft.Azure.Management.Compute.Models.LinuxConfiguration(); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration.DisablePasswordAuthentication = this.DisablePasswordAuthentication; " is 146.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.Tags = this.Tag.Cast<DictionaryEntry>().ToDictionary(ht => (string)ht.Key' ht => (string)ht.Value); " is 127.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyUpgradedInstancePercent = this.MaxUnhealthyUpgradedInstancePercent; " is 142.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference.Publisher = this.ImageReferencePublisher; " is 121.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk.Image = new Microsoft.Azure.Management.Compute.Models.VirtualHardDisk(); " is 144.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy.MaxUnhealthyInstancePercent = this.MaxUnhealthyInstancePercent; " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.UpgradePolicy.RollingUpgradePolicy = new Microsoft.Azure.Management.Compute.Models.RollingUpgradePolicy(); " is 134.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.OsDisk = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetOSDisk(); " is 151.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetVMProfile(); " is 132.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile = new Microsoft.Azure.Management.Compute.Models.VirtualMachineScaleSetStorageProfile(); " is 152.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                    this.VirtualMachineScaleSet.VirtualMachineProfile.StorageProfile.ImageReference = new Microsoft.Azure.Management.Compute.Models.ImageReference(); " is 145.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The length of the statement  "                throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.BothWindowsAndLinuxConfigurationsSpecified); " is 126.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,ConvertToAzureRmVMManagedDisk,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachine\VirtualMachineConvertToManagedDisksMethod.cs,ProcessRecord,The length of the statement  "                    ComputeAutomationAutoMapperProfile.Mapper.Map<Azure.Management.Compute.Models.OperationStatusResponse' PSOperationStatusResponse>(result' psObject); " is 148.
Long Statement,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureRmVMRunCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachine\VirtualMachineRunCommandMethod.cs,ExecuteCmdlet,The length of the statement  "                        string fileContent = Commands.Common.Authentication.Abstractions.FileUtilities.DataStore.ReadFileAsText(filePath.FullName); " is 123.
Long Statement,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\AddAzureVhdCommand.cs,CreateStorageCredentialsFactory,The length of the statement  "                storageCredentialsFactory = new StorageCredentialsFactory(this.ResourceGroupName' storageClient' DefaultContext.Subscription); " is 126.
Complex Conditional,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The conditional expression  "!this.SkipStorageCheck.IsPresent && (!String.IsNullOrEmpty(deploymentId)) && (!String.IsNullOrEmpty(roleName)) && (!String.IsNullOrEmpty(wadstorage))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute,SetAzureVMOSDiskCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Config\SetAzureVMOSDiskCommand.cs,ExecuteCmdlet,The conditional expression  "(string.IsNullOrEmpty(this.KeyEncryptionKeyVaultId) && !string.IsNullOrEmpty(this.KeyEncryptionKeyUrl))                  || (!string.IsNullOrEmpty(this.KeyEncryptionKeyVaultId) && string.IsNullOrEmpty(this.KeyEncryptionKeyUrl))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute,GetAzureVMBootDiagnosticsDataCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMBootDiagnosticsDataCommand.cs,ExecuteCmdlet,The conditional expression  "result.Body.DiagnosticsProfile == null                      || result.Body.DiagnosticsProfile.BootDiagnostics == null                      || result.Body.DiagnosticsProfile.BootDiagnostics.Enabled == null                      || !result.Body.DiagnosticsProfile.BootDiagnostics.Enabled.Value                      || result.Body.DiagnosticsProfile.BootDiagnostics.StorageUri == null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetStorageAccountNameFromStorageProfile,The conditional expression  "this.VM == null                  || this.VM.StorageProfile == null                  || this.VM.StorageProfile.OsDisk == null                  || this.VM.StorageProfile.OsDisk.Vhd == null                  || this.VM.StorageProfile.OsDisk.Vhd.Uri == null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The conditional expression  "(CurrentConfig == null)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration") == null)              || (int.Parse(CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/@overallQuotaInMB").Value) < 4096)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters") == null)              || (!CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/@scheduledTransferPeriod").                      Value.Equals("PT1M"' StringComparison.InvariantCultureIgnoreCase))              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration") == null)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckStorageAnalytics,The conditional expression  "(currentConfig == null)                  || (currentConfig.Logging == null)                  || ((currentConfig.Logging.LoggingOperations & LoggingOperations.All) != LoggingOperations.All)                  || (currentConfig.MinuteMetrics == null)                  || (currentConfig.MinuteMetrics.MetricsLevel <= 0)                  || (currentConfig.MinuteMetrics.RetentionDays < 0)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,GetExtensionStatusMessage,The conditional expression  "(context == null) ||                      (context.Statuses == null) ||                      (context.Statuses.Count < 1) ||                      (string.IsNullOrWhiteSpace(context.Statuses[0].Message))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsOsVolumeEncrypted,The conditional expression  "osEncryptionSettings != null                          && osEncryptionSettings.DiskEncryptionKey != null                          && !String.IsNullOrEmpty(osEncryptionSettings.DiskEncryptionKey.SecretUrl)                          && osEncryptionSettings.Enabled == true"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsAzureDiskEncryptionExtension,The conditional expression  "(vmExtension != null) &&                          (vmExtension.Publisher != null) &&                          (vmExtension.VirtualMachineExtensionType != null) &&                          (vmExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase)) &&                          (vmExtension.VirtualMachineExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.ExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,IsAzureDiskEncryptionExtension,The conditional expression  "(vmExtension != null) &&                          (vmExtension.Publisher != null) &&                          (vmExtension.VirtualMachineExtensionType != null) &&                          (vmExtension.Publisher.Equals(this.ExtensionPublisherName ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultPublisher' StringComparison.InvariantCultureIgnoreCase)) &&                          (vmExtension.VirtualMachineExtensionType.Equals(this.ExtensionType ?? AzureDiskEncryptionExtensionContext.LinuxExtensionDefaultType' StringComparison.InvariantCultureIgnoreCase))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,SetAzureDiskEncryptionExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\SetAzureDiskEncryptionExtension.cs,GetExtensionStatusMessage,The conditional expression  "(context == null) ||                      (context.Statuses == null) ||                      (context.Statuses.Count < 1) ||                      (string.IsNullOrWhiteSpace(context.Statuses[0].Message))"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssDiskEncryptionStatus.cs,GetVmssDiskStatus,The conditional expression  "vmssResult.VirtualMachineProfile == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile.Extensions == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile.Extensions.Count == 0"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureVmssVMDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\VmssDiskEncryption\GetAzureVmssVMDiskEncryptionStatus.cs,GetDataDiskEncryptionStatus,The conditional expression  "vmssResult.VirtualMachineProfile == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile.Extensions == null                  || vmssResult.VirtualMachineProfile.ExtensionProfile.Extensions.Count == 0"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPatchObject,The conditional expression  "this.VirtualMachineScaleSetUpdate != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.WindowsConfiguration != null                  && this.VirtualMachineScaleSetUpdate.VirtualMachineProfile.OsProfile.LinuxConfiguration != null"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Compute.Automation,UpdateAzureRmVmss,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\VirtualMachineScaleSet\VirtualMachineScaleSetUpdateMethod.cs,BuildPutObject,The conditional expression  "this.VirtualMachineScaleSet != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.WindowsConfiguration != null                  && this.VirtualMachineScaleSet.VirtualMachineProfile.OsProfile.LinuxConfiguration != null"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.Compute,ComputeClientBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\ComputeClientBaseCmdlet.cs,ExecuteClientAction,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute,GetAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMCommand.cs,GetPowerstate,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigFileType,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Common,DiagnosticsHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Common\DiagnosticsHelper.cs,GetConfigFileType,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.Management.Storage.Models,ARMStorageService,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Storage\Adapters\ARM.Storage.4\ARMStorageService.cs,ParseResourceGroupFromId,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceId))              {                  string[] tokens = resourceId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens == null || tokens.Length < 4)                  {                      throw new ArgumentOutOfRangeException("resourceId");                  }                    return tokens[3];              }
Magic Number,Microsoft.Azure.Commands.Management.Storage.Models,ARMStorageService,C:\repos\Azure_azure-powershell\src\Common\Commands.Common.Storage\Adapters\ARM.Storage.4\ARMStorageService.cs,ParseResourceGroupFromId,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceId))              {                  string[] tokens = resourceId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens == null || tokens.Length < 4)                  {                      throw new ArgumentOutOfRangeException("resourceId");                  }                    return tokens[3];              }
Magic Number,Microsoft.WindowsAzure.Commands.Common.Extensions.DSC.Publish,ConfigurationParsingHelper,C:\repos\Azure_azure-powershell\src\ServiceManagement\Compute\Commands.ServiceManagement\IaaS\Extensions\DSC\Publish\ConfigurationParsingHelper.cs,IsLegacyAstConfiguration,The following statement contains a magic number: return                  commandNode.CommandElements.Count >= 7 &&                  String.Equals(commandParameter.Extent.Text' "configuration"' StringComparison.OrdinalIgnoreCase) &&                  String.Equals(commandParameter.Value' @"PSDesiredStateConfiguration\Configuration"'                      StringComparison.OrdinalIgnoreCase);
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  if (this.DisableWAD)                  {                      this._Helper.WriteWarning("The parameter DisableWAD is deprecated. Windows Azure Diagnostics is disabled by default.");                  }                    this._Helper.WriteVerbose("Retrieving VM...");                    var selectedVM = ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName);                  var selectedVMStatus = ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView;                    if (selectedVM == null)                  {                      var subscriptionId = this.DefaultContext.Subscription.Id;                      this._Helper.WriteError("No virtual machine with name {0} in resource group {1} in subscription {2} found"' this.VMName' this.ResourceGroupName' subscriptionId);                      return;                  }                    var osdisk = selectedVM.StorageProfile.OsDisk;                    if (String.IsNullOrEmpty(this.OSType))                  {                      this.OSType = osdisk.OsType.ToString();                  }                  if (String.IsNullOrEmpty(this.OSType))                  {                      this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"'                          AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux);                      return;                  }                    var disks = selectedVM.StorageProfile.DataDisks;                    var sapmonPublicConfig = new List<KeyValuePair>();                  var sapmonPrivateConfig = new List<KeyValuePair>();                  var cpuOvercommit = 0;                  var memOvercommit = 0;                  var vmsize = selectedVM.HardwareProfile.VmSize;                  switch (vmsize)                  {                      case AEMExtensionConstants.VMSizeExtraSmall:                      case AEMExtensionConstants.VMSizeStandard_A0:                      case AEMExtensionConstants.VMSizeBasic_A0:                          vmsize = "ExtraSmall (A0)";                          WriteVerbose("VM Size is ExtraSmall - setting overcommitted setting");                          cpuOvercommit = 1;                          break;                      case "Small":                          vmsize = "Small (A1)";                          break;                      case "Medium":                          vmsize = "Medium (A2)";                          break;                      case "Large":                          vmsize = "Large (A3)";                          break;                      case "ExtraLarge":                          vmsize = "ExtraLarge (A4)";                          break;                  }                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vmsize"' Value = vmsize });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.role"' Value = "IaaS" });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.memory.isovercommitted"' Value = memOvercommit });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.cpu.isovercommitted"' Value = cpuOvercommit });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "script.version"' Value = AEMExtensionConstants.CurrentScriptVersion });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "verbose"' Value = "0" });                  sapmonPublicConfig.Add(new KeyValuePair() { Key = "href"' Value = "http://aka.ms/sapaem" });                    var vmSLA = this._Helper.GetVMSLA(selectedVM);                  if (vmSLA.HasSLA)                  {                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.sla.throughput"' Value = vmSLA.TP });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "vm.sla.iops"' Value = vmSLA.IOPS });                  }                    // Get Disks                  var accounts = new Dictionary<string' string>(StringComparer.InvariantCultureIgnoreCase);                  if (osdisk.ManagedDisk == null)                  {                      var accountName = this._Helper.GetStorageAccountFromUri(osdisk.Vhd.Uri);                      var storageKey = this._Helper.GetAzureStorageKeyFromCache(accountName);                      accounts.Add(accountName' storageKey);                        this._Helper.WriteHost("[INFO] Adding configuration for OS disk");                        var caching = osdisk.Caching;                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = this._Helper.GetDiskName(osdisk.Vhd.Uri) });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.caching"' Value = caching });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.account"' Value = accountName });                      if (this._Helper.IsPremiumStorageAccount(accountName))                      {                          WriteVerbose("OS Disk Storage Account is a premium account - adding SLAs for OS disk");                          var sla = this._Helper.GetDiskSLA(osdisk);                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.throughput"' Value = sla.TP });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.iops"' Value = sla.IOPS });                      }                      else                      {                          WriteVerbose("OS Disk Storage Account is a standard account");                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_STANDARD });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.connminute"' Value = (accountName + ".minute") });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.connhour"' Value = (accountName + ".hour") });                      }                  }                  else                  {                      var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(this._Helper.GetResourceGroupFromId(osdisk.ManagedDisk.Id)'                           this._Helper.GetResourceNameFromId(osdisk.ManagedDisk.Id));                      if (osDiskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                      {                          WriteVerbose("OS Disk Storage Account is a premium account - adding SLAs for OS disk");                          var sla = this._Helper.GetDiskSLA(osDiskMD.DiskSizeGB' null);                          var caching = osdisk.Caching;                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.name"' Value = this._Helper.GetResourceNameFromId(osdisk.ManagedDisk.Id) });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.caching"' Value = caching });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.type"' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.throughput"' Value = sla.TP });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "osdisk.sla.iops"' Value = sla.IOPS });                      }                      else                      {                          this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available.");                      }                  }                    // Get Storage accounts from disks                  var diskNumber = 1;                  foreach (var disk in disks)                  {                      if (disk.ManagedDisk != null)                      {                          var diskMD = ComputeClient.ComputeManagementClient.Disks.Get(this._Helper.GetResourceGroupFromId(disk.ManagedDisk.Id)'                              this._Helper.GetResourceNameFromId(disk.ManagedDisk.Id));                            if (diskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                          {                              this._Helper.WriteVerbose("Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                              var cachingMD = disk.Caching;                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetResourceNameFromId(disk.ManagedDisk.Id) });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = cachingMD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM_MD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = sla.TP });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = sla.IOPS });                              this._Helper.WriteVerbose("Done - Data Disk {0} is a Premium Managed Disk - adding SLAs for disk"' diskNumber.ToString());                          }                          else                          {                              this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported. Extension will be installed but no disk metrics will be available.");                            }                      }                      else                      {                            var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                          if (!accounts.ContainsKey(accountName))                          {                              var storageKey = this._Helper.GetAzureStorageKeyFromCache(accountName);                              accounts.Add(accountName' storageKey);                          }                            this._Helper.WriteHost("[INFO] Adding configuration for data disk {0}"' disk.Name);                          var caching = disk.Caching;                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.lun." + diskNumber' Value = disk.Lun });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.name." + diskNumber' Value = this._Helper.GetDiskName(disk.Vhd.Uri) });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.caching." + diskNumber' Value = caching });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.account." + diskNumber' Value = accountName });                            if (this._Helper.IsPremiumStorageAccount(accountName))                          {                              this._Helper.WriteVerbose("Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString());                              var sla = this._Helper.GetDiskSLA(disk);                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_PREMIUM });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.throughput." + diskNumber' Value = sla.TP });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.sla.iops." + diskNumber' Value = sla.IOPS });                              this._Helper.WriteVerbose("Done - Data Disk {0} Storage Account is a premium account - adding SLAs for disk"' diskNumber.ToString());                            }                          else                          {                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.type." + diskNumber' Value = AEMExtensionConstants.DISK_TYPE_STANDARD });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connminute." + diskNumber' Value = (accountName + ".minute") });                              sapmonPublicConfig.Add(new KeyValuePair() { Key = "disk.connhour." + diskNumber' Value = (accountName + ".hour") });                          }                      }                      diskNumber += 1;                  }                    //Check storage accounts for analytics                  foreach (var account in accounts)                  {                      this._Helper.WriteVerbose("Testing Storage Metrics for {0}"' account.Key);                        var storage = this._Helper.GetStorageAccountFromCache(account.Key);                        if (!this._Helper.IsPremiumStorageAccount(storage))                      {                          if (!this.SkipStorage.IsPresent)                          {                              var currentConfig = this._Helper.GetStorageAnalytics(storage.Name);                                if (!this._Helper.CheckStorageAnalytics(storage.Name' currentConfig))                              {                                  this._Helper.WriteHost("[INFO] Enabling Storage Account Metrics for storage account {0}"' storage.Name);                                    // Enable analytics on storage accounts                                  this.SetStorageAnalytics(storage.Name);                              }                          }                            var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                          var hourUri = endpoint + "$MetricsHourPrimaryTransactionsBlob";                          var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                            this._Helper.WriteHost("[INFO] Adding Storage Account Metric information for storage account {0}"' storage.Name);                            sapmonPrivateConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.key")' Value = account.Value });                          sapmonPrivateConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.key")' Value = account.Value });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.uri")' Value = hourUri });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.uri")' Value = minuteUri });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.name")' Value = storage.Name });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.name")' Value = storage.Name });                      }                      else                      {                          this._Helper.WriteHost("[INFO] {0} is of type {1} - Storage Account Metrics are not available for Premium Type Storage."' storage.Name' storage.SkuName());                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".hour.ispremium")' Value = 1 });                          sapmonPublicConfig.Add(new KeyValuePair() { Key = ((storage.Name) + ".minute.ispremium")' Value = 1 });                      }                  }                    WriteVerbose("Chechking if WAD needs to be configured");                  // Enable VM Diagnostics                  if (this.EnableWAD.IsPresent)                  {                      this._Helper.WriteHost("[INFO] Enabling IaaSDiagnostics for VM {0}"' selectedVM.Name);                      KeyValuePair wadstorage = null;                      if (String.IsNullOrEmpty(this.WADStorageAccountName))                      {                          KeyValuePair<string' string>? wadstorageTemp = accounts.Cast<KeyValuePair<string' string>?>().                              FirstOrDefault(accTemp => !this._Helper.IsPremiumStorageAccount(accTemp.Value.Key));                          if (wadstorageTemp.HasValue)                          {                              wadstorage = new KeyValuePair(wadstorageTemp.Value.Key' wadstorageTemp.Value.Value);                          }                      }                      else                      {                          wadstorage = new KeyValuePair(this.WADStorageAccountName' this._Helper.GetAzureStorageKeyFromCache(WADStorageAccountName));                      }                        if (wadstorage == null)                      {                          this._Helper.WriteError("A standard storage account is required. Please use parameter WADStorageAccountName to specify a standard storage account you want to use for this VM.");                          return;                      }                        selectedVM = SetAzureVMDiagnosticsExtensionC(selectedVM' selectedVMStatus' wadstorage.Key' wadstorage.Value as string);                        var storage = this._Helper.GetStorageAccountFromCache(wadstorage.Key);                      var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                      var wadUri = endpoint + AEMExtensionConstants.WadTableName;                        sapmonPrivateConfig.Add(new KeyValuePair() { Key = "wad.key"' Value = wadstorage.Value });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.name"' Value = wadstorage.Key });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.isenabled"' Value = 1 });                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.uri"' Value = wadUri });                  }                  else                  {                      sapmonPublicConfig.Add(new KeyValuePair() { Key = "wad.isenabled"' Value = 0 });                  }                    ExtensionConfig jsonPublicConfig = new ExtensionConfig();                  jsonPublicConfig.Config = sapmonPublicConfig;                    ExtensionConfig jsonPrivateConfig = new ExtensionConfig();                  jsonPrivateConfig.Config = sapmonPrivateConfig;                    this._Helper.WriteHost("[INFO] Updating Azure Enhanced Monitoring Extension for SAP configuration - Please wait...");                    WriteVerbose("Installing AEM extension");                    Version aemVersion = this._Helper.GetExtensionVersion(selectedVM' selectedVMStatus' OSType' AEMExtensionConstants.AEMExtensionType[OSType]' AEMExtensionConstants.AEMExtensionPublisher[OSType]);                    var op = this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                      this.ResourceGroupName' this.VMName' AEMExtensionConstants.AEMExtensionDefaultName[OSType]'                      new VirtualMachineExtension()                      {                          Publisher = AEMExtensionConstants.AEMExtensionPublisher[OSType]'                          VirtualMachineExtensionType = AEMExtensionConstants.AEMExtensionType[OSType]'                          TypeHandlerVersion = aemVersion.ToString(2)'                          Settings = jsonPublicConfig'                          ProtectedSettings = jsonPrivateConfig'                          Location = selectedVM.Location'                          AutoUpgradeMinorVersion = true'                          ForceUpdateTag = DateTime.Now.Ticks.ToString()                      }).GetAwaiter().GetResult();                    this._Helper.WriteHost("[INFO] Azure Enhanced Monitoring Extension for SAP configuration updated. It can take up to 15 Minutes for the monitoring data to appear in the SAP system.");                  this._Helper.WriteHost("[INFO] You can check the configuration of a virtual machine by calling the Test-AzureRmVMAEMExtension commandlet.");                    var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                  WriteObject(result);              });
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetAzureVMDiagnosticsExtensionC,The following statement contains a magic number: vmExtParameters.TypeHandlerVersion = wadVersion.ToString(2);
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,SetStorageAnalytics,The following statement contains a magic number: int retentionDays = 13;
Magic Number,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,TestAzureRmVMAEMExtension,The following statement contains a magic number: this.WaitTimeInMinutes = 15;
Magic Number,Microsoft.Azure.Commands.Compute,TestAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\TestAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  AEMTestResult rootResult = new AEMTestResult();                  rootResult.TestName = "Azure Enhanced Monitoring Test";                    //#################################################                  //# Check if VM exists                  //#################################################                  this._Helper.WriteHost("VM Existance check for {0} ..."' false' this.VMName);                  var selectedVM = this.ComputeClient.ComputeManagementClient.VirtualMachines.Get(this.ResourceGroupName' this.VMName);                  var selectedVMStatus = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(this.ResourceGroupName' this.VMName).Body.InstanceView;                      if (selectedVM == null)                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Existance check for {0}"' false' this.VMName));                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      return;                  }                  else                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Existance check for {0}"' true' this.VMName));                      this._Helper.WriteHost("OK "' ConsoleColor.Green);                    }                  //#################################################                      //#################################################                  var osdisk = selectedVM.StorageProfile.OsDisk;                  if (String.IsNullOrEmpty(this.OSType))                  {                      this.OSType = osdisk.OsType.ToString();                  }                  if (String.IsNullOrEmpty(this.OSType))                  {                      this._Helper.WriteError("Could not determine Operating System of the VM. Please provide the Operating System type ({0} or {1}) via parameter OSType"' AEMExtensionConstants.OSTypeWindows' AEMExtensionConstants.OSTypeLinux);                      return;                  }                  //#################################################                  //# Check for Guest Agent                  //#################################################                  this._Helper.WriteHost("VM Guest Agent check..."' false);                  var vmAgentStatus = false;                    //# It is not possible to detect if VM Agent is installed on ARM                  vmAgentStatus = true;                  if (!vmAgentStatus)                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Guest Agent check"' false));                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      this._Helper.WriteWarning(AEMExtensionConstants.MissingGuestAgentWarning);                      return;                  }                  else                  {                      rootResult.PartialResults.Add(new AEMTestResult("VM Guest Agent check"' true));                      this._Helper.WriteHost("OK "' ConsoleColor.Green);                  }                  //#################################################                      //#################################################                      //#################################################                  //# Check for Azure Enhanced Monitoring Extension for SAP                  //#################################################                  this._Helper.WriteHost("Azure Enhanced Monitoring Extension for SAP Installation check..."' false);                    string monPublicConfig = null;                  var monExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]);                  if (monExtension != null)                  {                      monPublicConfig = monExtension.Settings.ToString();                  }                    if (monExtension == null || String.IsNullOrEmpty(monPublicConfig))                  {                      rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' false));                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                  }                  else                  {                      rootResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP Installation check"' true));                      this._Helper.WriteHost("OK "' ConsoleColor.Green);                  }                  //#################################################                      //#################################################                    var accounts = new List<string>();                  //var osdisk = selectedVM.StorageProfile.OsDisk;                    var osaccountName = String.Empty;                  if (osdisk.ManagedDisk == null)                  {                      var accountName = this._Helper.GetStorageAccountFromUri(osdisk.Vhd.Uri);                      osaccountName = accountName;                      accounts.Add(accountName);                  }                    var dataDisks = selectedVM.StorageProfile.DataDisks;                  foreach (var disk in dataDisks)                  {                      if (disk.ManagedDisk != null)                      {                                                  continue;                      }                      var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                      if (!accounts.Contains(accountName))                      {                          accounts.Add(accountName);                      }                  }                    //#################################################                  //# Check storage metrics                  //#################################################                  this._Helper.WriteHost("Storage Metrics check...");                  var metricsResult = new AEMTestResult("Storage Metrics check");                  rootResult.PartialResults.Add(metricsResult);                  if (!this.SkipStorageCheck.IsPresent)                  {                      foreach (var account in accounts)                      {                          var accountResult = new AEMTestResult("Storage Metrics check for {0}"' account);                          metricsResult.PartialResults.Add(accountResult);                            this._Helper.WriteHost("\tStorage Metrics check for {0}..."' account);                          var storage = this._Helper.GetStorageAccountFromCache(account);                            if (!this._Helper.IsPremiumStorageAccount(storage))                          {                              this._Helper.WriteHost("\t\tStorage Metrics configuration check for {0}..."' false' account);                              var currentConfig = this._Helper.GetStorageAnalytics(account);                                bool storageConfigOk = false;                              if (!this._Helper.CheckStorageAnalytics(account' currentConfig))                              {                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics configuration check for {0}"' false' account));                                  this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                                }                              else                              {                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics configuration check for {0}"' true' account));                                  this._Helper.WriteHost("OK "' ConsoleColor.Green);                                  storageConfigOk = true;                              }                                this._Helper.WriteHost("\t\tStorage Metrics data check for {0}..."' false' account);                              var filterMinute = Microsoft.WindowsAzure.Storage.Table.TableQuery.                                  GenerateFilterConditionForDate("Timestamp"' "gt"' DateTime.Now.AddMinutes(AEMExtensionConstants.ContentAgeInMinutes * -1));                                if (storageConfigOk && this._Helper.CheckTableAndContent(account' "$MetricsMinutePrimaryTransactionsBlob"' filterMinute' "."' false' this.WaitTimeInMinutes))                                {                                  this._Helper.WriteHost("OK "' ConsoleColor.Green);                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics data check for {0}"' true' account));                              }                              else                              {                                  accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics data check for {0}"' false' account));                                  this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                              }                          }                          else                          {                              accountResult.PartialResults.Add(new AEMTestResult("Storage Metrics not available for Premium Storage account {0}"' true' account));                              this._Helper.WriteHost("\t\tStorage Metrics not available for Premium Storage account {0}..."' false' account);                              this._Helper.WriteHost("OK "' ConsoleColor.Green);                          }                      }                      if (accounts.Count == 0)                      {                          metricsResult.Result = true;                      }                  }                  else                  {                      metricsResult.Result = true;                      this._Helper.WriteHost("Skipped "' ConsoleColor.Yellow);                  }                  //#################################################                   //#################################################                          //#################################################                  //# Check Azure Enhanced Monitoring Extension for SAP Configuration                  //#################################################                  this._Helper.WriteHost("Azure Enhanced Monitoring Extension for SAP public configuration check..."' false);                  var aemConfigResult = new AEMTestResult("Azure Enhanced Monitoring Extension for SAP public configuration check");                  rootResult.PartialResults.Add(aemConfigResult);                    JObject sapmonPublicConfig = null;                  if (monExtension != null)                  {                      this._Helper.WriteHost(""); //New Line                        sapmonPublicConfig = JsonConvert.DeserializeObject(monPublicConfig) as JObject;                        StorageAccount storage = null;                      var osaccountIsPremium = false;                      if (!String.IsNullOrEmpty(osaccountName))                      {                          storage = this._Helper.GetStorageAccountFromCache(osaccountName);                          osaccountIsPremium = this._Helper.IsPremiumStorageAccount(osaccountName);                      }                        var vmSize = selectedVM.HardwareProfile.VmSize;                      this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Size"' "vmsize"' sapmonPublicConfig' vmSize' aemConfigResult);                      this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Memory"' "vm.memory.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult);                      this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM CPU"' "vm.cpu.isovercommitted"' sapmonPublicConfig' 0' aemConfigResult);                      this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: Script Version"' "script.version"' sapmonPublicConfig' aemConfigResult);                        var vmSLA = this._Helper.GetVMSLA(selectedVM);                      if (vmSLA.HasSLA)                      {                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA IOPS"' "vm.sla.iops"' sapmonPublicConfig' vmSLA.IOPS' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM SLA Throughput"' "vm.sla.throughput"' sapmonPublicConfig' vmSLA.TP' aemConfigResult);                      }                        int wadEnabled;                      if (this._Helper.GetMonPropertyValue("wad.isenabled"' sapmonPublicConfig' out wadEnabled))                      {                          if (wadEnabled == 1)                          {                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult);                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult);                          }                          else                          {                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD name"' "wad.name"' sapmonPublicConfig' aemConfigResult' false);                              this._Helper.MonitoringPropertyExists("Azure Enhanced Monitoring Extension for SAP public configuration check: WAD URI"' "wad.uri"' sapmonPublicConfig' aemConfigResult' false);                          }                      }                      else                      {                          string message = "Azure Enhanced Monitoring Extension for SAP public configuration check:";                          aemConfigResult.PartialResults.Add(new AEMTestResult(message' false));                          this._Helper.WriteHost(message + "..."' false);                          this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      }                        if (!osaccountIsPremium && storage != null)                      {                          var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                          var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Key"' "osdisk.connminute"' sapmonPublicConfig' osaccountName + ".minute"' aemConfigResult);                          //# TODO: check uri config                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Value"' osaccountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk URI Name"' osaccountName + ".minute.name"' sapmonPublicConfig' osaccountName' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult);                        }                      else if (storage != null)                      {                          var sla = this._Helper.GetDiskSLA(osdisk);                            this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult);                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult);                        }                      else                      {                          var osDiskMD = ComputeClient.ComputeManagementClient.Disks.Get(this._Helper.GetResourceGroupFromId(osdisk.ManagedDisk.Id)'                              this._Helper.GetResourceNameFromId(osdisk.ManagedDisk.Id));                          if (osDiskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                          {                              var sla = this._Helper.GetDiskSLA(osDiskMD.DiskSizeGB' null);                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk Type"' "osdisk.type"' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult);                              this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA IOPS"' "osdisk.sla.throughput"' sapmonPublicConfig' sla.TP' aemConfigResult);                              this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS Disk SLA Throughput"' "osdisk.sla.iops"' sapmonPublicConfig' sla.IOPS' aemConfigResult);                          }                          else                          {                              this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported.");                          }                      }                        if (osdisk.ManagedDisk == null)                      {                          this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM OS disk name"' "osdisk.name"' sapmonPublicConfig' this._Helper.GetDiskName(osdisk.Vhd.Uri)' aemConfigResult);                      }                          var diskNumber = 1;                      foreach (var disk in dataDisks)                      {                          if (disk.ManagedDisk != null)                          {                              var diskMD = ComputeClient.ComputeManagementClient.Disks.Get(this._Helper.GetResourceGroupFromId(disk.ManagedDisk.Id)'                                  this._Helper.GetResourceNameFromId(disk.ManagedDisk.Id));                                if (diskMD.Sku.Name == StorageAccountTypes.PremiumLRS)                              {                                  var sla = this._Helper.GetDiskSLA(diskMD.DiskSizeGB' null);                                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM_MD' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult);                              }                              else                              {                                  this._Helper.WriteWarning("[WARN] Standard Managed Disks are not supported.");                                }                          }                          else                          {                                var accountName = this._Helper.GetStorageAccountFromUri(disk.Vhd.Uri);                              storage = this._Helper.GetStorageAccountFromCache(accountName);                              var accountIsPremium = this._Helper.IsPremiumStorageAccount(storage);                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " LUN"' "disk.lun." + diskNumber' sapmonPublicConfig' disk.Lun' aemConfigResult);                              if (!accountIsPremium)                              {                                  var endpoint = this._Helper.GetAzureSAPTableEndpoint(storage);                                  var minuteUri = endpoint + "$MetricsMinutePrimaryTransactionsBlob";                                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Key"' "disk.connminute." + diskNumber' sapmonPublicConfig' accountName + ".minute"' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Value"' accountName + ".minute.uri"' sapmonPublicConfig' minuteUri' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " URI Name"' accountName + ".minute.name"' sapmonPublicConfig' accountName' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_STANDARD' aemConfigResult);                                }                              else                              {                                  var sla = this._Helper.GetDiskSLA(disk);                                    this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " Type"' "disk.type." + diskNumber' sapmonPublicConfig' AEMExtensionConstants.DISK_TYPE_PREMIUM' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA IOPS"' "disk.sla.throughput." + diskNumber' sapmonPublicConfig' sla.TP' aemConfigResult);                                  this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " SLA Throughput"' "disk.sla.iops." + diskNumber' sapmonPublicConfig' sla.IOPS' aemConfigResult);                              }                                this._Helper.CheckMonitoringProperty("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disk " + diskNumber + " name"' "disk.name." + diskNumber' sapmonPublicConfig' this._Helper.GetDiskName(disk.Vhd.Uri)' aemConfigResult);                          }                            diskNumber += 1;                      }                      if (dataDisks.Count == 0)                      {                          aemConfigResult.PartialResults.Add(new AEMTestResult("Azure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks"' true));                          this._Helper.WriteHost("\tAzure Enhanced Monitoring Extension for SAP public configuration check: VM Data Disks "' false);                          this._Helper.WriteHost("OK "' ConsoleColor.Green);                      }                  }                  else                  {                      aemConfigResult.Result = false;                      this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                  }                  //#################################################                   //#################################################                          //#################################################                  //# Check WAD Configuration                  //#################################################                  int iswadEnabled;                  if (this._Helper.GetMonPropertyValue("wad.isenabled"' sapmonPublicConfig' out iswadEnabled) && iswadEnabled == 1)                  {                      var wadConfigResult = new AEMTestResult("IaaSDiagnostics check");                      rootResult.PartialResults.Add(wadConfigResult);                        string wadPublicConfig = null;                      var wadExtension = this._Helper.GetExtension(selectedVM' AEMExtensionConstants.WADExtensionType[this.OSType]' AEMExtensionConstants.WADExtensionPublisher[this.OSType]);                      if (wadExtension != null)                      {                          wadPublicConfig = wadExtension.Settings.ToString();                      }                        this._Helper.WriteHost("IaaSDiagnostics check..."' false);                      if (wadExtension != null)                      {                          this._Helper.WriteHost(""); //New Line                          this._Helper.WriteHost("\tIaaSDiagnostics configuration check..."' false);                            var currentJSONConfig = JsonConvert.DeserializeObject(wadPublicConfig) as Newtonsoft.Json.Linq.JObject;                          var base64 = currentJSONConfig["xmlCfg"] as Newtonsoft.Json.Linq.JValue;                          System.Xml.XmlDocument currentConfig = new System.Xml.XmlDocument();                          currentConfig.LoadXml(Encoding.UTF8.GetString(System.Convert.FromBase64String(base64.Value.ToString())));                              if (!this._Helper.CheckWADConfiguration(currentConfig))                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics configuration check"' false));                              this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                          }                          else                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics configuration check"' true));                              this._Helper.WriteHost("OK "' ConsoleColor.Green);                          }                            this._Helper.WriteHost("\tIaaSDiagnostics performance counters check...");                          var wadPerfCountersResult = new AEMTestResult("IaaSDiagnostics performance counters check");                          wadConfigResult.PartialResults.Add(wadPerfCountersResult);                            foreach (var perfCounter in AEMExtensionConstants.PerformanceCounters[this.OSType])                          {                              this._Helper.WriteHost("\t\tIaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false);                              var currentCounter = currentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration[@counterSpecifier = '" + perfCounter.counterSpecifier + "']");                              if (currentCounter != null)                              {                                  wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' true));                                  this._Helper.WriteHost("OK "' ConsoleColor.Green);                              }                              else                              {                                  wadPerfCountersResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics performance counters " + (perfCounter.counterSpecifier) + "check..."' false));                                  this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                              }                          }                            string wadstorage;                          if (!this._Helper.GetMonPropertyValue<string>("wad.name"' sapmonPublicConfig' out wadstorage))                          {                              wadstorage = null;                          }                            this._Helper.WriteHost("\tIaaSDiagnostics data check..."' false);                            var deploymentId = String.Empty;                          var roleName = String.Empty;                            var extStatuses = this._Helper.GetExtension(selectedVM' selectedVMStatus' AEMExtensionConstants.AEMExtensionType[this.OSType]' AEMExtensionConstants.AEMExtensionPublisher[this.OSType]);                          InstanceViewStatus aemStatus = null;                          if (extStatuses != null && extStatuses.Statuses != null)                          {                              aemStatus = extStatuses.Statuses.FirstOrDefault(stat => Regex.Match(stat.Message' "deploymentId=(\\S*) roleInstance=(\\S*)").Success);                          }                            if (aemStatus != null)                          {                              var match = Regex.Match(aemStatus.Message' "deploymentId=(\\S*) roleInstance=(\\S*)");                              deploymentId = match.Groups[1].Value;                              roleName = match.Groups[2].Value;                          }                          else                          {                              this._Helper.WriteWarning("DeploymentId and RoleInstanceName could not be parsed from extension status");                          }                              var ok = false;                          if (!this.SkipStorageCheck.IsPresent && (!String.IsNullOrEmpty(deploymentId)) && (!String.IsNullOrEmpty(roleName)) && (!String.IsNullOrEmpty(wadstorage)))                          {                                if (this.OSType.Equals(AEMExtensionConstants.OSTypeLinux' StringComparison.InvariantCultureIgnoreCase))                              {                                  ok = this._Helper.CheckDiagnosticsTable(wadstorage' deploymentId'                                      selectedVM.OsProfile.ComputerName' "."' this.OSType' this.WaitTimeInMinutes);                              }                              else                              {                                  string filterMinute = "Role eq '" + AEMExtensionConstants.ROLECONTENT + "' and DeploymentId eq '"                                      + deploymentId + "' and RoleInstance eq '" + roleName + "' and PartitionKey gt '0"                                      + DateTime.UtcNow.AddMinutes(AEMExtensionConstants.ContentAgeInMinutes * -1).Ticks + "'";                                  ok = this._Helper.CheckTableAndContent(wadstorage' AEMExtensionConstants.WadTableName'                                      filterMinute' "."' false' this.WaitTimeInMinutes);                              }                              }                          if (ok && !this.SkipStorageCheck.IsPresent)                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics data check"' true));                              this._Helper.WriteHost("OK "' ConsoleColor.Green);                          }                          else if (!this.SkipStorageCheck.IsPresent)                          {                              wadConfigResult.PartialResults.Add(new AEMTestResult("IaaSDiagnostics data check"' false));                              this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                          }                          else                          {                              this._Helper.WriteHost("Skipped "' ConsoleColor.Yellow);                          }                      }                      else                      {                          wadConfigResult.Result = false;                          this._Helper.WriteHost("NOT OK "' ConsoleColor.Red);                      }                  }                  //#################################################                   //#################################################                    if (!rootResult.Result)                  {                      this._Helper.WriteHost("The script found some configuration issues. Please run the Set-AzureRmVMExtension commandlet to update the configuration of the virtual machine!");                  }                    this._Helper.WriteVerbose("TestAzureRmVMAEMExtension Done (" + rootResult.Result + ")");                    var result = ComputeAutoMapperProfile.Mapper.Map<AEMTestResult>(rootResult);                  WriteObject(result);              });
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureVMCustomScriptExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\CustomScript\SetAzureVMCustomScriptExtensionCommand.cs,GetSasUrlStr,The following statement contains a magic number: var sasToken = cloudBlob.GetSharedAccessSignature(                  new SharedAccessBlobPolicy()                  {                      SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                      Permissions = SharedAccessBlobPermissions.Read                  });
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ValidateBackupScheduleSettings,The following statement contains a magic number: if (LogBackupFrequencyInMinutes == null || LogBackupFrequencyInMinutes % 5 != 0)              {                  throw new Exception("LogBackupFrequencyInMinutes cannot be null or should be multiple of 5 when BackupScheduleType is set to Manual");              }
Magic Number,Microsoft.Azure.Commands.Compute,SetAzureSqlServerExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\SetAzureVMSqlServerExtensionCommand.cs,ExecuteCmdlet,The following statement contains a magic number: while (count <= 2)              {                  try                  {                      op = VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                          ResourceGroupName'                          VMName'                          Name ?? VirtualMachineSqlServerExtensionContext.ExtensionPublishedName'                          parameters).GetAwaiter().GetResult();                      break;                  }                  catch (Rest.Azure.CloudException ex)                  {                      var errorReturned = JsonConvert.DeserializeObject<PSComputeLongRunningOperation>(ex.Response.Content);                      if ("Failed".Equals(errorReturned.Status)                          && errorReturned.Error != null && "InternalExecutionError".Equals(errorReturned.Error.Code))                      {                          count++;                      }                      else                      {                          base.ThrowTerminatingError(new ErrorRecord(ex' "InvalidResult"' ErrorCategory.InvalidResult' null));                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  const string fullAddressPrefix = "full address:s:";                  const string promptCredentials = "prompt for credentials:i:1";                  const int defaultPort = 3389;                    string address = string.Empty;                  int port = defaultPort;                    // Get Azure VM                  var vmResponse = this.VirtualMachineClient.Get(this.ResourceGroupName' this.Name);                    var nicId = vmResponse.NetworkProfile.NetworkInterfaces.First().Id;                    // Get the NIC                  var nicResourceGroupName = this.GetResourceGroupName(nicId);                    var nicName = this.GetResourceName(nicId' NetworkInterfaceResouce);                    var nic = this.NetworkClient.NetworkManagementClient.NetworkInterfaces.Get(nicResourceGroupName' nicName);                    if (nic.IpConfigurations.First().PublicIPAddress != null && !string.IsNullOrEmpty(nic.IpConfigurations.First().PublicIPAddress.Id))                  {                      // Get PublicIPAddress resource if present                      address = this.GetAddressFromPublicIPResource(nic.IpConfigurations.First().PublicIPAddress.Id);                  }                  else if (nic.IpConfigurations.First().LoadBalancerInboundNatRules.Any())                  {                      address = string.Empty;                        // Get ipaddress and port from loadbalancer                      foreach (var nicRuleRef in nic.IpConfigurations.First().LoadBalancerInboundNatRules)                      {                          var lbName = this.GetResourceName(nicRuleRef.Id' LoadBalancerResouce);                          var lbResourceGroupName = this.GetResourceGroupName(nicRuleRef.Id);                            var loadbalancer =                              this.NetworkClient.NetworkManagementClient.LoadBalancers.Get(lbResourceGroupName' lbName);                            // Iterate over the InboundNatRules where Backendport = 3389                          var inboundRule =                              loadbalancer.InboundNatRules.Where(                                  rule =>                                  rule.BackendPort == defaultPort                                  && string.Equals(                                      rule.Id'                                      nicRuleRef.Id'                                      StringComparison.OrdinalIgnoreCase));                            if (inboundRule.Any())                          {                              port = inboundRule.First().FrontendPort.Value;                                // Get the corresponding frontendIPConfig -> publicIPAddress                              var frontendIPConfig =                                  loadbalancer.FrontendIPConfigurations.First(                                      frontend =>                                      string.Equals(                                          inboundRule.First().FrontendIPConfiguration.Id'                                          frontend.Id'                                          StringComparison.OrdinalIgnoreCase));                                if (frontendIPConfig.PublicIPAddress != null)                              {                                  address = this.GetAddressFromPublicIPResource(frontendIPConfig.PublicIPAddress.Id);                                  break;                              }                          }                      }                        if (string.IsNullOrEmpty(address))                      {                          throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicLoadBalancer);                      }                  }                  else                  {                      throw new ArgumentException(Microsoft.Azure.Commands.Compute.Properties.Resources.VirtualMachineNotAssociatedWithPublicIPOrPublicLoadBalancer);                  }                    // Write to file                  string rdpFilePath = this.LocalPath ?? Path.GetTempFileName();                    using (var file = new StreamWriter(rdpFilePath))                  {                      file.WriteLine(fullAddressPrefix + address + ":" + port);                      file.WriteLine(promptCredentials);                  }                    if (Launch.IsPresent)                  {                      var startInfo = new ProcessStartInfo                      {                          CreateNoWindow = true'                          WindowStyle = ProcessWindowStyle.Hidden                      };                        if (this.LocalPath == null)                      {                          string scriptGuid = Guid.NewGuid().ToString();                            string launchRDPScript = Path.GetTempPath() + scriptGuid + ".bat";                          using (var scriptStream = File.OpenWrite(launchRDPScript))                          {                              var writer = new StreamWriter(scriptStream);                              writer.WriteLine("start /wait mstsc.exe " + rdpFilePath);                              writer.Flush();                          }                            startInfo.FileName = launchRDPScript;                      }                      else                      {                          startInfo.FileName = "mstsc.exe";                          startInfo.Arguments = rdpFilePath;                      }                        Process.Start(startInfo);                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureRemoteDesktopFileCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\RemoteDesktop\GetAzureRemoteDesktopFileCommand.cs,GetResourceGroupName,The following statement contains a magic number: return resourceId.Split('/')[4];
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureVMBootDiagnosticsDataCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMBootDiagnosticsDataCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  var result = this.VirtualMachineClient.GetWithInstanceView(this.ResourceGroupName' this.Name);                  if (result == null || result.Body == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no virtual machine"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.DiagnosticsProfile == null                      || result.Body.DiagnosticsProfile.BootDiagnostics == null                      || result.Body.DiagnosticsProfile.BootDiagnostics.Enabled == null                      || !result.Body.DiagnosticsProfile.BootDiagnostics.Enabled.Value                      || result.Body.DiagnosticsProfile.BootDiagnostics.StorageUri == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no diagnostic profile enabled"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.InstanceView == null                      || result.Body.InstanceView.BootDiagnostics == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no boot diagnostic"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (this.Windows.IsPresent                      || (this.Linux.IsPresent && !string.IsNullOrEmpty(this.LocalPath)))                  {                      var screenshotUri = new Uri(result.Body.InstanceView.BootDiagnostics.ConsoleScreenshotBlobUri);                      var localFile = this.LocalPath + screenshotUri.Segments[2];                      DownloadFromBlobUri(screenshotUri' localFile);                  }                      if (this.Linux.IsPresent)                  {                      var logUri = new Uri(result.Body.InstanceView.BootDiagnostics.SerialConsoleLogBlobUri);                        var localFile = (this.LocalPath ?? Path.GetTempPath()) + logUri.Segments[2];                        DownloadFromBlobUri(logUri' localFile);                        var sb = new StringBuilder();                      using (var reader = new StreamReader(localFile))                      {                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              sb.AppendLine(line);                          }                      };                        WriteObject(sb.ToString());                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,GetAzureVMBootDiagnosticsDataCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\GetAzureVMBootDiagnosticsDataCommand.cs,ExecuteCmdlet,The following statement contains a magic number: ExecuteClientAction(() =>              {                  var result = this.VirtualMachineClient.GetWithInstanceView(this.ResourceGroupName' this.Name);                  if (result == null || result.Body == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no virtual machine"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.DiagnosticsProfile == null                      || result.Body.DiagnosticsProfile.BootDiagnostics == null                      || result.Body.DiagnosticsProfile.BootDiagnostics.Enabled == null                      || !result.Body.DiagnosticsProfile.BootDiagnostics.Enabled.Value                      || result.Body.DiagnosticsProfile.BootDiagnostics.StorageUri == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no diagnostic profile enabled"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (result.Body.InstanceView == null                      || result.Body.InstanceView.BootDiagnostics == null)                  {                      ThrowTerminatingError                          (new ErrorRecord(                              new InvalidOperationException(string.Format(CultureInfo.InvariantCulture'                                  "no boot diagnostic"))'                              string.Empty'                              ErrorCategory.InvalidData'                              null));                  }                    if (this.Windows.IsPresent                      || (this.Linux.IsPresent && !string.IsNullOrEmpty(this.LocalPath)))                  {                      var screenshotUri = new Uri(result.Body.InstanceView.BootDiagnostics.ConsoleScreenshotBlobUri);                      var localFile = this.LocalPath + screenshotUri.Segments[2];                      DownloadFromBlobUri(screenshotUri' localFile);                  }                      if (this.Linux.IsPresent)                  {                      var logUri = new Uri(result.Body.InstanceView.BootDiagnostics.SerialConsoleLogBlobUri);                        var localFile = (this.LocalPath ?? Path.GetTempPath()) + logUri.Segments[2];                        DownloadFromBlobUri(logUri' localFile);                        var sb = new StringBuilder();                      using (var reader = new StreamReader(localFile))                      {                          string line;                          while ((line = reader.ReadLine()) != null)                          {                              sb.AppendLine(line);                          }                      };                        WriteObject(sb.ToString());                  }              });
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,FormatObject,The following statement contains a magic number: foreach (var t in resultTuples)              {                  string preTab = new string(' '' t.Item3 * 2);                  string postTab = new string(' '' totalTab - t.Item3 * 2 - t.Item1.Length);                    result += preTab + t.Item1 + postTab + ": " + t.Item2 + "\n";              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,FormatObject,The following statement contains a magic number: foreach (var t in resultTuples)              {                  string preTab = new string(' '' t.Item3 * 2);                  string postTab = new string(' '' totalTab - t.Item3 * 2 - t.Item1.Length);                    result += preTab + t.Item1 + postTab + ": " + t.Item2 + "\n";              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,VirtualMachineBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\VirtualMachineBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as JObject;                  if (isJObject != null)                  {                      var objStringValue = JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = expand                                  ? Math.Max(max' depth * 2 + property.Name.Length + 4)                                  : Math.Max(max' depth * 2 + property.Name.Length);                                var elementName = new List<string>();                                for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable)                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                      }                                      else                                      {                                          elementName.Add(elem[i].ToString());                                      }                                  }                                  else                                  {                                      if (expand)                                      {                                          tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                          max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                      }                                      else                                      {                                          elementName.Add(GetChildProperties((Object)elem[i]' true));                                      }                                  }                              }                                if (!expand)                              {                                  tupleList.Add(MakeTuple(property.Name' "{" + string.Join("' "' elementName) + "}"' depth));                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  if (expand)                                  {                                      tupleList.Add(MakeTuple(property.Name' ""' depth));                                      max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name' GetChildProperties(childObject)' depth));                                      max = Math.Max(max' property.Name.Length);                                  }                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,StrategyExecuteCmdletAsync,The following statement contains a magic number: OpenPorts = OpenPorts ?? (isWindows ? new[] { 3389' 5985 } : new[] { 22 });
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,StrategyExecuteCmdletAsync,The following statement contains a magic number: OpenPorts = OpenPorts ?? (isWindows ? new[] { 3389' 5985 } : new[] { 22 });
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,StrategyExecuteCmdletAsync,The following statement contains a magic number: OpenPorts = OpenPorts ?? (isWindows ? new[] { 3389' 5985 } : new[] { 22 });
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,CreateStandardStorageAccount,The following statement contains a magic number: do              {                  storageAccountName = GetRandomStorageAccountName(i);                  i++;              }              while (i < 10 && (bool) !client.StorageAccounts.CheckNameAvailability(storageAccountName).NameAvailable);
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetRandomStorageAccountName,The following statement contains a magic number: const int maxSubLength = 5;
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetRandomStorageAccountName,The following statement contains a magic number: const int maxResLength = 6;
Magic Number,Microsoft.Azure.Commands.Compute,NewAzureVMCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\VirtualMachine\Operation\NewAzureVMCommand.cs,GetRandomStorageAccountName,The following statement contains a magic number: const int maxVMLength = 4;
Magic Number,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The following statement contains a magic number: using (var ps = System.Management.Automation.PowerShell.Create())              {                  if (processedRangeCount >= totalRangeCount)                  {                        var progressCommand1 = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionCompleted);                      ps.Runspace = runspace;                      ps.AddScript(progressCommand1);                      ps.Invoke();                      return;                  }                    var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100);                  ps.Runspace = runspace;                  ps.AddScript(progressCommand);                  ps.Invoke();              }
Magic Number,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The following statement contains a magic number: using (var ps = System.Management.Automation.PowerShell.Create())              {                  if (processedRangeCount >= totalRangeCount)                  {                        var progressCommand1 = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionCompleted);                      ps.Runspace = runspace;                      ps.AddScript(progressCommand1);                      ps.Invoke();                      return;                  }                    var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100);                  ps.Runspace = runspace;                  ps.AddScript(progressCommand);                  ps.Invoke();              }
Magic Number,Microsoft.Azure.Commands.Compute.Models,PSSyncOutputEvents,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Models\PSSyncOutputEvents.cs,ProgressEmptyBlockDetection,The following statement contains a magic number: using (var ps = System.Management.Automation.PowerShell.Create())              {                  if (processedRangeCount >= totalRangeCount)                  {                        var progressCommand1 = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -Completed"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionCompleted);                      ps.Runspace = runspace;                      ps.AddScript(progressCommand1);                      ps.Invoke();                      return;                  }                    var progressCommand = String.Format(@"Write-Progress -Id {0} -Activity '{1}' -Status '{2}' -SecondsRemaining {3} -PercentComplete {4}"' 2' Rsrc.PSSyncOutputEventsProgressEmptyBlockDetection' Rsrc.PSSyncOutputEventsEmptyBlockDetectionDetecting' -1' ((double)processedRangeCount / totalRangeCount) * 100);                  ps.Runspace = runspace;                  ps.AddScript(progressCommand);                  ps.Invoke();              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetResourceGroupFromId,The following statement contains a magic number: if (!result.Success || result.Groups == null || result.Groups.Count < 3)              {                  throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id));              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetResourceGroupFromId,The following statement contains a magic number: return result.Groups[2].Value;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetResourceNameFromId,The following statement contains a magic number: if (!result.Success || result.Groups == null || result.Groups.Count < 3)              {                  throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id));              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetResourceNameFromId,The following statement contains a magic number: return result.Groups[5].Value;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: if (BlobUri.TryParseUri(new Uri(sBlobUri)' out blobUri))              {                  try                  {                      var account = this.GetStorageAccountFromCache(accountName);                      var resGroupName = this.GetResourceGroupFromId(account.Id);                      StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resGroupName'                          this._StorageClient' this._Subscription);                      StorageCredentials sc = storageCredentialsFactory.Create(blobUri);                      CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(sc' true);                      CloudBlobClient blobClient = cloudStorageAccount.CreateCloudBlobClient();                      CloudBlobContainer blobContainer = blobClient.GetContainerReference(blobUri.BlobContainerName);                      var cloudBlob = blobContainer.GetPageBlobReference(blobUri.BlobName);                      var sasToken = cloudBlob.GetSharedAccessSignature(                          new SharedAccessBlobPolicy()                          {                              SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                              Permissions = SharedAccessBlobPermissions.Read                          });                      cloudBlob.FetchAttributesAsync()                               .ConfigureAwait(false).GetAwaiter().GetResult();                        return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));                  }                  catch (Exception)                  {                      this.WriteWarning("Could not determine OS Disk size.");                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: if (BlobUri.TryParseUri(new Uri(sBlobUri)' out blobUri))              {                  try                  {                      var account = this.GetStorageAccountFromCache(accountName);                      var resGroupName = this.GetResourceGroupFromId(account.Id);                      StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resGroupName'                          this._StorageClient' this._Subscription);                      StorageCredentials sc = storageCredentialsFactory.Create(blobUri);                      CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(sc' true);                      CloudBlobClient blobClient = cloudStorageAccount.CreateCloudBlobClient();                      CloudBlobContainer blobContainer = blobClient.GetContainerReference(blobUri.BlobContainerName);                      var cloudBlob = blobContainer.GetPageBlobReference(blobUri.BlobName);                      var sasToken = cloudBlob.GetSharedAccessSignature(                          new SharedAccessBlobPolicy()                          {                              SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                              Permissions = SharedAccessBlobPermissions.Read                          });                      cloudBlob.FetchAttributesAsync()                               .ConfigureAwait(false).GetAwaiter().GetResult();                        return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));                  }                  catch (Exception)                  {                      this.WriteWarning("Could not determine OS Disk size.");                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: if (BlobUri.TryParseUri(new Uri(sBlobUri)' out blobUri))              {                  try                  {                      var account = this.GetStorageAccountFromCache(accountName);                      var resGroupName = this.GetResourceGroupFromId(account.Id);                      StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resGroupName'                          this._StorageClient' this._Subscription);                      StorageCredentials sc = storageCredentialsFactory.Create(blobUri);                      CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(sc' true);                      CloudBlobClient blobClient = cloudStorageAccount.CreateCloudBlobClient();                      CloudBlobContainer blobContainer = blobClient.GetContainerReference(blobUri.BlobContainerName);                      var cloudBlob = blobContainer.GetPageBlobReference(blobUri.BlobName);                      var sasToken = cloudBlob.GetSharedAccessSignature(                          new SharedAccessBlobPolicy()                          {                              SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                              Permissions = SharedAccessBlobPermissions.Read                          });                      cloudBlob.FetchAttributesAsync()                               .ConfigureAwait(false).GetAwaiter().GetResult();                        return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));                  }                  catch (Exception)                  {                      this.WriteWarning("Could not determine OS Disk size.");                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSizeGbFromBlobUri,The following statement contains a magic number: if (BlobUri.TryParseUri(new Uri(sBlobUri)' out blobUri))              {                  try                  {                      var account = this.GetStorageAccountFromCache(accountName);                      var resGroupName = this.GetResourceGroupFromId(account.Id);                      StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resGroupName'                          this._StorageClient' this._Subscription);                      StorageCredentials sc = storageCredentialsFactory.Create(blobUri);                      CloudStorageAccount cloudStorageAccount = new CloudStorageAccount(sc' true);                      CloudBlobClient blobClient = cloudStorageAccount.CreateCloudBlobClient();                      CloudBlobContainer blobContainer = blobClient.GetContainerReference(blobUri.BlobContainerName);                      var cloudBlob = blobContainer.GetPageBlobReference(blobUri.BlobName);                      var sasToken = cloudBlob.GetSharedAccessSignature(                          new SharedAccessBlobPolicy()                          {                              SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24.0)'                              Permissions = SharedAccessBlobPermissions.Read                          });                      cloudBlob.FetchAttributesAsync()                               .ConfigureAwait(false).GetAwaiter().GetResult();                        return (int?)(cloudBlob.Properties.Length / (1024 * 1024 * 1024));                  }                  catch (Exception)                  {                      this.WriteWarning("Could not determine OS Disk size.");                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetVMSLA,The following statement contains a magic number: switch (virtualMachine.HardwareProfile.VmSize)              {                  case "Standard_DS1":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 32;                      break;                  case "Standard_DS1_v2":                  case "Standard_D2s_v3":                  case "Standard_E2s_v3":                      result.HasSLA = true;                      result.IOPS = 3200;                      result.TP = 48;                      break;                  case "Standard_DS2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS2_v2":                  case "Standard_D4s_v3":                  case "Standard_E4s_v3":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS3_v2":                  case "Standard_D8s_v3":                  case "Standard_E8s_v3":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS4":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS4_v2":                  case "Standard_D16s_v3":                  case "Standard_E16s_v3":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS5_v2":                  case "Standard_D32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS11":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 64;                      break;                  case "Standard_DS11_v2":                      result.HasSLA = true;                      result.IOPS = 6400;                      result.TP = 96;                      break;                  case "Standard_DS12":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 128;                      break;                  case "Standard_DS12_v2":                      result.HasSLA = true;                      result.IOPS = 12800;                      result.TP = 192;                      break;                  case "Standard_DS13":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 256;                      break;                  case "Standard_DS13_v2":                      result.HasSLA = true;                      result.IOPS = 25600;                      result.TP = 384;                      break;                  case "Standard_DS14":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 512;                      break;                  case "Standard_DS14_v2":                  case "Standard_E32s_v3":                      result.HasSLA = true;                      result.IOPS = 51200;                      result.TP = 768;                      break;                  case "Standard_DS15_v2":                      result.HasSLA = true;                      result.IOPS = 64000;                      result.TP = 960;                      break;                  case "Standard_GS1":                      result.HasSLA = true;                      result.IOPS = 5000;                      result.TP = 125;                      break;                  case "Standard_GS2":                      result.HasSLA = true;                      result.IOPS = 10000;                      result.TP = 250;                      break;                  case "Standard_GS3":                      result.HasSLA = true;                      result.IOPS = 20000;                      result.TP = 500;                      break;                  case "Standard_GS4":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_GS5":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_M64ms":                  case "Standard_M64s":                      result.HasSLA = true;                      result.IOPS = 40000;                      result.TP = 1000;                      break;                  case "Standard_M128s":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 2000;                      break;                  case "Standard_E64s_v3":                  case "Standard_D64s_v3":                      result.HasSLA = true;                      result.IOPS = 80000;                      result.TP = 1200;                      break;                  default:                      break;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (!diskSize.HasValue)              {                  this.WriteWarning("OS Disk size is empty and could not be determined. Assuming P10.");                  diskSize = 127;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,GetDiskSLA,The following statement contains a magic number: if (diskSize > 0 && diskSize <= 32)              {                  // P4                  sla.IOPS = 120;                  sla.TP = 125;              }              else if (diskSize > 0 && diskSize <= 64)              {                  // P6                  sla.IOPS = 240;                  sla.TP = 50;              }              else if (diskSize > 0 && diskSize <= 128)              {                  // P10                  sla.IOPS = 500;                  sla.TP = 100;              }              else if (diskSize > 0 && diskSize <= 512)              {                  // P20                  sla.IOPS = 2300;                  sla.TP = 150;              }              else if (diskSize > 0 && diskSize <= 1024)              {                  // P30                  sla.IOPS = 5000;                  sla.TP = 200;              }              else if (diskSize > 0 && diskSize <= 2048)              {                  // P40                  sla.IOPS = 7500;                  sla.TP = 250;              }              else if (diskSize > 0 && diskSize <= 4095)              {                  // P50                  sla.IOPS = 7500;                  sla.TP = 250;              }              else              {                  WriteError("Unkown disk size for Premium Storage - {0}"' diskSize);                  throw new ArgumentException("Unkown disk size for Premium Storage");              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckWADConfiguration,The following statement contains a magic number: if ((CurrentConfig == null)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration") == null)              || (int.Parse(CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/@overallQuotaInMB").Value) < 4096)              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters") == null)              || (!CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/@scheduledTransferPeriod").                      Value.Equals("PT1M"' StringComparison.InvariantCultureIgnoreCase))              || (CurrentConfig.SelectSingleNode("/WadCfg/DiagnosticMonitorConfiguration/PerformanceCounters/PerformanceCounterConfiguration") == null))              {                  return false;              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckTableAndContent,The following statement contains a magic number: if (account != null)              {                  var endpoint = this.GetCoreEndpoint(StorageAccountName);                  var key = this.GetAzureStorageKeyFromCache(StorageAccountName);                  var credentials = new StorageCredentials(StorageAccountName' key);                  var cloudStorageAccount = new CloudStorageAccount(credentials' endpoint' true);                  var tableClient = cloudStorageAccount.CreateCloudTableClient();                  var checkStart = DateTime.Now;                  var wait = true;                  CloudTable table = null;                  if (UseNewTableNames)                  {                      try                      {                          table = tableClient.ListTablesSegmentedAsync(currentToken: null)                              .ConfigureAwait(false).GetAwaiter().GetResult()                              .FirstOrDefault(tab => tab.Name.StartsWith("WADMetricsPT1M"));                      }                      catch { } //#table name should be sorted                   }                  else                  {                      try                      {                          table = tableClient.GetTableReference(TableName);                      }                      catch { }                  }                    while (wait)                  {                      if (table != null && table.ExistsAsync().ConfigureAwait(false).GetAwaiter().GetResult())                      {                          TableQuery query = new TableQuery();                          query.FilterString = FilterString;                          var results = table.ExecuteQuerySegmentedAsync(query' token: null)                              .ConfigureAwait(false).GetAwaiter().GetResult();                          if (results.Count() > 0)                          {                              tableExists = true;                              break;                          }                      }                        WriteHost(WaitChar' newLine: false);                      TestMockSupport.Delay(5000);                      if (UseNewTableNames)                      {                          try                          {                              table = tableClient.ListTablesSegmentedAsync(currentToken: null)                                  .ConfigureAwait(false).GetAwaiter().GetResult().FirstOrDefault(tab => tab.Name.StartsWith("WADMetricsPT1M"));                          }                          catch { } //#table name should be sorted                       }                      else                      {                          try                          {                              table = tableClient.GetTableReference(TableName);                          }                          catch { }                      }                        wait = ((DateTime.Now) - checkStart).TotalMinutes < TimeoutinMinutes;                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckDiagnosticsTable,The following statement contains a magic number: if (account != null)              {                  var endpoint = this.GetCoreEndpoint(storageAccountName);                  var key = this.GetAzureStorageKeyFromCache(storageAccountName);                  var credentials = new StorageCredentials(storageAccountName' key);                  var cloudStorageAccount = new CloudStorageAccount(credentials' endpoint' true);                  var tableClient = cloudStorageAccount.CreateCloudTableClient();                  var checkStart = DateTime.Now;                  var searchTime = DateTime.UtcNow.AddMinutes(-5);                    foreach (var tableName in AEMExtensionConstants.WADTablesV2[osType])                  {                      var query = TableQuery.CombineFilters(                          TableQuery.GenerateFilterCondition("DeploymentId"' QueryComparisons.Equal' resId)'                          TableOperators.And'                          TableQuery.CombineFilters(                              TableQuery.GenerateFilterCondition("Host"' QueryComparisons.Equal' host)'                              TableOperators.And'                              TableQuery.GenerateFilterConditionForDate("Timestamp"' QueryComparisons.GreaterThanOrEqual' searchTime)));                          var perfCounterTable = tableClient.GetTableReference(tableName);                        bool wait = true;                      while (wait)                      {                          var results = perfCounterTable.ExecuteQuerySegmentedAsync(new TableQuery() { FilterString = query }' token: null)                              .ConfigureAwait(false).GetAwaiter().GetResult();                          if (results.Count() > 0)                          {                              tableExists &= true;                              break;                          }                          else                          {                              WriteHost(waitChar' newLine: false);                              TestMockSupport.Delay(5000);                          }                          wait = ((DateTime.Now) - checkStart).TotalMinutes < TimeoutinMinutes;                      }                      if (!wait)                      {                          WriteVerbose("PerfCounter Table " + tableName + " not found");                          tableExists = false;                          break;                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AEM,AEMHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\AEMHelper.cs,CheckDiagnosticsTable,The following statement contains a magic number: if (account != null)              {                  var endpoint = this.GetCoreEndpoint(storageAccountName);                  var key = this.GetAzureStorageKeyFromCache(storageAccountName);                  var credentials = new StorageCredentials(storageAccountName' key);                  var cloudStorageAccount = new CloudStorageAccount(credentials' endpoint' true);                  var tableClient = cloudStorageAccount.CreateCloudTableClient();                  var checkStart = DateTime.Now;                  var searchTime = DateTime.UtcNow.AddMinutes(-5);                    foreach (var tableName in AEMExtensionConstants.WADTablesV2[osType])                  {                      var query = TableQuery.CombineFilters(                          TableQuery.GenerateFilterCondition("DeploymentId"' QueryComparisons.Equal' resId)'                          TableOperators.And'                          TableQuery.CombineFilters(                              TableQuery.GenerateFilterCondition("Host"' QueryComparisons.Equal' host)'                              TableOperators.And'                              TableQuery.GenerateFilterConditionForDate("Timestamp"' QueryComparisons.GreaterThanOrEqual' searchTime)));                          var perfCounterTable = tableClient.GetTableReference(tableName);                        bool wait = true;                      while (wait)                      {                          var results = perfCounterTable.ExecuteQuerySegmentedAsync(new TableQuery() { FilterString = query }' token: null)                              .ConfigureAwait(false).GetAwaiter().GetResult();                          if (results.Count() > 0)                          {                              tableExists &= true;                              break;                          }                          else                          {                              WriteHost(waitChar' newLine: false);                              TestMockSupport.Delay(5000);                          }                          wait = ((DateTime.Now) - checkStart).TotalMinutes < TimeoutinMinutes;                      }                      if (!wait)                      {                          WriteVerbose("PerfCounter Table " + tableName + " not found");                          tableExists = false;                          break;                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GetResourceGroupFromId,The following statement contains a magic number: if (!result.Success || result.Groups == null || result.Groups.Count < 3)              {                  throw new InvalidOperationException(string.Format("Cannot find resource group name and storage account name from resource identity {0}"' id));              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GetResourceGroupFromId,The following statement contains a magic number: return result.Groups[2].Value;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,GenerateBlobSasUris,The following statement contains a magic number: for (int i = 0; i < blobUris.Count; i++)              {                  string blobUri = blobUris[i];                  BlobUri osBlobUri = null;                  if (BlobUri.TryParseUri(new Uri(blobUri)' out osBlobUri))                  {                      StorageManagementClient storageClient = AzureSession.Instance.ClientFactory.CreateArmClient<StorageManagementClient>(azContext' AzureEnvironment.Endpoint.ResourceManager);                        // Need to convert osBlobUri.StorageAccountName into corresponding resource group name                        var listResponse = storageClient.StorageAccounts.List();                      var account = listResponse.First(accTemp => accTemp.Name.Equals(osBlobUri.StorageAccountName' StringComparison.InvariantCultureIgnoreCase));                      string resourceGroupName = GetResourceGroupFromId(account.Id);                        StorageCredentialsFactory storageCredentialsFactory = new StorageCredentialsFactory(resourceGroupName' storageClient' azContext.Subscription);                        CloudPageBlobObjectFactory cloudPageBlobObjectFactory = new CloudPageBlobObjectFactory(storageCredentialsFactory' TimeSpan.FromMinutes(1));                        CloudPageBlob pageBlob = cloudPageBlobObjectFactory.Create(osBlobUri);                        SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();                      sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddMinutes(5);                      sasConstraints.Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.List;                        string sasUri = osBlobUri.Uri + pageBlob.GetSharedAccessSignature(sasConstraints);                      blobSASUris.blobSASUri.Add(sasUri);                      blobSASUris.pageBlobUri.Add(blobUri);                      blobSASUris.storageCredentialsFactory.Add(storageCredentialsFactory);                  }                  else                  {                      throw new AzureVMBackupException(AzureVMBackupErrorCodes.WrongBlobUriFormat' "the blob uri is not in correct format.");                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The following statement contains a magic number: int timePeriod = 5000;
Magic Number,Microsoft.Azure.Commands.Compute.Extension.AzureVMBackup,AzureVMBackupExtensionUtil,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureVMBackup\AzureVMBackupExtensionUtil.cs,CreateSnapshotForDisks,The following statement contains a magic number: int loopingTimes = ((int)TimeSpan.FromMinutes(10).TotalMilliseconds / timePeriod);
Magic Number,Microsoft.Azure.Commands.Compute.Extension.DSC,RemoveAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\RemoveAzureVMDscExtensionCommand.cs,ExecuteCmdlet,The following statement contains a magic number: if (ShouldProcess(string.Format(CultureInfo.CurrentUICulture' Microsoft.Azure.Commands.Compute.Properties.Resources.DscExtensionRemovalConfirmation' Name)' Microsoft.Azure.Commands.Compute.Properties.Resources.DscExtensionRemovalCaption))              {                  //Add retry logic due to CRP service restart known issue CRP bug: 3564713                  var count = 1;                  AzureOperationResponse<MC.OperationStatusResponse> op = null;                    while (true)                  {                      try                      {                          op = VirtualMachineExtensionClient.DeleteWithHttpMessagesAsync(                              ResourceGroupName'                              VMName'                              Name).GetAwaiter().GetResult();                          break;                      }                      catch (Rest.Azure.CloudException ex)                      {                          var errorReturned = JsonConvert.DeserializeObject<PSComputeLongRunningOperation>(ex.Response.Content);                            if ("Failed".Equals(errorReturned.Status)                              && errorReturned.Error != null && "InternalExecutionError".Equals(errorReturned.Error.Code))                          {                              count++;                              if (count <= 2)                              {                                  continue;                              }                          }                          ThrowTerminatingError(new ErrorRecord(ex' "InvalidResult"' ErrorCategory.InvalidResult' null));                      }                  }                    var result = ComputeAutoMapperProfile.Mapper.Map<PSAzureOperationResponse>(op);                  WriteObject(result);              }
Magic Number,Microsoft.Azure.Commands.Compute.Extension.DSC,SetAzureVMDscExtensionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\SetAzureVMDscExtensionCommand.cs,CreateConfiguration,The following statement contains a magic number: while (true)              {                  try                  {                      op = VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                          ResourceGroupName'                          VMName'                          Name ?? DscExtensionCmdletConstants.ExtensionPublishedNamespace + "." + DscExtensionCmdletConstants.ExtensionPublishedName'                          parameters).GetAwaiter().GetResult();                        break;                  }                  catch (Rest.Azure.CloudException ex)                  {                      var errorReturned = JsonConvert.DeserializeObject<PSComputeLongRunningOperation>(                          ex.Response.Content);                        if ("Failed".Equals(errorReturned.Status)                          && errorReturned.Error != null && "InternalExecutionError".Equals(errorReturned.Error.Code))                      {                          count++;                          if (count <= 2)                          {                              continue;                          }                      }                        ThrowTerminatingError(new ErrorRecord(ex' "InvalidResult"' ErrorCategory.InvalidResult' null));                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetCreateOrUpdateDynamicParameters,The following statement contains a magic number: pAvailabilitySetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetCreateOrUpdateDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteAvailabilitySetCreateOrUpdateMethod,The following statement contains a magic number: AvailabilitySet parameters = (AvailabilitySet)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetDeleteDynamicParameters,The following statement contains a magic number: pAvailabilitySetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetGetDynamicParameters,The following statement contains a magic number: pAvailabilitySetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetListAvailableSizesDynamicParameters,The following statement contains a magic number: pAvailabilitySetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetListAvailableSizesDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateAvailabilitySetListDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceCreateOrUpdateDynamicParameters,The following statement contains a magic number: pContainerServiceName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceCreateOrUpdateDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteContainerServiceCreateOrUpdateMethod,The following statement contains a magic number: ContainerService parameters = (ContainerService)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceDeleteDynamicParameters,The following statement contains a magic number: pContainerServiceName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceGetDynamicParameters,The following statement contains a magic number: pContainerServiceName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceListByResourceGroupDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceListByResourceGroupNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateContainerServiceListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskCreateOrUpdateDynamicParameters,The following statement contains a magic number: pDiskName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskCreateOrUpdateDynamicParameters,The following statement contains a magic number: pDisk.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteDiskCreateOrUpdateMethod,The following statement contains a magic number: Disk disk = (Disk)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskDeleteDynamicParameters,The following statement contains a magic number: pDiskName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskGetDynamicParameters,The following statement contains a magic number: pDiskName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskGrantAccessDynamicParameters,The following statement contains a magic number: pDiskName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskGrantAccessDynamicParameters,The following statement contains a magic number: pAccess.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskGrantAccessDynamicParameters,The following statement contains a magic number: pDurationInSecond.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 4'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskGrantAccessDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 5'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteDiskGrantAccessMethod,The following statement contains a magic number: var pAccess = (AccessLevel) ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteDiskGrantAccessMethod,The following statement contains a magic number: var pDurationInSeconds = (int) ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskListByResourceGroupDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskListByResourceGroupNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskRevokeAccessDynamicParameters,The following statement contains a magic number: pDiskName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskRevokeAccessDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskUpdateDynamicParameters,The following statement contains a magic number: pDiskName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskUpdateDynamicParameters,The following statement contains a magic number: pDisk.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateDiskUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteDiskUpdateMethod,The following statement contains a magic number: DiskUpdate disk = (DiskUpdate)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteDiskUpdateMethod,The following statement contains a magic number: Disk diskOrg = (Disk)ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageCreateOrUpdateDynamicParameters,The following statement contains a magic number: pImageName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageCreateOrUpdateDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteImageCreateOrUpdateMethod,The following statement contains a magic number: Image parameters = (Image)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageDeleteDynamicParameters,The following statement contains a magic number: pImageName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageGetDynamicParameters,The following statement contains a magic number: pImageName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageGetDynamicParameters,The following statement contains a magic number: pExpand.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteImageGetMethod,The following statement contains a magic number: string expand = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageListByResourceGroupDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageListByResourceGroupNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateImageListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateResourceSkuListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotCreateOrUpdateDynamicParameters,The following statement contains a magic number: pSnapshotName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotCreateOrUpdateDynamicParameters,The following statement contains a magic number: pSnapshot.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteSnapshotCreateOrUpdateMethod,The following statement contains a magic number: Snapshot snapshot = (Snapshot)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotDeleteDynamicParameters,The following statement contains a magic number: pSnapshotName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotGetDynamicParameters,The following statement contains a magic number: pSnapshotName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotGrantAccessDynamicParameters,The following statement contains a magic number: pSnapshotName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotGrantAccessDynamicParameters,The following statement contains a magic number: pAccess.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotGrantAccessDynamicParameters,The following statement contains a magic number: pDurationInSecond.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 4'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotGrantAccessDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 5'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteSnapshotGrantAccessMethod,The following statement contains a magic number: var pAccess = (AccessLevel) ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteSnapshotGrantAccessMethod,The following statement contains a magic number: var pDurationInSeconds = (int) ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotListByResourceGroupDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotListByResourceGroupNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotRevokeAccessDynamicParameters,The following statement contains a magic number: pSnapshotName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotRevokeAccessDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotUpdateDynamicParameters,The following statement contains a magic number: pSnapshotName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotUpdateDynamicParameters,The following statement contains a magic number: pSnapshot.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateSnapshotUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteSnapshotUpdateMethod,The following statement contains a magic number: SnapshotUpdate snapshot = (SnapshotUpdate)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteSnapshotUpdateMethod,The following statement contains a magic number: Snapshot snapshotOrg = (Snapshot)ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandGetDynamicParameters,The following statement contains a magic number: pCommandId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandListDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRollingUpgradeCancelDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRollingUpgradeCancelDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRollingUpgradeGetLatestDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRollingUpgradeGetLatestDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRollingUpgradeStartOSUpgradeDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRollingUpgradeStartOSUpgradeDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMDeallocateDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMDeallocateDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMDeallocateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMDeallocateMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMDeleteDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMDeleteDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMDeleteMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMGetInstanceViewDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMGetInstanceViewDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMGetInstanceViewDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMGetInstanceViewMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMGetDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMGetDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMGetMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMListDynamicParameters,The following statement contains a magic number: pVirtualMachineScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMListDynamicParameters,The following statement contains a magic number: pSelect.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMListDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMListMethod,The following statement contains a magic number: Microsoft.Rest.Azure.OData.ODataQuery<VirtualMachineScaleSetVM> odataQuery = (Microsoft.Rest.Azure.OData.ODataQuery<VirtualMachineScaleSetVM>)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMListMethod,The following statement contains a magic number: string select = (string)ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMPowerOffDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMPowerOffDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMPowerOffDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMPowerOffMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMReimageAllDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMReimageAllDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMReimageAllDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMReimageAllMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMReimageDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMReimageDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMReimageDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMReimageMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMRestartDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMRestartDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMRestartDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMRestartMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMStartDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMStartDynamicParameters,The following statement contains a magic number: pInstanceId.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetVMStartDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetVMStartMethod,The following statement contains a magic number: string instanceId = (string)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetCreateOrUpdateDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetCreateOrUpdateDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetCreateOrUpdateMethod,The following statement contains a magic number: VirtualMachineScaleSet parameters = (VirtualMachineScaleSet)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeallocateDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeallocateDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeallocateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetDeallocateMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetDeallocateMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeleteInstancesDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeleteInstancesDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeleteInstancesDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetDeleteInstancesMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetDeleteInstancesMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeleteDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetGetInstanceViewDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetGetInstanceViewDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetGetDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetListAllNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetListDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetListSkusDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetListSkusDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetListSkusNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetPowerOffDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetPowerOffDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetPowerOffDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetPowerOffMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetPowerOffMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetReimageAllDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetReimageAllDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetReimageAllDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetReimageAllMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetReimageAllMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetReimageDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetReimageDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetReimageDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetReimageMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetReimageMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRestartDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRestartDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetRestartDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetRestartMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetRestartMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetStartDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetStartDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetStartDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetStartMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetStartMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetUpdateInstancesDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetUpdateInstancesDynamicParameters,The following statement contains a magic number: pInstanceIds.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetUpdateInstancesDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetUpdateInstancesMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetUpdateInstancesMethod,The following statement contains a magic number: if (invokeMethodInputParameters[2] != null)              {                  var inputArray2 = Array.ConvertAll((object[]) ParseParameter(invokeMethodInputParameters[2])' e => e.ToString());                  instanceIds = inputArray2.ToList();              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetUpdateDynamicParameters,The following statement contains a magic number: pVMScaleSetName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetUpdateDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineScaleSetUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetUpdateMethod,The following statement contains a magic number: VirtualMachineScaleSetUpdate parameters = (VirtualMachineScaleSetUpdate)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineScaleSetUpdateMethod,The following statement contains a magic number: VirtualMachineScaleSet parametersOrg = (VirtualMachineScaleSet)ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCaptureDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCaptureDynamicParameters,The following statement contains a magic number: pVhdPrefix.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCaptureDynamicParameters,The following statement contains a magic number: pOverwriteVhd.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 4'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCaptureDynamicParameters,The following statement contains a magic number: pDestinationContainerName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 5'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCaptureDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 6'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineCaptureMethod,The following statement contains a magic number: var pVhdPrefix = (string) ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineCaptureMethod,The following statement contains a magic number: var pOverwriteVhds = (bool) ParseParameter(invokeMethodInputParameters[3]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineCaptureMethod,The following statement contains a magic number: var pDestinationContainerName = (string) ParseParameter(invokeMethodInputParameters[4]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineConvertToManagedDisksDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineConvertToManagedDisksDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCreateOrUpdateDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCreateOrUpdateDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineCreateOrUpdateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineCreateOrUpdateMethod,The following statement contains a magic number: VirtualMachine parameters = (VirtualMachine)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineDeallocateDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineDeallocateDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineDeleteDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineDeleteDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineGeneralizeDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineGeneralizeDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineGetDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineGetDynamicParameters,The following statement contains a magic number: pExpand.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = false              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineGetDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineGetMethod,The following statement contains a magic number: InstanceViewTypes? expand = (InstanceViewTypes?)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineInstanceViewDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineInstanceViewDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineListAllNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineListAvailableSizesDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineListAvailableSizesDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineListDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineListNextDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachinePerformMaintenanceDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachinePerformMaintenanceDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachinePowerOffDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachinePowerOffDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRedeployDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRedeployDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRestartDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRestartDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandDynamicParameters,The following statement contains a magic number: pParameters.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineRunCommandDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 4'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,ExecuteVirtualMachineRunCommandMethod,The following statement contains a magic number: RunCommandInput parameters = (RunCommandInput)ParseParameter(invokeMethodInputParameters[2]);
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineStartDynamicParameters,The following statement contains a magic number: pVMName.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByDynamicParameters"'                  Position = 2'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,InvokeAzureComputeMethodCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\AvailabilitySet\AvailabilitySetCreateOrUpdateMethod.cs,CreateVirtualMachineStartDynamicParameters,The following statement contains a magic number: pArgumentList.Attributes.Add(new ParameterAttribute              {                  ParameterSetName = "InvokeByStaticParameters"'                  Position = 3'                  Mandatory = true              });
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,FormatObject,The following statement contains a magic number: foreach (var t in resultTuples)              {                  string preTab = new string(' '' t.Item3 * 2);                  string postTab = new string(' '' totalTab - t.Item3 * 2 - t.Item1.Length);                    result += preTab + t.Item1 + postTab + ": " + t.Item2 + "\n";              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,FormatObject,The following statement contains a magic number: foreach (var t in resultTuples)              {                  string preTab = new string(' '' t.Item3 * 2);                  string postTab = new string(' '' totalTab - t.Item3 * 2 - t.Item1.Length);                    result += preTab + t.Item1 + postTab + ": " + t.Item2 + "\n";              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as Newtonsoft.Json.Linq.JObject;                  if (isJObject != null)                  {                      var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = Math.Max(max' depth * 2 + property.Name.Length + 4);                              for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable || propType.Equals(typeof(Newtonsoft.Json.Linq.JObject)))                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                      max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                  }                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' Newtonsoft.Json.JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' ""' depth));                                  max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as Newtonsoft.Json.Linq.JObject;                  if (isJObject != null)                  {                      var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = Math.Max(max' depth * 2 + property.Name.Length + 4);                              for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable || propType.Equals(typeof(Newtonsoft.Json.Linq.JObject)))                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                      max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                  }                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' Newtonsoft.Json.JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' ""' depth));                                  max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as Newtonsoft.Json.Linq.JObject;                  if (isJObject != null)                  {                      var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = Math.Max(max' depth * 2 + property.Name.Length + 4);                              for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable || propType.Equals(typeof(Newtonsoft.Json.Linq.JObject)))                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                      max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                  }                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' Newtonsoft.Json.JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' ""' depth));                                  max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as Newtonsoft.Json.Linq.JObject;                  if (isJObject != null)                  {                      var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = Math.Max(max' depth * 2 + property.Name.Length + 4);                              for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable || propType.Equals(typeof(Newtonsoft.Json.Linq.JObject)))                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                      max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                  }                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' Newtonsoft.Json.JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' ""' depth));                                  max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as Newtonsoft.Json.Linq.JObject;                  if (isJObject != null)                  {                      var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = Math.Max(max' depth * 2 + property.Name.Length + 4);                              for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable || propType.Equals(typeof(Newtonsoft.Json.Linq.JObject)))                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                      max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                  }                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' Newtonsoft.Json.JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' ""' depth));                                  max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.Automation,ComputeAutomationBaseCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Generated\ComputeAutomationBaseCmdlet.cs,GetTabLength,The following statement contains a magic number: foreach (var property in propertySet)              {                  Object childObject = property.GetValue(obj' null);                    var isJObject = childObject as Newtonsoft.Json.Linq.JObject;                  if (isJObject != null)                  {                      var objStringValue = Newtonsoft.Json.JsonConvert.SerializeObject(childObject);                        int i = objStringValue.IndexOf("xmlCfg");                      if (i >= 0)                      {                          var xmlCfgString = objStringValue.Substring(i + 7);                          int start = xmlCfgString.IndexOf('"');                          int end = xmlCfgString.IndexOf('"'' start + 1);                          xmlCfgString = xmlCfgString.Substring(start + 1' end - start - 1);                          objStringValue = objStringValue.Replace(xmlCfgString' "...");                      }                        tupleList.Add(MakeTuple(property.Name' objStringValue' depth));                      max = Math.Max(max' depth * 2 + property.Name.Length);                  }                  else                  {                      var elem = childObject as IList;                      if (elem != null)                      {                          if (elem.Count != 0)                          {                              max = Math.Max(max' depth * 2 + property.Name.Length + 4);                              for (int i = 0; i < elem.Count; i++)                              {                                  Type propType = elem[i].GetType();                                    if (propType.IsSerializable || propType.Equals(typeof(Newtonsoft.Json.Linq.JObject)))                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' elem[i].ToString()' depth));                                  }                                  else                                  {                                      tupleList.Add(MakeTuple(property.Name + "[" + i + "]"' ""' depth));                                      max = Math.Max(max' GetTabLength((Object)elem[i]' max' depth + 1' tupleList));                                  }                              }                          }                      }                      else                      {                          if (property.PropertyType.IsSerializable)                          {                              if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' childObject.ToString()' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                          }                          else                          {                              var isDictionary = childObject as IDictionary;                              if (isDictionary != null)                              {                                  tupleList.Add(MakeTuple(property.Name' Newtonsoft.Json.JsonConvert.SerializeObject(childObject)' depth));                                  max = Math.Max(max' depth * 2 + property.Name.Length);                              }                              else if (childObject != null)                              {                                  tupleList.Add(MakeTuple(property.Name' ""' depth));                                  max = Math.Max(max' GetTabLength(childObject' max' depth + 1' tupleList));                              }                          }                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\AddAzureVhdCommand.cs,ValidateParameters,The following statement contains a magic number: using (var vds = new VirtualDiskStream(filePath.FullName))              {                  if (vds.DiskType == DiskType.Fixed)                  {                      long divisor = Convert.ToInt64(Math.Pow(2' 9));                      long rem = 0;                      Math.DivRem(filePath.Length' divisor' out rem);                      if (rem != 0)                      {                          throw new ArgumentOutOfRangeException("LocalFilePath"' "Given vhd file is a corrupted fixed vhd");                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.StorageServices,AddAzureVhdCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\AddAzureVhdCommand.cs,ValidateParameters,The following statement contains a magic number: using (var vds = new VirtualDiskStream(filePath.FullName))              {                  if (vds.DiskType == DiskType.Fixed)                  {                      long divisor = Convert.ToInt64(Math.Pow(2' 9));                      long rem = 0;                      Math.DivRem(filePath.Length' divisor' out rem);                      if (rem != 0)                      {                          throw new ArgumentOutOfRangeException("LocalFilePath"' "Given vhd file is a corrupted fixed vhd");                      }                  }              }
Magic Number,Microsoft.Azure.Commands.Compute.StorageServices,CloudPageBlobObjectFactory,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\StorageServices\CloudPageBlobObjectFactory.cs,CreateRequestOptions,The following statement contains a magic number: return new BlobRequestOptions              {                  ServerTimeout = this.operationTimeout'                  RetryPolicy = new LinearRetry(delayBetweenRetries' 5)              };
Magic Number,Microsoft.Azure.Commands.Compute.Strategies,ProgressReport,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Strategies\ProgressReport.cs,Update,The following statement contains a magic number: var p = (int)(_Completed * 100.0);
Missing Default,Microsoft.Azure.Commands.Compute,SetAzureRmVMAEMExtension,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AEM\SetAzureRmVMAEMExtension.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (vmsize)                  {                      case AEMExtensionConstants.VMSizeExtraSmall:                      case AEMExtensionConstants.VMSizeStandard_A0:                      case AEMExtensionConstants.VMSizeBasic_A0:                          vmsize = "ExtraSmall (A0)";                          WriteVerbose("VM Size is ExtraSmall - setting overcommitted setting");                          cpuOvercommit = 1;                          break;                      case "Small":                          vmsize = "Small (A1)";                          break;                      case "Medium":                          vmsize = "Medium (A2)";                          break;                      case "Large":                          vmsize = "Large (A3)";                          break;                      case "ExtraLarge":                          vmsize = "ExtraLarge (A4)";                          break;                  }
Missing Default,Microsoft.Azure.Commands.Compute,NewAzureVMSqlServerAutoBackupConfigCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\SqlServer\NewAzureVMSqlServerAutoBackupConfig.cs,ProcessRecord,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case StorageContextParamSetName:                      autoBackupSettings.StorageUrl = StorageContext.BlobEndPoint;                      autoBackupSettings.StorageAccessKey = this.GetStorageKey();                      break;                    case StorageUriParamSetName:                      autoBackupSettings.StorageUrl = (StorageUri == null) ? null : StorageUri.ToString();                      autoBackupSettings.StorageAccessKey = (StorageKey == null) ? null : ConversionUtilities.SecureStringToString(StorageKey);                      break;              }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.AzureDiskEncryption,GetAzureDiskEncryptionStatusCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\AzureDiskEncryption\GetAzureDiskEncryptionStatus.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (osType)                  {                      case OSType.Windows:                                                  encryptionStatus = new AzureDiskEncryptionStatusContext                          {                              OsVolumeEncrypted = osVolumeEncrypted'                              DataVolumesEncrypted = dataVolumesEncrypted'                              OsVolumeEncryptionSettings = osVolumeEncryptionSettings'                              ProgressMessage = string.Format(CultureInfo.CurrentUICulture' "OsVolume: {0}' DataVolumes: {1}"' osVolumeEncrypted' dataVolumesEncrypted)                          };                          WriteObject(encryptionStatus);                          break;                      case OSType.Linux:                          if (!IsExtensionInstalled(osType))                          {                              VirtualMachine virtualMachineResponse = this.ComputeClient.ComputeManagementClient.VirtualMachines.GetWithInstanceView(                                  this.ResourceGroupName' VMName).Body;                              VirtualMachineExtension parameters = GetVmExtensionParameters(virtualMachineResponse' osType);                                this.VirtualMachineExtensionClient.CreateOrUpdateWithHttpMessagesAsync(                                  this.ResourceGroupName'                                  this.VMName'                                  this.Name'                                  parameters).GetAwaiter().GetResult();                          }                            Dictionary<string' string> encryptionStatusParsed = null;                          try                          {                              string encryptionStatusJson = GetExtensionStatusMessage(osType' returnSubstatusMessage: true);                              encryptionStatusParsed = JsonConvert.DeserializeObject<Dictionary<string' string>>(encryptionStatusJson);                          }                          catch(KeyNotFoundException)                          {                              encryptionStatusParsed = new Dictionary<string' string>()                              {                                  { AzureDiskEncryptionExtensionConstants.encryptionResultOsKey' EncryptionStatus.Unknown.ToString() }'                                  { AzureDiskEncryptionExtensionConstants.encryptionResultDataKey' EncryptionStatus.Unknown.ToString() }                              };                          }                            try                          {                              progressMessage = GetExtensionStatusMessage(osType);                          }                          catch(KeyNotFoundException)                          {                              progressMessage = string.Format(CultureInfo.CurrentUICulture' "Extension status not available on the VM");                          }                            encryptionStatus = new AzureDiskEncryptionStatusContext                          {                              OsVolumeEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultOsKey])'                              DataVolumesEncrypted = (EncryptionStatus)Enum.Parse(typeof(EncryptionStatus)' encryptionStatusParsed[AzureDiskEncryptionExtensionConstants.encryptionResultDataKey])'                              OsVolumeEncryptionSettings = osVolumeEncryptionSettings'                              ProgressMessage = progressMessage                          };                          WriteObject(encryptionStatus);                          break;                      case OSType.Unknown:                          ThrowTerminatingError(new ErrorRecord(new ApplicationException(string.Format(CultureInfo.CurrentUICulture' "OS type unknown."))'                                                        "InvalidResult"'                                                        ErrorCategory.InvalidResult'                                                        null));                          break;                  }
Missing Default,Microsoft.Azure.Commands.Compute.Extension.DSC,PublishAzureVMDscConfigurationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Compute\Commands.Compute\Extension\DSC\PublishAzureVMDscConfigurationCommand.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case CreateArchiveParameterSetName:                          OutputArchivePath = GetUnresolvedProviderPathFromPSPath(OutputArchivePath);                          break;                      case UploadArchiveParameterSetName:                          _storageCredentials = this.GetStorageCredentials(ResourceGroupName' StorageAccountName);                          if (ContainerName == null)                          {                              ContainerName = DscExtensionCmdletConstants.DefaultContainerName;                          }                          if (StorageEndpointSuffix == null)                          {                              StorageEndpointSuffix =                                  DefaultProfile.DefaultContext.Environment.GetEndpoint(AzureEnvironment.Endpoint.StorageEndpointSuffix);                          }                          break;                  }
