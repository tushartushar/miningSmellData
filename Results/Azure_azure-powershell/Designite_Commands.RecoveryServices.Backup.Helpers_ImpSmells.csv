Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,JobConversions,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Conversions\JobConversions.cs,GetPSAzureVmJob,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,PolicyHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Validations\PolicyValidations.cs,ValidateLongTermRetentionPolicyWithSimpleRetentionPolicy,Cyclomatic complexity of the method is 13
Long Identifier,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,TrackingHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\TrackingHelpers.cs,,The length of the parameter _defaultSleepForOperationTracking is 33.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,PolicyHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Validations\PolicyValidations.cs,GetServiceClientLTRMonthlySchedule,The length of the statement  "                serviceClientMonthly.RetentionScheduleDaily = GetServiceClientLTRDailyRetentionFormat(psMonthly.RetentionScheduleDaily); " is 120.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,PolicyHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Validations\PolicyValidations.cs,GetServiceClientLTRMonthlySchedule,The length of the statement  "                serviceClientMonthly.RetentionScheduleWeekly = GetServiceClientLTRWeeklyRetentionFormat(psMonthly.RetentionScheduleWeekly); " is 123.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,PolicyHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Validations\PolicyValidations.cs,GetServiceClientLTRYearlySchedule,The length of the statement  "                serviceClientYearly.RetentionScheduleWeekly = GetServiceClientLTRWeeklyRetentionFormat(psYearly.RetentionScheduleWeekly); " is 121.
Long Statement,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,ConversionHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Conversions\ConversionHelpers.cs,GetPolicyModel,The length of the statement  "                iaasPolicyModel.RetentionPolicy = PolicyHelpers.GetPSLongTermRetentionPolicy((ServiceClientModel.LongTermRetentionPolicy) " is 121.
Complex Conditional,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,PolicyHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\Validations\PolicyValidations.cs,ValidateLongTermRetentionPolicyWithSimpleRetentionPolicy,The conditional expression  "schPolicy.ScheduleRunFrequency == ScheduleRunType.Weekly &&                 (ltrPolicy.IsDailyScheduleEnabled != false || ltrPolicy.WeeklySchedule == null ||                 (ltrPolicy.IsWeeklyScheduleEnabled == false))"  is complex.
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,HelperUtils,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\HelperUtils.cs,ParseUri,The following statement contains a magic number: if (!string.IsNullOrEmpty(id))              {                  string idPattern = @"/[^/]*/[^/]*";                  string uriPattern = @"/";                  Regex reg = new Regex(idPattern' RegexOptions.IgnoreCase);                    // Match the regular expression pattern against a uri string.                  Match match = reg.Match(id);                    while (match.Success)                  {                      string[] keyValuePair = match.Value.Split(                          new string[] { uriPattern }'                          StringSplitOptions.RemoveEmptyEntries                          );                      CmdletModel.UriEnums key;                      CmdletModel.UriEnums value;                      if (keyValuePair.Length == 2)                      {                          if (Enum.TryParse(keyValuePair[0]' true' out key) &&                              !Enum.TryParse(keyValuePair[1]' true' out value))                          {                              keyValuePairDict.Add(key' keyValuePair[1]);                          }                      }                      match = match.NextMatch();                  }              }
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,TrackingHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\TrackingHelpers.cs,GetOperationStatus,The following statement contains a magic number: while (opStatusResponse.Body.Status ==                  ServiceClientModel.OperationStatusValues.InProgress)              {                  TestMockSupport.Delay(_defaultSleepForOperationTracking * 1000);                    opStatusResponse = getOpStatus(operationId);              }
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,TrackingHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\TrackingHelpers.cs,GetOperationStatus,The following statement contains a magic number: while (opStatusResponse.Body.Status ==                  ServiceClientModel.OperationStatusValues.InProgress)              {                  TestMockSupport.Delay(_defaultSleepForOperationTracking * 1000);                    opStatusResponse = getOpStatus(operationId);              }
Magic Number,Microsoft.Azure.Commands.RecoveryServices.Backup.Helpers,TrackingHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\RecoveryServices.Backup\Commands.RecoveryServices.Backup.Helpers\TrackingHelpers.cs,GetOperationResult,The following statement contains a magic number: while (opStatusResponse.Response.StatusCode == SystemNet.HttpStatusCode.Accepted)              {                  TestMockSupport.Delay(_defaultSleepForOperationTracking * 1000);                    opStatusResponse = getOpStatus(operationId);              }
