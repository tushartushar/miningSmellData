Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The method has 107 lines of code.
Complex Method,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\NewAzurePeeringCommand.cs,CreateDirectPeering,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,UpdateAzurePeeringCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\UpdateAzurePeeringCommand.cs,Execute,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSBgpSession,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSBgpSession.cs,PSBgpSession,The method has 11 parameters. Parameters: sessionPrefixV4' sessionPrefixV6' microsoftSessionIPv4Address' microsoftSessionIPv6Address' peerSessionIPv4Address' peerSessionIPv6Address' sessionStateV4' sessionStateV6' maxPrefixesAdvertisedV4' maxPrefixesAdvertisedV6' md5AuthenticationKey
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSDirectConnection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSDirectConnection.cs,PSDirectConnection,The method has 9 parameters. Parameters: bandwidthInMbps' provisionedBandwidthInMbps' sessionAddressProvider' useForPeeringService' peeringDBFacilityId' connectionState' bgpSession' connectionIdentifier' errorMessage
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSExchangeConnection,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSExchangeConnection.cs,PSExchangeConnection,The method has 5 parameters. Parameters: peeringDBFacilityId' connectionState' bgpSession' connectionIdentifier' errorMessage
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSExchangePeeringFacility,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSExchangePeeringFacility.cs,PSExchangePeeringFacility,The method has 8 parameters. Parameters: exchangeName' bandwidthInMbps' microsoftIPv4Address' microsoftIPv6Address' facilityIPv4Prefix' facilityIPv6Prefix' peeringDBFacilityId' peeringDBFacilityLink
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeerAsn,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeerAsn.cs,PSPeerAsn,The method has 8 parameters. Parameters: name' id' type' peerContactInfo' peerName' validationState' errorMessage' peerAsnProperty
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeering,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeering.cs,PSPeering,The method has 11 parameters. Parameters: sku' kind' location' name' id' type' direct' exchange' peeringLocation' provisioningState' tags
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeeringLocation,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeeringLocation.cs,PSPeeringLocation,The method has 9 parameters. Parameters: name' id' type' kind' direct' exchange' peeringLocation' country' azureRegion
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeeringService,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeeringService.cs,PSPeeringService,The method has 8 parameters. Parameters: location' peeringServiceLocation' peeringServiceProvider' provisioningState' tags' name' id' type
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeeringServiceLocation,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeeringServiceLocation.cs,PSPeeringServiceLocation,The method has 6 parameters. Parameters: country' state' azureRegion' name' id' type
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeeringServicePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeeringServicePrefix.cs,PSPeeringServicePrefix,The method has 9 parameters. Parameters: prefix' prefixValidationState' learnedType' errorMessage' events' provisioningState' name' id' type
Long Parameter List,Microsoft.Azure.PowerShell.Cmdlets.Peering.Models,PSPeeringServicePrefixEvent,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Models\PSPeeringServicePrefixEvent.cs,PSPeeringServicePrefixEvent,The method has 5 parameters. Parameters: eventTimestamp' eventType' eventSummary' eventLevel' eventDescription
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameLocationByFacilityId is 36.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameLocationByDirectType is 36.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameByResourceGroupName is 35.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameByResourceAndName is 33.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameBySubscription is 30.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameConvertLegacyPeering is 36.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameMicrosoftProvidedIPAddress is 42.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameUseForPeeringService is 36.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter ParameterSetNameMd5Authentication is 33.
Long Identifier,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,Constants,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\Constants.cs,,The length of the parameter PeeringDirectConnectionIndexHelp is 32.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,GetErrorCodeAndMessageFromArmOrErm,The length of the statement  "                    error = new ErrorResponse(code: armError.Values.FirstOrDefault()?.Code' message: armError.Values.FirstOrDefault()?.Message); " is 124.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,NewAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\NewAzureDirectPeeringConnectionCommand.cs,CreateDirectPeering,The length of the statement  "            if (!this.MicrosoftProvidedIPAddress && !string.IsNullOrEmpty(this.SessionPrefixV4) || !string.IsNullOrEmpty(this.SessionPrefixV6)) " is 131.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,NewAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\NewAzureDirectPeeringConnectionCommand.cs,CreateDirectPeering,The length of the statement  "                    MaxPrefixesAdvertisedV4 = !string.IsNullOrEmpty(this.SessionPrefixV4) ? (this.MaxPrefixesAdvertisedIPv4 ?? 20000) : (int?)null' " is 127.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,NewAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\NewAzureDirectPeeringConnectionCommand.cs,CreateDirectPeering,The length of the statement  "                    MaxPrefixesAdvertisedV6 = !string.IsNullOrEmpty(this.SessionPrefixV6) ? (this.MaxPrefixesAdvertisedIPv6 ?? 2000) : (int?)null' " is 126.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,SetAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\SetAzureDirectPeeringConnectionCommand.cs,Execute,The length of the statement  "                else if (this.ParameterSetName.Equals(Constants.ParameterSetNameUseForPeeringService' StringComparison.InvariantCultureIgnoreCase)) " is 131.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,SetAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\SetAzureDirectPeeringConnectionCommand.cs,UpdateIpV4Prefix,The length of the statement  "                this.MaxPrefixesAdvertisedIPv4 == null ? this.InputObject.BgpSession.MaxPrefixesAdvertisedV4 : this.MaxPrefixesAdvertisedIPv4; " is 126.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,SetAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\SetAzureDirectPeeringConnectionCommand.cs,UpdateIpV6Prefix,The length of the statement  "                this.MaxPrefixesAdvertisedIPv6 == null ? this.InputObject.BgpSession.MaxPrefixesAdvertisedV6 : this.MaxPrefixesAdvertisedIPv6; " is 126.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,NewAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\NewAzureExchangePeeringConnectionCommand.cs,CreateExchangePeeringConnection,The length of the statement  "                    MaxPrefixesAdvertisedV4 = !string.IsNullOrEmpty(this.PeerSessionIPv4Address) ? (this.MaxPrefixesAdvertisedIPv4 ?? 20000) : (int?)null' " is 134.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,NewAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\NewAzureExchangePeeringConnectionCommand.cs,CreateExchangePeeringConnection,The length of the statement  "                    MaxPrefixesAdvertisedV6 = !string.IsNullOrEmpty(this.PeerSessionIPv6Address) ? (this.MaxPrefixesAdvertisedIPv6 ?? 2000) : (int?)null' " is 133.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,SetAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\SetAzureExchangePeeringConnectionCommand.cs,UpdateIpV4Prefix,The length of the statement  "                this.MaxPrefixesAdvertisedIPv4 == null ? (this.InputObject.BgpSession.MaxPrefixesAdvertisedV4 != 0 ? this.InputObject.BgpSession.MaxPrefixesAdvertisedV4 : 20000) : this.MaxPrefixesAdvertisedIPv4; " is 195.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,SetAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\SetAzureExchangePeeringConnectionCommand.cs,UpdateIpV6Prefix,The length of the statement  "                this.MaxPrefixesAdvertisedIPv6 == null ? (this.InputObject.BgpSession.MaxPrefixesAdvertisedV6 != 0 ? this.InputObject.BgpSession.MaxPrefixesAdvertisedV6 : 2000) : this.MaxPrefixesAdvertisedIPv6; " is 194.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.PeerAsn,NewAzurePeerAsn,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeerAsn\NewAzurePeerAsnCommand.cs,Execute,The length of the statement  "                var error = ex.Response.Content.Contains("\"error\":\"") ? JsonConvert.DeserializeObject<Dictionary<string' ErrorResponse>>(ex.Response.Content).FirstOrDefault().Value : JsonConvert.DeserializeObject<ErrorResponse>(ex.Response.Content); " is 236.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,GetAzurePeeringServiceLocationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\GetAzurePeeringServiceLocationCommand.cs,GetPeeringServiceLocation,The length of the statement  "                    var t = icList.Select(this.ToPeeringServiceLocationPS).ToList().FindAll(x => x.Country.Equals(this.Country' System.StringComparison.InvariantCultureIgnoreCase)); " is 161.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServiceCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\NewAzurePeeringServiceCommand.cs,NewPeeringServiceFromResourceGroupAndName,The length of the statement  "                var CheckProvider = this.PeeringManagementClient.CheckServiceProviderAvailability(this.PeeringLocation' this.PeeringServiceProvider); " is 133.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServiceCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\NewAzurePeeringServiceCommand.cs,NewPeeringServiceFromResourceGroupAndName,The length of the statement  "                    throw new ItemNotFoundException(string.Format(Resources.Error_ProviderNotFound' this.PeeringServiceProvider' this.PeeringLocation' CheckProvider)); " is 147.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServiceCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\NewAzurePeeringServiceCommand.cs,NewPeeringServiceFromResourceGroupAndName,The length of the statement  "                    Location = location.Select(ToPeeringServiceLocationPS).ToList().Find(x => x.State.Equals(this.PeeringLocation.Trim()' StringComparison.InvariantCultureIgnoreCase)).AzureRegion' " is 176.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServiceCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\NewAzurePeeringServiceCommand.cs,NewPeeringServiceFromResourceGroupAndName,The length of the statement  "                if (this.ShouldProcess(string.Format(Resources.ShouldProcessMessage' $"a peering service with resource group:{this.ResourceGroupName} and name:{this.Name}."))) " is 159.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,GetAzurePeeringServicePrefixCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\Prefix\GetAzurePeeringServicePrefixCommand.cs,ListPeeringService,The length of the statement  "            return this.PrefixesClient.ListByPeeringService(this.ResourceGroupName' this.PeeringServiceName' this.Expand ? "events" : null).Select(ToPeeringServicePrefixPS).ToList(); " is 170.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,GetAzurePeeringServicePrefixCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\Prefix\GetAzurePeeringServicePrefixCommand.cs,GetPeeringServicePrefixByResourceAndName,The length of the statement  "            var prefix = this.ToPeeringServicePrefixPS(this.PeeringServicePrefixesClient.Get(this.ResourceGroupName' this.PeeringServiceName' this.Name' this.Expand ? "events" : null)); " is 173.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServicePrefixCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\Prefix\NewAzurePeeringServicePrefixCommand.cs,NewPeeringServicePrefix,The length of the statement  "            if (this.ShouldProcess(string.Format(Resources.ShouldProcessMessage' $"peering service prefix for the resource group name:{this.ResourceGroupName} peering service name:{this.PeeringServiceName} and resource name:{this.Name}."))) " is 228.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServicePrefixCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\Prefix\NewAzurePeeringServicePrefixCommand.cs,NewPeeringServicePrefix,The length of the statement  "                this.PeeringServicePrefixesClient.CreateOrUpdate(this.ResourceGroupName' this.PeeringServiceName' this.Name' prefix.Prefix); " is 124.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringServicePrefixCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\PeeringService\Prefix\NewAzurePeeringServicePrefixCommand.cs,NewPeeringServicePrefix,The length of the statement  "                return this.ToPeeringServicePrefixPS(this.PeeringServicePrefixesClient.Get(this.ResourceGroupName' this.PeeringServiceName' this.Name)); " is 136.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,GetAzurePeeringLocationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\GetAzurePeeringLocationCommand.cs,FilterPeeringLocations,The length of the statement  "                peeringLocationFiltered = peeringLocation.Where(x => x.PeeringLocation.StartsWith(this.PeeringLocation' StringComparison.InvariantCultureIgnoreCase) || x.PeeringLocation.Contains(this.PeeringLocation)); " is 202.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,GetAzurePeeringLocationCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\GetAzurePeeringLocationCommand.cs,FilterPeeringLocations,The length of the statement  "                peeringLocationFiltered = (peeringLocationFiltered ?? peeringLocation).Where(x => x.PeeringDBFacilityId.Equals(this.PeeringDbFacilityId)); " is 138.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\NewAzurePeeringCommand.cs,CreateDirectPeering,The length of the statement  "            if (this.Sku.Equals(Constants.PremiumDirectMetered' StringComparison.InvariantCultureIgnoreCase) || this.Sku.Equals(Constants.PremiumDirectUnlimited' StringComparison.InvariantCultureIgnoreCase)) " is 195.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\NewAzurePeeringCommand.cs,CreateDirectPeering,The length of the statement  "                peeringRequest.Sku = this.DirectConnection.Any((c) => c.UseForPeeringService == true) ? new PSPeeringSku { Name = Constants.PremiumDirectFree } : new PSPeeringSku { Name = Constants.BasicDirectFree }; " is 200.
Long Statement,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\NewAzurePeeringCommand.cs,PutNewPeering,The length of the statement  "            return PeeringResourceManagerProfile.Mapper.Map<PSPeering>(this.PeeringClient.CreateOrUpdate(this.ResourceGroupName' this.Name' peering)); " is 138.
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,ToByteArray,The following statement contains a magic number: var byteArray = new byte[Math.Max(1' self.Count / 8)];
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,ToByteArray,The following statement contains a magic number: byteArray[byteIndex] |= (byte)(1 << (7 - bitIndex));
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,ToByteArray,The following statement contains a magic number: bitIndex == 8
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,SwapByte,The following statement contains a magic number: var counter = 8;
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,GetBigIntegerContent,The following statement contains a magic number: addressBytes.Length > 4 && addressBytes.Length % 4 != 0
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,GetBigIntegerContent,The following statement contains a magic number: addressBytes.Length > 4 && addressBytes.Length % 4 != 0
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,HelperExtensionMethods,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\HelperExtensionMethods.cs,GetBigIntegerContent,The following statement contains a magic number: notPaddedAddressBytes = new byte[4];
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,PeeringBaseCmdlet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\PeeringBaseCmdlet.cs,ValidatePrefix,The following statement contains a magic number: switch (prefix.PrefixAddressFamily)                  {                      case AddressFamily.InterNetwork:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth == 30 || prefix.PrefixMaskWidth == 31))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "either /30 or /31"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length == 4)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork) + "/30"));                                  }                                  else if (prefix.Length == 2)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt - 1).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                    throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/30"' "/31"));                              }                          }                          if (peeringType.Equals(Constants.PeeringService' StringComparison.OrdinalIgnoreCase))                          {                              if (prefix.PrefixMaskWidth <= 23)                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefix' routePrefix' "/24 - or /32"));                              }                              else                              {                                  var actualPrefixBigInt = prefix.ActualPrefixBigInt;                                  if (prefix.Length <= 256)                                  {                                      return prefix.StartOfPrefixBigInt == actualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetwork)));                                  }                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/24"' "/31"));                              }                          }                            return routePrefix;                        case AddressFamily.InterNetworkV6:                          if (peeringType.Equals(Constants.Direct' StringComparison.OrdinalIgnoreCase))                          {                              if (!(prefix.PrefixMaskWidth >= 64 && prefix.PrefixMaskWidth <= 127))                              {                                  throw new PSArgumentOutOfRangeException(                                      string.Format(Resources.Error_InvalidPrefixRange' routePrefix' "/64"' "/127"));                              }                                switch (prefix.PrefixMaskWidth)                              {                                  case 127:                                      return prefix.StartOfPrefixBigInt == prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new PSArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefix'                                                           routePrefix'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                                    default:                                      return prefix.StartOfPrefixBigInt + 1 <= prefix.ActualPrefixBigInt                                                 ? routePrefix                                                 : throw new ArgumentException(                                                       string.Format(                                                           Resources.Error_InvalidPrefixRange'                                                           routePrefix'                                                           (prefix.StartOfPrefixBigInt + 1).ToIpAddress(                                                               AddressFamily.InterNetworkV6)'                                                           (prefix.EndOfPrefixBigInt).ToIpAddress(                                                               AddressFamily.InterNetworkV6)));                              }                          }                            return routePrefix;                  }
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,RoutePrefix,The following statement contains a magic number: parts.Length != 2
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,GetValidPrefix,The following statement contains a magic number: parts.Length != 2
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,GetValidPrefix,The following statement contains a magic number: var startIndex = address.AddressFamily == AddressFamily.InterNetwork ? 32 : 128;
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,GetValidPrefix,The following statement contains a magic number: var startIndex = address.AddressFamily == AddressFamily.InterNetwork ? 32 : 128;
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,Init,The following statement contains a magic number: var length = BigInteger.Pow(                  2'                  address.AddressFamily == AddressFamily.InterNetwork ? (32 - prefixLength) : (128 - prefixLength));
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,Init,The following statement contains a magic number: var length = BigInteger.Pow(                  2'                  address.AddressFamily == AddressFamily.InterNetwork ? (32 - prefixLength) : (128 - prefixLength));
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Common,RoutePrefix,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Common\RoutePrefix.cs,Init,The following statement contains a magic number: var length = BigInteger.Pow(                  2'                  address.AddressFamily == AddressFamily.InterNetwork ? (32 - prefixLength) : (128 - prefixLength));
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,NewAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\NewAzureDirectPeeringConnectionCommand.cs,CreateDirectPeering,The following statement contains a magic number: peeringRequest.BgpSession = new PSBgpSession                  {                      MaxPrefixesAdvertisedV4 = !string.IsNullOrEmpty(this.SessionPrefixV4) ? (this.MaxPrefixesAdvertisedIPv4 ?? 20000) : (int?)null'                      MaxPrefixesAdvertisedV6 = !string.IsNullOrEmpty(this.SessionPrefixV6) ? (this.MaxPrefixesAdvertisedIPv6 ?? 2000) : (int?)null'                      SessionPrefixV4 = this.ValidatePrefix(this.SessionPrefixV4?.Trim())'                      SessionPrefixV6 = this.ValidatePrefix(this.SessionPrefixV6?.Trim())'                      Md5AuthenticationKey = this.MD5AuthenticationKey                  };
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Direct,NewAzureDirectPeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Direct\NewAzureDirectPeeringConnectionCommand.cs,CreateDirectPeering,The following statement contains a magic number: peeringRequest.BgpSession = new PSBgpSession                  {                      MaxPrefixesAdvertisedV4 = !string.IsNullOrEmpty(this.SessionPrefixV4) ? (this.MaxPrefixesAdvertisedIPv4 ?? 20000) : (int?)null'                      MaxPrefixesAdvertisedV6 = !string.IsNullOrEmpty(this.SessionPrefixV6) ? (this.MaxPrefixesAdvertisedIPv6 ?? 2000) : (int?)null'                      SessionPrefixV4 = this.ValidatePrefix(this.SessionPrefixV4?.Trim())'                      SessionPrefixV6 = this.ValidatePrefix(this.SessionPrefixV6?.Trim())'                      Md5AuthenticationKey = this.MD5AuthenticationKey                  };
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,NewAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\NewAzureExchangePeeringConnectionCommand.cs,CreateExchangePeeringConnection,The following statement contains a magic number: var peeringRequest = new PSExchangeConnection              {                  ConnectionIdentifier = Guid.NewGuid().ToString()'                  BgpSession = new PSBgpSession                  {                      MaxPrefixesAdvertisedV4 = !string.IsNullOrEmpty(this.PeerSessionIPv4Address) ? (this.MaxPrefixesAdvertisedIPv4 ?? 20000) : (int?)null'                      MaxPrefixesAdvertisedV6 = !string.IsNullOrEmpty(this.PeerSessionIPv6Address) ? (this.MaxPrefixesAdvertisedIPv6 ?? 2000) : (int?)null'                      Md5AuthenticationKey = this.MD5AuthenticationKey'                      PeerSessionIPv4Address = this.PeerSessionIPv4Address?.Trim()'                      PeerSessionIPv6Address = this.PeerSessionIPv6Address?.Trim()                  }'                  PeeringDBFacilityId = this.PeeringDBFacilityId'              };
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,NewAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\NewAzureExchangePeeringConnectionCommand.cs,CreateExchangePeeringConnection,The following statement contains a magic number: var peeringRequest = new PSExchangeConnection              {                  ConnectionIdentifier = Guid.NewGuid().ToString()'                  BgpSession = new PSBgpSession                  {                      MaxPrefixesAdvertisedV4 = !string.IsNullOrEmpty(this.PeerSessionIPv4Address) ? (this.MaxPrefixesAdvertisedIPv4 ?? 20000) : (int?)null'                      MaxPrefixesAdvertisedV6 = !string.IsNullOrEmpty(this.PeerSessionIPv6Address) ? (this.MaxPrefixesAdvertisedIPv6 ?? 2000) : (int?)null'                      Md5AuthenticationKey = this.MD5AuthenticationKey'                      PeerSessionIPv4Address = this.PeerSessionIPv4Address?.Trim()'                      PeerSessionIPv6Address = this.PeerSessionIPv6Address?.Trim()                  }'                  PeeringDBFacilityId = this.PeeringDBFacilityId'              };
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,SetAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\SetAzureExchangePeeringConnectionCommand.cs,UpdateIpV4Prefix,The following statement contains a magic number: this.InputObject.BgpSession.MaxPrefixesAdvertisedV4 =                  this.MaxPrefixesAdvertisedIPv4 == null ? (this.InputObject.BgpSession.MaxPrefixesAdvertisedV4 != 0 ? this.InputObject.BgpSession.MaxPrefixesAdvertisedV4 : 20000) : this.MaxPrefixesAdvertisedIPv4;
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Exchange,SetAzureExchangePeeringConnectionCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Exchange\SetAzureExchangePeeringConnectionCommand.cs,UpdateIpV6Prefix,The following statement contains a magic number: this.InputObject.BgpSession.MaxPrefixesAdvertisedV6 =                  this.MaxPrefixesAdvertisedIPv6 == null ? (this.InputObject.BgpSession.MaxPrefixesAdvertisedV6 != 0 ? this.InputObject.BgpSession.MaxPrefixesAdvertisedV6 : 2000) : this.MaxPrefixesAdvertisedIPv6;
Magic Number,Microsoft.Azure.PowerShell.Cmdlets.Peering.Peering,NewAzurePeeringCommand,D:\research\architectureSmells\repos\Azure_azure-powershell\src\Peering\Peering\Peering\NewAzurePeeringCommand.cs,ConvertClassicToDirectPeering,The following statement contains a magic number: connection.BandwidthInMbps = connection.ProvisionedBandwidthInMbps ?? 10000;
