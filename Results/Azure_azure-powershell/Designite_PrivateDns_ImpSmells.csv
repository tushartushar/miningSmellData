Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,FillRecordsForType,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.PrivateDns.Models,PSPrivateDnsRecordBase,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PSPrivateDnsRecordSet.cs,FromMamlRecord,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Azure.Commands.PrivateDns.Records,AddAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\AddAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Azure.Commands.PrivateDns.Records,NewAzureRmDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\NewAzureRmPrivateDnsRecordConfig.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,CreatePrivateDnsLink,The method has 7 parameters. Parameters: name' resourceGroupName' zoneName' virtualNetworkId' isRegistrationEnabled' tags' customHeaders
Long Parameter List,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,CreatePrivateDnsRecordSet,The method has 8 parameters. Parameters: zoneName' resourceGroupName' relativeRecordSetName' ttl' recordType' tags' overwrite' resourceRecords
Long Parameter List,Microsoft.Azure.Commands.PrivateDns.Utilities,PrivateDnsUtils,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Utilities\PrivateDnsUtils.cs,GetResourceGroupNameZoneNameRecordNameAndRecordTypeFromResourceId,The method has 5 parameters. Parameters: resourceId' resourceGroupName' zoneName' recordName' recordType
Long Identifier,Microsoft.Azure.Commands.PrivateDns.Records,GetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\GetAzurePrivateDnsRecordSet.cs,,The length of the parameter FieldsWithNoNameParameterSetName is 32.
Long Identifier,Microsoft.Azure.Commands.PrivateDns.Records,GetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\GetAzurePrivateDnsRecordSet.cs,,The length of the parameter ObjectWithNoNameParameterSetName is 32.
Long Identifier,Microsoft.Azure.Commands.PrivateDns.Records,GetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\GetAzurePrivateDnsRecordSet.cs,,The length of the parameter ResourceWithNoNameParameterSetName is 34.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,ListPrivateDnsZonesInResourceGroup,The length of the statement  "                getResponse = getResponse?.NextPageLink != null ? this.PrivateDnsManagementClient.PrivateZones.ListByResourceGroupNext(getResponse.NextPageLink) : this.PrivateDnsManagementClient.PrivateZones.ListByResourceGroup(resourceGroupName); " is 231.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,ListPrivateDnsZonesInSubscription,The length of the statement  "                getResponse = getResponse?.NextPageLink != null ? this.PrivateDnsManagementClient.PrivateZones.ListNext(getResponse.NextPageLink) : this.PrivateDnsManagementClient.PrivateZones.List(); " is 184.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,ListPrivateDnsLinksInZone,The length of the statement  "                getResponse = getResponse?.NextPageLink != null ? this.PrivateDnsManagementClient.VirtualNetworkLinks.ListNext(getResponse.NextPageLink) : this.PrivateDnsManagementClient.VirtualNetworkLinks.List(resourceGroupName' zoneName); " is 225.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,ConstructRecordSetProperties,The length of the statement  "                    throw new ArgumentException(string.Format(ProjectResources.Error_AddRecordTypeMismatch' mismatchedRecord.GetType()' recordType)); " is 129.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,AddAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\AddAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                throw new ArgumentException(string.Format(ProjectResources.Error_AddRecordTypeMismatch' this.ParameterSetName' this.RecordSet.RecordType)); " is 139.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,AddAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\AddAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                        result.Records.Add(new Models.SrvRecord { Priority = this.Priority' Port = this.Port' Target = this.Target' Weight = this.Weight }); " is 132.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,GetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\GetAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                    PrivateDnsUtils.GetResourceGroupNameAndZoneNameFromResourceId(this.ParentResourceId' out resourceGroupName' out zoneName); " is 122.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,GetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\GetAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                var result = this.PrivateDnsClient.GetPrivateDnsRecordSet(this.Name' zoneName' resourceGroupName' this.RecordType.Value); " is 121.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,GetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\GetAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                result = this.RecordType == null ? this.PrivateDnsClient.ListRecordSets(zoneName' resourceGroupName) : this.PrivateDnsClient.ListRecordSets(zoneName' resourceGroupName' this.RecordType.Value); " is 192.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,NewAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\NewAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                    PrivateDnsUtils.GetResourceGroupNameAndZoneNameFromResourceId(this.ParentResourceId' out resourceGroupName' out zoneName); " is 122.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,NewAzureRmDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\NewAzureRmPrivateDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                        result = new Models.SrvRecord { Priority = this.Priority' Port = this.Port' Target = this.Target' Weight = this.Weight }; " is 121.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                throw new ArgumentException(string.Format(ProjectResources.Error_RemoveRecordTypeMismatch' this.ParameterSetName' this.RecordSet.RecordType)); " is 142.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,The length of the statement  "                            throw new ArgumentException(string.Format(ProjectResources.Error_RemoveRecordTypeNotAllowed' this.ParameterSetName' this.RecordSet.RecordType)); " is 144.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                        ResourceGroupName = (this.ParameterSetName == FieldsParameterSetName) ? this.ResourceGroupName : this.Zone.ResourceGroupName' " is 125.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                case ObjectParameterSetName when (string.IsNullOrWhiteSpace(this.RecordSet.Etag) || this.RecordSet.Etag == "*") && !this.Overwrite.IsPresent: " is 141.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                    throw new PSArgumentException(string.Format(ProjectResources.Error_EtagNotSpecified' typeof(PSPrivateDnsRecordSet).Name)); " is 122.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                    PrivateDnsUtils.GetResourceGroupNameZoneNameRecordNameAndRecordTypeFromResourceId(ResourceId' out var resourceGroupName' out var zoneName' out var recordName' out var recordType); " is 179.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Records,SetAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\SetAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The length of the statement  "                throw new PSArgumentException(string.Format(ProjectResources.Error_EtagNotSpecified' typeof(PSPrivateDnsRecordSet).Name)); " is 122.
Long Statement,Microsoft.Azure.Commands.PrivateDns.VirtualNetworkLinks,NewAzurePrivateDnsVirtualNetworkLink,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\VirtualNetworkLinks\NewAzurePrivateDnsVirtualNetworkLink.cs,ExecuteCmdlet,The length of the statement  "                        (this.VirtualNetwork != null) ? this.VirtualNetwork.Id : (this.VirtualNetworkId != null) ? this.VirtualNetworkId : this.RemoteVirtualNetworkId' " is 143.
Long Statement,Microsoft.Azure.Commands.PrivateDns.VirtualNetworkLinks,RemoveAzurePrivateDnsVirtualNetworkLink,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\VirtualNetworkLinks\RemoveAzurePrivateDnsVirtualNetworkLink.cs,ExecuteCmdlet,The length of the statement  "                throw new PSArgumentException(string.Format(ProjectResources.Error_EtagNotSpecified' typeof(PSPrivateDnsVirtualNetworkLink).Name)); " is 131.
Long Statement,Microsoft.Azure.Commands.PrivateDns.VirtualNetworkLinks,SetAzurePrivateDnsVirtualNetworkLink,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\VirtualNetworkLinks\SetAzurePrivateDnsVirtualNetworkLink.cs,ExecuteCmdlet,The length of the statement  "                case ObjectParameterSetName when (string.IsNullOrWhiteSpace(this.InputObject.Etag) || this.InputObject.Etag == "*") && !this.Overwrite.IsPresent: " is 145.
Long Statement,Microsoft.Azure.Commands.PrivateDns.VirtualNetworkLinks,SetAzurePrivateDnsVirtualNetworkLink,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\VirtualNetworkLinks\SetAzurePrivateDnsVirtualNetworkLink.cs,ExecuteCmdlet,The length of the statement  "                    throw new PSArgumentException(string.Format(ProjectResources.Error_EtagNotSpecified' typeof(PSPrivateDnsVirtualNetworkLink).Name)); " is 131.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Zones,RemoveAzurePrivateDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Zones\RemoveAzurePrivateDnsZone.cs,ExecuteCmdlet,The length of the statement  "                PrivateDnsUtils.GetResourceGroupNameAndZoneNameFromResourceId(this.ResourceId' out var resourceGroupName' out var zoneName); " is 124.
Long Statement,Microsoft.Azure.Commands.PrivateDns.Zones,SetAzurePrivateDnsZone,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Zones\SetAzurePrivateDnsZone.cs,ExecuteCmdlet,The length of the statement  "                    PrivateDnsUtils.GetResourceGroupNameAndZoneNameFromResourceId(this.ResourceId' out var resourceGroupName' out var zoneName); " is 124.
Missing Default,Microsoft.Azure.Commands.PrivateDns.Models,PrivateDnsClient,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Models\PrivateDnsClient.cs,FillRecordsForType,The following switch statement is missing a default case: switch (recordType)              {                  case RecordType.A:                      properties.ARecords = resourceRecords.Select(x => (Sdk.ARecord)(x as ARecord)?.ToMamlRecord()).ToList();                      break;                  case RecordType.AAAA:                      properties.AaaaRecords = resourceRecords.Select(x => (Sdk.AaaaRecord)(x as AaaaRecord)?.ToMamlRecord()).ToList();                      break;                  case RecordType.CNAME:                      if (resourceRecords.Count > 1)                      {                          throw new ArgumentException(ProjectResources.Error_AddRecordMultipleCnames);                      }                        properties.CnameRecord = (Sdk.CnameRecord)resourceRecords[0].ToMamlRecord();                      break;                  case RecordType.MX:                      properties.MxRecords = resourceRecords.Select(x => (Sdk.MxRecord)(x as MxRecord)?.ToMamlRecord()).ToList();                      break;                  case RecordType.PTR:                      properties.PtrRecords = resourceRecords.Select(x => (Sdk.PtrRecord)(x as PtrRecord)?.ToMamlRecord()).ToList();                      break;                  case RecordType.SRV:                      properties.SrvRecords = resourceRecords.Select(x => (Sdk.SrvRecord)(x as SrvRecord)?.ToMamlRecord()).ToList();                      break;                  case RecordType.TXT:                      properties.TxtRecords = resourceRecords.Select(x => (Sdk.TxtRecord)(x as TxtRecord)?.ToMamlRecord()).ToList();                      break;                  case RecordType.SOA:                      properties.SoaRecord = (Sdk.SoaRecord)resourceRecords[0].ToMamlRecord();                      break;              }
Missing Default,Microsoft.Azure.Commands.PrivateDns.Records,AddAzurePrivateDnsRecordConfig,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\AddAzurePrivateDnsRecordConfig.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (result.RecordType)              {                  case RecordType.A:                      {                          result.Records.Add(new Models.ARecord { Ipv4Address = this.Ipv4Address });                          break;                      }                    case RecordType.AAAA:                      {                          result.Records.Add(new Models.AaaaRecord { Ipv6Address = this.Ipv6Address });                          break;                      }                    case RecordType.MX:                      {                          result.Records.Add(new Models.MxRecord { Preference = this.Preference' Exchange = this.Exchange });                          break;                      }                    case RecordType.SRV:                      {                          result.Records.Add(new Models.SrvRecord { Priority = this.Priority' Port = this.Port' Target = this.Target' Weight = this.Weight });                          break;                      }                  case RecordType.TXT:                      {                          result.Records.Add(new Models.TxtRecord { Value = this.Value });                          break;                      }                  case RecordType.PTR:                      {                          result.Records.Add(new Models.PtrRecord { Ptrdname = this.Ptrdname });                          break;                      }                  case RecordType.CNAME:                      {                          if (result.Records.Count != 0)                          {                              if (!(result.Records[0] is Models.CnameRecord currentCNameRecord))                              {                                  throw new ArgumentException(ProjectResources.Error_AddRecordTypeMismatch);                              }                                if (!string.IsNullOrEmpty(currentCNameRecord.Cname))                              {                                  throw new ArgumentException(ProjectResources.Error_AddRecordMultipleCnames);                              }                                result.Records.Clear();                          }                            result.Records.Add(new Models.CnameRecord { Cname = this.Cname });                          break;                      }              }
Missing Default,Microsoft.Azure.Commands.PrivateDns.Records,NewAzurePrivateDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\NewAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (this.ParameterSetName)              {                  case FieldsParameterSetName:                      zoneName = this.ZoneName;                      resourceGroupName = this.ResourceGroupName;                      break;                  case ObjectParameterSetName:                      zoneName = this.Zone.Name;                      resourceGroupName = this.Zone.ResourceGroupName;                      break;                  case ResourceParameterSetName:                      PrivateDnsUtils.GetResourceGroupNameAndZoneNameFromResourceId(this.ParentResourceId' out resourceGroupName' out zoneName);                      break;              }
Missing Default,Microsoft.Azure.Commands.PrivateDns.Records,RemoveAzureDnsRecordSet,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\Records\RemoveAzurePrivateDnsRecordSet.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (this.ParameterSetName)              {                  case FieldsParameterSetName:                  case MixedParameterSetName:                  {                      if (this.Name.EndsWith("."))                      {                          this.Name = this.Name.TrimEnd('.');                          this.WriteWarning(string.Format(ProjectResources.Progress_ModifyingRecordSetNameTrimDot' this.Name));                      }                        recordSetToDelete = new PSPrivateDnsRecordSet                      {                          Name = this.Name'                          Etag = null'                          RecordType = this.RecordType'                          ResourceGroupName = (this.ParameterSetName == FieldsParameterSetName) ? this.ResourceGroupName : this.Zone.ResourceGroupName'                          ZoneName = (this.ParameterSetName == FieldsParameterSetName) ? this.ZoneName : this.Zone.Name'                      };                      break;                  }                    case ObjectParameterSetName when (string.IsNullOrWhiteSpace(this.RecordSet.Etag) || this.RecordSet.Etag == "*") && !this.Overwrite.IsPresent:                      throw new PSArgumentException(string.Format(ProjectResources.Error_EtagNotSpecified' typeof(PSPrivateDnsRecordSet).Name));                    case ObjectParameterSetName:                      recordSetToDelete = this.RecordSet;                      break;                    case ResourceParameterSetName:                  {                      PrivateDnsUtils.GetResourceGroupNameZoneNameRecordNameAndRecordTypeFromResourceId(ResourceId' out var resourceGroupName' out var zoneName' out var recordName' out var recordType);                      recordSetToDelete = new PSPrivateDnsRecordSet                      {                          Name = recordName'                          Etag = null'                          RecordType = (RecordType) Enum.Parse(typeof(RecordType)' recordType' true)'                          ResourceGroupName = resourceGroupName'                          ZoneName = zoneName'                      };                      break;                  }              }
Missing Default,Microsoft.Azure.Commands.PrivateDns.VirtualNetworkLinks,SetAzurePrivateDnsVirtualNetworkLink,D:\research\architectureSmells\repos\Azure_azure-powershell\src\PrivateDns\PrivateDns\VirtualNetworkLinks\SetAzurePrivateDnsVirtualNetworkLink.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (this.ParameterSetName)              {                  case FieldsParameterSetName:                  case ResourceParameterSetName:                  {                      if (!string.IsNullOrEmpty(this.ResourceId))                      {                          PrivateDnsUtils.ParseVirtualNetworkId(this.ResourceId' out var resourceGroupName' out var zoneName' out var linkName);                          this.ResourceGroupName = resourceGroupName;                          this.ZoneName = zoneName;                          this.Name = linkName;                      }                        this.ZoneName = TrimTrailingDotInZoneName(this.ZoneName);                        linkToUpdate = this.PrivateDnsClient.GetPrivateDnsLink(this.Name' this.ResourceGroupName' this.ZoneName);                      linkToUpdate.Etag = "*";                      linkToUpdate.ZoneName = this.ZoneName;                      break;                  }                    case ObjectParameterSetName when (string.IsNullOrWhiteSpace(this.InputObject.Etag) || this.InputObject.Etag == "*") && !this.Overwrite.IsPresent:                      throw new PSArgumentException(string.Format(ProjectResources.Error_EtagNotSpecified' typeof(PSPrivateDnsVirtualNetworkLink).Name));                    case ObjectParameterSetName:                      linkToUpdate = this.InputObject;                      break;              }
