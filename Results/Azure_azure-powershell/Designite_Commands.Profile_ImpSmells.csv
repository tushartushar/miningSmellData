Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.Profile,SetAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\SetAzureRMEnvironment.cs,ExecuteCmdlet,The method has 131 lines of code.
Long Method,Microsoft.Azure.Commands.Profile,AddAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\AddAzureRMEnvironment.cs,ExecuteCmdlet,The method has 131 lines of code.
Long Method,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,Login,The method has 139 lines of code.
Complex Method,Microsoft.Azure.Commands.Profile,AddAzureRMAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Account\AddAzureRmAccount.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Azure.Commands.Profile.Default,ClearAzureRMDefaultCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Default\ClearAzureRmDefault.cs,ExecuteCmdlet,Cyclomatic complexity of the method is 10
Long Parameter List,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,Login,The method has 9 parameters. Parameters: account' environment' tenantId' subscriptionId' subscriptionName' password' skipValidation' promptAction' name
Long Parameter List,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,AcquireAccessToken,The method has 6 parameters. Parameters: account' environment' tenantId' password' promptBehavior' promptAction
Long Parameter List,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,TryGetTenantSubscription,The method has 8 parameters. Parameters: accessToken' account' environment' tenantId' subscriptionId' subscriptionName' subscription' tenant
Long Parameter List,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,ListAccountTenants,The method has 5 parameters. Parameters: account' environment' password' promptBehavior' promptAction
Long Identifier,Microsoft.Azure.Commands.Profile,SetAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\SetAzureRMEnvironment.cs,,The length of the parameter _defaultDataLakeResourceEndpoint is 32.
Long Identifier,Microsoft.Azure.Commands.Profile,SetAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\SetAzureRMEnvironment.cs,,The length of the parameter EnvironmentPropertiesParameterSet is 33.
Long Identifier,Microsoft.Azure.Commands.Profile,AddAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\AddAzureRMEnvironment.cs,,The length of the parameter _defaultDataLakeResourceEndpoint is 32.
Long Identifier,Microsoft.Azure.Commands.Profile,AddAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\AddAzureRMEnvironment.cs,,The length of the parameter EnvironmentPropertiesParameterSet is 33.
Long Identifier,Microsoft.Azure.Commands.Profile,GetAzureRMSubscriptionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Subscription\GetAzureRMSubscription.cs,,The length of the parameter ListByNameInTenantParameterSet is 30.
Long Identifier,Microsoft.Azure.Commands.Profile,AddAzureRMAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Account\AddAzureRmAccount.cs,,The length of the parameter ServicePrincipalCertificateParameterSet is 39.
Long Identifier,Microsoft.Azure.Commands.Profile,SetAzureRMContextCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\SetAzureRMContext.cs,,The length of the parameter SubscriptionObjectParameterSet is 30.
Long Statement,Microsoft.Azure.Commands.Profile,RemoveAzureRMAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Account\RemoveAzureRmAccount.cs,ExecuteCmdlet,The length of the statement  "                           var matchingContexts = localProfile.Contexts?.Values?.Where((c) => c != null && c.Account != null && string.Equals(c.Account.Id' azureAccount.Id' StringComparison.CurrentCultureIgnoreCase)); " is 190.
Long Statement,Microsoft.Azure.Commands.Profile,EnableAzureRmDataCollectionCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\DataCollection\EnableAzureRMDataCollection.cs,SetDataCollectionProfile,The length of the statement  "            AzureSession.Instance.RegisterComponent(DataCollectionController.RegistryKey' () => DataCollectionController.Create(profile)' true); " is 132.
Long Statement,Microsoft.Azure.Commands.Profile,RemoveAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\RemoveAzureRMEnvironment.cs,ExecuteCmdlet,The length of the statement  "                () => ModifyContext((profile' profileClient) => WriteObject(new PSAzureEnvironment(profileClient.RemoveEnvironment(Name))))); " is 125.
Long Statement,Microsoft.Azure.Commands.Profile,SetAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\SetAzureRMEnvironment.cs,ExecuteCmdlet,The length of the statement  "                    if (AzureEnvironment.PublicEnvironments.Keys.Any((k) => string.Equals(k' Name' StringComparison.CurrentCultureIgnoreCase))) " is 123.
Long Statement,Microsoft.Azure.Commands.Profile,SetAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\SetAzureRMEnvironment.cs,ExecuteCmdlet,The length of the statement  "                                newEnvironment.OnPremise = metadataEndpoints.authentication.LoginEndpoint.TrimEnd('/').EndsWith("/adfs"' System.StringComparison.OrdinalIgnoreCase); " is 148.
Long Statement,Microsoft.Azure.Commands.Profile,AddAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\AddAzureRMEnvironment.cs,ExecuteCmdlet,The length of the statement  "                    if (AzureEnvironment.PublicEnvironments.Keys.Any((k) => string.Equals(k' Name' StringComparison.CurrentCultureIgnoreCase))) " is 123.
Long Statement,Microsoft.Azure.Commands.Profile,AddAzureRMEnvironmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Environment\AddAzureRMEnvironment.cs,ExecuteCmdlet,The length of the statement  "                                newEnvironment.OnPremise = metadataEndpoints.authentication.LoginEndpoint.TrimEnd('/').EndsWith("/adfs"' System.StringComparison.OrdinalIgnoreCase); " is 148.
Long Statement,Microsoft.Azure.Commands.Profile,SendFeedbackCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Feedback\SendFeedback.cs,BeginProcessing,The length of the statement  "                throw new PSInvalidOperationException(String.Format(Resources.SendFeedbackNonInteractiveMessage' nameof(SendFeedbackCommand))); " is 127.
Long Statement,Microsoft.Azure.Commands.Profile,SendFeedbackCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Feedback\SendFeedback.cs,WriteQuestion,The length of the statement  "            this.Host.UI.WriteLine(ConsoleColor.Cyan' this.Host.UI.RawUI.BackgroundColor' $"{Environment.NewLine}{question}{Environment.NewLine}"); " is 135.
Long Statement,Microsoft.Azure.Commands.Profile,GetAzureRMContextCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\GetAzureRMContext.cs,GetDynamicParameters,The length of the statement  "                        new ParameterAttribute { Position =0' Mandatory=false' HelpMessage="The name of the context"' ParameterSetName=GetSingleParameterSet }' " is 135.
Long Statement,Microsoft.Azure.Commands.Profile,SetAzureRMContextCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\SetAzureRMContext.cs,ExecuteCmdlet,The length of the statement  "                    throw new ArgumentException("You must supply a valid tenant object with a valid Id or a valid tenant id string. Please check the input tenant value and try again."); " is 165.
Long Statement,Microsoft.Azure.Commands.Profile.Context,EnableAzureRmContextAutosave,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\AutoSave\EnableAzureRmContextAutosave.cs,EnableAutosave,The length of the statement  "                throw new PSInvalidOperationException(string.Format("'{0}' is not a valid path. You cannot enable context autosave without a valid context path")); " is 147.
Long Statement,Microsoft.Azure.Commands.Profile.Context,EnableAzureRmContextAutosave,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\AutoSave\EnableAzureRmContextAutosave.cs,EnableAutosave,The length of the statement  "                throw new PSInvalidOperationException(string.Format("'{0}' is not a valid path. You cannot enable context autosave without a valid token cache path")); " is 151.
Long Statement,Microsoft.Azure.Commands.Profile.Context,RenameAzureRmContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\RenameAzureRmContext.cs,ExecuteCmdlet,The length of the statement  "                if (!string.IsNullOrWhiteSpace(sourceName) && !string.IsNullOrWhiteSpace(targetName) && defaultProfile != null && !string.Equals(sourceName' targetName' StringComparison.OrdinalIgnoreCase)) " is 189.
Long Statement,Microsoft.Azure.Commands.Profile.Context,RenameAzureRmContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\RenameAzureRmContext.cs,ExecuteCmdlet,The length of the statement  "                                if (profile.Contexts.ContainsKey(sourceName) && (!profile.Contexts.ContainsKey(targetName) || client.TryRemoveContext(targetName))) " is 131.
Long Statement,Microsoft.Azure.Commands.Profile.Common,AzureContextModificationCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\AzureContextModificationCmdlet.cs,GetDefaultProfile,The length of the statement  "                    result = new AzureRmAutosaveProfile(currentProfile' ProtectedFileProvider.CreateFileProvider(Path.Combine(AzureSession.Instance.ARMProfileDirectory' AzureSession.Instance.ARMProfileFile)' FileProtection.ExclusiveWrite)); " is 220.
Long Statement,Microsoft.Azure.Commands.Profile.Common,AzureContextModificationCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\AzureContextModificationCmdlet.cs,GetContextModificationScope,The length of the statement  "            if (MyInvocation != null && MyInvocation.BoundParameters != null && MyInvocation.BoundParameters.ContainsKey(nameof(DefaultProfile))) " is 133.
Long Statement,Microsoft.Azure.Commands.Profile.Common,AzureContextModificationCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\AzureContextModificationCmdlet.cs,GetContextModificationScope,The length of the statement  "            else if (MyInvocation != null && MyInvocation.BoundParameters != null && MyInvocation.BoundParameters.ContainsKey(nameof(Scope))) " is 129.
Long Statement,Microsoft.Azure.Commands.Profile.Common,AzureContextModificationCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\AzureContextModificationCmdlet.cs,TryGetExistingContextNameParameter,The length of the statement  "                    new ParameterAttribute { Position =0' Mandatory=true' HelpMessage="The name of the context"' ParameterSetName = parameterSetName }' " is 131.
Long Statement,Microsoft.Azure.Commands.Profile.Common,ScopeHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\ScopeHelpers.cs,GetContextModificationScopeForProcess,The length of the statement  "            ContextModificationScope scope = AzureSession.Instance.ARMContextSaveMode == ContextSaveMode.Process ? ContextModificationScope.Process : ContextModificationScope.CurrentUser; " is 175.
Long Statement,Microsoft.Azure.Commands.Profile.Common,ScopeHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\ScopeHelpers.cs,GetContextModificationScopeForUser,The length of the statement  "                var userAutoSaveSetting = Environment.GetEnvironmentVariable(AzureRmProfileConstants.ProfileAutoSaveVariable' EnvironmentVariableTarget.User); " is 142.
Long Statement,Microsoft.Azure.Commands.Profile.Common,ScopeHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\ScopeHelpers.cs,GetContextModificationScopeForUser,The length of the statement  "                var machineAutoSaveSetting = Environment.GetEnvironmentVariable(AzureRmProfileConstants.ProfileAutoSaveVariable' EnvironmentVariableTarget.Machine); " is 148.
Long Statement,Microsoft.Azure.Commands.Profile.Common,ScopeHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\ScopeHelpers.cs,GetContextModificationScopeForUser,The length of the statement  "                    writer(Resources.AutosaveSettingFromEnvironment' AzureRmProfileConstants.ProfileAutoSaveVariable' machineAutoSaveSetting); " is 122.
Long Statement,Microsoft.Azure.Commands.Profile.Common,ScopeHelpers,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\ScopeHelpers.cs,GetContextModificationScopeFromSaveMode,The length of the statement  "            return (saveMode == ContextSaveMode.CurrentUser ? ContextModificationScope.CurrentUser : ContextModificationScope.Process); " is 123.
Long Statement,Microsoft.Azure.Commands.Profile.Default,GetAzureRMDefaultCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Default\GetAzureRmDefault.cs,ExecuteCmdlet,The length of the statement  "                                    AzureSession.Instance.AuthenticationFactory.GetServiceClientCredentials(context' AzureEnvironment.Endpoint.ResourceManager)' " is 124.
Long Statement,Microsoft.Azure.Commands.Profile.Default,SetAzureRMDefaultCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Default\SetAzureRMDefault.cs,ExecuteCmdlet,The length of the statement  "            IResourceManagementClient resourceManagementclient = AzureSession.Instance.ClientFactory.CreateCustomArmClient<ResourceManagementClient>( " is 137.
Long Statement,Microsoft.Azure.Commands.Profile.Default,SetAzureRMDefaultCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Default\SetAzureRMDefault.cs,ExecuteCmdlet,The length of the statement  "                                AzureSession.Instance.AuthenticationFactory.GetServiceClientCredentials(context' AzureEnvironment.Endpoint.ResourceManager)' " is 124.
Long Statement,Microsoft.Azure.Commands.Profile.Default,SetAzureRMDefaultCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Default\SetAzureRMDefault.cs,ExecuteCmdlet,The length of the statement  "                if (ShouldProcess(Resources.DefaultResourceGroupTarget' string.Format(Resources.DefaultResourceGroupChangeWarning' ResourceGroupName))) " is 135.
Long Statement,Microsoft.Azure.Commands.Profile.Default,SetAzureRMDefaultCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Default\SetAzureRMDefault.cs,ExecuteCmdlet,The length of the statement  "                    if (!resourceManagementclient.ResourceGroups.CheckExistence(ResourceGroupName) && (Force.IsPresent || ShouldContinue(string.Format(Resources.CreateResourceGroupMessage' ResourceGroupName)' Resources.CreateResourceGroupCaption))) " is 228.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,AzureRMProfileExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\AzureRmProfileExtensions.cs,SetContextWithCache,The length of the statement  "            if (newContext.TokenCache != null && newContext.TokenCache.CacheData != null && newContext.TokenCache.CacheData.Length > 0) " is 123.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,Login,The length of the statement  "                            TryGetTenantSubscription(token' account' environment' tenant' subscriptionId' subscriptionName' out tempSubscription' out tempTenant)) " is 134.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,Login,The length of the statement  "                    throw new PSInvalidOperationException(String.Format(ResourceMessages.SubscriptionIdNotFound' account.Id' subscriptionId)); " is 122.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,Login,The length of the statement  "                    throw new PSInvalidOperationException(String.Format(ResourceMessages.SubscriptionNameNotFound' account.Id' subscriptionName)); " is 126.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,SetCurrentContext,The length of the statement  "                tenant = string.IsNullOrWhiteSpace(tenantId) ? (string.IsNullOrWhiteSpace(subscription.GetTenant())? context.Tenant : CreateTenant(subscription.GetTenant())):  CreateTenant(tenantId); " is 183.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,ListTenants,The length of the statement  "            List<AzureTenant> tenants = ListAccountTenants(_profile.DefaultContext.Account' _profile.DefaultContext.Environment' null' ShowDialog.Never' null); " is 147.
Long Statement,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,TryGetSubscriptionByName,The length of the statement  "            subscription = subscriptionList.FirstOrDefault(s => s.Name.Equals(subscriptionName' StringComparison.OrdinalIgnoreCase)); " is 121.
Long Statement,Microsoft.Azure.Commands.Profile.Utilities,EnvironmentHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Utilities\EnvironmentHelper.cs,RetrieveMetaDataEndpoints,The length of the statement  "            if ((null == response) || string.IsNullOrEmpty(response.GalleryEndpoint) || string.IsNullOrEmpty(response.GraphEndpoint) " is 120.
Complex Conditional,Microsoft.Azure.Commands.Profile,SetAzureRMContextCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\SetAzureRMContext.cs,CompleteContextProcessing,The conditional expression  "context != null &&                  context.Subscription != null &&                  context.Subscription.State != null &&                  !context.Subscription.State.Equals(                  "Enabled"'                  StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Profile,ImportAzureRMContextCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\ImportAzureRMContext.cs,ExecuteCmdlet,The conditional expression  "profile.DefaultContext != null &&                          profile.DefaultContext.Subscription != null &&                          profile.DefaultContext.Subscription.State != null &&                          !profile.DefaultContext.Subscription.State.Equals(                          "Enabled"'                          StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Profile.Context,RenameAzureRmContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\RenameAzureRmContext.cs,ExecuteCmdlet,The conditional expression  "!string.IsNullOrWhiteSpace(sourceName) && !string.IsNullOrWhiteSpace(targetName) && defaultProfile != null && !string.Equals(sourceName' targetName' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Profile.Context,RenameAzureRmContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\RenameAzureRmContext.cs,ExecuteCmdlet,The conditional expression  "client.TryRenameContext(sourceName' targetName)                                           && (!string.Equals(targetName' defaultContextName' StringComparison.OrdinalIgnoreCase)                                               || client.TrySetDefaultContext(targetName))                                           && PassThru.IsPresent"  is complex.
Complex Conditional,Microsoft.Azure.Commands.Profile.Utilities,EnvironmentHelper,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Utilities\EnvironmentHelper.cs,RetrieveMetaDataEndpoints,The conditional expression  "(null == response) || string.IsNullOrEmpty(response.GalleryEndpoint) || string.IsNullOrEmpty(response.GraphEndpoint)                  || string.IsNullOrEmpty(response.PortalEndpoint)"  is complex.
Empty Catch Block,Microsoft.Azure.Commands.Profile,AddAzureRMAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Account\AddAzureRmAccount.cs,OnImport,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Profile.Context,EnableAzureRmContextAutosave,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\AutoSave\EnableAzureRmContextAutosave.cs,EnableAutosave,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Profile.Context,EnableAzureRmContextAutosave,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\AutoSave\EnableAzureRmContextAutosave.cs,EnableAutosave,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Profile.Context,EnableAzureRmContextAutosave,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\AutoSave\EnableAzureRmContextAutosave.cs,EnableAutosave,The method has an empty catch block.
Empty Catch Block,Microsoft.Azure.Commands.Profile.Context,EnableAzureRmContextAutosave,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\AutoSave\EnableAzureRmContextAutosave.cs,IsValidPath,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.Profile,SendFeedbackCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Feedback\SendFeedback.cs,ExecuteCmdlet,The following statement contains a magic number: if (!int.TryParse(this.Host.UI.ReadLine()' out recommendation) || recommendation < 0 || recommendation > 10)                  throw new PSArgumentOutOfRangeException(Resources.SendFeedbackOutOfRangeMessage);
Magic Number,Microsoft.Azure.Commands.ResourceManager.Common,RMProfileClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Models\RMProfileClient.cs,TryGetTenantSubscription,The following statement contains a magic number: using (var subscriptionClient = AzureSession.Instance.ClientFactory.CreateCustomArmClient<SubscriptionClient>(                          environment.GetEndpointAsUri(AzureEnvironment.Endpoint.ResourceManager)'                          new TokenCredentials(accessToken.AccessToken) as ServiceClientCredentials'                          AzureSession.Instance.ClientFactory.GetCustomHandlers()))              {                  Subscription subscriptionFromServer = null;                    try                  {                      if (subscriptionId != null)                      {                          subscriptionFromServer = subscriptionClient.Subscriptions.Get(subscriptionId);                      }                      else                      {                          var subscriptions = (subscriptionClient.ListAll().ToList() ??                                                  new List<Subscription>())                                              .Where(s => "enabled".Equals(s.State.ToString()' StringComparison.OrdinalIgnoreCase) ||                                                          "warned".Equals(s.State.ToString()' StringComparison.OrdinalIgnoreCase));                            account.SetProperty(AzureAccount.Property.Subscriptions' subscriptions.Select(i => i.SubscriptionId).ToArray());                            if (subscriptions.Any())                          {                              if (subscriptionName != null)                              {                                  subscriptionFromServer = subscriptions.FirstOrDefault(                                      s => s.DisplayName.Equals(subscriptionName' StringComparison.OrdinalIgnoreCase));                              }                              else                              {                                  if (subscriptions.Count() > 1)                                  {                                      WriteWarningMessage(string.Format(                                          "TenantId '{0}' contains more than one active subscription. First one will be selected for further use. " +                                          "To select another subscription' use Set-AzureRmContext."'                                          tenantId));                                  }                                  subscriptionFromServer = subscriptions.First();                              }                          }                      }                  }                  catch (CloudException ex)                  {                      WriteWarningMessage(ex.Message);                  }                    if (subscriptionFromServer != null)                  {                      subscription = new AzureSubscription                      {                          Id = subscriptionFromServer.SubscriptionId'                          Name = subscriptionFromServer.DisplayName'                          State = subscriptionFromServer.State.ToString()                      };                        subscription.SetAccount(accessToken.UserId);                      subscription.SetEnvironment(environment.Name);                      subscription.SetTenant(accessToken.TenantId);                        tenant = new AzureTenant();                      tenant.Id = accessToken.TenantId;                      tenant.Directory = accessToken.GetDomain();                      return true;                  }                    subscription = null;                    if (accessToken != null && accessToken.TenantId != null)                  {                      tenant = new AzureTenant();                      tenant.Id = accessToken.TenantId;                      if (accessToken.UserId != null)                      {                          var domain = accessToken.UserId.Split(new[] { '@' }' StringSplitOptions.RemoveEmptyEntries);                          if (domain.Length == 2)                          {                              tenant.Directory = domain[1];                          }                      }                      return true;                  }                    tenant = null;                  return false;              }
Missing Default,Microsoft.Azure.Commands.Profile,RemoveAzureRMAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Account\RemoveAzureRmAccount.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch(ParameterSetName)              {                  case UserIdParameterSet:                      azureAccount = new AzureAccount { Id = Username' Type = AzureAccount.AccountType.User };                      break;                  case ServicePrincipalParameterSet:                      azureAccount = new AzureAccount { Id = ApplicationId' Type = AzureAccount.AccountType.ServicePrincipal };                      azureAccount.SetTenants(TenantId);                      break;                  case InputObjectParametrSet:                      azureAccount = InputObject;                      break;                  case ContextParameterSet:                      azureAccount = AzureContext.Account;                      break;                  case ContextNameParameterSet:                      if (MyInvocation.BoundParameters.ContainsKey(nameof(ContextName)))                      {                          var profile = DefaultProfile as AzureRmProfile;                          azureAccount = profile.Contexts[ContextName].Account;                      }                      else                      {                          azureAccount = DefaultContext?.Account;                      }                      break;              }
Missing Default,Microsoft.Azure.Commands.Profile.Context,ClearAzureRmContext,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Context\ClearAzureRmContext.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch(Scope)              {                  case ContextModificationScope.Process:                      ConfirmAction(Resources.ClearContextProcessMessage' Resources.ClearContextProcessTarget'                           () =>                           {                              bool result = false;                              var profile = DefaultProfile as AzureRmProfile;                              if (profile != null)                              {                                  profile.Clear();                                  result = true;                              }                              if (PassThru.IsPresent)                              {                                  WriteObject(result);                              }                          });                      break;                  case ContextModificationScope.CurrentUser:                      ConfirmAction(Force.IsPresent' Resources.ClearContextUserContinueMessage'                           Resources.ClearContextUserProcessMessage' Resources.ClearContextUserTarget'                           () =>                           {                              bool result = false;                              var session = AzureSession.Instance;                              var contextFilePath = Path.Combine(session.ARMProfileDirectory' session.ARMProfileFile);                              if (session.TokenCache != null)                              {                                  session.TokenCache.Clear();                              }                              if (session.DataStore.FileExists(contextFilePath))                              {                                  session.DataStore.DeleteFile(contextFilePath);                                  if (AzureRmProfileProvider.Instance != null)                                  {                                      AzureRmProfileProvider.Instance.ResetDefaultProfile();                                      result = true; ;                                  }                              }                                if (PassThru.IsPresent)                              {                                  WriteObject(result);                              }                          }'                          () =>                          {                              var session = AzureSession.Instance;                              var contextFilePath = Path.Combine(session.ARMProfileDirectory' session.ARMProfileFile);                              return session.DataStore.FileExists(contextFilePath);                          });                      break;              }
Missing Default,Microsoft.Azure.Commands.Profile.Common,AzureContextModificationCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\AzureContextModificationCmdlet.cs,GetDefaultProfile,The following switch statement is missing a default case: switch (GetContextModificationScope())              {                  case ContextModificationScope.Process:                      result = currentProfile;                      break;                  case ContextModificationScope.CurrentUser:                      result = new AzureRmAutosaveProfile(currentProfile' ProtectedFileProvider.CreateFileProvider(Path.Combine(AzureSession.Instance.ARMProfileDirectory' AzureSession.Instance.ARMProfileFile)' FileProtection.ExclusiveWrite));                      break;              }
Missing Default,Microsoft.Azure.Commands.Profile.Common,AzureContextModificationCmdlet,C:\repos\Azure_azure-powershell\src\ResourceManager\Profile\Commands.Profile\Common\AzureContextModificationCmdlet.cs,InitializeProfileProvider,The following switch statement is missing a default case: switch (GetContextModificationScope())                      {                          case ContextModificationScope.Process:                              ResourceManagerProfileProvider.InitializeResourceManagerProfile();                              break;                          case ContextModificationScope.CurrentUser:                              ProtectedProfileProvider.InitializeResourceManagerProfile();                              break;                      }
