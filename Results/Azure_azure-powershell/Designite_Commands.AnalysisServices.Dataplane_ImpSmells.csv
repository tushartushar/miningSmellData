Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,PollSyncStatusWithRetryAsync,The method has 5 parameters. Parameters: databaseName' accessToken' pollingUrl' pollingInterval' maxNumberOfAttempts
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,IAsAzureHttpClient,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureHttpClient.cs,CallPostAsync,The method has 5 parameters. Parameters: baseURI' requestURL' accessToken' correlationId' content
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureHttpClient,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureHttpClient.cs,CallPostAsync,The method has 5 parameters. Parameters: baseURI' requestURL' accessToken' correlationId' content
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureHttpClient,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureHttpClient.cs,CallAsync,The method has 6 parameters. Parameters: method' baseURI' requestURL' accessToken' correlationId' content
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,IAsAzureAuthenticationProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureAuthenticationProvider.cs,GetAadAuthenticatedToken,The method has 6 parameters. Parameters: asAzureContext' password' promptBehavior' clientId' resourceUri' resourceRedirectUri
Long Parameter List,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureAuthenticationProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureAuthenticationProvider.cs,GetAadAuthenticatedToken,The method has 6 parameters. Parameters: asAzureContext' password' promptBehavior' clientId' resourceUri' resourceRedirectUri
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AddAzureASAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\AddAzureASAccount.cs,,The length of the parameter ServicePrincipalWithPasswordParameterSet is 40.
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AddAzureASAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\AddAzureASAccount.cs,,The length of the parameter ServicePrincipalWithCertificateParameterSet is 43.
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,,The length of the parameter DefaultRetryIntervalForPolling is 30.
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureClientSession,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureClientSession.cs,,The length of the parameter AsAzureRolloutEnvironmentMapping is 32.
Long Identifier,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureClientSession,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureClientSession.cs,,The length of the parameter _asAzureAuthenticationProvider is 30.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,ExportAzureAnalysisServerLog,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Export-AzureAsInstanceLog.cs,BeginProcessing,The length of the statement  "                if (string.Compare(AsAzureClientSession.Instance.Profile.Context.Environment.Name' uriResult.DnsSafeHost' StringComparison.InvariantCultureIgnoreCase) != 0) " is 156.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,ExportAzureAnalysisServerLog,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Export-AzureAsInstanceLog.cs,ExecuteCmdlet,The length of the statement  "                    string actionWarning = string.Format(CultureInfo.CurrentCulture' Resources.ExportingLogOverwriteWarning' this.OutputPath); " is 122.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,ExportAzureAnalysisServerLog,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Export-AzureAsInstanceLog.cs,ExecuteCmdlet,The length of the statement  "                    if (AzureSession.Instance.DataStore.FileExists(this.OutputPath) && !this.Force.IsPresent && !ShouldContinue(actionWarning' Resources.Confirm)) " is 142.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "                WriteObject(string.Format("Sending sync request for database '{0}' to server '{1}'. Correlation Id: '{2}'."' Database' Instance' correlationId.ToString())); " is 156.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "                WriteProgress(new ProgressRecord(0' "Sync-AzureAnalysisServicesInstance."' string.Format("Authenticating user for '{0}' environment."' context.Environment.Name))); " is 163.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "                Uri clusterBaseUri = new Uri(string.Format("{0}{1}{2}"' Uri.UriSchemeHttps' Uri.SchemeDelimiter' clusterResolveResult.ClusterFQDN)); " is 132.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "                var accessToken = this.TokenCacheItemProvider.GetTokenFromTokenCache(AsAzureClientSession.TokenCache' context.Account.UniqueId' context.Environment.Name); " is 154.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ExecuteCmdlet,The length of the statement  "                    WriteProgress(new ProgressRecord(0' "Sync-AzureAnalysisServicesInstance."' string.Format("Successfully authenticated for '{0}' environment."' context.Environment.Name))); " is 170.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,BeginProcessing,The length of the statement  "                if (string.Compare(AsAzureClientSession.Instance.Profile.Context.Environment.Name' uriResult.DnsSafeHost' StringComparison.InvariantCultureIgnoreCase) != 0) " is 156.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                    var synchronize = string.Format((string)context.Environment.Endpoints[AsAzureEnvironment.AsRolloutEndpoints.SyncEndpoint]' this.serverName' databaseName); " is 154.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                        this.syncRequestRootActivityId = message.Headers.Contains(RootActivityIdHeaderName) ? message.Headers.GetValues(RootActivityIdHeaderName).FirstOrDefault() : string.Empty; " is 170.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                        this.syncRequestTimeStamp = message.Headers.Contains(CurrentUtcDateHeaderName) ? message.Headers.GetValues(CurrentUtcDateHeaderName).FirstOrDefault() : string.Empty; " is 165.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                                Details = string.Format("Http status code: {0}. Nothing readonly instances found to replicate databases."' message.StatusCode)' " is 127.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,SynchronizeDatabaseAsync,The length of the statement  "                        pollingUrlAndRetryAfter = new Tuple< Uri' RetryConditionHeaderValue>(message.Headers.Location' message.Headers.RetryAfter); " is 123.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ClusterResolve,The length of the statement  "            Uri clusterResolveBaseUri = new Uri(string.Format("{0}{1}{2}"' Uri.UriSchemeHttps' Uri.SchemeDelimiter' context.Environment.Name)); " is 131.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,ClusterResolve,The length of the statement  "            string rolloutAccessToken = this.TokenCacheItemProvider.GetTokenFromTokenCache(AsAzureClientSession.TokenCache' context.Account.UniqueId' context.Environment.Name); " is 164.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureClientSession,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureClientSession.cs,Login,The length of the statement  "            _asAzureAuthenticationProvider.GetAadAuthenticatedToken(asAzureContext' password' promptBehavior' AsAzureClientId' resourceUri' RedirectUri); " is 141.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureClientSession,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureClientSession.cs,Login,The length of the statement  "            _asAzureAuthenticationProvider.GetAadAuthenticatedToken(asAzureContext' null' PromptBehavior.RefreshSession' AsAzureClientId' resourceUri' RedirectUri); " is 152.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureClientSession,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureClientSession.cs,GetAuthorityUrlForEnvironment,The length of the statement  "            if (string.IsNullOrEmpty(environmentKey) || !AsAzureRolloutEnvironmentMapping.TryGetValue(environmentKey' out authInfo)) " is 120.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureProfile,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureProfile.cs,CreateEnvironment,The length of the statement  "            env.Endpoints.Add(AsAzureEnvironment.AsRolloutEndpoints.AdAuthorityBaseUrl' AsAzureClientSession.GetAuthorityUrlForEnvironment(env)); " is 133.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureProfile,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureProfile.cs,CreateEnvironment,The length of the statement  "            env.Endpoints.Add(AsAzureEnvironment.AsRolloutEndpoints.RestartEndpointFormat' AsAzureClientSession.RestartEndpointPathFormat); " is 127.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureProfile,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureProfile.cs,CreateEnvironment,The length of the statement  "            env.Endpoints.Add(AsAzureEnvironment.AsRolloutEndpoints.LogfileEndpointFormat' AsAzureClientSession.LogfileEndpointPathFormat); " is 127.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AsAzureProfile,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureProfile.cs,CreateEnvironment,The length of the statement  "            env.Endpoints.Add(AsAzureEnvironment.AsRolloutEndpoints.SyncEndpoint' AsAzureClientSession.SynchronizeEndpointPathFormat); " is 122.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,RestartAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Restart-AzureAsInstance.cs,BeginProcessing,The length of the statement  "                if (string.Compare(AsAzureClientSession.Instance.Profile.Context.Environment.Name' uriResult.DnsSafeHost' StringComparison.InvariantCultureIgnoreCase) != 0) " is 156.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,RestartAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Restart-AzureAsInstance.cs,ExecuteCmdlet,The length of the statement  "                string accessToken = this.TokenCacheItemProvider.GetTokenFromTokenCache(AsAzureClientSession.TokenCache' context.Account.UniqueId); " is 131.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,RestartAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Restart-AzureAsInstance.cs,ExecuteCmdlet,The length of the statement  "                Uri restartBaseUri = new Uri(string.Format("{0}{1}{2}"' Uri.UriSchemeHttps' Uri.SchemeDelimiter' context.Environment.Name)); " is 124.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane,RestartAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Restart-AzureAsInstance.cs,ExecuteCmdlet,The length of the statement  "                var restartEndpoint = string.Format((string)context.Environment.Endpoints[AsAzureEnvironment.AsRolloutEndpoints.RestartEndpointFormat]' serverName); " is 148.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureAuthenticationProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureAuthenticationProvider.cs,GetAadAuthenticatedToken,The length of the statement  "            var authUriBuilder = new UriBuilder((string)asAzureContext.Environment.Endpoints[AsAzureEnvironment.AsRolloutEndpoints.AdAuthorityBaseUrl]); " is 140.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureAuthenticationProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureAuthenticationProvider.cs,GetAadAuthenticatedToken,The length of the statement  "            string accountType = string.IsNullOrEmpty(asAzureContext.Account.Type) ? AsAzureAccount.AccountType.User : asAzureContext.Account.Type; " is 135.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureAuthenticationProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureAuthenticationProvider.cs,GetAadAuthenticatedToken,The length of the statement  "                            throw new ArgumentException(string.Format(Resources.CertificateNotFoundInStore' asAzureContext.Account.CertificateThumbprint)); " is 127.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,AsAzureAuthenticationProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\AsAzureAuthenticationProvider.cs,GetAadAuthenticatedToken,The length of the statement  "                        result = authenticationContext.AcquireToken(resourceUri' new ClientAssertionCertificate(asAzureContext.Account.Id' certificate)); " is 129.
Long Statement,Microsoft.Azure.Commands.AnalysisServices.Dataplane.Models,TokenCacheItemProvider,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Models\TokenCacheItemProvider.cs,GetTokenFromTokenCache,The length of the statement  "            var tokenCacheItems = tokenCache.ReadItems().Where(tokenItem => tokenItem.UniqueId.Equals(uniqueId) && (string.IsNullOrEmpty(environmentName) || tokenItem.Resource.Contains(environmentName))); " is 192.
Complex Conditional,Microsoft.Azure.Commands.AnalysisServices.Dataplane,AddAzureASAccountCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\AddAzureASAccount.cs,ExecuteCmdlet,The conditional expression  "currentContext == null || Credential == null ||                      string.IsNullOrEmpty(currentContext.Account.Id) ||                       !currentContext.Account.Id.Equals(Credential.UserName) ||                      !RolloutEnvironment.Equals(currentContext.Environment.Name)"  is complex.
Magic Number,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,PollSyncStatusWithRetryAsync,The following statement contains a magic number: return await Task.Run(async () =>              {                  ScaleOutServerDatabaseSyncResult response = null;                  var syncCompleted = false;                  var retryCount = 0;                    while (!syncCompleted && retryCount < maxNumberOfAttempts)                  {                      // Wait for specified polling interval other than retries.                      if (retryCount == 0)                      {                          await Task.Delay(pollingInterval);                      }                      else                      {                          await Task.Delay(DefaultRetryIntervalForPolling);                      }                        this.AsAzureHttpClient.resetHttpClient();                      using (HttpResponseMessage message = await AsAzureHttpClient.CallGetAsync(                          pollingUrl'                          string.Empty'                          accessToken'                          correlationId))                      {                          bool shouldRetry = false;                          if (message.IsSuccessStatusCode && message.Content != null)                          {                              var responseString = await message.Content.ReadAsStringAsync();                              response = JsonConvert.DeserializeObject<ScaleOutServerDatabaseSyncResult>(responseString);                                if (response != null)                              {                                  var state = response.SyncState;                                  if (state == DatabaseSyncState.Completed || state == DatabaseSyncState.Failed)                                  {                                      syncCompleted = true;                                  }                                  else                                  {                                      pollingUrl = message.Headers.Location ?? pollingUrl;                                      pollingInterval = message.Headers.RetryAfter.Delta ?? pollingInterval;                                  }                              }                              else                              {                                  shouldRetry = true;                              }                          }                          else                          {                              shouldRetry = true;                          }                            if(shouldRetry)                          {                              retryCount++;                              response = new ScaleOutServerDatabaseSyncResult()                              {                                  Database = databaseName'                                  SyncState = DatabaseSyncState.Invalid                              };                                response.Details = string.Format(                                  "Http Error code: {0}. Message: {1}"'                                  message.StatusCode.ToString()'                                  message.Content != null ? await message.Content.ReadAsStringAsync() : string.Empty);                                if (message.StatusCode >= (HttpStatusCode)400 && message.StatusCode <= (HttpStatusCode)499)                              {                                  break;                              }                          }                          else                          {                              retryCount = 0;                          }                      }                  }                    return response;              });
Magic Number,Microsoft.Azure.Commands.AnalysisServices.Dataplane,SynchronizeAzureAzureAnalysisServer,C:\repos\Azure_azure-powershell\src\ResourceManager\AnalysisServices\Commands.AnalysisServices.Dataplane\Commands\Synchronize-AzureASInstance.cs,PollSyncStatusWithRetryAsync,The following statement contains a magic number: return await Task.Run(async () =>              {                  ScaleOutServerDatabaseSyncResult response = null;                  var syncCompleted = false;                  var retryCount = 0;                    while (!syncCompleted && retryCount < maxNumberOfAttempts)                  {                      // Wait for specified polling interval other than retries.                      if (retryCount == 0)                      {                          await Task.Delay(pollingInterval);                      }                      else                      {                          await Task.Delay(DefaultRetryIntervalForPolling);                      }                        this.AsAzureHttpClient.resetHttpClient();                      using (HttpResponseMessage message = await AsAzureHttpClient.CallGetAsync(                          pollingUrl'                          string.Empty'                          accessToken'                          correlationId))                      {                          bool shouldRetry = false;                          if (message.IsSuccessStatusCode && message.Content != null)                          {                              var responseString = await message.Content.ReadAsStringAsync();                              response = JsonConvert.DeserializeObject<ScaleOutServerDatabaseSyncResult>(responseString);                                if (response != null)                              {                                  var state = response.SyncState;                                  if (state == DatabaseSyncState.Completed || state == DatabaseSyncState.Failed)                                  {                                      syncCompleted = true;                                  }                                  else                                  {                                      pollingUrl = message.Headers.Location ?? pollingUrl;                                      pollingInterval = message.Headers.RetryAfter.Delta ?? pollingInterval;                                  }                              }                              else                              {                                  shouldRetry = true;                              }                          }                          else                          {                              shouldRetry = true;                          }                            if(shouldRetry)                          {                              retryCount++;                              response = new ScaleOutServerDatabaseSyncResult()                              {                                  Database = databaseName'                                  SyncState = DatabaseSyncState.Invalid                              };                                response.Details = string.Format(                                  "Http Error code: {0}. Message: {1}"'                                  message.StatusCode.ToString()'                                  message.Content != null ? await message.Content.ReadAsStringAsync() : string.Empty);                                if (message.StatusCode >= (HttpStatusCode)400 && message.StatusCode <= (HttpStatusCode)499)                              {                                  break;                              }                          }                          else                          {                              retryCount = 0;                          }                      }                  }                    return response;              });
