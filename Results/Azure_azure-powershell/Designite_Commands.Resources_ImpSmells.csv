Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Azure.Commands.Resources.Models.Gallery,ItemOperations,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\ItemOperations.cs,GetAsync,The method has 403 lines of code.
Long Method,Microsoft.Azure.Commands.Resources.Models.Gallery,ItemOperations,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\ItemOperations.cs,ListAsync,The method has 419 lines of code.
Long Method,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The method has 110 lines of code.
Complex Method,Microsoft.Azure.Commands.Resources.Models.Gallery,ItemOperations,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\ItemOperations.cs,GetAsync,Cyclomatic complexity of the method is 67
Complex Method,Microsoft.Azure.Commands.Resources.Models.Gallery,ItemOperations,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\ItemOperations.cs,ListAsync,Cyclomatic complexity of the method is 71
Complex Method,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The method has 5 parameters. Parameters: resourceGroup' deploymentName' basicDeployment' job' status
Long Parameter List,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignments,The method has 5 parameters. Parameters: assignments' policyClient' activeDirectoryClient' scopeForRoleDefinitions' excludeAssignmentsForDeletedPrincipals
Long Parameter List,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignments,The method has 5 parameters. Parameters: assignments' roleDefinitions' policyClient' activeDirectoryClient' excludeAssignmentsForDeletedPrincipals
Long Identifier,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,GetNewOperations,The length of the parameter operationWithSameIdAndProvisioningState is 39.
Long Identifier,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,GetNewOperations,The length of the parameter nestedOperationWithSameIdAndProvisioningState is 45.
Long Identifier,Microsoft.Azure.Commands.Resources.Models.Gallery,GalleryClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\GalleryClient.cs,,The length of the parameter _longRunningOperationInitialTimeout is 35.
Long Identifier,Microsoft.Azure.Commands.Resources.Models.Gallery,GalleryClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\GalleryClient.cs,,The length of the parameter _longRunningOperationRetryTimeout is 33.
Long Identifier,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignment,The length of the parameter excludeAssignmentsForDeletedPrincipals is 38.
Long Identifier,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignments,The length of the parameter excludeAssignmentsForDeletedPrincipals is 38.
Long Identifier,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignments,The length of the parameter excludeAssignmentsForDeletedPrincipals is 38.
Long Identifier,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the parameter classicAdministratorsAssignments is 32.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADAppCredentialCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADAppCredentialCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (ShouldProcess(target: ObjectId' action: string.Format("Adding a new password to application with objectId {0}"' ObjectId))) " is 127.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADAppCredentialCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADAppCredentialCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (ShouldProcess(target: ObjectId' action: string.Format("Adding a new certificate to application with objectId {0}"' ObjectId))) " is 130.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADSpCredentialCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADSpCredentialCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (ShouldProcess(target: ObjectId' action: string.Format("Adding a new password to service principal with objectId {0}"' ObjectId)))  " is 133.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADSpCredentialCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADSpCredentialCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (ShouldProcess(target: ObjectId' action: string.Format("Adding a new caertificate to service principal with objectId {0}"' ObjectId)))  " is 137.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADUserCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADUserCommand.cs,ExecuteCmdlet,The length of the statement  "                if (ShouldProcess(target: UserPrincipalName' action: string.Format("Adding a new user with UPN '{0}'"' UserPrincipalName))) " is 123.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADApplicationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADApplicationCommand.cs,ExecuteCmdlet,The length of the statement  "                if (ShouldProcess(target: createParameters.DisplayName' action: string.Format("Adding a new application with display name '{0}'"' createParameters.DisplayName))) " is 161.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADServicePrincipalCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADServicePrincipalCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (ShouldProcess(target: appParameters.DisplayName' action: string.Format("Adding a new application for with display name '{0}'"' appParameters.DisplayName))) " is 159.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADServicePrincipalCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADServicePrincipalCommand.cs,ExecuteCmdlet,The length of the statement  "                if (ShouldProcess(target: createParameters.ApplicationId.ToString()' action: string.Format("Adding a new service principal to be associated with an application having AppId '{0}'"' createParameters.ApplicationId))) " is 214.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,SetAzureADServicePrincipalCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\SetAzureADServicePrincipalCommand.cs,ExecuteCmdlet,The length of the statement  "                    if (ShouldProcess(target: sp.Id.ToString()' action: string.Format("Updating properties on application associated with a service principal with object id '{0}'"' sp.Id))) " is 169.
Long Statement,Microsoft.Azure.Commands.ActiveDirectory,SetAzureADUserCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\SetAzureADUserCommand.cs,ExecuteCmdlet,The length of the statement  "                if (ShouldProcess(target: UPNOrObjectId' action: string.Format("Updating properties for user with upn or object id '{0}'"' UPNOrObjectId))) " is 139.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,ConstructDeploymentVariableTable,The length of the statement  "                result.AppendFormat(rowFormat' GeneralUtilities.GenerateSeparator(15' "=")' GeneralUtilities.GenerateSeparator(25' "=")' GeneralUtilities.GenerateSeparator(10' "=")); " is 166.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,ConstructPermissionsTable,The length of the statement  "                int maxActionsLength = Math.Max("Actions".Length' permissions.Where(p => p.Actions != null).DefaultIfEmpty(EmptyPermission).Max(p => p.ActionsString.Length)); " is 158.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,ConstructPermissionsTable,The length of the statement  "                int maxNotActionsLength = Math.Max("NotActions".Length' permissions.Where(p => p.NotActions != null).DefaultIfEmpty(EmptyPermission).Max(p => p.NotActionsString.Length)); " is 170.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,CreatePSResourceGroupDeployment,The length of the statement  "                    Dictionary<string' DeploymentVariable> outputs = JsonConvert.DeserializeObject<Dictionary<string' DeploymentVariable>>(properties.Outputs.ToString()); " is 150.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,CreatePSResourceGroupDeployment,The length of the statement  "                    Dictionary<string' DeploymentVariable> parameters = JsonConvert.DeserializeObject<Dictionary<string' DeploymentVariable>>(properties.Parameters.ToString()); " is 156.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,GetNewOperations,The length of the statement  "                DeploymentOperation operationWithSameIdAndProvisioningState = old.Find(o => o.OperationId.Equals(operation.OperationId) && o.Properties.ProvisioningState.Equals(operation.Properties.ProvisioningState)); " is 202.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,GetNewOperations,The length of the statement  "                //If nested deployment' get the operations under those deployments as well. Check if the deployment exists before calling list operations on it " is 143.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,GetNewOperations,The length of the statement  "                    operation.Properties.TargetResource.ResourceType.Equals(Constants.MicrosoftResourcesDeploymentType' StringComparison.OrdinalIgnoreCase) && " is 138.
Long Statement,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,GetNewOperations,The length of the statement  "                            DeploymentOperation nestedOperationWithSameIdAndProvisioningState = newOperations.Find(o => o.OperationId.Equals(op.OperationId) && o.Properties.ProvisioningState.Equals(op.Properties.ProvisioningState)); " is 204.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Gallery,ItemOperations,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\ItemOperations.cs,GetAsync,The length of the statement  "                        CloudException ex = CloudException.Create(httpRequest' null' httpResponse' await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false)); " is 145.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Gallery,ItemOperations,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\ItemOperations.cs,ListAsync,The length of the statement  "                        CloudException ex = CloudException.Create(httpRequest' null' httpResponse' await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false)); " is 145.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignment,The length of the statement  "            return assignments.ToPSRoleAssignments(roleDefinitions' policyClient' activeDirectoryClient' excludeAssignmentsForDeletedPrincipals).SingleOrDefault(); " is 151.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClientExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClientExtensions.cs,ToPSRoleAssignments,The length of the statement  "            return assignments.ToPSRoleAssignments(roleDefinitions' policyClient' activeDirectoryClient' excludeAssignmentsForDeletedPrincipals); " is 133.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleDefinitions,The length of the statement  "                odataFilter = new Rest.Azure.OData.ODataQuery<RoleDefinitionFilter>(item => item.AtScopeAndBelow() && item.RoleName == name); " is 125.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleDefinitions,The length of the statement  "                // Special case - if custom only flag is specified then you don't need to lookup on a specific id or name since it will be a bit redundant " is 138.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,GetAllRoleDefinitionsAtScopeAndBelow,The length of the statement  "            new Rest.Azure.OData.ODataQuery<RoleDefinitionFilter>(filter => filter.AtScopeAndBelow())).Select(r => r.ToPSRoleDefinition())); " is 128.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleDefinitionsByCustom,The length of the statement  "                    scope' scopeAndBelow ? new Rest.Azure.OData.ODataQuery<RoleDefinitionFilter>(filter => filter.AtScopeAndBelow()) : null) " is 120.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,CreateRoleAssignment,The length of the statement  "                ? AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(scope' GetSingleRoleDefinitionByName(parameters.RoleDefinitionName' scope).Id) " is 160.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                if (string.IsNullOrEmpty(options.ADObjectFilter.Id) || options.ExpandPrincipalGroups || options.IncludeClassicAdministrators) " is 125.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                    result.AddRange(tempResult.FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 184.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                    result.AddRange(tempResult.FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 184.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                        .ToPSRoleAssignments(this' ActiveDirectoryClient' AuthorizationHelper.GetSubscriptionScope(currentSubscription)' options.ExcludeAssignmentsForDeletedPrincipals)); " is 162.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                    result.AddRange(tempResult.FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 184.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                result.AddRange(tempResult.FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 184.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                    result.AddRange(tempResult.FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 184.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                     .FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 158.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                     .ToPSRoleAssignments(this' ActiveDirectoryClient' AuthorizationHelper.GetSubscriptionScope(currentSubscription)' options.ExcludeAssignmentsForDeletedPrincipals)); " is 162.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                    result.AddRange(tempResult.FilterRoleAssignmentsOnRoleId(AuthorizationHelper.ConstructFullyQualifiedRoleDefinitionIdFromScopeAndIdAsGuid(currentSubscription' options.RoleDefinitionId)) " is 184.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                        .ToPSRoleAssignments(this' ActiveDirectoryClient' AuthorizationHelper.GetSubscriptionScope(currentSubscription)' options.ExcludeAssignmentsForDeletedPrincipals)); " is 162.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                result = result.Where(r => r.RoleDefinitionName.Equals(options.RoleDefinitionName' StringComparison.OrdinalIgnoreCase)).ToList(); " is 129.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,FilterRoleAssignments,The length of the statement  "                List<PSRoleAssignment> classicAdministratorsAssignments = classicAdministrators.Select(a => a.ToPSRoleAssignment(currentSubscription)).ToList(); " is 144.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,RemoveRoleAssignment,The length of the statement  "            // but an edge case can have multiple role assignments to the same role or multiple role assignments to different roles' with same name. " is 136.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,RemoveRoleAssignment,The length of the statement  "                    // Assignments to different roleDefintion Ids. This can happen only if roleDefinition name was provided and multiple roles exists with same name. " is 145.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,RemoveRoleAssignment,The length of the statement  "                    throw new InvalidOperationException(string.Format(ProjectResources.MultipleRoleDefinitionsFoundWithSameName' options.RoleDefinitionName)); " is 138.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,CreateOrUpdateRoleDefinition,The length of the statement  "                    throw new InvalidOperationException("The tenant is not currently authorized to create/update Custom role definition. Please refer to http://aka.ms/customrolespreview for more details"); " is 185.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateRoleDefinition,The length of the statement  "            if (roleDefinition.AssignableScopes == null || !roleDefinition.AssignableScopes.Any() || roleDefinition.AssignableScopes.Any(s => string.IsNullOrWhiteSpace(s))) " is 160.
Long Statement,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The length of the statement  "                    throw new ArgumentException(string.Format(ProjectResources.ScopeShouldBeginWithSubscriptionsAndResourceGroupsAndProviders' scope)); " is 131.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureProviderOperationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Providers\GetAzureProviderOperationCmdlet.cs,ProcessProviderOperationsWithWildCard,The length of the statement  "            WildcardPattern wildcard = new WildcardPattern(actionSearchString' WildcardOptions.IgnoreCase | WildcardOptions.Compiled); " is 122.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureProviderOperationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Providers\GetAzureProviderOperationCmdlet.cs,ProcessProviderOperationsWithWildCard,The length of the statement  "            return providers.SelectMany(p => GetPSOperationsFromProviderOperationsMetadata(p)).Where(operation => wildcard.IsMatch(operation.Operation)).ToList(); " is 150.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureProviderOperationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Providers\GetAzureProviderOperationCmdlet.cs,ProcessProviderOperationsWithoutWildCard,The length of the statement  "            IEnumerable<PSResourceProviderOperation> flattenedProviderOperations = GetAzureProviderOperationCommand.GetPSOperationsFromProviderOperationsMetadata(providerOperations); " is 170.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureProviderOperationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Providers\GetAzureProviderOperationCmdlet.cs,ProcessProviderOperationsWithoutWildCard,The length of the statement  "            return flattenedProviderOperations.Where(op => string.Equals(op.Operation' operationString' StringComparison.OrdinalIgnoreCase)).ToList(); " is 138.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureProviderOperationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Providers\GetAzureProviderOperationCmdlet.cs,GetPSOperationsFromProviderOperationsMetadata,The length of the statement  "            IEnumerable<PSResourceProviderOperation> operations = providerOperationsMetadata.Operations.Where(op => GetAzureProviderOperationCommand.IsUserOperation(op)) " is 157.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureProviderOperationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Providers\GetAzureProviderOperationCmdlet.cs,GetPSOperationsFromProviderOperationsMetadata,The length of the statement  "                operations = operations.Concat(providerOperationsMetadata.ResourceTypes.SelectMany(rt => rt.Operations.Where(op => GetAzureProviderOperationCommand.IsUserOperation(op)) " is 168.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureRoleAssignmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\RoleAssignments\GetAzureRoleAssignmentCommand.cs,ExecuteCmdlet,The length of the statement  "                    Subscription = string.IsNullOrEmpty(ResourceGroupName) ? null : DefaultProfile.DefaultContext.Subscription.Id.ToString() " is 120.
Long Statement,Microsoft.Azure.Commands.Resources,GetAzureRoleAssignmentCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\RoleAssignments\GetAzureRoleAssignmentCommand.cs,ExecuteCmdlet,The length of the statement  "            List<PSRoleAssignment> ra = PoliciesClient.FilterRoleAssignments(options' DefaultProfile.DefaultContext.Subscription.Id.ToString()); " is 132.
Empty Catch Block,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,UpdateRoleDefinition,The method has an empty catch block.
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,ResourceIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(idFromServer))              {                  string[] tokens = idFromServer.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 8)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceId' "idFromServer");                  }                  Subscription = tokens[1];                  ResourceGroupName = tokens[3];                  ResourceName = tokens[tokens.Length - 1];                    List<string> resourceTypeBuilder = new List<string>();                  resourceTypeBuilder.Add(tokens[5]);                    List<string> parentResourceBuilder = new List<string>();                  for (int i = 6; i <= tokens.Length - 3; i++)                  {                      parentResourceBuilder.Add(tokens[i]);                      // Add every other token to type                      if (i % 2 == 0)                      {                          resourceTypeBuilder.Add(tokens[i]);                      }                  }                  resourceTypeBuilder.Add(tokens[tokens.Length - 2]);                    if (parentResourceBuilder.Count > 0)                  {                      ParentResource = string.Join("/"' parentResourceBuilder);                  }                  if (resourceTypeBuilder.Count > 0)                  {                      ResourceType = string.Join("/"' resourceTypeBuilder);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,FromResourceGroupIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceGroupId))              {                  string[] tokens = resourceGroupId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 4)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceGroupId' "resourceGroupId");                  }                  return new ResourceIdentifier                  {                      Subscription = tokens[1]'                      ResourceGroupName = tokens[3]'                  };              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourceIdentifier,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceIdentifier.cs,FromResourceGroupIdentifier,The following statement contains a magic number: if (!string.IsNullOrEmpty(resourceGroupId))              {                  string[] tokens = resourceGroupId.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries);                  if (tokens.Length < 4)                  {                      throw new ArgumentException(ProjectResources.InvalidFormatOfResourceGroupId' "resourceGroupId");                  }                  return new ResourceIdentifier                  {                      Subscription = tokens[1]'                      ResourceGroupName = tokens[3]'                  };              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,ConstructDeploymentVariableTable,The following statement contains a magic number: if (dictionary.Count > 0)              {                  string rowFormat = "{0' -15}  {1' -25}  {2' -10}\r\n";                  result.AppendLine();                  result.AppendFormat(rowFormat' "Name"' "Type"' "Value");                  result.AppendFormat(rowFormat' GeneralUtilities.GenerateSeparator(15' "=")' GeneralUtilities.GenerateSeparator(25' "=")' GeneralUtilities.GenerateSeparator(10' "="));                    foreach (KeyValuePair<string' DeploymentVariable> pair in dictionary)                  {                      result.AppendFormat(rowFormat' pair.Key' pair.Value.Type' pair.Value.Value);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,ConstructDeploymentVariableTable,The following statement contains a magic number: if (dictionary.Count > 0)              {                  string rowFormat = "{0' -15}  {1' -25}  {2' -10}\r\n";                  result.AppendLine();                  result.AppendFormat(rowFormat' "Name"' "Type"' "Value");                  result.AppendFormat(rowFormat' GeneralUtilities.GenerateSeparator(15' "=")' GeneralUtilities.GenerateSeparator(25' "=")' GeneralUtilities.GenerateSeparator(10' "="));                    foreach (KeyValuePair<string' DeploymentVariable> pair in dictionary)                  {                      result.AppendFormat(rowFormat' pair.Key' pair.Value.Type' pair.Value.Value);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesExtensions,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourcesExtensions.cs,ConstructDeploymentVariableTable,The following statement contains a magic number: if (dictionary.Count > 0)              {                  string rowFormat = "{0' -15}  {1' -25}  {2' -10}\r\n";                  result.AppendLine();                  result.AppendFormat(rowFormat' "Name"' "Type"' "Value");                  result.AppendFormat(rowFormat' GeneralUtilities.GenerateSeparator(15' "=")' GeneralUtilities.GenerateSeparator(25' "=")' GeneralUtilities.GenerateSeparator(10' "="));                    foreach (KeyValuePair<string' DeploymentVariable> pair in dictionary)                  {                      result.AppendFormat(rowFormat' pair.Key' pair.Value.Type' pair.Value.Value);                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The following statement contains a magic number: int counter = 5000;
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName).Deployment();                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName).Deployment();                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName).Deployment();                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName).Deployment();                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.Resources.Models,ResourcesClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.ResourceGroups\ResourceClient.ResourceManager.cs,WaitDeploymentStatus,The following statement contains a magic number: do              {                  WriteVerbose(string.Format("Checking deployment status in {0} seconds."' counter / 1000));                  TestMockSupport.Delay(counter);                    if (job != null)                  {                      job(resourceGroup' deploymentName' basicDeployment);                  }                    deployment = ResourceManagementClient.Deployments.Get(resourceGroup' deploymentName).Deployment();                  counter = counter + 5000 > 60000 ? 60000 : counter + 5000;                } while (!status.Any(s => s.Equals(deployment.Properties.ProvisioningState' StringComparison.OrdinalIgnoreCase)));
Magic Number,Microsoft.Azure.Commands.Resources.Models.Gallery,GalleryClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\GalleryClient.cs,GalleryClient,The following statement contains a magic number: this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
Magic Number,Microsoft.Azure.Commands.Resources.Models.Gallery,GalleryClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Gallery\GalleryClient.cs,GalleryClient,The following statement contains a magic number: this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
Magic Number,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The following statement contains a magic number: if (count % 2 != 0)              {                  throw new ArgumentException(string.Format(ProjectResources.ScopeShouldHaveEvenNumberOfParts' scope));              }
Magic Number,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The following statement contains a magic number: if (count >= 4 && string.Compare(parts[2]' "resourceGroups"' true) != 0)              {                  throw new ArgumentException(string.Format(ProjectResources.ScopeShouldBeginWithSubscriptionsAndResourceGroups' scope));              }
Magic Number,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The following statement contains a magic number: if (count >= 4 && string.Compare(parts[2]' "resourceGroups"' true) != 0)              {                  throw new ArgumentException(string.Format(ProjectResources.ScopeShouldBeginWithSubscriptionsAndResourceGroups' scope));              }
Magic Number,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The following statement contains a magic number: if (count >= 6)              {                  if (string.Compare(parts[4]' "providers"' true) != 0)                  {                      throw new ArgumentException(string.Format(ProjectResources.ScopeShouldBeginWithSubscriptionsAndResourceGroupsAndProviders' scope));                  }                    if (count < 8)                  {                      throw new ArgumentException(string.Format(ProjectResources.ScopeShouldHaveAtLeastOnePairOfResourceTypeAndName' scope));                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The following statement contains a magic number: if (count >= 6)              {                  if (string.Compare(parts[4]' "providers"' true) != 0)                  {                      throw new ArgumentException(string.Format(ProjectResources.ScopeShouldBeginWithSubscriptionsAndResourceGroupsAndProviders' scope));                  }                    if (count < 8)                  {                      throw new ArgumentException(string.Format(ProjectResources.ScopeShouldHaveAtLeastOnePairOfResourceTypeAndName' scope));                  }              }
Magic Number,Microsoft.Azure.Commands.Resources.Models.Authorization,AuthorizationClient,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\Models.Authorization\AuthorizationClient.cs,ValidateScope,The following statement contains a magic number: if (count >= 6)              {                  if (string.Compare(parts[4]' "providers"' true) != 0)                  {                      throw new ArgumentException(string.Format(ProjectResources.ScopeShouldBeginWithSubscriptionsAndResourceGroupsAndProviders' scope));                  }                    if (count < 8)                  {                      throw new ArgumentException(string.Format(ProjectResources.ScopeShouldHaveAtLeastOnePairOfResourceTypeAndName' scope));                  }              }
Missing Default,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADApplicationCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADApplicationCommand.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)              {                  case ParameterSet.ApplicationWithPasswordPlain:                      string decodedPassword = SecureStringExtensions.ConvertToString(Password);                      createParameters.PasswordCredentials = new PSADPasswordCredential[]                      {                          new PSADPasswordCredential                          {                              StartDate = StartDate'                              EndDate = EndDate'                              KeyId = Guid.NewGuid()'                              Password = decodedPassword                          }                      };                      break;                    case ParameterSet.ApplicationWithPasswordCredential:                      createParameters.PasswordCredentials = PasswordCredentials;                      break;                    case ParameterSet.ApplicationWithKeyPlain:                      createParameters.KeyCredentials = new PSADKeyCredential[]                      {                          new PSADKeyCredential                          {                              StartDate = StartDate'                              EndDate = EndDate'                              KeyId = Guid.NewGuid()'                              CertValue = CertValue                          }                      };                      break;                    case ParameterSet.ApplicationWithKeyCredential:                      createParameters.KeyCredentials = KeyCredentials;                      break;              }
Missing Default,Microsoft.Azure.Commands.ActiveDirectory,NewAzureADServicePrincipalCommand,C:\repos\Azure_azure-powershell\src\ResourceManager\Resources\Commands.Resources\ActiveDirectory\NewAzureADServicePrincipalCommand.cs,ExecuteCmdlet,The following switch statement is missing a default case: switch (ParameterSetName)                  {                      case ParameterSet.ApplicationWithPasswordPlain:                      case ParameterSet.DisplayNameWithPasswordPlain:                          string decodedPassword = SecureStringExtensions.ConvertToString(Password);                          createParameters.PasswordCredentials = new PSADPasswordCredential[]                          {                          new PSADPasswordCredential                          {                              StartDate = StartDate'                              EndDate = EndDate'                              KeyId = Guid.NewGuid()'                              Password = decodedPassword                          }                          };                          break;                        case ParameterSet.ApplicationWithPasswordCredential:                      case ParameterSet.DisplayNameWithPasswordCredential:                          createParameters.PasswordCredentials = PasswordCredentials;                          break;                        case ParameterSet.ApplicationWithKeyPlain:                      case ParameterSet.DisplayNameWithKeyPlain:                          createParameters.KeyCredentials = new PSADKeyCredential[]                          {                          new PSADKeyCredential                          {                              StartDate = StartDate'                              EndDate = EndDate'                              KeyId = Guid.NewGuid()'                              CertValue = CertValue                          }                          };                          break;                        case ParameterSet.ApplicationWithKeyCredential:                      case ParameterSet.DisplayNameWithKeyCredential:                          createParameters.KeyCredentials = KeyCredentials;                          break;                  }
