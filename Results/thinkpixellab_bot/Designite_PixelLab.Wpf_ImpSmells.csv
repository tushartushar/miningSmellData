Implementation smell,Namespace,Class,File,Method,Description
Long Method,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,handleChanges,The method has 166 lines of code.
Long Method,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The method has 103 lines of code.
Complex Method,PixelLab.Wpf,TreeMap3D,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,updateMap,Cyclomatic complexity of the method is 9
Complex Method,PixelLab.Wpf,TreeMapPanel,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMapPanel.cs,ArrangeOverride,Cyclomatic complexity of the method is 9
Complex Method,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,compositionTarget_rendering,Cyclomatic complexity of the method is 14
Complex Method,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,handleChanges,Cyclomatic complexity of the method is 18
Complex Method,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,setupNodes,Cyclomatic complexity of the method is 10
Long Parameter List,PixelLab.Wpf,AnimatingPanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingPanel.cs,CreateDoubleDP,The method has 6 parameters. Parameters: name' defaultValue' metadataOptions' minValue' maxValue' attached
Long Parameter List,PixelLab.Wpf,AnimatingPanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingPanel.cs,CreateDoubleDP,The method has 8 parameters. Parameters: name' defaultValue' metadataOptions' minValue' includeMin' maxValue' includeMax' attached
Long Parameter List,PixelLab.Wpf,AnimatingTilePanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingTilePanel.cs,calculateChildOffset,The method has 6 parameters. Parameters: index' childrenPerRow' itemWidth' itemHeight' panelWidth' totalChildren
Long Parameter List,PixelLab.Wpf,BlockBarRect,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarRect.cs,GetRect,The method has 5 parameters. Parameters: targetSize' blockCount' blockMargin' blockNumber' penThickness
Long Parameter List,PixelLab.Wpf,TreeViewHelper,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeViewHelper.cs,GetTreeViewItem,The method has 5 parameters. Parameters: treeViewThing' objectPath' indexPath' useObjectPath' theItem
Long Parameter List,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,updateGraphCP,The method has 5 parameters. Parameters: graphContentPresenter' forceVector' coefficientOfDampening' frameRate' parentCenter
Long Parameter List,PixelLab.Wpf,WpfUtil,C:\repos\thinkpixellab_bot\net40-client\Bot\WpfUtil.cs,Animate,The method has 10 parameters. Parameters: currentValue' currentVelocity' targetValue' attractionFator' dampening' terminalVelocity' minValueDelta' minVelocityDelta' newValue' newVelocity
Long Parameter List,PixelLab.Wpf,WpfUtil,C:\repos\thinkpixellab_bot\net40-client\Bot\WpfUtil.cs,DrawLine,The method has 5 parameters. Parameters: drawingContext' pen' startPoint' angleRadians' length
Long Parameter List,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,MakeSide,The method has 8 parameters. Parameters: content' origin' u' v' endAngle' rotationCenter' rotationAxis' onCompleted
Long Parameter List,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateMesh,The method has 6 parameters. Parameters: origin' u' v' usteps' vsteps' textureBounds
Long Identifier,PixelLab.Wpf,NotifyWorker,C:\repos\thinkpixellab_bot\net40-client\Bot\NotifyWorker.cs,,The length of the parameter m_lastClientExceptionEventArgs is 30.
Long Identifier,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,,The length of the parameter s_dragPreviewStoryboardProperty is 31.
Long Identifier,PixelLab.Wpf,ZapScroller,C:\repos\thinkpixellab_bot\net40-client\Bot\Zap\ZapScroller.cs,,The length of the parameter CommandItemTemplateSelectorProperty is 35.
Long Identifier,PixelLab.Wpf.Transitions,TransitionPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\TransitionPresenter.cs,,The length of the parameter ContentTemplateSelectorProperty is 31.
Long Statement,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,SetPreviewElement,The length of the statement  "            RenderTargetBitmap r = new RenderTargetBitmap((int)(element.ActualWidth * x / 96)' (int)(element.ActualHeight * y / 96)' (int)x' (int)y' PixelFormats.Pbgra32); " is 159.
Long Statement,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,TranslateItem,The length of the statement  "                keyframe = storyboard.Children.Cast<DoubleAnimationUsingKeyFrames>().Single().KeyFrames.Cast<SplineDoubleKeyFrame>().Single(); " is 126.
Long Statement,PixelLab.Wpf,TreeMap3DUserControl,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3DUserControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/PixelLab.Wpf;component/treemap3dusercontrol.xaml"' System.UriKind.Relative); " is 122.
Long Statement,PixelLab.Wpf,BlockBarCircle,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarCircle.cs,OnRender,The length of the statement  "            double startLeft = penThickness / 2 + effectiveRenderSize.Width - (this.BlockCount * circleDiameter + (this.BlockCount - 1) * BlockMargin); " is 139.
Long Statement,PixelLab.Wpf,NumericUpDown,C:\repos\thinkpixellab_bot\net40-client\Bot\NumericUpDown.cs,InitializeCommands,The length of the statement  "            CommandManager.RegisterClassCommandBinding(typeof(NumericUpDown)' new CommandBinding(_increaseCommand' OnIncreaseCommand)); " is 123.
Long Statement,PixelLab.Wpf,NumericUpDown,C:\repos\thinkpixellab_bot\net40-client\Bot\NumericUpDown.cs,InitializeCommands,The length of the statement  "            CommandManager.RegisterClassInputBinding(typeof(NumericUpDown)' new InputBinding(_increaseCommand' new KeyGesture(Key.Up))); " is 124.
Long Statement,PixelLab.Wpf,NumericUpDown,C:\repos\thinkpixellab_bot\net40-client\Bot\NumericUpDown.cs,InitializeCommands,The length of the statement  "            CommandManager.RegisterClassCommandBinding(typeof(NumericUpDown)' new CommandBinding(_decreaseCommand' OnDecreaseCommand)); " is 123.
Long Statement,PixelLab.Wpf,NumericUpDown,C:\repos\thinkpixellab_bot\net40-client\Bot\NumericUpDown.cs,InitializeCommands,The length of the statement  "            CommandManager.RegisterClassInputBinding(typeof(NumericUpDown)' new InputBinding(_decreaseCommand' new KeyGesture(Key.Down))); " is 126.
Long Statement,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,OnRender,The length of the statement  "                m_nodePresenters.ForEach(gcp => drawingContext.DrawLine(pen' m_centerGraphContentPresenter.ActualLocation' gcp.ActualLocation)); " is 128.
Long Statement,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,compositionTarget_rendering,The length of the statement  "                Point centerLocationToUse = (m_centerGraphContentPresenter != null) ? m_centerGraphContentPresenter.Location : new Point(); " is 123.
Long Statement,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,handleChanges,The length of the statement  "                Debug.Assert(m_centerGraphContentPresenter.Content == null || m_centerGraphContentPresenter.Content.Equals(m_centerDataInUse)); " is 127.
Long Statement,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,handleChanges,The length of the statement  "                    if (m_nodesInUse[i] != null && m_centerGraphContentPresenter.Content != null && m_nodesInUse[i].Equals(m_centerGraphContentPresenter.Content)) " is 142.
Long Statement,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,SetUpCleanCenter,The length of the statement  "            m_centerGraphContentPresenter = GetGraphContentPresenter(newCenter' m_nodeTemplateBinding' m_nodeTemplateSelectorBinding' false); " is 129.
Long Statement,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The length of the statement  "            MeshGeometry3D mesh = CreateMesh(new Point3D()' new Vector3D(size.Width' 0' 0)' new Vector3D(0' size.Height' 0)' xparticles - 1' yparticles - 1' new Rect(0' 0' 1' 1)); " is 167.
Long Statement,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The length of the statement  "            MeshGeometry3D mesh = CreateMesh(new Point3D()' new Vector3D(size.Width' 0' 0)' new Vector3D(0' size.Height' 0)' xparticles - 1' yparticles - 1' new Rect(0' 0' 1' 1)); " is 167.
Long Statement,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The length of the statement  "                            oldPoints[i] = new Point3D(size.Width * Math.Cos(angle)' a * size.Height / (yparticles - 1)' -size.Width * Math.Sin(angle)); " is 124.
Long Statement,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The length of the statement  "            viewport.Children.Add(m1 = MakeSide(oldContent' new Point3D()' new Vector3D(size.Width' 0' 0)' new Vector3D(0' size.Height' 0)' endAngle' rotationCenter' rotationAxis' null)); " is 175.
Long Statement,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateCamera,The length of the statement  "            return new PerspectiveCamera(new Point3D(size.Width / 2' size.Height / 2' -size.Width / Math.Tan(fov / 2 * Math.PI / 180) / 2)' " is 127.
Long Statement,PixelLab.Wpf.Transitions,TranslateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\TranslateTransition.cs,BeginTransition,The length of the statement  "            TranslateTransform tt = new TranslateTransform(StartPoint.X * transitionElement.ActualWidth' StartPoint.Y * transitionElement.ActualHeight); " is 140.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\thinkpixellab_bot\net40-client\Bot\_build\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,handleChanges,The conditional expression  "m_centerChanged && m_nodeCollectionChanged &&                  CenterObject != null &&                  m_centerGraphContentPresenter != null"  is complex.
Virtual Method Call from Constructor,PixelLab.Wpf,ZapCommandItem,C:\repos\thinkpixellab_bot\net40-client\Bot\Zap\ZapCommandItem.cs,ZapCommandItem,The constructor "ZapCommandItem" calls a virtual method "OnCanExecuteChanged".
Empty Catch Block,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetBinding,The method has an empty catch block.
Magic Number,PixelLab.Wpf,AnimatingPanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingPanel.cs,compositionTarget_Rendering,The following statement contains a magic number: double attractionFactor = this.Attraction * .01;
Magic Number,PixelLab.Wpf,AnimatingPanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingPanel.cs,updateChildData,The following statement contains a magic number: if (data == null)              {                  return false;              }              else              {                  Debug.Assert(dampening > 0 && dampening < 1);                  Debug.Assert(attractionFactor > 0 && !double.IsInfinity(attractionFactor));                    attractionFactor *= 1 + (variation * data.RandomSeed - .5);                    Point newLocation;                  Vector newVelocity;                    bool anythingChanged =                      GeoHelper.Animate(data.Current' data.LocationVelocity' data.Target'                          attractionFactor' dampening' c_terminalVelocity' c_diff' c_diff'                          out newLocation' out newVelocity);                    data.Current = newLocation;                  data.LocationVelocity = newVelocity;                    var transformVector = data.Current - data.Target;                  data.Transform.SetToVector(transformVector);                    return anythingChanged;              }
Magic Number,PixelLab.Wpf,AnimatingTilePanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingTilePanel.cs,ProcessNewChild,The following statement contains a magic number: if (m_arrangedOnce)              {                  if (m_itemOpacityAnimation == null)                  {                      m_itemOpacityAnimation = new DoubleAnimation()                      {                          From = 0'                          Duration = new Duration(TimeSpan.FromSeconds(.5))                      };                      m_itemOpacityAnimation.Freeze();                  }                    child.BeginAnimation(UIElement.OpacityProperty' m_itemOpacityAnimation);                  startLocation -= new Vector(providedBounds.Width' 0);              }
Magic Number,PixelLab.Wpf,AnimatingTilePanel,C:\repos\thinkpixellab_bot\net40-client\Bot\AnimatingTilePanel.cs,calculateChildOffset,The following statement contains a magic number: return new Point(.5 * fudge + column * (itemWidth + fudge)' row * itemHeight);
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,DragPreviewAdorner,The following statement contains a magic number: d.BlurRadius = 25.0;
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,DragPreviewAdorner,The following statement contains a magic number: d.ShadowDepth = 2;
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,DragPreviewAdorner,The following statement contains a magic number: d.Opacity = 0.5;
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,SetPreviewElement,The following statement contains a magic number: RenderTargetBitmap r = new RenderTargetBitmap((int)(element.ActualWidth * x / 96)' (int)(element.ActualHeight * y / 96)' (int)x' (int)y' PixelFormats.Pbgra32);
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,SetPreviewElement,The following statement contains a magic number: RenderTargetBitmap r = new RenderTargetBitmap((int)(element.ActualWidth * x / 96)' (int)(element.ActualHeight * y / 96)' (int)x' (int)y' PixelFormats.Pbgra32);
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,GetCurrentDPI,The following statement contains a magic number: x = 96 / m.M11;
Magic Number,PixelLab.Wpf,DragPreviewAdorner,C:\repos\thinkpixellab_bot\net40-client\Bot\DragPreviewAdorner.cs,GetCurrentDPI,The following statement contains a magic number: y = 96 / m.M22;
Magic Number,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,PointToQuadrant,The following statement contains a magic number: if (p.Y >= (element.ActualHeight / 2))              {                  // top half                  if (p.X >= (element.ActualWidth / 2))                  {                      return ReorderQuadrant.BottomRight;                  }                  else                  {                      return ReorderQuadrant.BottomLeft;                  }              }              else              {                  // bottom half                  if (p.X >= (element.ActualWidth / 2))                  {                      return ReorderQuadrant.TopRight;                  }                  else                  {                      return ReorderQuadrant.TopLeft;                  }              }
Magic Number,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,PointToQuadrant,The following statement contains a magic number: if (p.Y >= (element.ActualHeight / 2))              {                  // top half                  if (p.X >= (element.ActualWidth / 2))                  {                      return ReorderQuadrant.BottomRight;                  }                  else                  {                      return ReorderQuadrant.BottomLeft;                  }              }              else              {                  // bottom half                  if (p.X >= (element.ActualWidth / 2))                  {                      return ReorderQuadrant.TopRight;                  }                  else                  {                      return ReorderQuadrant.TopLeft;                  }              }
Magic Number,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,PointToQuadrant,The following statement contains a magic number: if (p.Y >= (element.ActualHeight / 2))              {                  // top half                  if (p.X >= (element.ActualWidth / 2))                  {                      return ReorderQuadrant.BottomRight;                  }                  else                  {                      return ReorderQuadrant.BottomLeft;                  }              }              else              {                  // bottom half                  if (p.X >= (element.ActualWidth / 2))                  {                      return ReorderQuadrant.TopRight;                  }                  else                  {                      return ReorderQuadrant.TopLeft;                  }              }
Magic Number,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,TranslateItem,The following statement contains a magic number: if (storyboard == null)              {                  var t = new TranslateTransform();                  element.RenderTransform = t;                    keyframe = new SplineDoubleKeyFrame                  {                      KeySpline = new KeySpline(0' 0.7' 0.7' 1)                  };                  var animation = new DoubleAnimationUsingKeyFrames();                  animation.KeyFrames.Add(keyframe);                    Storyboard.SetTarget(animation' element);                  PropertyPath propertyPath;                  if (orientation == Orientation.Vertical)                  {                      propertyPath = new PropertyPath("(RenderTransform).(TranslateTransform.Y)");                  }                  else                  {                      propertyPath = new PropertyPath("(RenderTransform).(TranslateTransform.X)");                  }                  Storyboard.SetTargetProperty(animation' propertyPath);                    storyboard = new Storyboard();                  storyboard.Children.Add(animation);                    element.SetValue(s_dragPreviewStoryboardProperty' storyboard);              }              else              {                  keyframe = storyboard.Children.Cast<DoubleAnimationUsingKeyFrames>().Single().KeyFrames.Cast<SplineDoubleKeyFrame>().Single();              }
Magic Number,PixelLab.Wpf,ReorderListBox,C:\repos\thinkpixellab_bot\net40-client\Bot\ReorderListBox.cs,TranslateItem,The following statement contains a magic number: if (storyboard == null)              {                  var t = new TranslateTransform();                  element.RenderTransform = t;                    keyframe = new SplineDoubleKeyFrame                  {                      KeySpline = new KeySpline(0' 0.7' 0.7' 1)                  };                  var animation = new DoubleAnimationUsingKeyFrames();                  animation.KeyFrames.Add(keyframe);                    Storyboard.SetTarget(animation' element);                  PropertyPath propertyPath;                  if (orientation == Orientation.Vertical)                  {                      propertyPath = new PropertyPath("(RenderTransform).(TranslateTransform.Y)");                  }                  else                  {                      propertyPath = new PropertyPath("(RenderTransform).(TranslateTransform.X)");                  }                  Storyboard.SetTargetProperty(animation' propertyPath);                    storyboard = new Storyboard();                  storyboard.Children.Add(animation);                    element.SetValue(s_dragPreviewStoryboardProperty' storyboard);              }              else              {                  keyframe = storyboard.Children.Cast<DoubleAnimationUsingKeyFrames>().Single().KeyFrames.Cast<SplineDoubleKeyFrame>().Single();              }
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,AddItem,The following statement contains a magic number: item.RenderTransformOrigin = new Point(.5' .5);
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,AddItem,The following statement contains a magic number: item.RenderTransformOrigin = new Point(.5' .5);
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,AddItem,The following statement contains a magic number: group.Children.Add(new ScaleTransform(.6' .6));
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,AddItem,The following statement contains a magic number: group.Children.Add(new ScaleTransform(.6' .6));
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,ArrangeOverride,The following statement contains a magic number: Action<UIElement> arrange = delegate(UIElement child)              {                  TransformGroup tg = (TransformGroup)child.RenderTransform;                  ScaleTransform st = (ScaleTransform)tg.Children[0];                  TranslateTransform tt = (TranslateTransform)tg.Children[3];                    Size childSize = child.DesiredSize;                    child.Arrange(new Rect(childSize));                    tt.SetToVector(finalSize.CenterVector() - childSize.CenterVector());                    double scale = GeoHelper.ScaleToFit(finalSize' childSize);                    st.ScaleX = scale;                  st.ScaleY = scale;              };
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetFadeInAnimation,The following statement contains a magic number: animation.Duration = new Duration(TimeSpan.FromSeconds(2));
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetRandomRotateAnimation,The following statement contains a magic number: double angle = (.5 - Util.Rnd.NextDouble()) * 20;
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetRandomRotateAnimation,The following statement contains a magic number: double angle = (.5 - Util.Rnd.NextDouble()) * 20;
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetRandomRotateAnimation,The following statement contains a magic number: animation.DecelerationRatio = .5;
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetFadeOutAnimation,The following statement contains a magic number: animation.Duration = new Duration(TimeSpan.FromSeconds(3));
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetShrinkAnimation,The following statement contains a magic number: animation.To = .8;
Magic Number,PixelLab.Wpf,ShowElement,C:\repos\thinkpixellab_bot\net40-client\Bot\ShowElement.cs,GetShrinkAnimation,The following statement contains a magic number: animation.DecelerationRatio = .5;
Magic Number,PixelLab.Wpf,TreeMap3DUserControl,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3DUserControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.viewport3D = ((System.Windows.Controls.Viewport3D)(target));              return;              case 2:              this._treeMap3D = ((PixelLab.Wpf.TreeMap3D)(target));              return;              case 3:              this._transition3D = ((PixelLab.Wpf.Transition3D)(target));              return;              case 4:              this._dataDisplay = ((System.Windows.Controls.StackPanel)(target));              return;              }
Magic Number,PixelLab.Wpf,TreeMap3DUserControl,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3DUserControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.viewport3D = ((System.Windows.Controls.Viewport3D)(target));              return;              case 2:              this._treeMap3D = ((PixelLab.Wpf.TreeMap3D)(target));              return;              case 3:              this._transition3D = ((PixelLab.Wpf.Transition3D)(target));              return;              case 4:              this._dataDisplay = ((System.Windows.Controls.StackPanel)(target));              return;              }
Magic Number,PixelLab.Wpf,TreeMap3DUserControl,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3DUserControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.viewport3D = ((System.Windows.Controls.Viewport3D)(target));              return;              case 2:              this._treeMap3D = ((PixelLab.Wpf.TreeMap3D)(target));              return;              case 3:              this._transition3D = ((PixelLab.Wpf.Transition3D)(target));              return;              case 4:              this._dataDisplay = ((System.Windows.Controls.StackPanel)(target));              return;              }
Magic Number,PixelLab.Wpf,BlockBarBase,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarBase.cs,BlockBarBase,The following statement contains a magic number: BlockBarBase.MinHeightProperty.OverrideMetadata(typeof(BlockBarBase)' new FrameworkPropertyMetadata((double)10));
Magic Number,PixelLab.Wpf,BlockBarBase,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarBase.cs,BlockBarBase,The following statement contains a magic number: BlockBarBase.MinWidthProperty.OverrideMetadata(typeof(BlockBarBase)' new FrameworkPropertyMetadata((double)10));
Magic Number,PixelLab.Wpf,BlockBarCircle,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarCircle.cs,OnRender,The following statement contains a magic number: double startLeft = penThickness / 2 + effectiveRenderSize.Width - (this.BlockCount * circleDiameter + (this.BlockCount - 1) * BlockMargin);
Magic Number,PixelLab.Wpf,BlockBarCircle,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarCircle.cs,OnRender,The following statement contains a magic number: double startTop = penThickness / 2 + (effectiveRenderSize.Height - circleDiameter) / 2;
Magic Number,PixelLab.Wpf,BlockBarCircle,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarCircle.cs,OnRender,The following statement contains a magic number: double startTop = penThickness / 2 + (effectiveRenderSize.Height - circleDiameter) / 2;
Magic Number,PixelLab.Wpf,BlockBarCircle,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarCircle.cs,OnRender,The following statement contains a magic number: double circleRadius = circleDiameter / 2;
Magic Number,PixelLab.Wpf,BlockBarRect,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarRect.cs,GetRect,The following statement contains a magic number: double left = penThickness / 2 + (width + blockMargin) * blockNumber;
Magic Number,PixelLab.Wpf,BlockBarRect,C:\repos\thinkpixellab_bot\net40-client\Bot\BlockBarRect.cs,GetRect,The following statement contains a magic number: if (width > 0 && height > 0)              {                  return new Rect(left' penThickness / 2' width' height);              }              else              {                  return Rect.Empty;              }
Magic Number,PixelLab.Wpf,ListPager,C:\repos\thinkpixellab_bot\net40-client\Bot\ListPager.cs,GetPageSizePropertyMetadata,The following statement contains a magic number: pm.DefaultValue = 10;
Magic Number,PixelLab.Wpf,NumericUpDown,C:\repos\thinkpixellab_bot\net40-client\Bot\NumericUpDown.cs,smallestForDecimalPlaces,The following statement contains a magic number: for (int i = 0; i < decimalPlaces; i++)              {                  d /= 10;              }
Magic Number,PixelLab.Wpf,ByteColorMultiConverter,C:\repos\thinkpixellab_bot\net40-client\Bot\ColorPicker.cs,Convert,The following statement contains a magic number: if (values.Length != 3)              {                  throw new ArgumentException("need three values");              }
Magic Number,PixelLab.Wpf,ByteColorMultiConverter,C:\repos\thinkpixellab_bot\net40-client\Bot\ColorPicker.cs,Convert,The following statement contains a magic number: byte blue = (byte)values[2];
Magic Number,PixelLab.Wpf,Reveal,C:\repos\thinkpixellab_bot\net40-client\Bot\Reveal.cs,CalculateLeft,The following statement contains a magic number: if (reveal == HorizontalRevealMode.FromRightToLeft)              {                  return (percent - 1.0) * width;              }              else if (reveal == HorizontalRevealMode.FromCenterToEdge)              {                  return (percent - 1.0) * width * 0.5;              }              else              {                  return 0.0;              }
Magic Number,PixelLab.Wpf,Reveal,C:\repos\thinkpixellab_bot\net40-client\Bot\Reveal.cs,CalculateTop,The following statement contains a magic number: if (reveal == VerticalRevealMode.FromBottomToTop)              {                  return (percent - 1.0) * height;              }              else if (reveal == VerticalRevealMode.FromCenterToEdge)              {                  return (percent - 1.0) * height * 0.5;              }              else              {                  return 0.0;              }
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,Transition3D,The following statement contains a magic number: indices.Add(3);
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,Transition3D,The following statement contains a magic number: indices.Add(3);
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,Transition3D,The following statement contains a magic number: indices.Add(2);
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,Transition3D,The following statement contains a magic number: m_rotation = new AxisAngleRotation3D(new Vector3D(0' 1' 0)' 35);
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,Transition3D,The following statement contains a magic number: m_translation = new TranslateTransform3D(-2.5' 0' -10);
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,Transition3D,The following statement contains a magic number: m_translation = new TranslateTransform3D(-2.5' 0' -10);
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runCollapseAnimation,The following statement contains a magic number: animation.Duration = new Duration(TimeSpan.FromSeconds(0.3));
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runExpandAnimation,The following statement contains a magic number: animation.From = 5;
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runExpandAnimation,The following statement contains a magic number: animation.To = -2.5;
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runExpandAnimation,The following statement contains a magic number: animation.Duration = new Duration(TimeSpan.FromSeconds(.3));
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runExpandAnimation,The following statement contains a magic number: rotationAnimation.From = 90;
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runExpandAnimation,The following statement contains a magic number: rotationAnimation.To = 35;
Magic Number,PixelLab.Wpf,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transition3D.cs,runExpandAnimation,The following statement contains a magic number: rotationAnimation.Duration = new Duration(TimeSpan.FromSeconds(.3));
Magic Number,PixelLab.Wpf,TreeMap3D,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,updateMap,The following statement contains a magic number: foreach (TreeMap3DElement elem in m_elements)              {                  elem.ScaleZ(2 * maxArea);              }
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(2);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(2);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(3);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(4);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(7);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(6);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(6);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(5);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(4);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(3);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(7);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(7);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(4);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(5);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(6);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(6);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(2);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(3);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(2);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(6);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(6);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(7);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(3);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(4);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(5);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(5);
Magic Number,PixelLab.Wpf,TreeMap3DElement,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3D.cs,GenerateTreeMap3DModel,The following statement contains a magic number: triangleIndices.Add(7);
Magic Number,PixelLab.Wpf,TreeViewHelper,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeViewHelper.cs,WaitForPriority,The following statement contains a magic number: const int defaultTimeout = 30000;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,ArrangeOverride,The following statement contains a magic number: m_controlCenterPoint = (Point)(.5 * (Vector)finalSize);
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,compositionTarget_rendering,The following statement contains a magic number: if (m_measureInvalidated || m_stillMoving)              {                  if (m_measureInvalidated)                  {                      m_milliseconds = Environment.TickCount;                  }                    #region CenterObject                  if (m_centerGraphContentPresenter != null)                  {                      if (m_centerGraphContentPresenter.New)                      {                          m_centerGraphContentPresenter.ParentCenter = m_controlCenterPoint;                          m_centerGraphContentPresenter.New = false;                          _somethingInvalid = true;                      }                      else                      {                          Vector forceVector = GetAttractionForce(                              ensureNonzeroVector((Vector)m_centerGraphContentPresenter.Location));                            if (updateGraphCP(m_centerGraphContentPresenter' forceVector' Dampening' Attraction' m_controlCenterPoint))                          {                              _somethingInvalid = true;                          }                      }                  }                  #endregion                    Point centerLocationToUse = (m_centerGraphContentPresenter != null) ? m_centerGraphContentPresenter.Location : new Point();                    GraphContentPresenter gcp;                  for (int i = 0; i < m_nodePresenters.Count; i++)                  {                      Vector forceVector = new Vector();                      gcp = m_nodePresenters[i];                        if (gcp.New)                      {                          gcp.New = false;                          _somethingInvalid = true;                      }                        for (int j = 0; j < m_nodePresenters.Count; j++)                      {                          if (j != i)                          {                              Vector distance = ensureNonzeroVector(gcp.Location - m_nodePresenters[j].Location);                              Vector repulsiveForce = GetRepulsiveForce(distance);                                forceVector += repulsiveForce;                          }                      }                        forceVector += GetSpringForce(ensureNonzeroVector(m_nodePresenters[i].Location - centerLocationToUse));                        if (updateGraphCP(m_nodePresenters[i]' forceVector' Dampening' Attraction' m_controlCenterPoint))                      {                          _somethingInvalid = true;                      }                  }                    #region animate all of the fading ones away                  for (int i = 0; i < m_fadingGCPList.Count; i++)                  {                      if (!m_fadingGCPList[i].WasCenter)                      {                          Vector centerDiff = ensureNonzeroVector(m_fadingGCPList[i].Location - centerLocationToUse);                          centerDiff.Normalize();                          centerDiff *= 20;                          if (updateGraphCP(m_fadingGCPList[i]' centerDiff' Dampening' Attraction' m_controlCenterPoint))                          {                              _somethingInvalid = true;                          }                      }                  }                    #endregion                    if (_somethingInvalid && belowMaxSettleTime())                  {                      m_stillMoving = true;                      InvalidateVisual();                  }                  else                  {                      m_stillMoving = false;                      m_listener.StopListening();                  }                  m_measureInvalidated = false;              }
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,ensureNonzeroVector,The following statement contains a magic number: if (vector.Length > 0)              {                  return vector;              }              else              {                  return new Vector(Util.Rnd.NextDouble() - .5' Util.Rnd.NextDouble() - .5);              }
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,ensureNonzeroVector,The following statement contains a magic number: if (vector.Length > 0)              {                  return vector;              }              else              {                  return new Vector(Util.Rnd.NextDouble() - .5' Util.Rnd.NextDouble() - .5);              }
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetCenteredRect,The following statement contains a magic number: double x = center.X - elementSize.Width / 2;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetCenteredRect,The following statement contains a magic number: double y = center.Y - elementSize.Height / 2;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetAttractionForce,The following statement contains a magic number: Vector force = -.2 * Normalize(x) * x.Length;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetRepulsiveForce,The following statement contains a magic number: Vector force = .1 * Normalize(x) / Math.Pow(x.Length / 1000' 2);
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetRepulsiveForce,The following statement contains a magic number: Vector force = .1 * Normalize(x) / Math.Pow(x.Length / 1000' 2);
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetRepulsiveForce,The following statement contains a magic number: Vector force = .1 * Normalize(x) / Math.Pow(x.Length / 1000' 2);
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetForce,The following statement contains a magic number: return GetSCurve((x + 100) / 200);
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetForce,The following statement contains a magic number: return GetSCurve((x + 100) / 200);
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetSCurve,The following statement contains a magic number: return 0.5 + Math.Sin(Math.Abs(x * (Math.PI / 2)) - Math.Abs((x * (Math.PI / 2)) - (Math.PI / 2))) / 2;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetSCurve,The following statement contains a magic number: return 0.5 + Math.Sin(Math.Abs(x * (Math.PI / 2)) - Math.Abs((x * (Math.PI / 2)) - (Math.PI / 2))) / 2;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetSCurve,The following statement contains a magic number: return 0.5 + Math.Sin(Math.Abs(x * (Math.PI / 2)) - Math.Abs((x * (Math.PI / 2)) - (Math.PI / 2))) / 2;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetSCurve,The following statement contains a magic number: return 0.5 + Math.Sin(Math.Abs(x * (Math.PI / 2)) - Math.Abs((x * (Math.PI / 2)) - (Math.PI / 2))) / 2;
Magic Number,PixelLab.Wpf,Graph,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GetSCurve,The following statement contains a magic number: return 0.5 + Math.Sin(Math.Abs(x * (Math.PI / 2)) - Math.Abs((x * (Math.PI / 2)) - (Math.PI / 2))) / 2;
Magic Number,PixelLab.Wpf,GraphContentPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GraphContentPresenter,The following statement contains a magic number: if (offsetCenter)                  {                      m_translateTransform = new TranslateTransform(Util.Rnd.NextDouble() - .5' Util.Rnd.NextDouble() - .5);                  }                  else                  {                      m_translateTransform = new TranslateTransform();                  }
Magic Number,PixelLab.Wpf,GraphContentPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GraphContentPresenter,The following statement contains a magic number: if (offsetCenter)                  {                      m_translateTransform = new TranslateTransform(Util.Rnd.NextDouble() - .5' Util.Rnd.NextDouble() - .5);                  }                  else                  {                      m_translateTransform = new TranslateTransform();                  }
Magic Number,PixelLab.Wpf,GraphContentPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GraphContentPresenter,The following statement contains a magic number: var doubleAnimation = new DoubleAnimation(.5' 1' s_showDuration);
Magic Number,PixelLab.Wpf,GraphContentPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GraphContentPresenter,The following statement contains a magic number: LayoutUpdated += (sender' args) =>                  {                      ScaleTransform.CenterX = RenderSize.Width / 2;                      ScaleTransform.CenterY = RenderSize.Height / 2;                        m_centerVector = -.5 * (Vector)RenderSize;                      updateTransform();                  };
Magic Number,PixelLab.Wpf,GraphContentPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GraphContentPresenter,The following statement contains a magic number: LayoutUpdated += (sender' args) =>                  {                      ScaleTransform.CenterX = RenderSize.Width / 2;                      ScaleTransform.CenterY = RenderSize.Height / 2;                        m_centerVector = -.5 * (Vector)RenderSize;                      updateTransform();                  };
Magic Number,PixelLab.Wpf,GraphContentPresenter,C:\repos\thinkpixellab_bot\net40-client\Bot\Graph.cs,GraphContentPresenter,The following statement contains a magic number: LayoutUpdated += (sender' args) =>                  {                      ScaleTransform.CenterX = RenderSize.Width / 2;                      ScaleTransform.CenterY = RenderSize.Height / 2;                        m_centerVector = -.5 * (Vector)RenderSize;                      updateTransform();                  };
Magic Number,PixelLab.Wpf,ZapDecorator,C:\repos\thinkpixellab_bot\net40-client\Bot\Zap\ZapDecorator.cs,m_listener_rendering,The following statement contains a magic number: if (m_zapPanel != null)              {                  int actualTargetIndex = Math.Max(0' Math.Min(m_zapPanel.Children.Count - 1' TargetIndex));                    double targetPercentOffset = -actualTargetIndex / (double)m_zapPanel.Children.Count;                  targetPercentOffset = double.IsNaN(targetPercentOffset) ? 0 : targetPercentOffset;                    bool stopListening = !GeoHelper.Animate(                      m_percentOffset' m_velocity' targetPercentOffset'                      .05' .3' .1' c_diff' c_diff'                      out m_percentOffset' out m_velocity);                    double targetPixelOffset = m_percentOffset * (this.RenderSize.Width * m_zapPanel.Children.Count);                  m_traslateTransform.X = targetPixelOffset;                    if (stopListening)                  {                      m_listener.StopListening();                  }              }
Magic Number,PixelLab.Wpf,ZapDecorator,C:\repos\thinkpixellab_bot\net40-client\Bot\Zap\ZapDecorator.cs,m_listener_rendering,The following statement contains a magic number: if (m_zapPanel != null)              {                  int actualTargetIndex = Math.Max(0' Math.Min(m_zapPanel.Children.Count - 1' TargetIndex));                    double targetPercentOffset = -actualTargetIndex / (double)m_zapPanel.Children.Count;                  targetPercentOffset = double.IsNaN(targetPercentOffset) ? 0 : targetPercentOffset;                    bool stopListening = !GeoHelper.Animate(                      m_percentOffset' m_velocity' targetPercentOffset'                      .05' .3' .1' c_diff' c_diff'                      out m_percentOffset' out m_velocity);                    double targetPixelOffset = m_percentOffset * (this.RenderSize.Width * m_zapPanel.Children.Count);                  m_traslateTransform.X = targetPixelOffset;                    if (stopListening)                  {                      m_listener.StopListening();                  }              }
Magic Number,PixelLab.Wpf,ZapDecorator,C:\repos\thinkpixellab_bot\net40-client\Bot\Zap\ZapDecorator.cs,m_listener_rendering,The following statement contains a magic number: if (m_zapPanel != null)              {                  int actualTargetIndex = Math.Max(0' Math.Min(m_zapPanel.Children.Count - 1' TargetIndex));                    double targetPercentOffset = -actualTargetIndex / (double)m_zapPanel.Children.Count;                  targetPercentOffset = double.IsNaN(targetPercentOffset) ? 0 : targetPercentOffset;                    bool stopListening = !GeoHelper.Animate(                      m_percentOffset' m_velocity' targetPercentOffset'                      .05' .3' .1' c_diff' c_diff'                      out m_percentOffset' out m_velocity);                    double targetPixelOffset = m_percentOffset * (this.RenderSize.Width * m_zapPanel.Children.Count);                  m_traslateTransform.X = targetPixelOffset;                    if (stopListening)                  {                      m_listener.StopListening();                  }              }
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: int xparticles = 15' yparticles = 15;
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: int xparticles = 15' yparticles = 15;
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)                  points[i] += 0.1 * ustep * (rand.NextDouble() * 2 - 1) * new Vector3D(0' 0' 1);
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)                  points[i] += 0.1 * ustep * (rand.NextDouble() * 2 - 1) * new Vector3D(0' 0' 1);
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: Vector3D acceleration = new Vector3D(0' 700' 0);
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: double timeStep = 1.0 / 60.0;
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: double slideVelocity = size.Width / 2.0;
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: double windScale = 30 * size.Width * size.Height;
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.teknikus.dk/tj/gdc2001.htm                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Vector3D wind = new Vector3D(0' 0' windScale / (mousePos3D - currentPoint).LengthSquared);                      Point3D newPoint = currentPoint + (currentPoint - oldPoints[i]) + timeStep * timeStep * (acceleration + wind);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    //for (int j = 0; j < 5; j++)                  for (int i = oldPoints.Count - 1; i > 0; i--)                  {                      // constrain with point to the left                      if (i > yparticles)                          Constrain(oldPoints' i' i - yparticles' ustep);                      // constrain with point to the top                      if (i % yparticles != 0)                          Constrain(oldPoints' i' i - 1' vstep);                  }                    // slide the top row of points to the left                  for (int i = 0; i < xparticles; i += 1)                      oldPoints[i * yparticles] = new Point3D(Math.Max(0' i * ustep - slideVelocity * time * i / (xparticles - 1))' 0' 0);                    if (!fading && points[points.Count - yparticles].X < size.Width / 2)                  {                      fading = true;                      DoubleAnimation da = new DoubleAnimation(0' new Duration(TimeSpan.FromSeconds(1.5)));                      da.Completed += delegate                      {                          timer.Stop();                          EndTransition(transitionElement' oldContent' newContent);                      };                      cloneBrush.BeginAnimation(Brush.OpacityProperty' da);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.teknikus.dk/tj/gdc2001.htm                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Vector3D wind = new Vector3D(0' 0' windScale / (mousePos3D - currentPoint).LengthSquared);                      Point3D newPoint = currentPoint + (currentPoint - oldPoints[i]) + timeStep * timeStep * (acceleration + wind);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    //for (int j = 0; j < 5; j++)                  for (int i = oldPoints.Count - 1; i > 0; i--)                  {                      // constrain with point to the left                      if (i > yparticles)                          Constrain(oldPoints' i' i - yparticles' ustep);                      // constrain with point to the top                      if (i % yparticles != 0)                          Constrain(oldPoints' i' i - 1' vstep);                  }                    // slide the top row of points to the left                  for (int i = 0; i < xparticles; i += 1)                      oldPoints[i * yparticles] = new Point3D(Math.Max(0' i * ustep - slideVelocity * time * i / (xparticles - 1))' 0' 0);                    if (!fading && points[points.Count - yparticles].X < size.Width / 2)                  {                      fading = true;                      DoubleAnimation da = new DoubleAnimation(0' new Duration(TimeSpan.FromSeconds(1.5)));                      da.Completed += delegate                      {                          timer.Stop();                          EndTransition(transitionElement' oldContent' newContent);                      };                      cloneBrush.BeginAnimation(Brush.OpacityProperty' da);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.teknikus.dk/tj/gdc2001.htm                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Vector3D wind = new Vector3D(0' 0' windScale / (mousePos3D - currentPoint).LengthSquared);                      Point3D newPoint = currentPoint + (currentPoint - oldPoints[i]) + timeStep * timeStep * (acceleration + wind);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    //for (int j = 0; j < 5; j++)                  for (int i = oldPoints.Count - 1; i > 0; i--)                  {                      // constrain with point to the left                      if (i > yparticles)                          Constrain(oldPoints' i' i - yparticles' ustep);                      // constrain with point to the top                      if (i % yparticles != 0)                          Constrain(oldPoints' i' i - 1' vstep);                  }                    // slide the top row of points to the left                  for (int i = 0; i < xparticles; i += 1)                      oldPoints[i * yparticles] = new Point3D(Math.Max(0' i * ustep - slideVelocity * time * i / (xparticles - 1))' 0' 0);                    if (!fading && points[points.Count - yparticles].X < size.Width / 2)                  {                      fading = true;                      DoubleAnimation da = new DoubleAnimation(0' new Duration(TimeSpan.FromSeconds(1.5)));                      da.Completed += delegate                      {                          timer.Stop();                          EndTransition(transitionElement' oldContent' newContent);                      };                      cloneBrush.BeginAnimation(Brush.OpacityProperty' da);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,Constrain,The following statement contains a magic number: p1 += delta * 0.5 * diff;
Magic Number,PixelLab.Wpf.Transitions,ClothTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ClothTransition.cs,Constrain,The following statement contains a magic number: p2 -= delta * 0.5 * diff;
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: MeshGeometry3D leftDoor = CreateMesh(new Point3D()'                 new Vector3D(size.Width / 2' 0' 0)'                 new Vector3D(0' size.Height' 0)'                 1'                 1'                 new Rect(0' 0' 0.5' 1));
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: MeshGeometry3D leftDoor = CreateMesh(new Point3D()'                 new Vector3D(size.Width / 2' 0' 0)'                 new Vector3D(0' size.Height' 0)'                 1'                 1'                 new Rect(0' 0' 0.5' 1));
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: MeshGeometry3D rightDoor = CreateMesh(new Point3D(size.Width / 2' 0' 0)'                   new Vector3D(size.Width / 2' 0' 0)'                   new Vector3D(0' size.Height' 0)'                   1'                   1'                   new Rect(0.5' 0' 0.5' 1));
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: MeshGeometry3D rightDoor = CreateMesh(new Point3D(size.Width / 2' 0' 0)'                   new Vector3D(size.Width / 2' 0' 0)'                   new Vector3D(0' size.Height' 0)'                   1'                   1'                   new Rect(0.5' 0' 0.5' 1));
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: MeshGeometry3D rightDoor = CreateMesh(new Point3D(size.Width / 2' 0' 0)'                   new Vector3D(size.Width / 2' 0' 0)'                   new Vector3D(0' size.Height' 0)'                   1'                   1'                   new Rect(0.5' 0' 0.5' 1));
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: MeshGeometry3D rightDoor = CreateMesh(new Point3D(size.Width / 2' 0' 0)'                   new Vector3D(size.Width / 2' 0' 0)'                   new Vector3D(0' size.Height' 0)'                   1'                   1'                   new Rect(0.5' 0' 0.5' 1));
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: DoubleAnimation da = new DoubleAnimation(90 - 0.5 * FieldOfView' Duration);
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: DoubleAnimation da = new DoubleAnimation(90 - 0.5 * FieldOfView' Duration);
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: da = new DoubleAnimation(-(90 - 0.5 * FieldOfView)' Duration);
Magic Number,PixelLab.Wpf.Transitions,DoorTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\DoorTransition.cs,BeginTransition3D,The following statement contains a magic number: da = new DoubleAnimation(-(90 - 0.5 * FieldOfView)' Duration);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: Point3D mouse = new Point3D(mouse2D.X' mouse2D.Y' 0.5 * size.Width);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: int xparticles = 10' yparticles = 10;
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: int xparticles = 10' yparticles = 10;
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: Point3DCollection positions = new Point3DCollection(4 * xparticles * yparticles);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: PointCollection textures = new PointCollection(4 * xparticles * yparticles);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: Int32Collection triangles = new Int32Collection(6 * xparticles * yparticles);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: for (int i = 0; i < xparticles; i++)                  for (int j = 0; j < yparticles; j++)                  {                      Point3D topleft = (Point3D)(i * u + j * v);                      positions.Add(topleft);                      positions.Add(topleft + u);                      positions.Add(topleft + u + v);                      positions.Add(topleft + v);                        textures.Add(new Point(i * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' j * sy));                      textures.Add(new Point((i + 1) * sx' (j + 1) * sy));                      textures.Add(new Point(i * sx' (j + 1) * sy));                        triangles.Add(n);                      triangles.Add(n + 2);                      triangles.Add(n + 1);                        triangles.Add(n);                      triangles.Add(n + 3);                      triangles.Add(n + 2);                        Vector3D f0 = positions[n] - mouse;                      Vector3D f1 = positions[n + 1] - mouse;                      Vector3D f2 = positions[n + 2] - mouse;                      Vector3D f3 = positions[n + 3] - mouse;                        f0 = f0 / f0.LengthSquared;                      f1 = f1 / f1.LengthSquared;                      f2 = f2 / f2.LengthSquared;                      f3 = f3 / f3.LengthSquared;                        velocities[n / 4] = 2 * size.Width * (f0 + f1 + f2 + f3);                        Point3D center = centers[n / 4] = (Point3D)((i + 0.5) * u + (j + 0.5) * v);                      angularVelocities[n / 4] = 200 * (Vector3D.CrossProduct(f0' positions[n] - center) +                          Vector3D.CrossProduct(f1' positions[n + 1] - center) +                          Vector3D.CrossProduct(f2' positions[n + 2] - center) +                          Vector3D.CrossProduct(f3' positions[n + 3] - center));                        n += 4;                  }
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: double opacityDelta = 1.0 / (Duration.TimeSpan.Seconds * 60.0);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Interval = TimeSpan.FromSeconds(1.0 / 60.0);
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,ExplosionTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\ExplosionTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  t++;                  cloneBrush.Opacity = 1 - t * opacityDelta;                  if (cloneBrush.Opacity < opacityDelta)                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                      return;                  }                  mesh.Positions = null;                  AxisAngleRotation3D axisAngle = new AxisAngleRotation3D();                  RotateTransform3D rotation = new RotateTransform3D(axisAngle' new Point3D());                  for (int i = 0; i < positions.Count; i += 4)                  {                      Vector3D velocity = velocities[i / 4];                        axisAngle.Axis = angularVelocities[i / 4];                      axisAngle.Angle = angularVelocities[i / 4].Length;                      rotation.CenterX = centers[i / 4].X;                      rotation.CenterY = centers[i / 4].Y;                      rotation.CenterZ = centers[i / 4].Z;                        positions[i] = rotation.Transform(positions[i]) + velocity;                      positions[i + 1] = rotation.Transform(positions[i + 1]) + velocity;                      positions[i + 2] = rotation.Transform(positions[i + 2]) + velocity;                      positions[i + 3] = rotation.Transform(positions[i + 3]) + velocity;                        centers[i / 4] += velocity;                  }                  mesh.Positions = positions;              };
Magic Number,PixelLab.Wpf.Transitions,FlipTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\FlipTransition.cs,BeginTransition3D,The following statement contains a magic number: da = new DoubleAnimation(90' Duration);
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: int xparticles = 10' yparticles = 10;
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: int xparticles = 10' yparticles = 10;
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: double timeStep = 1.0 / 30.0;
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: double duration = 2;
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.ioi.dk/~thomas                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Point3D newPoint = currentPoint + 0.9 * (currentPoint - oldPoints[i]);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    for (int a = yparticles - 1; a >= 0; a--)                      for (int b = xparticles - 1; b >= 0; b--)                      {                          int i = b * yparticles + a;                          // constrain with point to the left                          if (i > yparticles)                              Constrain(oldPoints' i' i - yparticles' ustep);                          // constrain with point to the top                          if (i % yparticles != 0)                              Constrain(oldPoints' i' i - 1' vstep);                            // constrain the sides                          if (a == 0)                              oldPoints[i] = new Point3D(oldPoints[i].X' 0' oldPoints[i].Z);                          if (a == yparticles - 1)                              oldPoints[i] = new Point3D(oldPoints[i].X' size.Height' oldPoints[i].Z);                            if (b == 0)                              oldPoints[i] = new Point3D(0' a * size.Height / (yparticles - 1)' 0);                            if (b == xparticles - 1)                          {                              double angle = time / duration * Math.PI / (0.8 + 0.5 * (yparticles - (double)a) / yparticles);                              oldPoints[i] = new Point3D(size.Width * Math.Cos(angle)' a * size.Height / (yparticles - 1)' -size.Width * Math.Sin(angle));                          }                      }                    if (time > (duration - 0))                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.ioi.dk/~thomas                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Point3D newPoint = currentPoint + 0.9 * (currentPoint - oldPoints[i]);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    for (int a = yparticles - 1; a >= 0; a--)                      for (int b = xparticles - 1; b >= 0; b--)                      {                          int i = b * yparticles + a;                          // constrain with point to the left                          if (i > yparticles)                              Constrain(oldPoints' i' i - yparticles' ustep);                          // constrain with point to the top                          if (i % yparticles != 0)                              Constrain(oldPoints' i' i - 1' vstep);                            // constrain the sides                          if (a == 0)                              oldPoints[i] = new Point3D(oldPoints[i].X' 0' oldPoints[i].Z);                          if (a == yparticles - 1)                              oldPoints[i] = new Point3D(oldPoints[i].X' size.Height' oldPoints[i].Z);                            if (b == 0)                              oldPoints[i] = new Point3D(0' a * size.Height / (yparticles - 1)' 0);                            if (b == xparticles - 1)                          {                              double angle = time / duration * Math.PI / (0.8 + 0.5 * (yparticles - (double)a) / yparticles);                              oldPoints[i] = new Point3D(size.Width * Math.Cos(angle)' a * size.Height / (yparticles - 1)' -size.Width * Math.Sin(angle));                          }                      }                    if (time > (duration - 0))                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.ioi.dk/~thomas                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Point3D newPoint = currentPoint + 0.9 * (currentPoint - oldPoints[i]);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    for (int a = yparticles - 1; a >= 0; a--)                      for (int b = xparticles - 1; b >= 0; b--)                      {                          int i = b * yparticles + a;                          // constrain with point to the left                          if (i > yparticles)                              Constrain(oldPoints' i' i - yparticles' ustep);                          // constrain with point to the top                          if (i % yparticles != 0)                              Constrain(oldPoints' i' i - 1' vstep);                            // constrain the sides                          if (a == 0)                              oldPoints[i] = new Point3D(oldPoints[i].X' 0' oldPoints[i].Z);                          if (a == yparticles - 1)                              oldPoints[i] = new Point3D(oldPoints[i].X' size.Height' oldPoints[i].Z);                            if (b == 0)                              oldPoints[i] = new Point3D(0' a * size.Height / (yparticles - 1)' 0);                            if (b == xparticles - 1)                          {                              double angle = time / duration * Math.PI / (0.8 + 0.5 * (yparticles - (double)a) / yparticles);                              oldPoints[i] = new Point3D(size.Width * Math.Cos(angle)' a * size.Height / (yparticles - 1)' -size.Width * Math.Sin(angle));                          }                      }                    if (time > (duration - 0))                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,BeginTransition3D,The following statement contains a magic number: timer.Tick += delegate              {                  time = time + timeStep;                  Point mousePos = Mouse.GetPosition(viewport);                  Point3D mousePos3D = new Point3D(mousePos.X' mousePos.Y' -10);                    // Cloth physics based on work of Thomas Jakobsen http://www.ioi.dk/~thomas                  for (int i = 0; i < oldPoints.Count; i++)                  {                      Point3D currentPoint = points[i];                      Point3D newPoint = currentPoint + 0.9 * (currentPoint - oldPoints[i]);                        if (newPoint.Y > size.Height)                          newPoint.Y = size.Height;                        oldPoints[i] = newPoint;                  }                    for (int a = yparticles - 1; a >= 0; a--)                      for (int b = xparticles - 1; b >= 0; b--)                      {                          int i = b * yparticles + a;                          // constrain with point to the left                          if (i > yparticles)                              Constrain(oldPoints' i' i - yparticles' ustep);                          // constrain with point to the top                          if (i % yparticles != 0)                              Constrain(oldPoints' i' i - 1' vstep);                            // constrain the sides                          if (a == 0)                              oldPoints[i] = new Point3D(oldPoints[i].X' 0' oldPoints[i].Z);                          if (a == yparticles - 1)                              oldPoints[i] = new Point3D(oldPoints[i].X' size.Height' oldPoints[i].Z);                            if (b == 0)                              oldPoints[i] = new Point3D(0' a * size.Height / (yparticles - 1)' 0);                            if (b == xparticles - 1)                          {                              double angle = time / duration * Math.PI / (0.8 + 0.5 * (yparticles - (double)a) / yparticles);                              oldPoints[i] = new Point3D(size.Width * Math.Cos(angle)' a * size.Height / (yparticles - 1)' -size.Width * Math.Sin(angle));                          }                      }                    if (time > (duration - 0))                  {                      timer.Stop();                      EndTransition(transitionElement' oldContent' newContent);                  }                    // Swap position arrays                  mesh.Positions = oldPoints;                  oldPoints = points;                  points = mesh.Positions;              };
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,Constrain,The following statement contains a magic number: p1 += delta * 0.5 * diff;
Magic Number,PixelLab.Wpf.Transitions,PageTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\PageTransition.cs,Constrain,The following statement contains a magic number: p2 -= delta * 0.5 * diff;
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,IsAngleValid,The following statement contains a magic number: return angle >= 0 && angle < 180;
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: double angleRads = Angle * Math.PI / 180;
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: if (direction == RotateDirection.Left || direction == RotateDirection.Right)              {                  if (Contained)                  {                      rotationCenter = new Point3D(direction == RotateDirection.Left ? size.Width : 0' 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation x = new DoubleAnimation(direction == RotateDirection.Left ? -size.Width : size.Width' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetXProperty' x);                  }                  else                  {                      rotationCenter = new Point3D(size.Width / 2' 0' size.Width / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(0' 1' 0);                    if (direction == RotateDirection.Left)                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = size.Width * Math.Sin(angleRads);                        origin.X = size.Width;                  }                  else                  {                      u.X = -size.Width * Math.Cos(angleRads);                      u.Z = -size.Width * Math.Sin(angleRads);                        origin.X = -u.X;                      origin.Z = -u.Z;                  }                  v.Y = size.Height;              }              else              {                  if (Contained)                  {                      rotationCenter = new Point3D(0' direction == RotateDirection.Up ? size.Height : 0' 0);                      translation = new TranslateTransform3D();                      DoubleAnimation y = new DoubleAnimation(direction == RotateDirection.Up ? -size.Height : size.Height' Duration);                      translation.BeginAnimation(TranslateTransform3D.OffsetYProperty' y);                  }                  else                  {                      rotationCenter = new Point3D(0' size.Height / 2' size.Height / 2 * Math.Tan(angle / 2 * Math.PI / 180));                  }                    rotationAxis = new Vector3D(1' 0' 0);                    if (direction == RotateDirection.Up)                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = size.Height * Math.Sin(angleRads);                        origin.Y = size.Height;                  }                  else                  {                      v.Y = -size.Height * Math.Cos(angleRads);                      v.Z = -size.Height * Math.Sin(angleRads);                        origin.Y = -v.Y;                      origin.Z = -v.Z;                  }                  u.X = size.Width;              }
Magic Number,PixelLab.Wpf.Transitions,RotateTransition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\RotateTransition.cs,BeginTransition3D,The following statement contains a magic number: double endAngle = 180 - angle;
Magic Number,PixelLab.Wpf.Transitions,Transition,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition.cs,CreateBrush,The following statement contains a magic number: RenderOptions.SetCacheInvalidationThresholdMinimum(brush' 40);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,Transition3D,The following statement contains a magic number: byte ambient = 108;
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,Transition3D,The following statement contains a magic number: byte directional = (byte)Math.Min((255 - ambient) / Vector3D.DotProduct(direction' new Vector3D(0' 0' 1))' 255);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,Transition3D,The following statement contains a magic number: byte directional = (byte)Math.Min((255 - ambient) / Vector3D.DotProduct(direction' new Vector3D(0' 0' 1))' 255);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateCamera,The following statement contains a magic number: return new PerspectiveCamera(new Point3D(size.Width / 2' size.Height / 2' -size.Width / Math.Tan(fov / 2 * Math.PI / 180) / 2)'                                           new Vector3D(0' 0' 1)'                                           new Vector3D(0' -1' 0)'                                           fov);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateCamera,The following statement contains a magic number: return new PerspectiveCamera(new Point3D(size.Width / 2' size.Height / 2' -size.Width / Math.Tan(fov / 2 * Math.PI / 180) / 2)'                                           new Vector3D(0' 0' 1)'                                           new Vector3D(0' -1' 0)'                                           fov);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateCamera,The following statement contains a magic number: return new PerspectiveCamera(new Point3D(size.Width / 2' size.Height / 2' -size.Width / Math.Tan(fov / 2 * Math.PI / 180) / 2)'                                           new Vector3D(0' 0' 1)'                                           new Vector3D(0' -1' 0)'                                           fov);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateCamera,The following statement contains a magic number: return new PerspectiveCamera(new Point3D(size.Width / 2' size.Height / 2' -size.Width / Math.Tan(fov / 2 * Math.PI / 180) / 2)'                                           new Vector3D(0' 0' 1)'                                           new Vector3D(0' -1' 0)'                                           fov);
Magic Number,PixelLab.Wpf.Transitions,Transition3D,C:\repos\thinkpixellab_bot\net40-client\Bot\Transitions\Transition3D.cs,CreateCamera,The following statement contains a magic number: return new PerspectiveCamera(new Point3D(size.Width / 2' size.Height / 2' -size.Width / Math.Tan(fov / 2 * Math.PI / 180) / 2)'                                           new Vector3D(0' 0' 1)'                                           new Vector3D(0' -1' 0)'                                           fov);
Missing Default,PixelLab.Wpf,TreeMap3DUserControl,C:\repos\thinkpixellab_bot\net40-client\Bot\TreeMap3DUserControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.viewport3D = ((System.Windows.Controls.Viewport3D)(target));              return;              case 2:              this._treeMap3D = ((PixelLab.Wpf.TreeMap3D)(target));              return;              case 3:              this._transition3D = ((PixelLab.Wpf.Transition3D)(target));              return;              case 4:              this._dataDisplay = ((System.Windows.Controls.StackPanel)(target));              return;              }
