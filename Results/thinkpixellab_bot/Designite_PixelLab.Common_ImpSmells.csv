Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,Animate,The method has 10 parameters. Parameters: currentValue' currentVelocity' targetValue' attractionFator' dampening' terminalVelocity' minValueDelta' minVelocityDelta' newValue' newVelocity
Long Parameter List,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,Animate,The method has 10 parameters. Parameters: currentValue' currentVelocity' targetValue' attractionFator' dampening' terminalVelocity' minValueDelta' minVelocityDelta' newValue' newVelocity
Long Parameter List,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The method has 5 parameters. Parameters: pageSize' hotCorner' pageHolder' curlShadow' dropShadow
Long Statement,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The length of the statement  "            Contract.Requires(((colorString.Length == 4) || (colorString.Length == 5) || (colorString.Length == 7) || (colorString.Length == 9)) && (colorString[0] == '#')' "colorString"); " is 176.
Long Statement,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The length of the statement  "                pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height }); " is 135.
Long Statement,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,getCorner,The length of the statement  "            var distanceToFollow = Math.Sqrt((m_pageHalfHeight - follow.Y) * (m_pageHalfHeight - follow.Y) + (follow.X * follow.X)); " is 120.
Empty Catch Block,PixelLab.Common,SimpleValueConverter<TSource;TTarget>,C:\repos\thinkpixellab_bot\net40-client\Common\SimpleValueConverter.cs,Convert,The method has an empty catch block.
Empty Catch Block,PixelLab.Common,SimpleValueConverter<TSource;TTarget>,C:\repos\thinkpixellab_bot\net40-client\Common\SimpleValueConverter.cs,ConvertBack,The method has an empty catch block.
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following statement contains a magic number: if (saturation == 0f)              {                  red = green = blue = brightness;              }              else              {                  float num = (float)((hue - Math.Floor((double)hue)) * 6.0);                  int num2 = (int)num;                  float num3 = num - num2;                  float num4 = brightness * (1f - saturation);                  float num5 = brightness * (1f - (saturation * num3));                  float num6 = brightness * (1f - (saturation * (1f - num3)));                  switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following statement contains a magic number: if (saturation == 0f)              {                  red = green = blue = brightness;              }              else              {                  float num = (float)((hue - Math.Floor((double)hue)) * 6.0);                  int num2 = (int)num;                  float num3 = num - num2;                  float num4 = brightness * (1f - saturation);                  float num5 = brightness * (1f - (saturation * num3));                  float num6 = brightness * (1f - (saturation * (1f - num3)));                  switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following statement contains a magic number: if (saturation == 0f)              {                  red = green = blue = brightness;              }              else              {                  float num = (float)((hue - Math.Floor((double)hue)) * 6.0);                  int num2 = (int)num;                  float num3 = num - num2;                  float num4 = brightness * (1f - saturation);                  float num5 = brightness * (1f - (saturation * num3));                  float num6 = brightness * (1f - (saturation * (1f - num3)));                  switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following statement contains a magic number: if (saturation == 0f)              {                  red = green = blue = brightness;              }              else              {                  float num = (float)((hue - Math.Floor((double)hue)) * 6.0);                  int num2 = (int)num;                  float num3 = num - num2;                  float num4 = brightness * (1f - saturation);                  float num5 = brightness * (1f - (saturation * num3));                  float num6 = brightness * (1f - (saturation * (1f - num3)));                  switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following statement contains a magic number: if (saturation == 0f)              {                  red = green = blue = brightness;              }              else              {                  float num = (float)((hue - Math.Floor((double)hue)) * 6.0);                  int num2 = (int)num;                  float num3 = num - num2;                  float num4 = brightness * (1f - saturation);                  float num5 = brightness * (1f - (saturation * num3));                  float num6 = brightness * (1f - (saturation * (1f - num3)));                  switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following statement contains a magic number: if (saturation == 0f)              {                  red = green = blue = brightness;              }              else              {                  float num = (float)((hue - Math.Floor((double)hue)) * 6.0);                  int num2 = (int)num;                  float num3 = num - num2;                  float num4 = brightness * (1f - saturation);                  float num5 = brightness * (1f - (saturation * num3));                  float num6 = brightness * (1f - (saturation * (1f - num3)));                  switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: Contract.Requires(((colorString.Length == 4) || (colorString.Length == 5) || (colorString.Length == 7) || (colorString.Length == 9)) && (colorString[0] == '#')' "colorString");
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: Contract.Requires(((colorString.Length == 4) || (colorString.Length == 5) || (colorString.Length == 7) || (colorString.Length == 9)) && (colorString[0] == '#')' "colorString");
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: Contract.Requires(((colorString.Length == 4) || (colorString.Length == 5) || (colorString.Length == 7) || (colorString.Length == 9)) && (colorString[0] == '#')' "colorString");
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: Contract.Requires(((colorString.Length == 4) || (colorString.Length == 5) || (colorString.Length == 7) || (colorString.Length == 9)) && (colorString[0] == '#')' "colorString");
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: int num4 = 255;
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexColor,The following statement contains a magic number: if (colorString.Length > 7)              {                  num4 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num3 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num2 = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);                  num = (ParseHexChar(colorString[7]) * 16) + ParseHexChar(colorString[8]);              }              else if (colorString.Length > 5)              {                  num3 = (ParseHexChar(colorString[1]) * 16) + ParseHexChar(colorString[2]);                  num2 = (ParseHexChar(colorString[3]) * 16) + ParseHexChar(colorString[4]);                  num = (ParseHexChar(colorString[5]) * 16) + ParseHexChar(colorString[6]);              }              else if (colorString.Length > 4)              {                  num4 = ParseHexChar(colorString[1]);                  num4 += num4 * 16;                  num3 = ParseHexChar(colorString[2]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[3]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[4]);                  num += num * 16;              }              else              {                  num3 = ParseHexChar(colorString[1]);                  num3 += num3 * 16;                  num2 = ParseHexChar(colorString[2]);                  num2 += num2 * 16;                  num = ParseHexChar(colorString[3]);                  num += num * 16;              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 48) && (num <= 57))              {                  return (num - 48);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 48) && (num <= 57))              {                  return (num - 48);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 48) && (num <= 57))              {                  return (num - 48);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 97) && (num <= 102))              {                  return ((num - 97) + 10);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 97) && (num <= 102))              {                  return ((num - 97) + 10);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 97) && (num <= 102))              {                  return ((num - 97) + 10);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num >= 97) && (num <= 102))              {                  return ((num - 97) + 10);              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num < 65) || (num > 70))              {                  throw new FormatException();              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: if ((num < 65) || (num > 70))              {                  throw new FormatException();              }
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: return ((num - 65) + 10);
Magic Number,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,ParseHexChar,The following statement contains a magic number: return ((num - 65) + 10);
Magic Number,PixelLab.Common,EnumConverter,C:\repos\thinkpixellab_bot\net40-client\Common\EnumConverter.cs,Convert,The following statement contains a magic number: if (match.Success)              {                  // 1 -> source value                  // 2 -> target value                  var source = match.Groups[1].Value;                  if (source.Equals(valueName' StringComparison.InvariantCultureIgnoreCase))                  {                      // we have a match! use the target value                      var target = match.Groups[2].Value;                      var targetValue = parse(targetType' target);                      return targetValue;                  }                  else                  {                      // no match' use the fallback                      if (match.Groups[4].Success)                      {                          // user provided fallback at index 4                          string elseString = match.Groups[4].Value;                          var elseValue = parse(targetType' elseString);                          return elseValue;                      }                      else                      {                          // return unset value                          return DependencyProperty.UnsetValue;                      }                  }              }              else              {                  Debug.WriteLine("Could not parse the provided paramater: '{0}'"' parameter);                  return DependencyProperty.UnsetValue;              }
Magic Number,PixelLab.Common,EnumConverter,C:\repos\thinkpixellab_bot\net40-client\Common\EnumConverter.cs,Convert,The following statement contains a magic number: if (match.Success)              {                  // 1 -> source value                  // 2 -> target value                  var source = match.Groups[1].Value;                  if (source.Equals(valueName' StringComparison.InvariantCultureIgnoreCase))                  {                      // we have a match! use the target value                      var target = match.Groups[2].Value;                      var targetValue = parse(targetType' target);                      return targetValue;                  }                  else                  {                      // no match' use the fallback                      if (match.Groups[4].Success)                      {                          // user provided fallback at index 4                          string elseString = match.Groups[4].Value;                          var elseValue = parse(targetType' elseString);                          return elseValue;                      }                      else                      {                          // return unset value                          return DependencyProperty.UnsetValue;                      }                  }              }              else              {                  Debug.WriteLine("Could not parse the provided paramater: '{0}'"' parameter);                  return DependencyProperty.UnsetValue;              }
Magic Number,PixelLab.Common,EnumConverter,C:\repos\thinkpixellab_bot\net40-client\Common\EnumConverter.cs,Convert,The following statement contains a magic number: if (match.Success)              {                  // 1 -> source value                  // 2 -> target value                  var source = match.Groups[1].Value;                  if (source.Equals(valueName' StringComparison.InvariantCultureIgnoreCase))                  {                      // we have a match! use the target value                      var target = match.Groups[2].Value;                      var targetValue = parse(targetType' target);                      return targetValue;                  }                  else                  {                      // no match' use the fallback                      if (match.Groups[4].Success)                      {                          // user provided fallback at index 4                          string elseString = match.Groups[4].Value;                          var elseValue = parse(targetType' elseString);                          return elseValue;                      }                      else                      {                          // return unset value                          return DependencyProperty.UnsetValue;                      }                  }              }              else              {                  Debug.WriteLine("Could not parse the provided paramater: '{0}'"' parameter);                  return DependencyProperty.UnsetValue;              }
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,GetCenter,The following statement contains a magic number: return new Point(value.X + value.Width / 2' value.Y + value.Height / 2);
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,GetCenter,The following statement contains a magic number: return new Point(value.X + value.Width / 2' value.Y + value.Height / 2);
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,Expand,The following statement contains a magic number: var value = new Rect(target.X - amount' target.Y - amount' target.Width + 2 * amount' target.Height + 2 * amount);
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,Expand,The following statement contains a magic number: var value = new Rect(target.X - amount' target.Y - amount' target.Width + 2 * amount' target.Height + 2 * amount);
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,CenterVector,The following statement contains a magic number: return ((Vector)size) * .5;
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,AngleRad,The following statement contains a magic number: if (rad2 < (Math.PI / 2))              {                  return rad;              }              else              {                  return (Math.PI * 2) - rad;              }
Magic Number,PixelLab.Common,GeoHelper,C:\repos\thinkpixellab_bot\net40-client\Common\GeoHelper.cs,AngleRad,The following statement contains a magic number: if (rad2 < (Math.PI / 2))              {                  return rad;              }              else              {                  return (Math.PI * 2) - rad;              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The following statement contains a magic number: m_pageHalfHeight = m_pageSize.Height * .5;
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The following statement contains a magic number: m_origin = new Point(m_pageSize.Width' m_pageSize.Height / 2.0);
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The following statement contains a magic number: m_pageHolderClip = new RectangleGeometry() { Rect = new Rect(0' 0' m_pageSize.Width' m_pageSize.Height * 2) };
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The following statement contains a magic number: m_nextPageClip = new RectangleGeometry() { Rect = new Rect(0' 0' m_pageSize.Width * 2' m_pageSize.Height * 2) };
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The following statement contains a magic number: m_nextPageClip = new RectangleGeometry() { Rect = new Rect(0' 0' m_pageSize.Width * 2' m_pageSize.Height * 2) };
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PageFlipper,The following statement contains a magic number: if (m_curlShadow != null)              {                  var group = new TransformGroup();                  group.Children.Add(m_curlShadowRotate = new RotateTransform());                  group.Children.Add(m_curlShadowTranslate = new TranslateTransform());                  m_curlShadow.RenderTransform = group;                    m_curlShadow.Height = m_pageDiagonal * 1.5;                  m_curlShadowRotate.CenterX = m_curlShadow.Width;                  m_curlShadowRotate.CenterY = m_pageDiagonal;                    m_curlShadowTranslate.Y = m_pageSize.Height - m_pageDiagonal;              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,NextPage,The following statement contains a magic number: m_mouse = new Point(-m_pageSize.Width / 2' m_pageHalfHeight / 2);
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,NextPage,The following statement contains a magic number: m_mouse = new Point(-m_pageSize.Width / 2' m_pageHalfHeight / 2);
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PreviousPage,The following statement contains a magic number: m_mouse = new Point(m_pageSize.Width / 2' m_pageHalfHeight / 2);
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,PreviousPage,The following statement contains a magic number: m_mouse = new Point(m_pageSize.Width / 2' m_pageHalfHeight / 2);
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Magic Number,PixelLab.Common,PageFlipper,C:\repos\thinkpixellab_bot\net40-client\Common\PageFlipper.cs,updateUI,The following statement contains a magic number: if (corner == m_corner && !m_animating)              {                  m_turbo = false;                  m_listener.StopListening();              }              else              {                  m_corner = corner;                    // CALCULATE THE BISECTOR AND CREATE THE CRITICAL TRIANGLE                  // DETERMINE THE MIDSECTION POINT                  var bisector = new Point();                  bisector.X = corner.X + .5 * (m_pageSize.Width - corner.X);                  bisector.Y = corner.Y + .5 * (m_pageHalfHeight - corner.Y);                  var bisectorAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' m_pageSize.Width - bisector.X);                  var bisectorTanget = bisector.X - Math.Tan(bisectorAngle) * (m_pageHalfHeight - bisector.Y);                  if (bisectorTanget < 0)                  {                      bisectorTanget = 0;                  }                  var tangentBottom = new Point(bisectorTanget' m_pageHalfHeight);                    // DETERMINE THE tangentToCorner FOR THE ANGLE OF THE PAGE                  var tangentToCornerAngle = Math.Atan2(tangentBottom.Y - corner.Y' tangentBottom.X - corner.X);                    m_pageTranslateTransform.X = m_origin.X + corner.X;                  m_pageTranslateTransform.Y = m_origin.Y + corner.Y;                  m_pageRotateTransform.Angle = tangentToCornerAngle * 180.0 / Math.PI;                    // DETERMINE THE ANGLE OF THE MAIN MASK RECTANGLE                  Double tanAngle = Math.Atan2(m_pageHalfHeight - bisector.Y' bisector.X - bisectorTanget);                    // VISUALIZE THE CLIPPING RECTANGLE                  var angle = 90 * (tanAngle / Math.Abs(tanAngle)) - tanAngle * 180 / Math.PI;                  angle = double.IsNaN(angle) ? 0 : angle;                    var pageHolderCliptransform = new TransformGroup();                  pageHolderCliptransform.Children.Add(new TranslateTransform() { Y = -m_pageSize.Height / 2 });                  pageHolderCliptransform.Children.Add(new RotateTransform() { Angle = angle' CenterX = m_pageSize.Width' CenterY = m_pageSize.Height });                  pageHolderCliptransform.Children.Add(new TranslateTransform() { X = tangentBottom.X });                    m_pageHolderClip.Transform = pageHolderCliptransform;                    var nextPageClipTransform = new TransformGroup();                  nextPageClipTransform.Children.Add(new TranslateTransform() { X = m_pageSize.Width });                  nextPageClipTransform.Children.Add(pageHolderCliptransform);                  m_nextPageClip.Transform = nextPageClipTransform;                    if (m_curlShadow != null)                  {                      m_curlShadowTranslate.X = -m_curlShadow.Width + m_pageSize.Width - tangentBottom.X;                      m_curlShadowRotate.Angle = -angle;                        var opacity = 1.0;                      var distance = m_pointLeft.Subtract(m_corner).Length / (m_pageSize.Width / 2);                      if (distance < 1)                      {                          opacity = distance;                      }                      m_curlShadow.Opacity = opacity;                  }                    if (m_dropShadow != null)                  {                      var minDistance = Math.Min(                        m_corner.Subtract(m_pointLeft).Length'                        m_corner.Subtract(m_pointRight).Length);                        minDistance = Math.Min(40' minDistance);                      minDistance /= 40;                        m_dropShadow.Opacity = minDistance;                  }              }
Missing Default,PixelLab.Common,ColorHelper,C:\repos\thinkpixellab_bot\net40-client\Common\ColorHelper.cs,HsbToRgb,The following switch statement is missing a default case: switch ((num2 % 6))                  {                      case 0:                          red = brightness;                          green = num6;                          blue = num4;                          break;                        case 1:                          red = num5;                          green = brightness;                          blue = num4;                          break;                        case 2:                          red = num4;                          green = brightness;                          blue = num6;                          break;                        case 3:                          red = num4;                          green = num5;                          blue = brightness;                          break;                        case 4:                          red = num6;                          green = num4;                          blue = brightness;                          break;                        case 5:                          red = brightness;                          green = num4;                          blue = num5;                          break;                  }
