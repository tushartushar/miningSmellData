Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToPrimitive,The method has 102 lines of code.
Long Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetChanges,The method has 110 lines of code.
Long Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,ApplyChanges,The method has 123 lines of code.
Long Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The method has 169 lines of code.
Complex Method,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,InvokeOperationInterceptors,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,DiscoverTypes,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Synchronization.Services,HttpContextServiceHost,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\HttpContextServiceHost.cs,GetOutputSerializationFormat,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ReadIncomingRequestStreamForPost,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,GetSyncWriterWithContents,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,AddInterceptor,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Services,SyncServiceTracer,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncServiceTracer.cs,TraceLine,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CheckSqlConnection,Cyclomatic complexity of the method is 12
Complex Method,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CheckWriteAccessToBatchingFolder,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToPrimitive,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,Cyclomatic complexity of the method is 22
Complex Method,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,Cyclomatic complexity of the method is 18
Complex Method,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,GetEdmType,Cyclomatic complexity of the method is 20
Complex Method,Microsoft.Synchronization.Services.Formatters,JsonEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\JsonEntryInfoWrapper.cs,LoadTypeName,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Synchronization.Services.Formatters,ODataJsonReader,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonReader.cs,Next,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetObjectForType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetValueFromType,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services.Batching,FileBasedBatchHandler,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Batching\FileBasedBatchHandler.cs,GetNextBatch,Cyclomatic complexity of the method is 13
Complex Method,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,AddEntityToDataSet,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetServerTickCountFromDatabase,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,OpenConnection,Cyclomatic complexity of the method is 16
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,Cyclomatic complexity of the method is 17
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetChanges,Cyclomatic complexity of the method is 11
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,ApplyChanges,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,Cyclomatic complexity of the method is 30
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,CreateNewScopeForClient,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,AddSyncColumnsToDataSet,Cyclomatic complexity of the method is 23
Complex Method,Microsoft.Synchronization.Data,BatchRangeSetBuilder,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\BatchRangeSetUtil.cs,IdPlusOne,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,AddUnsortedDataSet,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,AddSortedRowToDataTable,Cyclomatic complexity of the method is 18
Long Parameter List,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,AddFilterParameterConfiguration,The method has 5 parameters.
Long Parameter List,Microsoft.Synchronization.Services,Request,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Request.cs,Request,The method has 6 parameters.
Long Parameter List,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessResponseInterceptor,The method has 5 parameters.
Long Parameter List,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,CheckForDuplicateAndAddInterceptors,The method has 5 parameters.
Long Parameter List,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteItemInternal,The method has 7 parameters.
Long Parameter List,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteItemInternal,The method has 7 parameters.
Long Parameter List,Microsoft.Synchronization.Services.Formatters,SyncWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncWriter.cs,AddConflictItem,The method has 5 parameters.
Long Parameter List,Microsoft.Synchronization.Services.Formatters,SyncWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncWriter.cs,WriteItemInternal,The method has 7 parameters.
Long Parameter List,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderService,The method has 5 parameters.
Long Identifier,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,GetSyncWriterWithContents,The length of the parameter primaryKeyToIncomingEntitiesMapping is 35.
Long Identifier,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,GetEntityFromIncomingRequest,The length of the parameter primaryKeyToIncomingEntitiesMapping is 35.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,SetEnableScope,The length of the statement  "		throw new InvalidOperationException ("Sync Service already has a SyncScope registered. A Sync Service cannot be configured for multiple scopes."); " is 146.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,AddFilterParameterConfiguration,The length of the statement  "	if (0 == _filterParameters.Where (p => 0 == String.Compare (p.QueryStringKey' queryStringParam' StringComparison.InvariantCultureIgnoreCase) && 0 == String.Compare (p.TableName' tableName' StringComparison.InvariantCultureIgnoreCase) && 0 == String.Compare (p.SqlParameterName' sqlParameterName' StringComparison.InvariantCultureIgnoreCase)).Count ()) { " is 353.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,SetBatchSpoolDirectory,The length of the statement  "		// when UseVerboseErrors = false. For Verbose Errors the exception message and stack trace are returned in the response. " is 120.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,ReadSyncInterceptors,The length of the statement  "	foreach (MethodInfo info in syncServiceType.GetMethods (BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)) { " is 131.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,InvokeOperationInterceptors,The length of the statement  "				methodInfo = (isRequest) ? wrapper.GetRequestInterceptor (entityType) : wrapper.GetResponseInterceptor (SyncOperations.Upload' entityType); " is 139.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,InvokeConflictInterceptor,The length of the statement  "			SyncConflictResolution resolution = (SyncConflictResolution)InvokeUserInterceptorMethod (methodInfo' OperationContext.Current.InstanceContext.GetServiceInstance ()' inputParams); " is 178.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,ProcessSyncInterceptor,The length of the statement  "			throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "ScopeName '{0}' defined in '{1}' on method '{2}' is not in the list of configured sync scopes."' scopeName' attr.GetType ().Name' methodInfo.Name)); " is 231.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,DiscoverTypes,The length of the statement  "					PropertyInfo globalTablenamePropertyInfo = syncAttribute.GetType ().GetProperty (SyncServiceConstants.SYNC_ENTITY_TYPE_TABLE_GLOBAL_NAME); " is 138.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,DiscoverTypes,The length of the statement  "						throw new InvalidOperationException (String.Format (CultureInfo.InvariantCulture' Strings.DuplicateGlobalTableName' globalTableName)); " is 134.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,DiscoverTypes,The length of the statement  "					PropertyInfo localTablenamePropertyInfo = syncAttribute.GetType ().GetProperty (SyncServiceConstants.SYNC_ENTITY_TYPE_TABLE_LOCAL_NAME); " is 136.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,InvokeStaticInitialization,The length of the statement  "					SyncTracer.Warning ("Exception invoking the static InitializeService method. Details {0}"' WebUtil.GetExceptionMessage (exception)); " is 132.
Long Statement,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,InvokeTestHookInitializeMethod,The length of the statement  "					SyncTracer.Warning ("Exception invoking the TestHookInitialization method. Details {0}"' WebUtil.GetExceptionMessage (exception)); " is 130.
Long Statement,Microsoft.Synchronization.Services,ErrorHandler,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Error\ErrorHandler.cs,HandleTargetInvocationException,The length of the statement  "		throw new SyncServiceException (innerException.StatusCode' innerException.ErrorCode' innerException.Message' exception); " is 120.
Long Statement,Microsoft.Synchronization.Services,SyncServiceException,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Error\SyncServiceException.cs,CreateInternalServerError,The length of the statement  "	return new SyncServiceException (ResponseHttpStatusCode.InternalServerError' null/*errorCode*/' errorMessage' innerException); " is 126.
Long Statement,Microsoft.Synchronization.Services,HttpContextServiceHost,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\HttpContextServiceHost.cs,GetOutputSerializationFormat,The length of the statement  "			if ((null == outputSerializationFormat) && (headerStringParts [0].Equals (CONTENT_TYPE_APPLICATION_ANY) || headerStringParts [0].Equals (CONTENT_TYPE_ANY))) { " is 158.
Long Statement,Microsoft.Synchronization.Services,HttpContextServiceHost,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\HttpContextServiceHost.cs,ValidateRequestHttpVerbAndSegments,The length of the statement  "	if (0 != String.Compare (RequestHttpMethod' "GET"' StringComparison.InvariantCultureIgnoreCase) && 0 != String.Compare (RequestHttpMethod' "POST"' StringComparison.InvariantCultureIgnoreCase)) { " is 194.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ParseIncomingRequest,The length of the statement  "	SyncSerializationFormat outputSerializationFormat = _serviceHost.GetOutputSerializationFormat (_configuration.SerializationFormat); " is 131.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ParseIncomingRequest,The length of the statement  "	var request = new Request (requestCommand' _serviceHost' commandParameters' _syncBlob' entities' outputSerializationFormat) { " is 125.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetScopeName,The length of the statement  "	if (_serviceHost.RelativeUriSegments.Length < 1 || String.IsNullOrEmpty (_serviceHost.RelativeUriSegments [0].Trim ())) { " is 121.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "	if (_serviceHost.RelativeUriSegments.Length == 1 && 0 == String.Compare (_serviceHost.RelativeUriSegments [0]' SyncServiceConstants.SYNC_SCOPES_URL_SEGMENT' StringComparison.InvariantCultureIgnoreCase)) { " is 204.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "		if (0 != String.Compare (_serviceHost.RequestHttpMethod' SyncServiceConstants.HTTP_VERB_GET' StringComparison.InvariantCultureIgnoreCase)) { " is 140.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "			throw SyncServiceException.CreateMethodNotAllowed (Strings.InvalidHttpMethodForSyncScopesRequest' SyncServiceConstants.HTTP_VERB_GET); " is 134.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "	if (_serviceHost.RelativeUriSegments.Length < 2 || String.IsNullOrEmpty (_serviceHost.RelativeUriSegments [1].Trim ())) { " is 121.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "		if (0 != String.Compare (_serviceHost.RequestHttpMethod' SyncServiceConstants.HTTP_VERB_POST' StringComparison.InvariantCultureIgnoreCase)) { " is 141.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "			throw SyncServiceException.CreateMethodNotAllowed (Strings.InvalidHttpMethodForUploadChangesRequest' SyncServiceConstants.HTTP_VERB_GET); " is 137.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "		if (0 != String.Compare (_serviceHost.RequestHttpMethod' SyncServiceConstants.HTTP_VERB_GET' StringComparison.InvariantCultureIgnoreCase)) { " is 140.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The length of the statement  "			throw SyncServiceException.CreateMethodNotAllowed (Strings.InvalidHttpMethodForScopeMetadataRequest' SyncServiceConstants.HTTP_VERB_GET); " is 137.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ReadIncomingRequestStreamForPost,The length of the statement  "		var reader = WebUtil.GetSyncReader (_serviceHost.GetRequestContentSerializationFormat ()' _serviceHost.RequestStream' _configuration.TypeToTableGlobalNameMapping.Keys.ToArray ()); " is 179.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ReadIncomingRequestStreamForGet,The length of the statement  "	else if (!String.IsNullOrEmpty (_serviceHost.RequestHeaders.Get (SyncServiceConstants.SYNC_SERVERBLOB_HEADERKEY)) && _serviceHost.RequestHeaders [SyncServiceConstants.SYNC_SERVERBLOB_HEADERKEY].Trim ().Length > 0) { " is 215.
Long Statement,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ReadIncomingRequestStreamForGet,The length of the statement  "		_syncBlob = Convert.FromBase64String (_serviceHost.RequestHeaders [SyncServiceConstants.SYNC_SERVERBLOB_HEADERKEY].Trim ()); " is 124.
Long Statement,Microsoft.Synchronization.Services,DownloadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\DownloadChangesRequestProcessor.cs,ProcessRequest,The length of the statement  "	IAsymmetricProviderService providerService = new SqlSyncProviderService (_configuration' Convert.ToString (incomingRequest.CommandParams [CommandParamType.ScopeName])' incomingRequest.ProviderParams' base._operationContext); " is 224.
Long Statement,Microsoft.Synchronization.Services,DownloadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\DownloadChangesRequestProcessor.cs,PrepareAndProcessResponseInterceptors,The length of the statement  "	if (_configuration.HasResponseInterceptors (this._scopeName' SyncOperations.Download) || _configuration.HasTypedResponseInterceptors (this._scopeName' SyncOperations.Download)) { " is 178.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "	//Note: Currently this is read from the service configuration and * is not allowed anymore for the SetEnableScope method. " is 121.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "	var edmxNode = new XElement (FormatterConstants.EdmxNamespace + "Edmx"' new XAttribute ("Version"' "1.0")' new XAttribute (XNamespace.Xmlns + FormatterConstants.EdmxNsPrefix' FormatterConstants.EdmxNamespace)); " is 210.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "	var dataservicesNode = new XElement (FormatterConstants.EdmxNamespace + "DataServices"' new XAttribute (FormatterConstants.ODataMetadataNamespace + "DataServiceVersion"' "2.0")' new XAttribute (XNamespace.Xmlns + FormatterConstants.ODataMetadataNsPrefix' FormatterConstants.ODataMetadataNamespace)); " is 299.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "	var schemaNode = new XElement ("Schema"' new XAttribute (FormatterConstants.AtomPubXmlNsPrefix' _baseEdmNamespace)' new XAttribute (XNamespace.Xmlns + FormatterConstants.SyncNsPrefix' FormatterConstants.SyncNamespace)' new XAttribute ("Namespace"' _configuration.ServiceTypeNamespace)' new XAttribute ("Alias"' "Self")); " is 320.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "		var entitySetNode = new XElement (_baseEdmNamespace + "EntitySet"' new XAttribute ("Name"' type.Name)' new XAttribute ("EntityType"' type.FullName)); " is 149.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "			bool isNullable = (0 != property.GetCustomAttributes (SyncServiceConstants.SYNC_ENTITY_PROPERTY_NULLABLE_ATTRIBUTE_TYPE' false).ToList ().Count); " is 145.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "			var propertyNode = new XElement (_baseEdmNamespace + "Property"' new XAttribute ("Name"' property.Name)' new XAttribute ("Type"' FormatterUtilities.GetEdmType (property.PropertyType))' new XAttribute ("Nullable"' isNullable)); " is 226.
Long Statement,Microsoft.Synchronization.Services,ScopeSchemaRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\ScopeSchemaRequestProcessor.cs,GetMetadataDocument,The length of the statement  "			syncScopeParamsNode.Add (new XElement (FormatterConstants.SyncNamespace + "ScopeParameter"' new XAttribute ("Name"' filterParameter.QueryStringKey)' new XAttribute ("Type"' edmType))); " is 184.
Long Statement,Microsoft.Synchronization.Services,SyncRequestProcessorBase,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\SyncRequestProcessorBase.cs,WriteResponse,The length of the statement  "		SyncServiceTracer.TraceError ("Exception in WriteResponse method. Details: {0}"' WebUtil.GetExceptionMessage (exception)); " is 122.
Long Statement,Microsoft.Synchronization.Services,SyncScopesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\SyncScopesRequestProcessor.cs,GetScopeListInfo,The length of the statement  "	//Note: Currently this is read from the service configuration and * is not allowed anymore for the SetEnableScope method. " is 121.
Long Statement,Microsoft.Synchronization.Services,SyncScopesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\SyncScopesRequestProcessor.cs,GetScopeListInfo,The length of the statement  "	string serviceBaseUrl = _incomingRequest.ServiceHost.RequestUri.AbsoluteUri.ToLower ().Replace (SyncServiceConstants.SYNC_SCOPES_URL_SEGMENT' string.Empty); " is 156.
Long Statement,Microsoft.Synchronization.Services,SyncScopesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\SyncScopesRequestProcessor.cs,GetScopeListInfo,The length of the statement  "	// <service xml:base="http://localhost/service.svc/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns="http://www.w3.org/2007/app"> " is 129.
Long Statement,Microsoft.Synchronization.Services,SyncScopesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\SyncScopesRequestProcessor.cs,GetScopeListInfo,The length of the statement  "	var root = new XElement ("service"' new XAttribute (XNamespace.Xml + "base"' XNamespace.Get (serviceBaseUrl))' new XAttribute (XNamespace.Xmlns + "atom"' FormatterConstants.AtomXmlNamespace)' new XAttribute (FormatterConstants.AtomPubXmlNsPrefix' _w3AppNamespaceUri)); " is 268.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,ProcessRequest,The length of the statement  "	IAsymmetricProviderService providerService = new SqlSyncProviderService (_configuration' Convert.ToString (incomingRequest.CommandParams [CommandParamType.ScopeName])' incomingRequest.ProviderParams' base._operationContext); " is 224.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessRequestInterceptor,The length of the statement  "	if (_configuration.HasRequestInterceptors (this._scopeName' SyncOperations.Upload) || _configuration.HasTypedRequestInterceptors (this._scopeName) || _configuration.HasConflictInterceptors (this._scopeName) || _configuration.HasTypedConflictInterceptors (this._scopeName)) { " is 274.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessRequestInterceptor,The length of the statement  "	if (_configuration.HasRequestInterceptors (this._scopeName' SyncOperations.Upload) || _configuration.HasTypedRequestInterceptors (this._scopeName)) { " is 149.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessResponseInterceptor,The length of the statement  "	if (_configuration.HasResponseInterceptors (this._scopeName' SyncOperations.Upload) || _configuration.HasTypedResponseInterceptors (this._scopeName' SyncOperations.Upload)) { " is 174.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessResponseInterceptor,The length of the statement  "				if (_configuration.HasTypedResponseInterceptor (this._scopeName' SyncOperations.Upload' grouping.Key) && !visitedTypes.Contains (grouping.Key)) { " is 145.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessResponseInterceptor,The length of the statement  "					responseContext.OutgoingChanges = _incomingNewInsertEntities.Where (e => e.GetType () == grouping.Key).ToList ().AsReadOnly (); " is 127.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,ClientChangeFailedToApply,The length of the statement  "	IOfflineEntity matchedEntity = this._incomingNewInsertEntities.Where (e => ReflectionUtility.GetPrimaryKeyString (e).Equals (primaryKey' StringComparison.InvariantCulture)).FirstOrDefault (); " is 191.
Long Statement,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,GetEntityFromIncomingRequest,The length of the statement  "	var entityListInRequest = primaryKeyToIncomingEntitiesMapping.Where (e => e.Key.Equals (ReflectionUtility.GetPrimaryKeyString (entity)' StringComparison.InvariantCultureIgnoreCase)).ToList (); " is 192.
Long Statement,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,AddInterceptor,The length of the statement  "			CheckForDuplicateAndAddInterceptors (attr' info' className' ref _uploadRequestInterceptor' _uploadTypedRequestInterceptors); " is 124.
Long Statement,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,AddInterceptor,The length of the statement  "			CheckForDuplicateAndAddInterceptors (attr' info' className' ref _downloadResponseInterceptor' _downloadTypedResponseInterceptors); " is 130.
Long Statement,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,AddInterceptor,The length of the statement  "			CheckForDuplicateAndAddInterceptors (attr' info' className' ref _uploadResponseInterceptor' _uploadTypedResponseInterceptors); " is 126.
Long Statement,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,GetResponseInterceptor,The length of the statement  "	Debug.Assert (HasResponseInterceptor (operation' type)' "No Typed response interceptors found for operation " + operation); " is 123.
Long Statement,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,CheckForDuplicateAndAddInterceptors,The length of the statement  "			throw WebUtil.ThrowDuplicateInterceptorForArgumentException (className' this.ScopeName' attr' attr.EntityType.FullName); " is 120.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessRequestForMessage,The length of the statement  "		_requestProcessor = RequestProcessorFactory.GetRequestProcessorInstance (_requestDescription.RequestCommand' _syncConfiguration' _serviceHost); " is 143.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessRequestForMessage,The length of the statement  "			responseProperties.Headers [SyncServiceConstants.SYNC_SERVICE_VERSION_KEY] = SyncServiceConstants.SYNC_SERVICE_VERSION_VALUE; " is 125.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessRequestToServiceRoot,The length of the statement  "	string requestHost = !String.IsNullOrEmpty (_serviceHost.HostHeader) ? _serviceHost.HostHeader : _serviceHost.RequestUri.Authority; " is 131.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessRequestToServiceRoot,The length of the statement  "	_serviceHost.OutgoingResponse.Location = String.Format ("{0}://{1}{2}{3}"' _serviceHost.RequestUri.Scheme' requestHost' _serviceHost.RequestUri.AbsolutePath' SyncServiceConstants.SYNC_SCOPES_URL_SEGMENT); " is 204.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,InitializeNewClient,The length of the statement  "	_requestDescription.ProviderParams = new List<SqlSyncProviderFilterParameterInfo> (_syncConfiguration.FilterParameters.Count); " is 126.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,CreateExceptionMessage,The length of the statement  "		message = Message.CreateMessage (MessageVersion.None' String.Empty' error' new DataContractJsonSerializer (typeof(ServiceError))); " is 130.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,CreateExceptionMessage,The length of the statement  "		message = Message.CreateMessage (MessageVersion.None' String.Empty' error' new DataContractSerializer (typeof(ServiceError))); " is 126.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,CreateExceptionMessage,The length of the statement  "	property.Headers.Add (HttpResponseHeader.ContentType' WebUtil.GetContentType (_serviceHost.GetOutputSerializationFormat (_syncConfiguration.SerializationFormat))); " is 163.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,CreateMessageFromUnhandledException,The length of the statement  "	return _syncConfiguration.UseVerboseErrors ? CreateExceptionMessage (HttpStatusCode.InternalServerError' exceptionMessage) : CreateExceptionMessage (HttpStatusCode.InternalServerError' Strings.InternalServerError); " is 214.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessSyncServiceException,The length of the statement  "	_outgoingMessage = _syncConfiguration.UseVerboseErrors ? CreateExceptionMessage ((HttpStatusCode)syncServiceException.StatusCode' exceptionMessage) : CreateExceptionMessage ((HttpStatusCode)syncServiceException.StatusCode' syncServiceException.Message); " is 253.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessSyncServiceException,The length of the statement  "	if (!String.IsNullOrEmpty (syncServiceException.ResponseAllowHeader) && null != _outgoingMessage.Properties [HttpResponseMessageProperty.Name]) { " is 145.
Long Statement,Microsoft.Synchronization.Services,SyncService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncService.cs,ProcessSyncServiceException,The length of the statement  "		((HttpResponseMessageProperty)_outgoingMessage.Properties [HttpResponseMessageProperty.Name]).Headers.Add ("Allow"' syncServiceException.ResponseAllowHeader); " is 158.
Long Statement,Microsoft.Synchronization.Services,SyncServiceTracer,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncServiceTracer.cs,TraceLine,The length of the statement  "	string finalMessage = string.Format (CultureInfo.InvariantCulture' "{0}' {1}' {2}' {3}"' traceLevelString' Thread.CurrentThread.ManagedThreadId' DateTime.UtcNow.ToString (DATE_FORMAT' CultureInfo.InvariantCulture)' message); " is 224.
Long Statement,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CreateDiagResponseMessage,The length of the statement  "	var configElement = new XElement ("Configuration"' new XElement ("ScopeName"' HttpUtility.HtmlEncode (configuration.ScopeNames [0]))' new XElement ("ConflictResolution"' configuration.ConflictResolutionPolicy)' new XElement ("SerializationFormat"' configuration.SerializationFormat)' new XElement ("VerboseEnabled"' configuration.UseVerboseErrors)' new XElement ("BatchingDirectory"' configuration.DownloadBatchSizeInKB == null ? DiagConstants.BATCHING_NOT_ENABLED : configuration.BatchSpoolDirectory)' new XElement ("BatchSize"' configuration.DownloadBatchSizeInKB == null ? DiagConstants.BATCHING_NOT_ENABLED : configuration.DownloadBatchSizeInKB.Value.ToString ())); " is 669.
Long Statement,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CreateDiagResponseMessage,The length of the statement  "			message = Message.CreateMessage (MessageVersion.None' String.Empty' XDocument.Parse (writer.ToString ()).CreateReader ()); " is 122.
Long Statement,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CheckForClientAccessPolicy,The length of the statement  "				result.TestResult = response.StatusCode == HttpStatusCode.OK ? DiagConstants.FOUND_CROSSDOMAIN_POLICY_FILE : DiagConstants.CLIENT_ACCESS_POLICY_OR_CROSS_DOMAIN_NOT_FOUND; " is 170.
Long Statement,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CheckBatchingFolderExists,The length of the statement  "			result.TestResult = Directory.Exists (configuration.BatchSpoolDirectory) ? DiagConstants.SUCCESS : DiagConstants.DIRECTORY_NOT_FOUND; " is 133.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFatalException,The length of the statement  "		if (((exception is OutOfMemoryException) && !(exception is InsufficientMemoryException)) || (((exception is ThreadAbortException) || (exception is AccessViolationException)) || (exception is SEHException))) { " is 208.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The length of the statement  "				foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) { " is 160.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The length of the statement  "					System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute; " is 146.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The length of the statement  "					if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) { " is 186.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,GenerateOfflineEntityId,The length of the statement  "		throw SyncServiceException.CreateInternalServerError (String.Format ("GetPrimaryKeyString method returned an empty string for entity type {0}."' entity.GetType ())); " is 165.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,GenerateOfflineEntityId,The length of the statement  "	return String.Format (@"{0}/{1}({2})"' WebOperationContext.Current.IncomingRequest.UriTemplateMatch.BaseUri' entity.GetType ().Name' primaryKeyString); " is 151.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The length of the statement  "		throw SyncServiceException.CreateBadRequestError (String.Format (Strings.EntityIdFormatIsIncorrect' entity.ServiceMetadata.Id)); " is 128.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The length of the statement  "	// Split the string and get individual keyvalue pair strings. They key and value are still a single string separated by '='. " is 124.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The length of the statement  "		throw SyncServiceException.CreateBadRequestError (String.Format (Strings.BadRequestKeyCountMismatch' entity.ServiceMetadata.Id' entity.GetType ())); " is 148.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The length of the statement  "			throw SyncServiceException.CreateBadRequestError (String.Format (Strings.BadRequestKeyNotFoundInResource' key' entity.ServiceMetadata.Id' entity.GetType ())); " is 158.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The length of the statement  "			throw SyncServiceException.CreateBadRequestError (String.Format (Strings.UnableToParseKeyValueForProperty' keyValuePair' entity.ServiceMetadata.Id)); " is 149.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The length of the statement  "		if (methodInfo.ReturnType != SyncServiceConstants.VOID_TYPE || parameters.Length != 1 || (parameters [0].ParameterType != SyncServiceConstants.SYNC_OPERATIONCONTEXT_TYPE)) { " is 173.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The length of the statement  "			throw new InvalidOperationException (string.Format (SyncServiceConstants.SYNC_INCORRECT_INTERCEPTOR_SIGNATURE' methodInfo.Name' parentTypeName' attr.GetType ().Name' SyncServiceConstants.SYNC_REQUEST_INTERCEPTOR_FORMAT)); " is 221.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The length of the statement  "		if (methodInfo.ReturnType != SyncServiceConstants.SYNC_CONFLICT_RESOLUTION_TYPE || parameters.Length != 2 || (parameters [0].ParameterType != SyncServiceConstants.SYNC_CONFLICT_CONTEXT_TYPE) || (parameters [1].ParameterType != SyncServiceConstants.IOFFLINEENTITY_BYREFTYPE)) { " is 276.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The length of the statement  "			throw new InvalidOperationException (string.Format (SyncServiceConstants.SYNC_INCORRECT_INTERCEPTOR_SIGNATURE' methodInfo.Name' parentTypeName' attr.GetType ().Name' SyncServiceConstants.SYNC_CONFLICT_INTERCEPTOR_FORMAT)); " is 222.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ThrowDuplicateInterceptorException,The length of the statement  "	return new InvalidOperationException (string.Format ("SyncService '{0}' has mutiple '{1}' interceptors on SyncOperations '{2}' defined for scopename '{3}'"' className' attr.GetType ().Name' attr.Operation' scopeName)); " is 218.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ThrowDuplicateInterceptorForArgumentException,The length of the statement  "	return new InvalidOperationException (string.Format ("SyncService '{0}' has mutiple '{1}' interceptors on SyncOperations '{2}' defined for Type '{3}' and scopename '{4}'"' className' attr.GetType ().Name' attr.Operation' argumentName' scopeName)); " is 247.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ThrowFilteredAndNonFilteredInterceptorException,The length of the statement  "	return new InvalidOperationException (string.Format ("SyncService '{0}' has both filtered and non-filtered '{1}' interceptor's defined for scope '{2}'."' className' attr.GetType ().Name' scopeName)); " is 199.
Long Statement,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ThrowInterceptorArgumentNotIOEException,The length of the statement  "	return new InvalidOperationException (string.Format ("SyncService '{0}' filtered interceptor definition '{1}' for scope '{2}' declares a Type '{3}' that does not derive from IOfflineEntity."' className' attr.GetType ().Name' scopeName' argumentName)); " is 251.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadConflictEntry,The length of the statement  "	XElement conflictElement = entry.Element (FormatterConstants.SyncNamespace + FormatterConstants.SyncConlflictElementName); " is 122.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadConflictEntry,The length of the statement  "		XElement resolutionType = conflictElement.Element (FormatterConstants.SyncNamespace + FormatterConstants.ConflictResolutionElementName); " is 136.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadConflictEntry,The length of the statement  "		XElement conflictingChangeElement = conflictElement.Element (FormatterConstants.SyncNamespace + FormatterConstants.ConflictEntryElementName); " is 141.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadConflictEntry,The length of the statement  "		XElement errorDesc = errorElement.Element (FormatterConstants.SyncNamespace + FormatterConstants.ErrorDescriptionElementName); " is 126.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadConflictEntry,The length of the statement  "		XElement errorChangeElement = errorElement.Element (FormatterConstants.SyncNamespace + FormatterConstants.ErrorEntryElementName); " is 129.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,GetSubElement,The length of the statement  "	XElement element = entryElement.Element (FormatterConstants.AtomNamespaceUri + FormatterConstants.AtomPubEntryElementName); " is 123.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,GetSubElement,The length of the statement  "		element = entryElement.Element (FormatterConstants.AtomDeletedEntryNamespace + FormatterConstants.AtomDeletedEntryElementName); " is 127.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "			throw new InvalidOperationException ("A atom:ref element must be present for a tombstone entry. Entity in error: " + entry.ToString (SaveOptions.None)); " is 152.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "			throw new InvalidOperationException ("A atom:id or a sync:tempId element must be present. Entity in error: " + entry.ToString (SaveOptions.None)); " is 146.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "		foreach (XElement linkElement in entry.Elements (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubLinkElementName)) { " is 132.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "						throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "Multiple Edit Url's found for atom with {0}: '{1}'"' (this.Id == null) ? "TempId" : "Id"' (this.Id == null) ? this.TempId : this.Id)); " is 217.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "						throw new InvalidOperationException (string.Format ("No href attribute found in the edit link for atom with  {0}: '{1}'"' (this.Id == null) ? "TempId" : "Id"' (this.Id == null) ? this.TempId : this.Id)); " is 203.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "					XAttribute nullableAttr = property.Attribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.AtomPubIsNullElementName); " is 135.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadTypeName,The length of the statement  "	var categories = (isTombstone) ? entry.Elements (FormatterConstants.SyncNamespace + FormatterConstants.AtomPubCategoryElementName) : entry.Elements (FormatterConstants.AtomNamespaceUri + FormatterConstants.AtomPubCategoryElementName); " is 234.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomEntryInfoWrapper.cs,LoadTypeName,The length of the statement  "		throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "Category element not found in {0} element."' (isTombstone) ? FormatterConstants.AtomDeletedEntryElementName : FormatterConstants.AtomPubEntryElementName)); " is 238.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomHelper.cs,IsAtomElement,The length of the statement  "	return reader.NodeType == XmlNodeType.Element && reader.LocalName == name && reader.NamespaceURI == FormatterConstants.AtomNamespaceUri; " is 136.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomHelper.cs,IsAtomTombstone,The length of the statement  "	return reader.NodeType == XmlNodeType.Element && reader.LocalName == name && reader.NamespaceURI == FormatterConstants.AtomDeletedEntryNamespace; " is 145.
Long Statement,Microsoft.Synchronization.Services.Formatters,AtomHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\AtomHelper.cs,IsSyncElement,The length of the statement  "	return reader.NodeType == XmlNodeType.Element && reader.LocalName == name && reader.NamespaceURI == FormatterConstants.SyncNamespace.NamespaceName; " is 147.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ConvertDateTimeToJson,The length of the statement  "	return string.Format (USCultureInfo' FormatterConstants.JsonDateTimeFormat' (date.Ticks - FormatterConstants.JsonDateTimeStartTime.Ticks) / FormatterConstants.JsonNanoToMilliSecondsFactor); " is 189.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ConvertDateTimeOffsetToJson,The length of the statement  "	return string.Format (USCultureInfo' FormatterConstants.JsonDateTimeOffsetFormat' dto.ToString (FormatterConstants.JsonDateTimeOffsetLexicalRepresentation' USCultureInfo)); " is 172.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ParseDateTimeFromString,The length of the statement  "		throw new InvalidOperationException (string.Format (USCultureInfo' "Invalid Date/Time value received. Unable to parse value {0} to type {1}."' value' type.Name)); " is 162.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ParseJsonString,The length of the statement  "			long ticks = long.Parse (ticksStr' USCultureInfo) * FormatterConstants.JsonNanoToMilliSecondsFactor + FormatterConstants.JsonDateTimeStartTime.Ticks; " is 149.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ParseJsonString,The length of the statement  "				throw new InvalidOperationException (string.Format ("Invalid JSON DateTime value received. Value '{0}' is not a valid DateTime"' ticks)); " is 137.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ParseJsonString,The length of the statement  "			throw new InvalidOperationException (string.Format (USCultureInfo' @"Invalid Json DateTime value received. Value {0} is not in format '\/Date(ticks)\/'."' value)); " is 163.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ParseJsonString,The length of the statement  "			throw new InvalidOperationException (string.Format (USCultureInfo' @"Invalid Json DateTimeOffset value received. Value {0} is not in format 'datetimeoffset'yyyy-MM-ddTHH:mm:ss.fffffffzzz''."' value)); " is 200.
Long Statement,Microsoft.Synchronization.Services.Formatters,FormatterUtilities,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\FormatterUtilities.cs,ParseJsonString,The length of the statement  "			throw new InvalidOperationException (string.Format (USCultureInfo' @"Invalid Json TimeSpan value received. Value {0} is not in format 'time'HH:mm:ss''."' value)); " is 162.
Long Statement,Microsoft.Synchronization.Services.Formatters,JsonEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\JsonEntryInfoWrapper.cs,LoadEntryProperties,The length of the statement  "		if (!keyValuePair.Name.LocalName.Equals (FormatterConstants.JsonSyncEntryMetadataElementName' StringComparison.InvariantCulture) && !keyValuePair.Name.LocalName.Equals (FormatterConstants.IsDeletedElementName' StringComparison.InvariantCulture)) { " is 247.
Long Statement,Microsoft.Synchronization.Services.Formatters,JsonEntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\JsonEntryInfoWrapper.cs,LoadTypeName,The length of the statement  "			throw new InvalidOperationException ("A uri or a tempId key must be present in the __metadata object. Entity in error: " + entry.ToString (SaveOptions.None)); " is 158.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomReader,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomReader.cs,Next,The length of the statement  "		if (AtomHelper.IsAtomElement (_reader' FormatterConstants.AtomPubEntryElementName) || AtomHelper.IsAtomTombstone (_reader' FormatterConstants.AtomDeletedEntryElementName)) { " is 173.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,StartFeed,The length of the statement  "	_root = new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubFeedElementName' new XAttribute (XNamespace.Xmlns + "base"' baseNs)' new XAttribute (FormatterConstants.AtomPubXmlNsPrefix' FormatterConstants.AtomXmlNamespace)' new XAttribute (XNamespace.Xmlns + FormatterConstants.ODataDataNsPrefix' FormatterConstants.ODataDataNamespace)' new XAttribute (XNamespace.Xmlns + FormatterConstants.ODataMetadataNsPrefix' FormatterConstants.ODataMetadataNamespace)' new XAttribute (XNamespace.Xmlns + FormatterConstants.AtomDeletedEntryPrefix' FormatterConstants.AtomDeletedEntryNamespace)' new XAttribute (XNamespace.Xmlns + FormatterConstants.SyncNsPrefix' FormatterConstants.SyncNamespace)); " is 710.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,StartFeed,The length of the statement  "	_root.Add (new XElement (atom + FormatterConstants.AtomPubUpdatedElementName' XmlConvert.ToString (DateTime.Now' XmlDateTimeSerializationMode.Utc))); " is 149.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,StartFeed,The length of the statement  "	_root.Add (new XElement (atom + FormatterConstants.AtomPubLinkElementName' new XAttribute (FormatterConstants.AtomPubRelAttrName' "self")' new XAttribute (FormatterConstants.AtomPubHrefAttrName' string.Empty))); " is 211.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,StartFeed,The length of the statement  "	_root.Add (new XElement (FormatterConstants.SyncNamespace + FormatterConstants.MoreChangesAvailableText' !isLastBatch)); " is 120.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,StartFeed,The length of the statement  "	_root.Add (new XElement (FormatterConstants.SyncNamespace + FormatterConstants.ServerBlobText' (serverBlob != null) ? Convert.ToBase64String (serverBlob) : "null")); " is 165.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteItemInternal,The length of the statement  "		XElement conflictElement = new XElement (FormatterConstants.SyncNamespace + ((isConflict) ? FormatterConstants.SyncConlflictElementName : FormatterConstants.SyncErrorElementName)); " is 180.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteItemInternal,The length of the statement  "		conflictElement.Add (new XElement (FormatterConstants.SyncNamespace + ((isConflict) ? FormatterConstants.ConflictResolutionElementName : FormatterConstants.ErrorDescriptionElementName)' desc)); " is 193.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteItemInternal,The length of the statement  "		XElement conflictingEntryElement = new XElement (FormatterConstants.SyncNamespace + ((isConflict) ? FormatterConstants.ConflictEntryElementName : FormatterConstants.ErrorEntryElementName)); " is 189.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		XElement entryElement = new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubEntryElementName); " is 120.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "			entryElement.Add (new XAttribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.EtagElementName' live.ServiceMetadata.ETag)); " is 142.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		entryElement.Add (new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubIdElementName' string.IsNullOrEmpty (live.ServiceMetadata.Id) ? string.Empty : live.ServiceMetadata.Id)); " is 201.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		entryElement.Add (new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubTitleElementName' new XAttribute (FormatterConstants.AtomPubTypeElementName' "text"))); " is 183.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		entryElement.Add (new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubUpdatedElementName' XmlConvert.ToString (DateTime.Now' XmlDateTimeSerializationMode.Utc))); " is 187.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		entryElement.Add (new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubAuthorElementName' new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubNameElementName))); " is 212.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		entryElement.Add (new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubLinkElementName' new XAttribute (FormatterConstants.AtomPubRelAttrName' FormatterConstants.AtomPubEditLinkAttributeName)' new XAttribute (FormatterConstants.AtomPubTitleElementName' typeName)' new XAttribute (FormatterConstants.AtomPubHrefAttrName' (live.ServiceMetadata.EditUri != null) ? live.ServiceMetadata.EditUri.ToString () : string.Empty))); " is 445.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		entryElement.Add (new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubCategoryElementName' new XAttribute (FormatterConstants.AtomPubTermAttrName' live.GetType ().FullName)' new XAttribute (FormatterConstants.AtomPubSchemaAttrName' FormatterConstants.ODataSchemaNamespace))); " is 301.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		XElement contentElement = new XElement (FormatterConstants.AtomXmlNamespace + FormatterConstants.AtomPubContentElementName); " is 124.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		XElement tombstoneElement = new XElement (FormatterConstants.AtomDeletedEntryNamespace + FormatterConstants.AtomDeletedEntryElementName); " is 137.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		tombstoneElement.Add (new XElement (FormatterConstants.AtomNamespaceUri + FormatterConstants.AtomReferenceElementName' live.ServiceMetadata.Id)); " is 145.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntry,The length of the statement  "		tombstoneElement.Add (new XElement (FormatterConstants.SyncNamespace + FormatterConstants.AtomPubCategoryElementName' typeName)); " is 129.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "	XElement contentElement = new XElement (FormatterConstants.ODataMetadataNamespace + FormatterConstants.PropertiesElementName); " is 126.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "		if (fi.PropertyType.IsGenericType && fi.PropertyType.Name.Equals (FormatterConstants.NullableTypeName' StringComparison.InvariantCulture)) { " is 140.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "			contentElement.Add (new XElement (FormatterConstants.ODataDataNamespace + fi.Name' new XAttribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.AtomPubTypeElementName' edmType)' new XAttribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.AtomPubIsNullElementName' true))); " is 309.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "		else if (propType == FormatterConstants.DateTimeType || propType == FormatterConstants.TimeSpanType || propType == FormatterConstants.DateTimeOffsetType) { " is 155.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "			contentElement.Add (new XElement (FormatterConstants.ODataDataNamespace + fi.Name' new XAttribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.AtomPubTypeElementName' edmType)' FormatterUtilities.ConvertDateTimeForType_Atom (value' propType))); " is 263.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "			contentElement.Add (new XElement (FormatterConstants.ODataDataNamespace + fi.Name' new XAttribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.AtomPubTypeElementName' edmType)' value)); " is 204.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataAtomWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataAtomWriter.cs,WriteEntityContents,The length of the statement  "			contentElement.Add (new XElement (FormatterConstants.ODataDataNamespace + fi.Name' new XAttribute (FormatterConstants.ODataMetadataNamespace + FormatterConstants.AtomPubTypeElementName' edmType)' Convert.ToBase64String (bytes))); " is 229.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,StartFeed,The length of the statement  "	XElement root = new XElement (FormatterConstants.JsonDocumentElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 158.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,StartFeed,The length of the statement  "	_root = new XElement (FormatterConstants.JsonRootElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 146.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,StartFeed,The length of the statement  "	XElement syncElement = new XElement (FormatterConstants.JsonSyncMetadataElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 169.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,StartFeed,The length of the statement  "	syncElement.Add (new XElement (FormatterConstants.MoreChangesAvailableText' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Boolean)' !isLastBatch)); " is 176.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,StartFeed,The length of the statement  "	syncElement.Add (new XElement (FormatterConstants.ServerBlobText' new XAttribute (FormatterConstants.JsonTypeAttributeName' (serverBlob != null) ? JsonElementTypes.String : JsonElementTypes.Object)' (serverBlob != null) ? Convert.ToBase64String (serverBlob) : "null")); " is 269.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,StartFeed,The length of the statement  "	_results = new XElement (FormatterConstants.JsonSyncResultsElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Array)); " is 155.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteItemInternal,The length of the statement  "		XElement conflictElement = new XElement (((isConflict) ? FormatterConstants.JsonSyncConflictElementName : FormatterConstants.JsonSyncErrorElementName)' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 236.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteItemInternal,The length of the statement  "		conflictElement.Add (new XElement (((isConflict) ? FormatterConstants.ConflictResolutionElementName : FormatterConstants.ErrorDescriptionElementName)' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' desc)); " is 242.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteItemInternal,The length of the statement  "		XElement conflictingEntryElement = new XElement (((isConflict) ? FormatterConstants.ConflictEntryElementName : FormatterConstants.ErrorEntryElementName)' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 238.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "		entryElement = new XElement ("item"' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 121.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "	XElement entryMetadata = new XElement (FormatterConstants.JsonSyncEntryMetadataElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Object)); " is 176.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "		entryMetadata.Add (new XElement (FormatterConstants.TempIdElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' tempId)); " is 164.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "	entryMetadata.Add (new XElement (FormatterConstants.JsonSyncEntryUriElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' string.IsNullOrEmpty (live.ServiceMetadata.Id) ? string.Empty : live.ServiceMetadata.Id)); " is 255.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "		entryMetadata.Add (new XElement (FormatterConstants.EtagElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' live.ServiceMetadata.ETag)); " is 181.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "		entryMetadata.Add (new XElement (FormatterConstants.EditUriElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' live.ServiceMetadata.EditUri)); " is 187.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "	entryMetadata.Add (new XElement (FormatterConstants.JsonSyncEntryTypeElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' typeName)); " is 177.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntry,The length of the statement  "		entryMetadata.Add (new XElement (FormatterConstants.IsDeletedElementName' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Boolean)' true)); " is 166.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Null)' objValue)); " is 136.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "		else if (fi.PropertyType == FormatterConstants.CharType || fi.PropertyType == FormatterConstants.StringType || fi.PropertyType == FormatterConstants.GuidType) { " is 160.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' objValue)); " is 138.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "		else if (fi.PropertyType == FormatterConstants.DateTimeType || fi.PropertyType == FormatterConstants.TimeSpanType || fi.PropertyType == FormatterConstants.DateTimeOffsetType) { " is 176.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' FormatterUtilities.ConvertDateTimeForType_Json (objValue' fi.PropertyType))); " is 204.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Boolean)' objValue)); " is 139.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' Convert.ToBase64String (bytes))); " is 160.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "		else if (fi.PropertyType.IsGenericType && fi.PropertyType.Name.Equals (FormatterConstants.NullableTypeName' StringComparison.InvariantCulture)) { " is 145.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			else if (genericParamType == FormatterConstants.DateTimeType || genericParamType == FormatterConstants.TimeSpanType || genericParamType == FormatterConstants.DateTimeOffsetType) { " is 179.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "				contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.String)' FormatterUtilities.ConvertDateTimeForType_Json (objValue' genericParamType))); " is 205.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' elementType)' objValue)); " is 126.
Long Statement,Microsoft.Synchronization.Services.Formatters,ODataJsonWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ODataJsonWriter.cs,WriteEntityContentsToElement,The length of the statement  "			contentElement.Add (new XElement (fi.Name' new XAttribute (FormatterConstants.JsonTypeAttributeName' JsonElementTypes.Number)' objValue)); " is 138.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "				props = props.Where (e => (!e.Name.Equals ("ServiceMetadata"' StringComparison.Ordinal) && e.GetGetMethod () != null && e.GetSetMethod () != null && e.DeclaringType.Equals (type))).ToArray (); " is 192.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "                            throw new InvalidOperationException(string.Format("Entity {0} does not have the any property marked with the [KeyAttribute]."' type.Name));" is 139.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "				SyncEntityTypeAttribute attr = (SyncEntityTypeAttribute)type.GetCustomAttributes (typeof(SyncEntityTypeAttribute)' true).FirstOrDefault (); " is 139.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "					throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "Entity {0} does not have the mandatory SyncEntityTypeAttribute defined."' type.Name)); " is 169.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "					throw new InvalidOperationException (string.Format ("Entity {0} does not have the KeyFields defined for the SyncEntityTypeAttribute."' type.Name)); " is 147.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "					throw new InvalidOperationException (string.Format ("Entity {0} does not have the KeyFields defined for the SyncEntityTypeAttribute."' type.Name)); " is 147.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "				ConstructorInfo ctorInfo = type.GetConstructors (BindingFlags.Public | BindingFlags.Instance).Where (e => e.GetParameters ().Count () == 0).FirstOrDefault (); " is 158.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetPropertyInfoMapping,The length of the statement  "					throw new InvalidOperationException (string.Format ("Type {0} does not have a public parameterless constructor."' type.FullName)); " is 130.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetObjectForType,The length of the statement  "			entityType = knownTypes.Where (e => e.FullName.Equals (wrapper.TypeName' StringComparison.InvariantCulture)).FirstOrDefault (); " is 127.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetObjectForType,The length of the statement  "				throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "Unable to find a matching type for entry '{0}' in list of KnownTypes."' wrapper.TypeName)); " is 174.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetObjectForType,The length of the statement  "				entityType = assembly.GetTypes ().Where (e => e.FullName.Equals (wrapper.TypeName' StringComparison.InvariantCulture) && e.GetCustomAttributes (typeof(SyncEntityTypeAttribute)' true).Count () > 0).FirstOrDefault (); " is 215.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetObjectForType,The length of the statement  "				throw new InvalidOperationException (string.Format ("Unable to find a matching type for entry '{0}' in the loaded assemblies. Specify the type name in the KnownTypes argument to the SyncReader instance."' wrapper.TypeName)); " is 224.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetValueFromType,The length of the statement  "	else if (FormatterConstants.DateTimeType.IsAssignableFrom (type) || FormatterConstants.DateTimeOffsetType.IsAssignableFrom (type) || FormatterConstants.TimeSpanType.IsAssignableFrom (type)) { " is 191.
Long Statement,Microsoft.Synchronization.Services.Formatters,ReflectionUtility,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\ReflectionUtility.cs,GetValueFromType,The length of the statement  "	else if (type.IsPrimitive || FormatterConstants.DecimalType.IsAssignableFrom (type) || FormatterConstants.FloatType.IsAssignableFrom (type)) { " is 142.
Long Statement,Microsoft.Synchronization.Services.Formatters,SyncReader,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncReader.cs,GetConflict,The length of the statement  "			Resolution = (SyncConflictResolution)Enum.Parse (FormatterConstants.SyncConflictResolutionType' _currentEntryWrapper.ConflictDesc' true) " is 136.
Long Statement,Microsoft.Synchronization.Services.Formatters,SyncReader,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncReader.cs,CheckItemType,The length of the statement  "		throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "{0} is not a valid {1} element."' _reader.Name' type)); " is 138.
Long Statement,Microsoft.Synchronization.Services.Formatters,SyncWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncWriter.cs,AddItem,The length of the statement  "	WriteItemInternal (entry' tempId' null/*conflicting*/' null/*conflictingTempId*/' null/*desc*/' false/*isconflict*/' emitMetadataOnly); " is 135.
Long Statement,Microsoft.Synchronization.Services.Formatters,SyncWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncWriter.cs,AddConflictItem,The length of the statement  "	WriteItemInternal (winningEntry' winningEntryTempId' losingEntry/*conflicting*/' losingEntryTempId' resolution.ToString ()/*desc*/' true/*isconflict*/' false/*emitMetadataOnly*/); " is 179.
Long Statement,Microsoft.Synchronization.Services.Formatters,SyncWriter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\SyncWriter.cs,AddErrorItem,The length of the statement  "	WriteItemInternal (liveEntry' null/*liveEntryTempId*/' errorEntry/*conflicting*/' errorEntryTempId' errorDescription/*desc*/' false/*isconflict*/' false/*emitMetadataOnly*/); " is 174.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,ConvertEntitiesToDataSet,The length of the statement  "			throw SyncServiceException.CreateInternalServerError (String.Format (CultureInfo.InvariantCulture' "DataSetToEntitiesConverter.ConvertEntitiesToDataSet: Unknown type {0}"' entity.GetType ())); " is 192.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,GetSelectScriptForType,The length of the statement  "		throw SyncServiceException.CreateInternalServerError (String.Format (CultureInfo.InvariantCulture' "DataSetToEntitiesConverter.GetSelectScriptForType: Unknown type {0}"' t)); " is 174.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,ConvertDataSetToEntities,The length of the statement  "			throw SyncServiceException.CreateInternalServerError (String.Format (CultureInfo.InvariantCulture' "DataSetToEntitiesConverter.ConvertDataSetToEntities: Unknown type {0}"' tableName)); " is 184.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,GetEntityFromDataRow,The length of the statement  "			t.InvokeMember ((mappingInfo.ContainsKey (columnCollection [i].ColumnName)) ? mappingInfo [columnCollection [i].ColumnName] : columnCollection [i].ColumnName' BindingFlags.SetProperty' null' objectToConvert' new[] { " is 215.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,BuildPropertyMappingInfo,The length of the statement  "				throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "No LocalName parameter was provided in SyncEntityPropertyMappingAttribute on Property '{0}' in Type '{1}'"' pinfo.Name' type.FullName)); " is 219.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,OpenConnection,The length of the statement  "		throw SyncServiceException.CreateInternalServerError (String.Format ("Unhandled ConnectionState {0}"' connection.State)); " is 121.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The length of the statement  "				SyncServiceTracer.TraceError ("Open connection failed after max retry attempts' due to exception: {0}"' sqlException.Message); " is 126.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The length of the statement  "				SyncServiceTracer.TraceError ("Open connection failed on attempt {0} of {1}' due to unretryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message); " is 161.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The length of the statement  "				SyncServiceTracer.TraceWarning ("Open connection failed on attempt {0} of {1}' due to retryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message); " is 161.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetChanges,The length of the statement  "	_sqlSyncProvider = CreateSqlSyncProviderInstance (_clientScopeName' _serverConnectionString' _configuration.SyncObjectSchema); " is 126.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetChanges,The length of the statement  "	_sqlSyncProvider = CreateSqlSyncProviderInstance (_clientScopeName' _serverConnectionString' _configuration.SyncObjectSchema); " is 126.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,ApplyChanges,The length of the statement  "	_sqlSyncProvider = CreateSqlSyncProviderInstance (_clientScopeName' _serverConnectionString' _configuration.SyncObjectSchema); " is 126.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,ApplyChanges,The length of the statement  "                 * SyncKnowledge.GetKnowledgeForItemId could be used for itemid Zero and then we can find the mintickcount for client replica id." is 128.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,ApplyChanges,The length of the statement  "			SyncTracer.Info ("ReplicaNotFoundException. NEW CLIENT. Exception details: {0}"' WebUtil.GetExceptionMessage (exception)); " is 122.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,ApplyChanges,The length of the statement  "		_sqlSyncProvider.ProcessChangeBatch (Microsoft.Synchronization.ConflictResolutionPolicy.DestinationWins' changeBatch' dbSyncContext' new SyncCallbacks ()' stats); " is 162.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SaveBatchesAndReturnFirstBatch,The length of the statement  "	// to each sorted batch. Every batch will have a knowledge that contains the information in the batch. So we have to combine  " is 124.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderChangesApplied,The length of the statement  "		_serverTickCountAfterResolvingAllConflicts = Microsoft.Synchronization.Services.SqlProvider.SqlEditionHelper.GetServerTickCountFromDatabase (e.Connection as SqlConnection' e.Transaction as SqlTransaction); " is 205.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "		//Note: When Error is not null' the conflict type should be ErrorsOccurred. Assert' just to make sure this is always correct. " is 125.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "		_converter.GetEntityFromDataRow (e.Conflict.RemoteChange.Columns' e.Conflict.RemoteChange.Rows [0]' syncError.ErrorEntity); " is 123.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "			_converter.GetEntityFromDataRow (e.Conflict.RemoteChange.Columns' e.Conflict.RemoteChange.Rows [0]' syncError.LiveEntity); " is 122.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "		// However the exception will be cleared the next time the client uploads changes' since we increment tickcounts always. " is 120.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "	if (_configuration.HasConflictInterceptors (this._scopeName) || _configuration.HasTypedConflictInterceptor (this._scopeName' entityType)) { " is 139.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "		else if (userResolution != null && (userResolution == SyncConflictResolution.ClientWins || userResolution == SyncConflictResolution.Merge)) { " is 141.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,SqlSyncProviderApplyChangeFailed,The length of the statement  "		Debug.Assert (!_syncEntityIdToConflictMapping.ContainsKey (rowId)' "!_syncEntityIdToConflictMapping.ContainsKey(rowId)"); " is 121.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetUserConflictResolution,The length of the statement  "	clientVersion.ServiceMetadata.IsTombstone = e.Conflict.Type == DbConflictType.LocalDeleteRemoteDelete || e.Conflict.Type == DbConflictType.LocalUpdateRemoteDelete; " is 163.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetUserConflictResolution,The length of the statement  "		serverVersion.ServiceMetadata.IsTombstone = e.Conflict.Type == DbConflictType.LocalDeleteRemoteDelete || e.Conflict.Type == DbConflictType.LocalDeleteRemoteUpdate; " is 163.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetUserConflictResolution,The length of the statement  "	SyncConflictResolution? userResolution = this._configuration.InvokeConflictInterceptor (this._conflictContext' entityType' out mergedVersion); " is 142.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetUserConflictResolution,The length of the statement  "			throw new InvalidOperationException ("User SyncConflictInterceptor returned a conflict resolution of 'Merge' but did not specify a merged version."); " is 149.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetUserConflictResolution,The length of the statement  "			throw new InvalidOperationException (string.Format (CultureInfo.InvariantCulture' "User SyncConflictInterceptor returned merged version entity type '{0} does not match required type '{1}'."' mergedVersion.GetType ().Name' clientVersion.GetType ().Name)); " is 254.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetUserConflictResolution,The length of the statement  "		_converter.MergeChangeInToDataSet (e.Context.DataSet.Tables [e.Conflict.RemoteChange.TableName]' e.Conflict.RemoteChange.Rows [0]' rowValues' mergedVersion.GetType ()); " is 168.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,CreateNewScopeForClient,The length of the statement  "			DbSyncScopeDescription scopeDescription = String.IsNullOrEmpty (_configuration.SyncObjectSchema) ? SqlSyncDescriptionBuilder.GetDescriptionForScope (_scopeName' serverConnection) : SqlSyncDescriptionBuilder.GetDescriptionForScope (_scopeName' string.Empty/*objectPrefix*/' _configuration.SyncObjectSchema' serverConnection); " is 324.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,GetScopeDescription,The length of the statement  "		DbSyncScopeDescription scopeDescription = String.IsNullOrEmpty (_configuration.SyncObjectSchema) ? SqlSyncDescriptionBuilder.GetDescriptionForScope (_clientScopeName' serverConnection) : SqlSyncDescriptionBuilder.GetDescriptionForScope (_clientScopeName' string.Empty/*objectPrefix*/' _configuration.SyncObjectSchema' serverConnection); " is 336.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,AddSyncColumnsToDataSet,The length of the statement  "				// since the sent update version will be set to 0. This results in the DbChangeHandler.ApplyInsert returning LocalSupersedes " is 124.
Long Statement,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,AddConflictItemsKnowledgeToClientKnowledge,The length of the statement  "		var localKnowledge = new SyncKnowledge (serverKnowledge.GetSyncIdFormatGroup ()' serverKnowledge.ReplicaId' _serverTickCountAfterResolvingAllConflicts); " is 152.
Long Statement,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,AddUnsortedDataSet,The length of the statement  "			SyncTracer.Error ("Cannot Apply Changes since Adapters are missing for the following tables: {0}.  " + "Please ensure that the local and global names on the Adapters are set properly."' curTable); " is 196.
Long Statement,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,AddUnsortedDataSet,The length of the statement  "			DataRowVersion viewVersion = (curRow.RowState == DataRowState.Deleted) ? DataRowVersion.Original : DataRowVersion.Current; " is 122.
Long Statement,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The length of the statement  "	BatchRangeSetBuilder rangeSetBuilder = new BatchRangeSetBuilder (_srcKnowledge.GetSyncIdFormatGroup ().ItemIdFormat' _tablesInApplyOrder); " is 138.
Long Statement,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The length of the statement  "					throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize)); " is 157.
Complex Conditional,Microsoft.Synchronization.Services,UploadChangesRequestProcessor,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\UploadChangesRequestProcessor.cs,PrepareAndProcessRequestInterceptor,The conditional expression  "_configuration.HasRequestInterceptors (this._scopeName' SyncOperations.Upload) || _configuration.HasTypedRequestInterceptors (this._scopeName) || _configuration.HasConflictInterceptors (this._scopeName) || _configuration.HasTypedConflictInterceptors (this._scopeName)"  is complex.
Complex Conditional,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,CheckForDuplicateAndAddInterceptors,The conditional expression  "(attr.EntityType != null && nonFilteredInfo != null) || (attr.EntityType == null && filteredInfo.Count != 0)"  is complex.
Complex Conditional,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,IsCharHexDigit,The conditional expression  "((c < '0') || (c > '9')) && ((c < 'a') || (c > 'f'))"  is complex.
Complex Conditional,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFatalException,The conditional expression  "((exception is OutOfMemoryException) && !(exception is InsufficientMemoryException)) || (((exception is ThreadAbortException) || (exception is AccessViolationException)) || (exception is SEHException))"  is complex.
Complex Conditional,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The conditional expression  "methodInfo.ReturnType != SyncServiceConstants.SYNC_CONFLICT_RESOLUTION_TYPE || parameters.Length != 2 || (parameters [0].ParameterType != SyncServiceConstants.SYNC_CONFLICT_CONTEXT_TYPE) || (parameters [1].ParameterType != SyncServiceConstants.IOFFLINEENTITY_BYREFTYPE)"  is complex.
Virtual Method Call from Constructor,Microsoft.Synchronization.Services.Formatters,EntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\EntryInfoWrapper.cs,EntryInfoWrapper,The constructor "EntryInfoWrapper" calls a virtual method "LoadTypeName".
Virtual Method Call from Constructor,Microsoft.Synchronization.Services.Formatters,EntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\EntryInfoWrapper.cs,EntryInfoWrapper,The constructor "EntryInfoWrapper" calls a virtual method "LoadEntryProperties".
Virtual Method Call from Constructor,Microsoft.Synchronization.Services.Formatters,EntryInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\..\Formatters\EntryInfoWrapper.cs,EntryInfoWrapper,The constructor "EntryInfoWrapper" calls a virtual method "LoadConflictEntry".
Empty Catch Block,Microsoft.Synchronization.Services,SyncServiceTracer,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncServiceTracer.cs,TraceLine,The method has an empty catch block.
Empty Catch Block,Microsoft.Synchronization.Services,DiagHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Diag\DiagHelper.cs,CheckForClientAccessPolicy,The method has an empty catch block.
Magic Number,Microsoft.Synchronization.Services,HttpContextServiceHost,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\HttpContextServiceHost.cs,ValidateRequestHttpVerbAndSegments,The following statement contains a magic number: if (RelativeUriSegments.Length > 2) {  	throw SyncServiceException.CreateBadRequestError (Strings.InvalidUrlFormat);  }  
Magic Number,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,GetRequestCommandType,The following statement contains a magic number: if (_serviceHost.RelativeUriSegments.Length < 2 || String.IsNullOrEmpty (_serviceHost.RelativeUriSegments [1].Trim ())) {  	throw SyncServiceException.CreateBadRequestError (Strings.MissingOperationNameinRequest);  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToByteArray,The following statement contains a magic number: if ((text.Length % 2) != 0) {  	targetValue = null;  	return false;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToByteArray,The following statement contains a magic number: while (index < buffer.Length) {  	char c = text [num2];  	char ch2 = text [num2 + 1];  	if (!IsCharHexDigit (c) || !IsCharHexDigit (ch2)) {  		targetValue = null;  		return false;  	}  	buffer [index] = (byte)(((byte)(HexCharToNibble (c) << 4)) + HexCharToNibble (ch2));  	num2 += 2;  	index++;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToByteArray,The following statement contains a magic number: while (index < buffer.Length) {  	char c = text [num2];  	char ch2 = text [num2 + 1];  	if (!IsCharHexDigit (c) || !IsCharHexDigit (ch2)) {  		targetValue = null;  		return false;  	}  	buffer [index] = (byte)(((byte)(HexCharToNibble (c) << 4)) + HexCharToNibble (ch2));  	num2 += 2;  	index++;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToByteArray,The following statement contains a magic number: buffer [index] = (byte)(((byte)(HexCharToNibble (c) << 4)) + HexCharToNibble (ch2));  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryKeyStringToByteArray,The following statement contains a magic number: num2 += 2;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 2;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 3;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 4;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 5;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 6;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 7;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 8;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 9;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 10;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 11;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 12;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 13;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 14;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following statement contains a magic number: return 15;  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,TryRemoveQuotes,The following statement contains a magic number: if (text.Length < 2) {  	return false;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,IsKeyValueQuoted,The following statement contains a magic number: if (((text.Length < 2) || (text [0] != '\'')) || (text [text.Length - 1] != '\'')) {  	return false;  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,IsKeyValueQuoted,The following statement contains a magic number: for (int i = 1; i < (text.Length - 1); i = num2 + 2) {  	num2 = text.IndexOf ('\''' i' (text.Length - i) - 1);  	if (num2 == -1) {  		break;  	}  	if ((num2 == (text.Length - 2)) || (text [num2 + 1] != '\'')) {  		return false;  	}  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,IsKeyValueQuoted,The following statement contains a magic number: for (int i = 1; i < (text.Length - 1); i = num2 + 2) {  	num2 = text.IndexOf ('\''' i' (text.Length - i) - 1);  	if (num2 == -1) {  		break;  	}  	if ((num2 == (text.Length - 2)) || (text [num2 + 1] != '\'')) {  		return false;  	}  }  
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,IsKeyValueQuoted,The following statement contains a magic number: i = num2 + 2
Magic Number,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,IsKeyValueQuoted,The following statement contains a magic number: if ((num2 == (text.Length - 2)) || (text [num2 + 1] != '\'')) {  	return false;  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: lock (_lockObject) {  	if (ServiceIsFriend == null) {  		string assemblyName = string.Empty;  		string publicKey = string.Empty;  		bool hasStrongName = false;  		ServiceIsFriend = false;  		// Look for the type's Assembly name and private key in the assembly strong name  		// if the assembly has no StrongName it is not a friend assembly                  		System.Collections.IEnumerator e = type.Assembly.Evidence.GetHostEnumerator ();  		e.Reset ();  		while (e.MoveNext ()) {  			if (e.Current is System.Security.Policy.StrongName) {  				hasStrongName = true;  				System.Security.Policy.StrongName sn = e.Current as System.Security.Policy.StrongName;  				assemblyName = sn.Name;  				publicKey = sn.PublicKey.ToString ();  				break;  			}  		}  		if (hasStrongName) {  			// Compare the assemblyName and publicKey against the list of InternalsVisibleTo assemblies.    			foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  				System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  				string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  				// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  				// If the assembly has no PublicKey continue' the friend class has to be signed  				if (friendAssemblyName.Length != 3)  					continue;  				if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  					ServiceIsFriend = true;  					break;  				}  			}  		}  		// Result gets cached in ServiceIsFriend for future requests  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: lock (_lockObject) {  	if (ServiceIsFriend == null) {  		string assemblyName = string.Empty;  		string publicKey = string.Empty;  		bool hasStrongName = false;  		ServiceIsFriend = false;  		// Look for the type's Assembly name and private key in the assembly strong name  		// if the assembly has no StrongName it is not a friend assembly                  		System.Collections.IEnumerator e = type.Assembly.Evidence.GetHostEnumerator ();  		e.Reset ();  		while (e.MoveNext ()) {  			if (e.Current is System.Security.Policy.StrongName) {  				hasStrongName = true;  				System.Security.Policy.StrongName sn = e.Current as System.Security.Policy.StrongName;  				assemblyName = sn.Name;  				publicKey = sn.PublicKey.ToString ();  				break;  			}  		}  		if (hasStrongName) {  			// Compare the assemblyName and publicKey against the list of InternalsVisibleTo assemblies.    			foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  				System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  				string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  				// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  				// If the assembly has no PublicKey continue' the friend class has to be signed  				if (friendAssemblyName.Length != 3)  					continue;  				if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  					ServiceIsFriend = true;  					break;  				}  			}  		}  		// Result gets cached in ServiceIsFriend for future requests  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: if (ServiceIsFriend == null) {  	string assemblyName = string.Empty;  	string publicKey = string.Empty;  	bool hasStrongName = false;  	ServiceIsFriend = false;  	// Look for the type's Assembly name and private key in the assembly strong name  	// if the assembly has no StrongName it is not a friend assembly                  	System.Collections.IEnumerator e = type.Assembly.Evidence.GetHostEnumerator ();  	e.Reset ();  	while (e.MoveNext ()) {  		if (e.Current is System.Security.Policy.StrongName) {  			hasStrongName = true;  			System.Security.Policy.StrongName sn = e.Current as System.Security.Policy.StrongName;  			assemblyName = sn.Name;  			publicKey = sn.PublicKey.ToString ();  			break;  		}  	}  	if (hasStrongName) {  		// Compare the assemblyName and publicKey against the list of InternalsVisibleTo assemblies.    		foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  			System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  			string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  			// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  			// If the assembly has no PublicKey continue' the friend class has to be signed  			if (friendAssemblyName.Length != 3)  				continue;  			if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  				ServiceIsFriend = true;  				break;  			}  		}  	}  	// Result gets cached in ServiceIsFriend for future requests  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: if (ServiceIsFriend == null) {  	string assemblyName = string.Empty;  	string publicKey = string.Empty;  	bool hasStrongName = false;  	ServiceIsFriend = false;  	// Look for the type's Assembly name and private key in the assembly strong name  	// if the assembly has no StrongName it is not a friend assembly                  	System.Collections.IEnumerator e = type.Assembly.Evidence.GetHostEnumerator ();  	e.Reset ();  	while (e.MoveNext ()) {  		if (e.Current is System.Security.Policy.StrongName) {  			hasStrongName = true;  			System.Security.Policy.StrongName sn = e.Current as System.Security.Policy.StrongName;  			assemblyName = sn.Name;  			publicKey = sn.PublicKey.ToString ();  			break;  		}  	}  	if (hasStrongName) {  		// Compare the assemblyName and publicKey against the list of InternalsVisibleTo assemblies.    		foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  			System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  			string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  			// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  			// If the assembly has no PublicKey continue' the friend class has to be signed  			if (friendAssemblyName.Length != 3)  				continue;  			if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  				ServiceIsFriend = true;  				break;  			}  		}  	}  	// Result gets cached in ServiceIsFriend for future requests  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: if (hasStrongName) {  	// Compare the assemblyName and publicKey against the list of InternalsVisibleTo assemblies.    	foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  		System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  		string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  		// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  		// If the assembly has no PublicKey continue' the friend class has to be signed  		if (friendAssemblyName.Length != 3)  			continue;  		if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  			ServiceIsFriend = true;  			break;  		}  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: if (hasStrongName) {  	// Compare the assemblyName and publicKey against the list of InternalsVisibleTo assemblies.    	foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  		System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  		string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  		// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  		// If the assembly has no PublicKey continue' the friend class has to be signed  		if (friendAssemblyName.Length != 3)  			continue;  		if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  			ServiceIsFriend = true;  			break;  		}  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  	System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  	string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  	// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  	// If the assembly has no PublicKey continue' the friend class has to be signed  	if (friendAssemblyName.Length != 3)  		continue;  	if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  		ServiceIsFriend = true;  		break;  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: foreach (object assembly in Assembly.GetExecutingAssembly ().GetCustomAttributes (typeof(System.Runtime.CompilerServices.InternalsVisibleToAttribute)' false)) {  	System.Runtime.CompilerServices.InternalsVisibleToAttribute friendClass = assembly as System.Runtime.CompilerServices.InternalsVisibleToAttribute;  	string[] friendAssemblyName = friendClass.AssemblyName.Split ('''' '=');  	// friendClass.AssemblyName should match the following format: "Name' PublicKey=PublicKeyBlob"  	// If the assembly has no PublicKey continue' the friend class has to be signed  	if (friendAssemblyName.Length != 3)  		continue;  	if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  		ServiceIsFriend = true;  		break;  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: if (friendAssemblyName.Length != 3)  	continue;  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,IsFriendClass,The following statement contains a magic number: if (friendAssemblyName [0].Equals (assemblyName' StringComparison.InvariantCultureIgnoreCase) && friendAssemblyName [2].Equals (publicKey' StringComparison.InvariantCultureIgnoreCase)) {  	ServiceIsFriend = true;  	break;  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The following statement contains a magic number: idString = idString.Substring (1' idString.Length - 2);  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The following statement contains a magic number: foreach (var keyValuePair in primaryKeyValuePair) {  	// example: ID=1  	string[] keyValue = keyValuePair.Split (new[] {  		'='  	}' StringSplitOptions.RemoveEmptyEntries);  	// Every key should have only 2 components.  	Debug.Assert (2 == keyValue.Length);  	// Get the property from the key list.  	string key = keyValue [0].Trim ();  	var propertyInfo = keyFieldPropertyInfoList.Where (p => p.Name == key).FirstOrDefault ();  	if (null == propertyInfo) {  		throw SyncServiceException.CreateBadRequestError (String.Format (Strings.BadRequestKeyNotFoundInResource' key' entity.ServiceMetadata.Id' entity.GetType ()));  	}  	// Get typed value of the value.  	object targetValue;  	// Parse the value based on the target type.  	if (!ODataIdParser.TryKeyStringToPrimitive (keyValue [1]' propertyInfo.PropertyType' out targetValue)) {  		throw SyncServiceException.CreateBadRequestError (String.Format (Strings.UnableToParseKeyValueForProperty' keyValuePair' entity.ServiceMetadata.Id));  	}  	// Set the property value.  	propertyInfo.SetValue (entity' targetValue' null);  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ParseIdStringAndPopulateKeyFields,The following statement contains a magic number: Debug.Assert (2 == keyValue.Length);  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The following statement contains a magic number: if (attr is SyncRequestInterceptorAttribute || attr is SyncResponseInterceptorAttribute) {  	// Ensure methodInfo is of format public void MethodName(SyncOperationContext context)  	if (methodInfo.ReturnType != SyncServiceConstants.VOID_TYPE || parameters.Length != 1 || (parameters [0].ParameterType != SyncServiceConstants.SYNC_OPERATIONCONTEXT_TYPE)) {  		throw new InvalidOperationException (string.Format (SyncServiceConstants.SYNC_INCORRECT_INTERCEPTOR_SIGNATURE' methodInfo.Name' parentTypeName' attr.GetType ().Name' SyncServiceConstants.SYNC_REQUEST_INTERCEPTOR_FORMAT));  	}  }  else {  	// Ensure methodInfo is of format public SyncUploadConflictResolution MethodName(SyncUploadConflictContext context)  	if (methodInfo.ReturnType != SyncServiceConstants.SYNC_CONFLICT_RESOLUTION_TYPE || parameters.Length != 2 || (parameters [0].ParameterType != SyncServiceConstants.SYNC_CONFLICT_CONTEXT_TYPE) || (parameters [1].ParameterType != SyncServiceConstants.IOFFLINEENTITY_BYREFTYPE)) {  		throw new InvalidOperationException (string.Format (SyncServiceConstants.SYNC_INCORRECT_INTERCEPTOR_SIGNATURE' methodInfo.Name' parentTypeName' attr.GetType ().Name' SyncServiceConstants.SYNC_CONFLICT_INTERCEPTOR_FORMAT));  	}  }  
Magic Number,Microsoft.Synchronization.Services,WebUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\WebUtil.cs,ValidateInterceptorSignature,The following statement contains a magic number: if (methodInfo.ReturnType != SyncServiceConstants.SYNC_CONFLICT_RESOLUTION_TYPE || parameters.Length != 2 || (parameters [0].ParameterType != SyncServiceConstants.SYNC_CONFLICT_CONTEXT_TYPE) || (parameters [1].ParameterType != SyncServiceConstants.IOFFLINEENTITY_BYREFTYPE)) {  	throw new InvalidOperationException (string.Format (SyncServiceConstants.SYNC_INCORRECT_INTERCEPTOR_SIGNATURE' methodInfo.Name' parentTypeName' attr.GetType ().Name' SyncServiceConstants.SYNC_CONFLICT_INTERCEPTOR_FORMAT));  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: try {  	cmd = new SqlCommand (ServerPropertyQuery' connection' transaction);  	reader = cmd.ExecuteReader ();  	reader.Read ();  	string editionStr = reader.GetString (0);  	string versionStr = reader.GetString (1);  	if (editionStr.Equals ("SQL Azure")) {  		edition = SqlEdition.SqlAzure;  	}  	else {  		String[] versionParts = versionStr.Split ('.');  		int majorVersion = Int32.Parse (versionParts [0]' CultureInfo.InvariantCulture);  		if (majorVersion == 9)  			edition = SqlEdition.Sql2005;  		else if (majorVersion >= 10)  			edition = SqlEdition.Sql2008;  		else  			throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  	}  	SyncServiceTracer.TraceInfo ("Version of connection detected to be {0}"' edition);  }  finally {  	if (reader != null) {  		reader.Dispose ();  	}  	if (cmd != null) {  		cmd.Dispose ();  	}  	if (openedConnection) {  		connection.Close ();  	}  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: try {  	cmd = new SqlCommand (ServerPropertyQuery' connection' transaction);  	reader = cmd.ExecuteReader ();  	reader.Read ();  	string editionStr = reader.GetString (0);  	string versionStr = reader.GetString (1);  	if (editionStr.Equals ("SQL Azure")) {  		edition = SqlEdition.SqlAzure;  	}  	else {  		String[] versionParts = versionStr.Split ('.');  		int majorVersion = Int32.Parse (versionParts [0]' CultureInfo.InvariantCulture);  		if (majorVersion == 9)  			edition = SqlEdition.Sql2005;  		else if (majorVersion >= 10)  			edition = SqlEdition.Sql2008;  		else  			throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  	}  	SyncServiceTracer.TraceInfo ("Version of connection detected to be {0}"' edition);  }  finally {  	if (reader != null) {  		reader.Dispose ();  	}  	if (cmd != null) {  		cmd.Dispose ();  	}  	if (openedConnection) {  		connection.Close ();  	}  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: if (editionStr.Equals ("SQL Azure")) {  	edition = SqlEdition.SqlAzure;  }  else {  	String[] versionParts = versionStr.Split ('.');  	int majorVersion = Int32.Parse (versionParts [0]' CultureInfo.InvariantCulture);  	if (majorVersion == 9)  		edition = SqlEdition.Sql2005;  	else if (majorVersion >= 10)  		edition = SqlEdition.Sql2008;  	else  		throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: if (editionStr.Equals ("SQL Azure")) {  	edition = SqlEdition.SqlAzure;  }  else {  	String[] versionParts = versionStr.Split ('.');  	int majorVersion = Int32.Parse (versionParts [0]' CultureInfo.InvariantCulture);  	if (majorVersion == 9)  		edition = SqlEdition.Sql2005;  	else if (majorVersion >= 10)  		edition = SqlEdition.Sql2008;  	else  		throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: if (majorVersion == 9)  	edition = SqlEdition.Sql2005;  else if (majorVersion >= 10)  	edition = SqlEdition.Sql2008;  else  	throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: if (majorVersion == 9)  	edition = SqlEdition.Sql2005;  else if (majorVersion >= 10)  	edition = SqlEdition.Sql2008;  else  	throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,GetEdition,The following statement contains a magic number: if (majorVersion >= 10)  	edition = SqlEdition.Sql2008;  else  	throw SyncServiceException.CreateInternalServerError (String.Format ("Unsupported Sql Edition {0}"' versionStr));  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The following statement contains a magic number: for (int attempt = 0; attempt < RetryAmount + 1; attempt++) {  	try {  		if (attempt > 0) {  			SyncServiceTracer.TraceInfo ("Retrying opening connection' attempt {0} of {1}."' attempt' RetryAmount);  		}  		// Open the connection  		connection.Open ();  		// Test the open connection  		SqlConnection sqlConn = connection as SqlConnection;  		if (sqlConn != null) {  			using (SqlCommand sqlCommand = new SqlCommand ("Select 1"' sqlConn)) {  				sqlCommand.ExecuteScalar ();  				// Connection is valid' return successful  				return;  			}  		}  		else {  			//Don't test the injected connection  			return;  		}  	}  	catch (SqlException sqlException) {  		// Throw Error if we have reach the maximum number of retries  		if (attempt == RetryAmount) {  			SyncServiceTracer.TraceError ("Open connection failed after max retry attempts' due to exception: {0}"' sqlException.Message);  			throw;  		}  		// Determine if we should retry or abort.  		if (!RetryLitmus (sqlException)) {  			SyncServiceTracer.TraceError ("Open connection failed on attempt {0} of {1}' due to unretryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message);  			throw;  		}  		else {  			SyncServiceTracer.TraceWarning ("Open connection failed on attempt {0} of {1}' due to retryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message);  			// Backoff Throttling  			Thread.Sleep (RetryWaitMilliseconds * (int)Math.Pow (2' attempt));  		}  	}  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The following statement contains a magic number: try {  	if (attempt > 0) {  		SyncServiceTracer.TraceInfo ("Retrying opening connection' attempt {0} of {1}."' attempt' RetryAmount);  	}  	// Open the connection  	connection.Open ();  	// Test the open connection  	SqlConnection sqlConn = connection as SqlConnection;  	if (sqlConn != null) {  		using (SqlCommand sqlCommand = new SqlCommand ("Select 1"' sqlConn)) {  			sqlCommand.ExecuteScalar ();  			// Connection is valid' return successful  			return;  		}  	}  	else {  		//Don't test the injected connection  		return;  	}  }  catch (SqlException sqlException) {  	// Throw Error if we have reach the maximum number of retries  	if (attempt == RetryAmount) {  		SyncServiceTracer.TraceError ("Open connection failed after max retry attempts' due to exception: {0}"' sqlException.Message);  		throw;  	}  	// Determine if we should retry or abort.  	if (!RetryLitmus (sqlException)) {  		SyncServiceTracer.TraceError ("Open connection failed on attempt {0} of {1}' due to unretryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message);  		throw;  	}  	else {  		SyncServiceTracer.TraceWarning ("Open connection failed on attempt {0} of {1}' due to retryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message);  		// Backoff Throttling  		Thread.Sleep (RetryWaitMilliseconds * (int)Math.Pow (2' attempt));  	}  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The following statement contains a magic number: if (!RetryLitmus (sqlException)) {  	SyncServiceTracer.TraceError ("Open connection failed on attempt {0} of {1}' due to unretryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message);  	throw;  }  else {  	SyncServiceTracer.TraceWarning ("Open connection failed on attempt {0} of {1}' due to retryable exception: {2}"' attempt + 1' RetryAmount' sqlException.Message);  	// Backoff Throttling  	Thread.Sleep (RetryWaitMilliseconds * (int)Math.Pow (2' attempt));  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,TryOpenConnection,The following statement contains a magic number: Thread.Sleep (RetryWaitMilliseconds * (int)Math.Pow (2' attempt));  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following statement contains a magic number: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetRowSizeForObjectArray,The following statement contains a magic number: foreach (object o in row) {  	string rowSizeInString = o as string;  	byte[] rowSizeInBytes = o as byte[];  	if (o == null) {  		rowSize += 1;  	}  	else if (o is Guid) {  		rowSize += 16;  	}  	else if (rowSizeInString != null) {  		//By default all .NET strings are in Unicode encoding. So always get the byte count  		//as opposed to string length  as the string length varies for different encodings  		rowSize += Encoding.Unicode.GetByteCount (rowSizeInString);  	}  	else if (rowSizeInBytes != null) {  		rowSize += (rowSizeInBytes).Length;  	}  	else {  		rowSize += GetSizeForType (o.GetType ());  	}  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetRowSizeForObjectArray,The following statement contains a magic number: if (o == null) {  	rowSize += 1;  }  else if (o is Guid) {  	rowSize += 16;  }  else if (rowSizeInString != null) {  	//By default all .NET strings are in Unicode encoding. So always get the byte count  	//as opposed to string length  as the string length varies for different encodings  	rowSize += Encoding.Unicode.GetByteCount (rowSizeInString);  }  else if (rowSizeInBytes != null) {  	rowSize += (rowSizeInBytes).Length;  }  else {  	rowSize += GetSizeForType (o.GetType ());  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetRowSizeForObjectArray,The following statement contains a magic number: if (o is Guid) {  	rowSize += 16;  }  else if (rowSizeInString != null) {  	//By default all .NET strings are in Unicode encoding. So always get the byte count  	//as opposed to string length  as the string length varies for different encodings  	rowSize += Encoding.Unicode.GetByteCount (rowSizeInString);  }  else if (rowSizeInBytes != null) {  	rowSize += (rowSizeInBytes).Length;  }  else {  	rowSize += GetSizeForType (o.GetType ());  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetRowSizeForObjectArray,The following statement contains a magic number: rowSize += 16;  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Empty:  	return 0;  case TypeCode.Boolean:  case TypeCode.Byte:  case TypeCode.SByte:  	return 1;  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Char:  	return 2;  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Single:  	return 4;  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Double:  case TypeCode.DateTime:  case TypeCode.Object:  	//Treat it as a reference (pointer)  	return 8;  case TypeCode.Decimal:  	return 16;  default:  	//Should never get here. So return 0  	return 0;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Empty:  	return 0;  case TypeCode.Boolean:  case TypeCode.Byte:  case TypeCode.SByte:  	return 1;  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Char:  	return 2;  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Single:  	return 4;  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Double:  case TypeCode.DateTime:  case TypeCode.Object:  	//Treat it as a reference (pointer)  	return 8;  case TypeCode.Decimal:  	return 16;  default:  	//Should never get here. So return 0  	return 0;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Empty:  	return 0;  case TypeCode.Boolean:  case TypeCode.Byte:  case TypeCode.SByte:  	return 1;  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Char:  	return 2;  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Single:  	return 4;  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Double:  case TypeCode.DateTime:  case TypeCode.Object:  	//Treat it as a reference (pointer)  	return 8;  case TypeCode.Decimal:  	return 16;  default:  	//Should never get here. So return 0  	return 0;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Empty:  	return 0;  case TypeCode.Boolean:  case TypeCode.Byte:  case TypeCode.SByte:  	return 1;  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Char:  	return 2;  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Single:  	return 4;  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Double:  case TypeCode.DateTime:  case TypeCode.Object:  	//Treat it as a reference (pointer)  	return 8;  case TypeCode.Decimal:  	return 16;  default:  	//Should never get here. So return 0  	return 0;  }  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: return 2;  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: return 4;  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: return 8;  
Magic Number,Microsoft.Synchronization.Services.SqlProvider,SyncUtil,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SyncUtil.cs,GetSizeForType,The following statement contains a magic number: return 16;  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: foreach (string tableName in _tablesInApplyOrder) {  	// start the next table range  	rangeSetBuilder.StartNextTable (tableName);  	// if we have a datatable for this name  	SortedTable curTable;  	if (_sortedTables.TryGetValue (tableName' out curTable) && curTable._schema != null) {  		// add the current table to the batch we are working  		// on  		DataTable curDataTable = curTable._schema.Clone ();  		pendingBatch.sortedDataSet.Tables.Add (curDataTable);  		curDataTable.BeginLoadData ();  		// if there are no rows in the table just add it to  		// the current dataset and move on  		SyncId maxIdInCurrentTable = null;  		// pull the rows in SyncId order  		foreach (KeyValuePair<SyncId' SortedRow> kvp in curTable._rows) {  			long curRowSize = SyncUtil.GetRowSizeForObjectArray (kvp.Value._rowValues);  			if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  				// Note: This code is modified to throw a more specific exception.  				// If we end up merging this code with the provider' then the caller has to be tested to   				// make sure it works with the logic in the provider codebase.  				throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  			}  			// fixme: if this row won't fit then return  			// the current batch  			if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  				// * done loading data  				curDataTable.EndLoadData ();  				// * add last sync id in batch  				if (maxIdInCurrentTable == null) {  					// we have not added any rows to the  					// current table so we should create a  					// dummy id in the current table for  					// the range  					maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  				}  				rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  				// start a new batch  				BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  				pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  				yield return pendingBatch;  				// *** tricky  				// after yielding the current batch we  				// need to start a new one for the rest of  				// the rows in this table.   				// we must reset all the neede state and  				// this is tricky  				maxIdInCurrentTable = null;  				// start a new batch  				pendingBatch = new SortedBatch ();  				sizeOfBatch = 0;  				// start a new range after the current one  				rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  				// add the current table to the batch we are working  				// on  				curDataTable = curTable._schema.Clone ();  				pendingBatch.sortedDataSet.Tables.Add (curDataTable);  				curDataTable.BeginLoadData ();  			}  			AddSortedRowToDataTable (curDataTable' kvp.Value);  			sizeOfBatch += curRowSize;  			maxIdInCurrentTable = kvp.Key;  		}  		curDataTable.EndLoadData ();  	}  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: foreach (string tableName in _tablesInApplyOrder) {  	// start the next table range  	rangeSetBuilder.StartNextTable (tableName);  	// if we have a datatable for this name  	SortedTable curTable;  	if (_sortedTables.TryGetValue (tableName' out curTable) && curTable._schema != null) {  		// add the current table to the batch we are working  		// on  		DataTable curDataTable = curTable._schema.Clone ();  		pendingBatch.sortedDataSet.Tables.Add (curDataTable);  		curDataTable.BeginLoadData ();  		// if there are no rows in the table just add it to  		// the current dataset and move on  		SyncId maxIdInCurrentTable = null;  		// pull the rows in SyncId order  		foreach (KeyValuePair<SyncId' SortedRow> kvp in curTable._rows) {  			long curRowSize = SyncUtil.GetRowSizeForObjectArray (kvp.Value._rowValues);  			if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  				// Note: This code is modified to throw a more specific exception.  				// If we end up merging this code with the provider' then the caller has to be tested to   				// make sure it works with the logic in the provider codebase.  				throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  			}  			// fixme: if this row won't fit then return  			// the current batch  			if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  				// * done loading data  				curDataTable.EndLoadData ();  				// * add last sync id in batch  				if (maxIdInCurrentTable == null) {  					// we have not added any rows to the  					// current table so we should create a  					// dummy id in the current table for  					// the range  					maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  				}  				rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  				// start a new batch  				BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  				pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  				yield return pendingBatch;  				// *** tricky  				// after yielding the current batch we  				// need to start a new one for the rest of  				// the rows in this table.   				// we must reset all the neede state and  				// this is tricky  				maxIdInCurrentTable = null;  				// start a new batch  				pendingBatch = new SortedBatch ();  				sizeOfBatch = 0;  				// start a new range after the current one  				rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  				// add the current table to the batch we are working  				// on  				curDataTable = curTable._schema.Clone ();  				pendingBatch.sortedDataSet.Tables.Add (curDataTable);  				curDataTable.BeginLoadData ();  			}  			AddSortedRowToDataTable (curDataTable' kvp.Value);  			sizeOfBatch += curRowSize;  			maxIdInCurrentTable = kvp.Key;  		}  		curDataTable.EndLoadData ();  	}  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: if (_sortedTables.TryGetValue (tableName' out curTable) && curTable._schema != null) {  	// add the current table to the batch we are working  	// on  	DataTable curDataTable = curTable._schema.Clone ();  	pendingBatch.sortedDataSet.Tables.Add (curDataTable);  	curDataTable.BeginLoadData ();  	// if there are no rows in the table just add it to  	// the current dataset and move on  	SyncId maxIdInCurrentTable = null;  	// pull the rows in SyncId order  	foreach (KeyValuePair<SyncId' SortedRow> kvp in curTable._rows) {  		long curRowSize = SyncUtil.GetRowSizeForObjectArray (kvp.Value._rowValues);  		if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  			// Note: This code is modified to throw a more specific exception.  			// If we end up merging this code with the provider' then the caller has to be tested to   			// make sure it works with the logic in the provider codebase.  			throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  		}  		// fixme: if this row won't fit then return  		// the current batch  		if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  			// * done loading data  			curDataTable.EndLoadData ();  			// * add last sync id in batch  			if (maxIdInCurrentTable == null) {  				// we have not added any rows to the  				// current table so we should create a  				// dummy id in the current table for  				// the range  				maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  			}  			rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  			// start a new batch  			BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  			pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  			yield return pendingBatch;  			// *** tricky  			// after yielding the current batch we  			// need to start a new one for the rest of  			// the rows in this table.   			// we must reset all the neede state and  			// this is tricky  			maxIdInCurrentTable = null;  			// start a new batch  			pendingBatch = new SortedBatch ();  			sizeOfBatch = 0;  			// start a new range after the current one  			rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  			// add the current table to the batch we are working  			// on  			curDataTable = curTable._schema.Clone ();  			pendingBatch.sortedDataSet.Tables.Add (curDataTable);  			curDataTable.BeginLoadData ();  		}  		AddSortedRowToDataTable (curDataTable' kvp.Value);  		sizeOfBatch += curRowSize;  		maxIdInCurrentTable = kvp.Key;  	}  	curDataTable.EndLoadData ();  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: if (_sortedTables.TryGetValue (tableName' out curTable) && curTable._schema != null) {  	// add the current table to the batch we are working  	// on  	DataTable curDataTable = curTable._schema.Clone ();  	pendingBatch.sortedDataSet.Tables.Add (curDataTable);  	curDataTable.BeginLoadData ();  	// if there are no rows in the table just add it to  	// the current dataset and move on  	SyncId maxIdInCurrentTable = null;  	// pull the rows in SyncId order  	foreach (KeyValuePair<SyncId' SortedRow> kvp in curTable._rows) {  		long curRowSize = SyncUtil.GetRowSizeForObjectArray (kvp.Value._rowValues);  		if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  			// Note: This code is modified to throw a more specific exception.  			// If we end up merging this code with the provider' then the caller has to be tested to   			// make sure it works with the logic in the provider codebase.  			throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  		}  		// fixme: if this row won't fit then return  		// the current batch  		if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  			// * done loading data  			curDataTable.EndLoadData ();  			// * add last sync id in batch  			if (maxIdInCurrentTable == null) {  				// we have not added any rows to the  				// current table so we should create a  				// dummy id in the current table for  				// the range  				maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  			}  			rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  			// start a new batch  			BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  			pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  			yield return pendingBatch;  			// *** tricky  			// after yielding the current batch we  			// need to start a new one for the rest of  			// the rows in this table.   			// we must reset all the neede state and  			// this is tricky  			maxIdInCurrentTable = null;  			// start a new batch  			pendingBatch = new SortedBatch ();  			sizeOfBatch = 0;  			// start a new range after the current one  			rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  			// add the current table to the batch we are working  			// on  			curDataTable = curTable._schema.Clone ();  			pendingBatch.sortedDataSet.Tables.Add (curDataTable);  			curDataTable.BeginLoadData ();  		}  		AddSortedRowToDataTable (curDataTable' kvp.Value);  		sizeOfBatch += curRowSize;  		maxIdInCurrentTable = kvp.Key;  	}  	curDataTable.EndLoadData ();  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: foreach (KeyValuePair<SyncId' SortedRow> kvp in curTable._rows) {  	long curRowSize = SyncUtil.GetRowSizeForObjectArray (kvp.Value._rowValues);  	if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  		// Note: This code is modified to throw a more specific exception.  		// If we end up merging this code with the provider' then the caller has to be tested to   		// make sure it works with the logic in the provider codebase.  		throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  	}  	// fixme: if this row won't fit then return  	// the current batch  	if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  		// * done loading data  		curDataTable.EndLoadData ();  		// * add last sync id in batch  		if (maxIdInCurrentTable == null) {  			// we have not added any rows to the  			// current table so we should create a  			// dummy id in the current table for  			// the range  			maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  		}  		rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  		// start a new batch  		BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  		pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  		yield return pendingBatch;  		// *** tricky  		// after yielding the current batch we  		// need to start a new one for the rest of  		// the rows in this table.   		// we must reset all the neede state and  		// this is tricky  		maxIdInCurrentTable = null;  		// start a new batch  		pendingBatch = new SortedBatch ();  		sizeOfBatch = 0;  		// start a new range after the current one  		rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  		// add the current table to the batch we are working  		// on  		curDataTable = curTable._schema.Clone ();  		pendingBatch.sortedDataSet.Tables.Add (curDataTable);  		curDataTable.BeginLoadData ();  	}  	AddSortedRowToDataTable (curDataTable' kvp.Value);  	sizeOfBatch += curRowSize;  	maxIdInCurrentTable = kvp.Key;  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: foreach (KeyValuePair<SyncId' SortedRow> kvp in curTable._rows) {  	long curRowSize = SyncUtil.GetRowSizeForObjectArray (kvp.Value._rowValues);  	if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  		// Note: This code is modified to throw a more specific exception.  		// If we end up merging this code with the provider' then the caller has to be tested to   		// make sure it works with the logic in the provider codebase.  		throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  	}  	// fixme: if this row won't fit then return  	// the current batch  	if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  		// * done loading data  		curDataTable.EndLoadData ();  		// * add last sync id in batch  		if (maxIdInCurrentTable == null) {  			// we have not added any rows to the  			// current table so we should create a  			// dummy id in the current table for  			// the range  			maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  		}  		rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  		// start a new batch  		BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  		pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  		yield return pendingBatch;  		// *** tricky  		// after yielding the current batch we  		// need to start a new one for the rest of  		// the rows in this table.   		// we must reset all the neede state and  		// this is tricky  		maxIdInCurrentTable = null;  		// start a new batch  		pendingBatch = new SortedBatch ();  		sizeOfBatch = 0;  		// start a new range after the current one  		rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  		// add the current table to the batch we are working  		// on  		curDataTable = curTable._schema.Clone ();  		pendingBatch.sortedDataSet.Tables.Add (curDataTable);  		curDataTable.BeginLoadData ();  	}  	AddSortedRowToDataTable (curDataTable' kvp.Value);  	sizeOfBatch += curRowSize;  	maxIdInCurrentTable = kvp.Key;  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: if (curRowSize > (_maxSortedBatchSizeInKB * 1024)) {  	// Note: This code is modified to throw a more specific exception.  	// If we end up merging this code with the provider' then the caller has to be tested to   	// make sure it works with the logic in the provider codebase.  	throw SyncServiceException.CreateInternalServerError (String.Format (Strings.RowExceedsConfiguredBatchSize' _maxSortedBatchSizeInKB' tableName' curRowSize));  }  
Magic Number,Microsoft.Synchronization.Data,RowSorter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\RowSorter.cs,PullSortedBatches,The following statement contains a magic number: if ((sizeOfBatch + curRowSize) > (_maxSortedBatchSizeInKB * 1024)) {  	// * done loading data  	curDataTable.EndLoadData ();  	// * add last sync id in batch  	if (maxIdInCurrentTable == null) {  		// we have not added any rows to the  		// current table so we should create a  		// dummy id in the current table for  		// the range  		maxIdInCurrentTable = rangeSetBuilder.MakeDummyFirstRowID (tableName);  	}  	rangeSetBuilder.AddSyncId (tableName' maxIdInCurrentTable);  	// start a new batch  	BatchRangeSet curRS = rangeSetBuilder.FinishBuildingBatchRangeSet ();  	pendingBatch.sortedDataSetKnowledge = curRS.ProjectOnKnowledge (_srcKnowledge);  	yield return pendingBatch;  	// *** tricky  	// after yielding the current batch we  	// need to start a new one for the rest of  	// the rows in this table.   	// we must reset all the neede state and  	// this is tricky  	maxIdInCurrentTable = null;  	// start a new batch  	pendingBatch = new SortedBatch ();  	sizeOfBatch = 0;  	// start a new range after the current one  	rangeSetBuilder.StartBuildingBatchRangeSet (curRS);  	// add the current table to the batch we are working  	// on  	curDataTable = curTable._schema.Clone ();  	pendingBatch.sortedDataSet.Tables.Add (curDataTable);  	curDataTable.BeginLoadData ();  }  
Missing Default,Microsoft.Synchronization.Services,SyncServiceConfiguration,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Configuration\SyncServiceConfiguration.cs,InvokeOperationInterceptors,The following switch statement is missing a default case: switch (context.Operation) {  case SyncOperations.Download:  	if (entityType == null) {  		methodInfo = (isRequest) ? wrapper.DownloadRequestInterceptor : wrapper.DownloadResponseInterceptor;  	}  	else {  		Debug.Assert (!isRequest' "Cannot fire typed interceptor for DownloadRequest");  		methodInfo = wrapper.GetResponseInterceptor (SyncOperations.Download' entityType);  	}  	break;  case SyncOperations.Upload:  	if (entityType == null) {  		methodInfo = (isRequest) ? wrapper.UploadRequestInterceptor : wrapper.UploadResponseInterceptor;  	}  	else {  		methodInfo = (isRequest) ? wrapper.GetRequestInterceptor (entityType) : wrapper.GetResponseInterceptor (SyncOperations.Upload' entityType);  	}  	break;  }  
Missing Default,Microsoft.Synchronization.Services,HttpContextServiceHost,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\HttpContextServiceHost.cs,MustNotReturnMessageBody,The following switch statement is missing a default case: switch (statusCode) {  case HttpStatusCode.NoContent:  case HttpStatusCode.ResetContent:  case HttpStatusCode.NotModified:  	return true;  }  
Missing Default,Microsoft.Synchronization.Services,RequestParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestParser.cs,ReadIncomingRequestStreamForPost,The following switch statement is missing a default case: switch (reader.ItemType) {  case ReaderItemType.Entry:  	IOfflineEntity entity = reader.GetItem ();  	if (entity.ServiceMetadata.IsTombstone) {  		if (String.IsNullOrEmpty (entity.ServiceMetadata.Id)) {  			throw SyncServiceException.CreateBadRequestError (Strings.TombstoneEntityHasNoId);  		}  		WebUtil.ParseIdStringAndPopulateKeyFields (entity' _serviceHost.ServiceBaseUri);  	}  	_entityList.Add (entity);  	bool hasTempId = false;  	if (reader.HasTempId ()) {  		// Save the entity id to tempId mapping for use later when writing response.  		_idToTempIdMapping.Add (WebUtil.GenerateOfflineEntityId (entity)' reader.GetTempId ());  		hasTempId = true;  	}  	// Make sure' we have atleast one of Id or TempId  	if (String.IsNullOrEmpty (entity.ServiceMetadata.Id) && !hasTempId) {  		throw SyncServiceException.CreateBadRequestError (Strings.BothIdAndTempIdAreMissing);  	}  	break;  case ReaderItemType.SyncBlob:  	_syncBlob = reader.GetServerBlob ();  	break;  }  
Missing Default,Microsoft.Synchronization.Services,SyncRequestProcessorBase,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\RequestProcessor\SyncRequestProcessorBase.cs,CreateResponseMessage,The following switch statement is missing a default case: switch (serializationFormat) {  case SyncSerializationFormat.ODataAtom:  	message.Properties.Add (WebBodyFormatMessageProperty.Name' new WebBodyFormatMessageProperty (WebContentFormat.Xml));  	break;  case SyncSerializationFormat.ODataJson:  	message.Properties.Add (WebBodyFormatMessageProperty.Name' new WebBodyFormatMessageProperty (WebContentFormat.Json));  	break;  }  
Missing Default,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,HasRequestInterceptor,The following switch statement is missing a default case: switch (operation) {  case SyncOperations.Download:  	return this._downloadRequestInterceptor != null;  case SyncOperations.Upload:  	return this._uploadRequestInterceptor != null;  }  
Missing Default,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,HasResponseInterceptor,The following switch statement is missing a default case: switch (operation) {  case SyncOperations.Download:  	return this._downloadResponseInterceptor != null;  case SyncOperations.Upload:  	return this._uploadResponseInterceptor != null;  }  
Missing Default,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,HasResponseInterceptor,The following switch statement is missing a default case: switch (operation) {  case SyncOperations.Download:  	return this._downloadTypedResponseInterceptors.ContainsKey (type);  case SyncOperations.Upload:  	return this._uploadTypedResponseInterceptors.ContainsKey (type);  }  
Missing Default,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,GetResponseInterceptor,The following switch statement is missing a default case: switch (operation) {  case SyncOperations.Download:  	return this._downloadTypedResponseInterceptors [type];  case SyncOperations.Upload:  	return this._uploadTypedResponseInterceptors [type];  }  
Missing Default,Microsoft.Synchronization.Services,SyncInterceptorsInfoWrapper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SyncInterceptorsInfoWrapper.cs,HasTypedResponseInterceptors,The following switch statement is missing a default case: switch (operation) {  case SyncOperations.Download:  	return _downloadTypedResponseInterceptors.Count > 0;  case SyncOperations.Upload:  	return _uploadTypedResponseInterceptors.Count > 0;  }  
Missing Default,Microsoft.Synchronization.Services,ODataIdParser,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\Utility\ODataIdParser.cs,HexCharToNibble,The following switch statement is missing a default case: switch (c) {  case '0':  	return 0;  case '1':  	return 1;  case '2':  	return 2;  case '3':  	return 3;  case '4':  	return 4;  case '5':  	return 5;  case '6':  	return 6;  case '7':  	return 7;  case '8':  	return 8;  case '9':  	return 9;  case 'A':  case 'a':  	return 10;  case 'B':  case 'b':  	return 11;  case 'C':  case 'c':  	return 12;  case 'D':  case 'd':  	return 13;  case 'E':  case 'e':  	return 14;  case 'F':  case 'f':  	return 15;  }  
Missing Default,Microsoft.Synchronization.Services.SqlProvider,DataSetToEntitiesConverter,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\DataSetToEntitiesConverter.cs,IsSyncSpecificColumn,The following switch statement is missing a default case: switch (columnName) {  case DbSyncSession.SyncCreatePeerKey:  case DbSyncSession.SyncCreatePeerTimestamp:  case DbSyncSession.SyncUpdatePeerKey:  case DbSyncSession.SyncUpdatePeerTimestamp:  	return true;  }  
Missing Default,Microsoft.Synchronization.Services.SqlProvider,SqlEditionHelper,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\provider\SqlEditionHelper.cs,RetryLitmus,The following switch statement is missing a default case: switch (sqlException.Number) {  // The service has encountered an error  // processing your request. Please try again.  // Error code %d.  case 40197:  // The service is currently busy. Retry  // the request after 10 seconds. Code: %d.  case 40501:  // Database XXXX on server YYYY is not currently   // available. Please retry the connection later. If the   // problem persists' contact customer support' and   // provide them the session tracing ID of {GUID}  case 40613:  //A transport-level error has occurred when  // receiving results from the server. (provider:  // TCP Provider' error: 0 - An established connection  // was aborted by the software in your host machine.)                 case 10053:  case 64:  //same as 10053  // A transport-level error has occurred when sending  // the request to the server. An existing connection  // was forcibly closed by the remote host.  case 10054:  // A network-related or instance-specific error   // occurred while establishing a connection to SQL Server.    // A connection attempt failed because the connected party   // did not properly respond after a period of time' or   // established connection failed because connected host   // has failed to respond.  case 10060:  	return true;  }  
Missing Default,Microsoft.Synchronization.Services.SqlProvider,SqlSyncProviderService,C:\repos\wmeints_SyncFrameworkToolkit\src\SyncServiceLib\SqlProvider\SqlSyncProviderService.cs,AddSyncColumnsToDataSet,The following switch statement is missing a default case: switch (row.RowState) {  case DataRowState.Added:  	// for rows that have been added we need to  	// update both the create and update versions to be the same.  	// for ex' if a row was deleted and added again' the server update version will otherwise have a higher value  	// since the sent update version will be set to 0. This results in the DbChangeHandler.ApplyInsert returning LocalSupersedes  	// internally after it compares the versions.  	row [DbSyncSession.SyncCreatePeerKey] = 0;  	row [DbSyncSession.SyncCreatePeerTimestamp] = tickCount;  	row [DbSyncSession.SyncUpdatePeerKey] = 0;  	row [DbSyncSession.SyncUpdatePeerTimestamp] = tickCount;  	break;  case DataRowState.Modified:  	// Only update the update version for modified rows.  	row [DbSyncSession.SyncUpdatePeerKey] = 0;  	row [DbSyncSession.SyncUpdatePeerTimestamp] = tickCount;  	break;  case DataRowState.Deleted:  	row.RejectChanges ();  	row [DbSyncSession.SyncUpdatePeerKey] = 0;  	row [DbSyncSession.SyncUpdatePeerTimestamp] = tickCount;  	row.AcceptChanges ();  	row.Delete ();  	break;  }  
