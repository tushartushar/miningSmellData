Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,SlidingExpirationTest,The length of the statement  "                using (var testLock1 = RedisLock.Acquire(db' "testLock"' TimeSpan.FromMilliseconds(100)' TimeSpan.FromMilliseconds(110))) " is 121.
Long Statement,Hangfire.Redis.Tests.Utils,StaticFakeJobs,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\Utils\StaticFakeJobs.cs,Work,The length of the statement  "            var jobResult = String.Format("{0} - {1} Job done after waiting {2} ms"' DateTime.Now.ToString("hh:mm:ss fff")' identifier' waitTime); " is 134.
Magic Number,Hangfire.Redis.Tests,DeletedStateHandlerFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\DeletedStateHandlerFacts.cs,Apply_ShouldInsertTheJob_ToTheBeginningOfTheSucceededList_AndTrimIt,The following statement contains a magic number: _transaction.Verify(x => x.TrimList(                  "deleted"' 0' 499));
Magic Number,Hangfire.Redis.Tests,RedisConnectionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisConnectionFacts.cs,GetAllItemsFromSet_ReturnsAllItems,The following statement contains a magic number: UseConnections((redis' connection) =>              {                  // Arrange                  redis.SortedSetAdd("{hangfire}:some-set"' "1"' 0);  				redis.SortedSetAdd("{hangfire}:some-set"' "2"' 0);                    // Act                  var result = connection.GetAllItemsFromSet("some-set");                    // Assert                  Assert.Equal(2' result.Count);                  Assert.Contains("1"' result);                  Assert.Contains("2"' result);              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,AcquireFromMultipleThreads,The following statement contains a magic number: var thread1 = new Thread(state =>              {                  using (var testLock1 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                  {                      // ensure nested lock release doesn't release parent lock                      using (var testLock2 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                      { }                        sync.Set();                      Thread.Sleep(200);                  }              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,AcquireFromMultipleThreads,The following statement contains a magic number: var thread1 = new Thread(state =>              {                  using (var testLock1 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                  {                      // ensure nested lock release doesn't release parent lock                      using (var testLock2 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                      { }                        sync.Set();                      Thread.Sleep(200);                  }              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,AcquireFromMultipleThreads,The following statement contains a magic number: var thread1 = new Thread(state =>              {                  using (var testLock1 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                  {                      // ensure nested lock release doesn't release parent lock                      using (var testLock2 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                      { }                        sync.Set();                      Thread.Sleep(200);                  }              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,AcquireFromMultipleThreads,The following statement contains a magic number: var thread2 = new Thread(state =>              {                  Assert.True(sync.Wait(1000));                    Assert.Throws<DistributedLockTimeoutException>(() =>                  {                      using (var testLock2 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                      { }                  });              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,AcquireFromMultipleThreads,The following statement contains a magic number: var thread2 = new Thread(state =>              {                  Assert.True(sync.Wait(1000));                    Assert.Throws<DistributedLockTimeoutException>(() =>                  {                      using (var testLock2 = RedisLock.Acquire(db' "test"' TimeSpan.FromMilliseconds(50)))                      { }                  });              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,AcquireFromNestedTask,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,SlidingExpirationTest,The following statement contains a magic number: var thread1 = new Thread(state =>              {                  using (var testLock1 = RedisLock.Acquire(db' "testLock"' TimeSpan.FromMilliseconds(100)' TimeSpan.FromMilliseconds(110)))                  {                      Assert.NotNull(testLock1);                        // sleep a bit more than holdDuration                      Thread.Sleep(250);                      sync1.Set();                      sync2.Wait();                  }              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,SlidingExpirationTest,The following statement contains a magic number: var thread1 = new Thread(state =>              {                  using (var testLock1 = RedisLock.Acquire(db' "testLock"' TimeSpan.FromMilliseconds(100)' TimeSpan.FromMilliseconds(110)))                  {                      Assert.NotNull(testLock1);                        // sleep a bit more than holdDuration                      Thread.Sleep(250);                      sync1.Set();                      sync2.Wait();                  }              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,SlidingExpirationTest,The following statement contains a magic number: var thread1 = new Thread(state =>              {                  using (var testLock1 = RedisLock.Acquire(db' "testLock"' TimeSpan.FromMilliseconds(100)' TimeSpan.FromMilliseconds(110)))                  {                      Assert.NotNull(testLock1);                        // sleep a bit more than holdDuration                      Thread.Sleep(250);                      sync1.Set();                      sync2.Wait();                  }              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,SlidingExpirationTest,The following statement contains a magic number: var thread2 = new Thread(state =>              {                  Assert.True(sync1.Wait(1000));                    Assert.Throws<DistributedLockTimeoutException>(() =>                  {                      using (var testLock2 = RedisLock.Acquire(db' "testLock"' TimeSpan.FromMilliseconds(100)))                      { }                  });              });
Magic Number,Hangfire.Redis.Tests,RedisLockFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisLockFacts.cs,SlidingExpirationTest,The following statement contains a magic number: var thread2 = new Thread(state =>              {                  Assert.True(sync1.Wait(1000));                    Assert.Throws<DistributedLockTimeoutException>(() =>                  {                      using (var testLock2 = RedisLock.Acquire(db' "testLock"' TimeSpan.FromMilliseconds(100)))                      { }                  });              });
Magic Number,Hangfire.Redis.Tests,RedisStorageFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisStorageFacts.cs,DbFromConnectionStringIsUsed,The following statement contains a magic number: Assert.Equal(5' storage.Db);
Magic Number,Hangfire.Redis.Tests,RedisStorageOptionsFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisStorageOptionsFacts.cs,InvisibilityTimeout_HasDefaultValue,The following statement contains a magic number: Assert.Equal(TimeSpan.FromMinutes(30)' options.InvisibilityTimeout);
Magic Number,Hangfire.Redis.Tests,RedisSubscriptionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisSubscriptionFacts.cs,WaitForJob_WaitForTheTimeout,The following statement contains a magic number: var timeout = TimeSpan.FromMilliseconds(100);
Magic Number,Hangfire.Redis.Tests,RedisSubscriptionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisSubscriptionFacts.cs,WaitForJob_WaitForTheTimeout,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 99' 120);
Magic Number,Hangfire.Redis.Tests,RedisSubscriptionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisSubscriptionFacts.cs,WaitForJob_WaitForTheTimeout,The following statement contains a magic number: Assert.InRange(sw.ElapsedMilliseconds' 99' 120);
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,ExpireJob_SetsExpirationDateForAllRelatedKeys,The following statement contains a magic number: UseConnection(redis =>  			{  				// Arrange  				redis.StringSet("{hangfire}:job:my-job"' "job");  				redis.StringSet("{hangfire}:job:my-job:state"' "state");  				redis.StringSet("{hangfire}:job:my-job:history"' "history");    				// Act  				Commit(redis' x => x.ExpireJob("my-job"' TimeSpan.FromDays(1)));    				// Assert  				var jobEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job");  				var stateEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");  				var historyEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");    				Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,ExpireJob_SetsExpirationDateForAllRelatedKeys,The following statement contains a magic number: UseConnection(redis =>  			{  				// Arrange  				redis.StringSet("{hangfire}:job:my-job"' "job");  				redis.StringSet("{hangfire}:job:my-job:state"' "state");  				redis.StringSet("{hangfire}:job:my-job:history"' "history");    				// Act  				Commit(redis' x => x.ExpireJob("my-job"' TimeSpan.FromDays(1)));    				// Assert  				var jobEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job");  				var stateEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");  				var historyEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");    				Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,ExpireJob_SetsExpirationDateForAllRelatedKeys,The following statement contains a magic number: UseConnection(redis =>  			{  				// Arrange  				redis.StringSet("{hangfire}:job:my-job"' "job");  				redis.StringSet("{hangfire}:job:my-job:state"' "state");  				redis.StringSet("{hangfire}:job:my-job:history"' "history");    				// Act  				Commit(redis' x => x.ExpireJob("my-job"' TimeSpan.FromDays(1)));    				// Assert  				var jobEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job");  				var stateEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");  				var historyEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");    				Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,ExpireJob_SetsExpirationDateForAllRelatedKeys,The following statement contains a magic number: UseConnection(redis =>  			{  				// Arrange  				redis.StringSet("{hangfire}:job:my-job"' "job");  				redis.StringSet("{hangfire}:job:my-job:state"' "state");  				redis.StringSet("{hangfire}:job:my-job:history"' "history");    				// Act  				Commit(redis' x => x.ExpireJob("my-job"' TimeSpan.FromDays(1)));    				// Assert  				var jobEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job");  				var stateEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");  				var historyEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");    				Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,ExpireJob_SetsExpirationDateForAllRelatedKeys,The following statement contains a magic number: UseConnection(redis =>  			{  				// Arrange  				redis.StringSet("{hangfire}:job:my-job"' "job");  				redis.StringSet("{hangfire}:job:my-job:state"' "state");  				redis.StringSet("{hangfire}:job:my-job:history"' "history");    				// Act  				Commit(redis' x => x.ExpireJob("my-job"' TimeSpan.FromDays(1)));    				// Assert  				var jobEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job");  				var stateEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");  				var historyEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");    				Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,ExpireJob_SetsExpirationDateForAllRelatedKeys,The following statement contains a magic number: UseConnection(redis =>  			{  				// Arrange  				redis.StringSet("{hangfire}:job:my-job"' "job");  				redis.StringSet("{hangfire}:job:my-job:state"' "state");  				redis.StringSet("{hangfire}:job:my-job:history"' "history");    				// Act  				Commit(redis' x => x.ExpireJob("my-job"' TimeSpan.FromDays(1)));    				// Assert  				var jobEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job");  				var stateEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");  				var historyEntryTtl = redis.KeyTimeToLive("{hangfire}:job:my-job:state");    				Assert.True(TimeSpan.FromHours(23) < jobEntryTtl && jobEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < stateEntryTtl && stateEntryTtl < TimeSpan.FromHours(25));  				Assert.True(TimeSpan.FromHours(23) < historyEntryTtl && historyEntryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate,The following statement contains a magic number: UseConnection(redis =>  			{  				redis.StringSet("{hangfire}:entry"' "3");    				Commit(redis' x => x.IncrementCounter("entry"' TimeSpan.FromDays(1)));    				var entryTtl = redis.KeyTimeToLive("{hangfire}:entry").Value;  				Assert.Equal("4"' (string)redis.StringGet("{hangfire}:entry"));  				Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,IncrementCounter_WithExpiry_IncrementsValueAndSetsExpirationDate,The following statement contains a magic number: UseConnection(redis =>  			{  				redis.StringSet("{hangfire}:entry"' "3");    				Commit(redis' x => x.IncrementCounter("entry"' TimeSpan.FromDays(1)));    				var entryTtl = redis.KeyTimeToLive("{hangfire}:entry").Value;  				Assert.Equal("4"' (string)redis.StringGet("{hangfire}:entry"));  				Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));  			});
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate,The following statement contains a magic number: UseConnection(redis =>              {                  redis.StringSet("{hangfire}:entry"' "3");  				Commit(redis' x => x.DecrementCounter("entry"' TimeSpan.FromDays(1)));  				var b = redis.KeyTimeToLive("{hangfire}:entry");                  var entryTtl = redis.KeyTimeToLive("{hangfire}:entry").Value;                  Assert.Equal("2"' (string)redis.StringGet("{hangfire}:entry"));                  Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));              });
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,DecrementCounter_WithExpiry_DecrementsTheValueAndSetsExpirationDate,The following statement contains a magic number: UseConnection(redis =>              {                  redis.StringSet("{hangfire}:entry"' "3");  				Commit(redis' x => x.DecrementCounter("entry"' TimeSpan.FromDays(1)));  				var b = redis.KeyTimeToLive("{hangfire}:entry");                  var entryTtl = redis.KeyTimeToLive("{hangfire}:entry").Value;                  Assert.Equal("2"' (string)redis.StringGet("{hangfire}:entry"));                  Assert.True(TimeSpan.FromHours(23) < entryTtl && entryTtl < TimeSpan.FromHours(25));              });
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsItemToSortedSetWithScore,The following statement contains a magic number: UseConnection(redis =>              {                  Commit(redis' x => x.AddToSet("my-set"' "my-value"' 3.2));    				Assert.True(redis.SortedSetRank("{hangfire}:my-set"' "my-value").HasValue);                  Assert.Equal(3.2' redis.SortedSetScore("{hangfire}:my-set"' "my-value").Value' 3);  					              });
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsItemToSortedSetWithScore,The following statement contains a magic number: UseConnection(redis =>              {                  Commit(redis' x => x.AddToSet("my-set"' "my-value"' 3.2));    				Assert.True(redis.SortedSetRank("{hangfire}:my-set"' "my-value").HasValue);                  Assert.Equal(3.2' redis.SortedSetScore("{hangfire}:my-set"' "my-value").Value' 3);  					              });
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,AddToSet_WithScore_AddsItemToSortedSetWithScore,The following statement contains a magic number: UseConnection(redis =>              {                  Commit(redis' x => x.AddToSet("my-set"' "my-value"' 3.2));    				Assert.True(redis.SortedSetRank("{hangfire}:my-set"' "my-value").HasValue);                  Assert.Equal(3.2' redis.SortedSetScore("{hangfire}:my-set"' "my-value").Value' 3);  					              });
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,TrimList_TrimsListToASpecifiedRange,The following statement contains a magic number: UseConnection(redis =>              {                  redis.ListRightPush("{hangfire}:list"' "1");  				redis.ListRightPush("{hangfire}:list"' "2");  				redis.ListRightPush("{hangfire}:list"' "3");  				redis.ListRightPush("{hangfire}:list"' "4");                    Commit(redis' x => x.TrimList("list"' 1' 2));                    Assert.Equal(2' redis.ListLength("{hangfire}:list"));                  Assert.Equal("2"' (string)redis.ListGetByIndex("{hangfire}:list"' 0));  				Assert.Equal("3"' (string)redis.ListGetByIndex("{hangfire}:list"' 1));              });
Magic Number,Hangfire.Redis.Tests,RedisWriteOnlyTransactionFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\RedisWriteOnlyTransactionFacts.cs,TrimList_TrimsListToASpecifiedRange,The following statement contains a magic number: UseConnection(redis =>              {                  redis.ListRightPush("{hangfire}:list"' "1");  				redis.ListRightPush("{hangfire}:list"' "2");  				redis.ListRightPush("{hangfire}:list"' "3");  				redis.ListRightPush("{hangfire}:list"' "4");                    Commit(redis' x => x.TrimList("list"' 1' 2));                    Assert.Equal(2' redis.ListLength("{hangfire}:list"));                  Assert.Equal("2"' (string)redis.ListGetByIndex("{hangfire}:list"' 0));  				Assert.Equal("3"' (string)redis.ListGetByIndex("{hangfire}:list"' 1));              });
Magic Number,Hangfire.Redis.Tests,SucceededStateHandlerFacts,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\SucceededStateHandlerFacts.cs,Apply_ShouldInsertTheJob_ToTheBeginningOfTheSucceededList_AndTrimIt,The following statement contains a magic number: _transaction.Verify(x => x.TrimList(                  "succeeded"' 0' 499));
Magic Number,Hangfire.Redis.Tests,RedisUtils,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\Utils\RedisUtils.cs,RedisUtils,The following statement contains a magic number: connection = new Lazy<ConnectionMultiplexer>(() =>  				{                      ConfigurationOptions options = new ConfigurationOptions                      {                          AllowAdmin = true'                          SyncTimeout = 5000'                          ConnectRetry = 5                      };                      options.EndPoints.Add(GetHostAndPort());                      return ConnectionMultiplexer.Connect(options);  				}  			);
Magic Number,Hangfire.Redis.Tests,RedisUtils,D:\research\architectureSmells\repos\marcoCasamento_Hangfire.Redis.StackExchange\Hangfire.Redis.Tests\Utils\RedisUtils.cs,RedisUtils,The following statement contains a magic number: connection = new Lazy<ConnectionMultiplexer>(() =>  				{                      ConfigurationOptions options = new ConfigurationOptions                      {                          AllowAdmin = true'                          SyncTimeout = 5000'                          ConnectRetry = 5                      };                      options.EndPoints.Add(GetHostAndPort());                      return ConnectionMultiplexer.Connect(options);  				}  			);
