Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,PinAndCopyMemory,The method has 5 parameters. Parameters: src' srcIndex' dest' destIndex' len
Long Parameter List,NNanomsg,NN,C:\repos\mhowlett_NNanomsg\NNanomsg\NN.cs,Poll,The method has 5 parameters. Parameters: s' ct' result' info' timeout
Long Statement,NNanomsg,NanomsgLibraryLoader,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,LoadWindowsLibrary,The length of the statement  "            throw new Exception("LoadLibrary failed: unable to locate library " + libFile + ". Searched: " + paths.Aggregate((a' b) => a + "; " + b)); " is 138.
Long Statement,NNanomsg,NanomsgLibraryLoader,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,LoadPosixLibrary,The length of the statement  "            throw new Exception("dlopen failed: unable to locate library " + libFile + ". Searched: " + paths.Aggregate((a' b) => a + "; " + b)); " is 133.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            // When running under mono and the native nanomsg libraries are in a non-standard location (e.g. are placed in application_dir/x86|x64)'  " is 136.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            // TODO: The performance impact of this over conventional P/Invoke is evidently not good - there is about a 50% increase in overhead. " is 133.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_socket = (nn_socket_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_socket")' typeof(nn_socket_delegate)); " is 132.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_connect = (nn_connect_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_connect")' typeof(nn_connect_delegate)); " is 136.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_bind = (nn_bind_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_bind")' typeof(nn_bind_delegate)); " is 124.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_send = (nn_send_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_send")' typeof(nn_send_delegate)); " is 124.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_recv = (nn_recv_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_recv")' typeof(nn_recv_delegate)); " is 124.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_recv_array = (nn_recv_array_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_recv")' typeof(nn_recv_array_delegate)); " is 142.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_errno = (nn_errno_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_errno")' typeof(nn_errno_delegate)); " is 128.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_close = (nn_close_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_close")' typeof(nn_close_delegate)); " is 128.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_shutdown = (nn_shutdown_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_shutdown")' typeof(nn_shutdown_delegate)); " is 140.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_strerror = (nn_strerror_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_strerror")' typeof(nn_strerror_delegate)); " is 140.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_device = (nn_device_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_device")' typeof(nn_device_delegate)); " is 132.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_term = (nn_term_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_term")' typeof(nn_term_delegate)); " is 124.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_setsockopt = (nn_setsockopt_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_setsockopt")' typeof(nn_setsockopt_delegate)); " is 148.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_getsockopt = (nn_getsockopt_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_getsockopt")' typeof(nn_getsockopt_delegate)); " is 148.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_getsockopt_intptr = (nn_getsockopt_intptr_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_getsockopt")' typeof(nn_getsockopt_intptr_delegate)); " is 169.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_getsockopt_string = (nn_getsockopt_string_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_getsockopt")' typeof(nn_getsockopt_string_delegate)); " is 169.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_allocmsg = (nn_allocmsg_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_allocmsg")' typeof(nn_allocmsg_delegate)); " is 140.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_freemsg = (nn_freemsg_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_freemsg")' typeof(nn_freemsg_delegate)); " is 136.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_sendmsg = (nn_sendmsg_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_sendmsg")' typeof(nn_sendmsg_delegate)); " is 136.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_recvmsg = (nn_recvmsg_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_recvmsg")' typeof(nn_recvmsg_delegate)); " is 136.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_symbol = (nn_symbol_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_symbol")' typeof(nn_symbol_delegate)); " is 132.
Long Statement,NNanomsg,Interop,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,InitializeDelegates,The length of the statement  "            nn_poll = (nn_poll_delegate)Marshal.GetDelegateForFunctionPointer(lookup(nanomsgAddr' "nn_poll")' typeof(nn_poll_delegate)); " is 124.
Long Statement,NNanomsg,NanomsgSocketBase,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgSocketBase.cs,Dispose,The length of the statement  "                                    string errorText = string.Format("nn_close was repeatedly interrupted for socket {0}' which has not been successfully closed and may be leaked"' socket); " is 153.
Long Statement,NNanomsg,NanomsgListener,C:\repos\mhowlett_NNanomsg\NNanomsg\Listener.cs,Listen,The length of the statement  "                Thread.Sleep(TimeSpan.FromSeconds(1)); // This shouldn't ever happen' but when it does (!)' this prevents a screen full of text. " is 128.
Magic Number,NNanomsg,NanomsgLibraryLoader,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,NanomsgLibraryLoader,The following statement contains a magic number: if (Environment.OSVersion.Platform.ToString().Contains("Win32"))              {                  CustomLoadLibrary = LoadWindowsLibrary;              }              else if (Environment.OSVersion.Platform == PlatformID.Unix ||                       Environment.OSVersion.Platform == PlatformID.MacOSX ||                       (int)Environment.OSVersion.Platform == 128)              {                  CustomLoadLibrary = LoadPosixLibrary;              }
Magic Number,NNanomsg,NanomsgLibraryLoader,C:\repos\mhowlett_NNanomsg\NNanomsg\Interop.cs,LoadPosixLibrary,The following statement contains a magic number: const int RTLD_NOW = 2;
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length >= 16)              {                  do                   {                        *(long*)dest = *(long*) src;                      *(long*)(dest + 8) = *(long*)(src + 8);                      dest += 16;                      src += 16;                  }                  while ((length -= 16) >= 16);              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,MemoryUtils,C:\repos\mhowlett_NNanomsg\NNanomsg\MemoryUtils.cs,CopyMemory,The following statement contains a magic number: if (length > 0)              {                  if ((length & 8) != 0)                  {                      *(long*)dest = *(long*)src;                      dest += 8;                      src += 8;                  }                  if ((length & 4) != 0)                  {                      *(int*)dest = *(int*)src;                      dest += 4;                      src += 4;                  }                  if ((length & 2) != 0)                  {                      *(short*)dest = *(short*)src;                      dest += 2;                      src += 2;                  }                  if ((length & 1) != 0)                  {                      byte* finalByte = dest;                      dest = finalByte + 1;                      byte* finalByteSrc = src;                      src = finalByteSrc + 1;                      *finalByte = *finalByteSrc;                  }              }
Magic Number,NNanomsg,NanomsgSocketBase,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgSocketBase.cs,Shutdown,The following statement contains a magic number: const int ValidShutdownResult = 0' MaxShutdownAttemptCount = 5;
Magic Number,NNanomsg,NanomsgSocketBase,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgSocketBase.cs,Dispose,The following statement contains a magic number: const int ValidCloseResult = 0' MaxCloseAttemptCount = 5;
Magic Number,NNanomsg,NanomsgReadStream,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgReadStream.cs,ReadInt32,The following statement contains a magic number: if (_position > _length - 4)                  return null;
Magic Number,NNanomsg,NanomsgReadStream,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgReadStream.cs,ReadInt32,The following statement contains a magic number: _position += 4;
Magic Number,NNanomsg,NanomsgReadStream,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgReadStream.cs,ReadInt64,The following statement contains a magic number: if (_position > _length - 8)                  return null;
Magic Number,NNanomsg,NanomsgReadStream,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgReadStream.cs,ReadInt64,The following statement contains a magic number: _position += 8;
Magic Number,NNanomsg,NanomsgListener,C:\repos\mhowlett_NNanomsg\NNanomsg\Listener.cs,AddSocket,The following statement contains a magic number: if (_ct >= cap)              {                  var new_cap = cap * 2;                  var new_sockets = new int[new_cap];                  var new_results = new int[new_cap];                  var new_pollfds = new nn_pollfd[new_cap];                  Array.Copy(_sockets' new_sockets' _ct);                  Array.Copy(_results' new_results' _ct);                  Array.Copy(_pollfds' new_pollfds' _ct);                  _sockets = new_sockets;                  _results = new_results;                  _pollfds = new_pollfds;              }
Missing Default,NNanomsg,NanomsgReadStream,C:\repos\mhowlett_NNanomsg\NNanomsg\NanomsgReadStream.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      _position = offset;                      break;                  case SeekOrigin.Current:                      _position += offset;                      break;                  case SeekOrigin.End:                      _position = _length + offset;                      break;              }
