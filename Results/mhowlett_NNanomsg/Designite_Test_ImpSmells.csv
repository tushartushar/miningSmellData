Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,Execute,The length of the statement  "                    consoleWriter.AppendFormat("{0} {1'4:D} {2} {3}\r\n"' DateTime.Now.ToString("G")' (h * args.Length) + i' isValid' message); " is 123.
Empty Catch Block,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The method has an empty catch block.
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,RunDevice,The following statement contains a magic number: deviceThread.Join(TimeSpan.FromMilliseconds(40));
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,RunWorker,The following statement contains a magic number: var serverThread = new Thread(() =>              {                    var nanoSock = new NanomsgSocket(Domain.SP' Protocol.REP);                    var nanoListener = new NanomsgListener();                  nanoListener.ReceivedMessage += (socketId) =>                  {                        string input;                        using (NanomsgReadStream inStream = nanoSock.ReceiveStream())                      using (var unpacker = Unpacker.Create(inStream))                      {                          if (!unpacker.ReadString(out input))                              throw new Exception("REQ invalid");                          Console.WriteLine(input);                      }                        using (NanomsgWriteStream outStream = nanoSock.CreateSendStream())                      using (var packer = Packer.Create(outStream))                      {                          packer.PackString("Hello " + input);                          nanoSock.SendStream(outStream);                      }                  };                    nanoListener.AddSocket(nanoSock);                  nanoSock.Connect("tcp://127.0.0.1:" + repPort);                    while (!cancellor.IsCancellationRequested)                  {                      nanoListener.Listen(TimeSpan.FromMilliseconds(250));                  }                    nanoListener.RemoveSocket(nanoSock);                  nanoSock.Dispose();              });
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,RunWorker,The following statement contains a magic number: serverThread.Join(TimeSpan.FromMilliseconds(40));
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,Request,The following statement contains a magic number: listener.Listen(TimeSpan.FromMilliseconds(250));
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,Request,The following statement contains a magic number: !messageReceived && start + TimeSpan.FromSeconds(30) > DateTime.Now
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,Execute,The following statement contains a magic number: i < 4
Magic Number,Test,Test_MsgPack,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_MsgPack.cs,Execute,The following statement contains a magic number: Parallel.For(0' 100' h =>              {                  StringBuilder consoleWriter = new StringBuilder();                  var random = new Random();                    for (var i = 0; i < args.Length; i++)                  {                        var rnd = random.Next();                      var arg = args[i] + " " + rnd;                      // The NanoREQ                      var message = Request(arg);                      bool isValid = message == ("Hello " + arg);                      consoleWriter.AppendFormat("{0} {1'4:D} {2} {3}\r\n"' DateTime.Now.ToString("G")' (h * args.Length) + i' isValid' message);                    }                  Console.Write(consoleWriter.ToString());              });
Magic Number,Test,Test_WriteStream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WriteStream.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              using (var writeStream = req.CreateSendStream())                              {                                  writeStream.Write(_clientData' 0' _clientData.Length);                                  var result = req.SendStreamImmediate(writeStream);                                  Trace.Assert(result);                              }                                                            int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("WriteStream-Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_WriteStream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WriteStream.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              using (var writeStream = req.CreateSendStream())                              {                                  writeStream.Write(_clientData' 0' _clientData.Length);                                  var result = req.SendStreamImmediate(writeStream);                                  Trace.Assert(result);                              }                                                            int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("WriteStream-Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_WriteStream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WriteStream.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              using (var writeStream = req.CreateSendStream())                              {                                  writeStream.Write(_clientData' 0' _clientData.Length);                                  var result = req.SendStreamImmediate(writeStream);                                  Trace.Assert(result);                              }                                                            int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("WriteStream-Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_WriteStream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WriteStream.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              using (var writeStream = req.CreateSendStream())                              {                                  writeStream.Write(_clientData' 0' _clientData.Length);                                  var result = req.SendStreamImmediate(writeStream);                                  Trace.Assert(result);                              }                                                            int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("WriteStream-Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_WriteStream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WriteStream.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              using (var writeStream = req.CreateSendStream())                              {                                  writeStream.Write(_clientData' 0' _clientData.Length);                                  var result = req.SendStreamImmediate(writeStream);                                  Trace.Assert(result);                              }                                                            int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("WriteStream-Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PushPull,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PushPull.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PushSocket();                      req.Connect(InprocAddress);                        var revreq = new PullSocket();                      revreq.Bind(InprocAddressReverse);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = revreq.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("PushPull Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PushPull,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PushPull.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PushSocket();                      req.Connect(InprocAddress);                        var revreq = new PullSocket();                      revreq.Bind(InprocAddressReverse);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = revreq.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("PushPull Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PushPull,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PushPull.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PushSocket();                      req.Connect(InprocAddress);                        var revreq = new PullSocket();                      revreq.Bind(InprocAddressReverse);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = revreq.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("PushPull Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PushPull,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PushPull.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PushSocket();                      req.Connect(InprocAddress);                        var revreq = new PullSocket();                      revreq.Bind(InprocAddressReverse);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = revreq.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("PushPull Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PushPull,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PushPull.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PushSocket();                      req.Connect(InprocAddress);                        var revreq = new PullSocket();                      revreq.Bind(InprocAddressReverse);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = revreq.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("PushPull Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_GetSetOptions,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_GetSetOptions.cs,Execute,The following statement contains a magic number: var rc = NN.SetSockOpt(s' SocketOption.RCVTIMEO' 5000);
Magic Number,Test,Test_Listener,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Listener.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () => {                      var req1 = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req1' unusedAddress);                      var req = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req' inprocAddress);                      Thread.Sleep(TimeSpan.FromSeconds(3));                      NN.Send(req' BitConverter.GetBytes((int)42)' SendRecvFlags.NONE);                      NN.Recv(req' out buffer1' SendRecvFlags.NONE);                      Debug.Assert(BitConverter.ToInt32(buffer1' 0) == 77);                      Console.WriteLine("Response: " + BitConverter.ToInt32(buffer1' 0));                  });
Magic Number,Test,Test_Listener,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Listener.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () => {                      var req1 = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req1' unusedAddress);                      var req = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req' inprocAddress);                      Thread.Sleep(TimeSpan.FromSeconds(3));                      NN.Send(req' BitConverter.GetBytes((int)42)' SendRecvFlags.NONE);                      NN.Recv(req' out buffer1' SendRecvFlags.NONE);                      Debug.Assert(BitConverter.ToInt32(buffer1' 0) == 77);                      Console.WriteLine("Response: " + BitConverter.ToInt32(buffer1' 0));                  });
Magic Number,Test,Test_Listener,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Listener.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () => {                      var req1 = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req1' unusedAddress);                      var req = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req' inprocAddress);                      Thread.Sleep(TimeSpan.FromSeconds(3));                      NN.Send(req' BitConverter.GetBytes((int)42)' SendRecvFlags.NONE);                      NN.Recv(req' out buffer1' SendRecvFlags.NONE);                      Debug.Assert(BitConverter.ToInt32(buffer1' 0) == 77);                      Console.WriteLine("Response: " + BitConverter.ToInt32(buffer1' 0));                  });
Magic Number,Test,Test_Listener,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Listener.cs,Execute,The following statement contains a magic number: listener.ReceivedMessage += delegate(int s)                  {                      NN.Recv(s' out buffer2' SendRecvFlags.NONE);                      Console.WriteLine("Message: " + BitConverter.ToInt32(buffer2' 0));                      NN.Send(s' BitConverter.GetBytes((int)77)' SendRecvFlags.NONE);                  };
Magic Number,Test,Test_Listener,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Listener.cs,Execute,The following statement contains a magic number: listener.Listen(TimeSpan.FromMinutes(30));
Magic Number,Test,Test_Pair,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Pair.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_Pair,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Pair.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_Pair,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Pair.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_Pair,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Pair.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_Pair,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Pair.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new PairSocket();                      req.Connect(InprocAddress);                                            byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Pair Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var subscriber = new SubscribeSocket();                      subscriber.Connect(InprocAddress);                      subscriber.Subscribe("TestMessage");                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              int read = 0;                              streamOutput = subscriber.Receive();                              read = streamOutput.Length;                              //using (var stream = subscriber.ReceiveStream())                              //    while (stream.Length != stream.Position)                              //    {                              //        read += stream.Read(streamOutput' 0' streamOutput.Length);                              //        var message = Encoding.ASCII.GetString(streamOutput' 0' read);                              //        Trace.Assert(message.StartsWith("TestMessage"));                              //                                      //        break;                              //    }                                ++receiveCount;                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var subscriber = new SubscribeSocket();                      subscriber.Connect(InprocAddress);                      subscriber.Subscribe("TestMessage");                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              int read = 0;                              streamOutput = subscriber.Receive();                              read = streamOutput.Length;                              //using (var stream = subscriber.ReceiveStream())                              //    while (stream.Length != stream.Position)                              //    {                              //        read += stream.Read(streamOutput' 0' streamOutput.Length);                              //        var message = Encoding.ASCII.GetString(streamOutput' 0' read);                              //        Trace.Assert(message.StartsWith("TestMessage"));                              //                                      //        break;                              //    }                                ++receiveCount;                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var subscriber = new SubscribeSocket();                      subscriber.Connect(InprocAddress);                      subscriber.Subscribe("TestMessage");                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              int read = 0;                              streamOutput = subscriber.Receive();                              read = streamOutput.Length;                              //using (var stream = subscriber.ReceiveStream())                              //    while (stream.Length != stream.Position)                              //    {                              //        read += stream.Read(streamOutput' 0' streamOutput.Length);                              //        var message = Encoding.ASCII.GetString(streamOutput' 0' read);                              //        Trace.Assert(message.StartsWith("TestMessage"));                              //                                      //        break;                              //    }                                ++receiveCount;                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var subscriber = new SubscribeSocket();                      subscriber.Connect(InprocAddress);                      subscriber.Subscribe("TestMessage");                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              int read = 0;                              streamOutput = subscriber.Receive();                              read = streamOutput.Length;                              //using (var stream = subscriber.ReceiveStream())                              //    while (stream.Length != stream.Position)                              //    {                              //        read += stream.Read(streamOutput' 0' streamOutput.Length);                              //        var message = Encoding.ASCII.GetString(streamOutput' 0' read);                              //        Trace.Assert(message.StartsWith("TestMessage"));                              //                                      //        break;                              //    }                                ++receiveCount;                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var subscriber = new SubscribeSocket();                      subscriber.Connect(InprocAddress);                      subscriber.Subscribe("TestMessage");                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              int read = 0;                              streamOutput = subscriber.Receive();                              read = streamOutput.Length;                              //using (var stream = subscriber.ReceiveStream())                              //    while (stream.Length != stream.Position)                              //    {                              //        read += stream.Read(streamOutput' 0' streamOutput.Length);                              //        var message = Encoding.ASCII.GetString(streamOutput' 0' read);                              //        Trace.Assert(message.StartsWith("TestMessage"));                              //                                      //        break;                              //    }                                ++receiveCount;                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: var text = "TestMessage" + new string('q'' 10);
Magic Number,Test,Test_PubSub,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_PubSub.cs,Execute,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Test,Test_ReqRep,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_ReqRep.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () => {                      var req = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req' inprocAddress);                      NN.Send(req' BitConverter.GetBytes((int) 42)' SendRecvFlags.NONE);                      NN.Recv(req' out buffer1' SendRecvFlags.NONE);                      Debug.Assert(BitConverter.ToInt32(buffer1' 0) == 77);                  });
Magic Number,Test,Test_ReqRep,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_ReqRep.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () => {                      var req = NN.Socket(Domain.SP' Protocol.REQ);                      NN.Connect(req' inprocAddress);                      NN.Send(req' BitConverter.GetBytes((int) 42)' SendRecvFlags.NONE);                      NN.Recv(req' out buffer1' SendRecvFlags.NONE);                      Debug.Assert(BitConverter.ToInt32(buffer1' 0) == 77);                  });
Magic Number,Test,Test_ReqRep,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_ReqRep.cs,Execute,The following statement contains a magic number: Debug.Assert(BitConverter.ToInt32(buffer2' 0) == 42);
Magic Number,Test,Test_ReqRep,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_ReqRep.cs,Execute,The following statement contains a magic number: NN.Send(rep' BitConverter.GetBytes((int) 77)' SendRecvFlags.NONE);
Magic Number,Test,Test_SocketObject,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_SocketObject.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new NanomsgSocket(Domain.SP' Protocol.REQ);                      req.Connect(InprocAddress);                      //req.Options.TcpNoDelay = true;                        /*unsafe                      {                          byte* s1 = (byte*)Interop.nn_allocmsg(4' 0)' s2 = (byte*) Interop.nn_allocmsg(4'0);                          *(uint*)s1 = 0x01020304;                          *(uint*)s2 = 0x05060708;                          //byte[] scatter1 = new byte[] { 1' 2' 3' 4 }' scatter2 = new byte[] { 5' 6' 7' 8 };                          //fixed (byte* s1 = scatter1' s2 = scatter2)                          {                              nn_iovec* iovecs = stackalloc nn_iovec[2];                              *iovecs = new nn_iovec() { iov_base = s1' iov_len = 4 };                              *(iovecs + 1) = new nn_iovec() { iov_base = s2' iov_len = 4 };                              nn_msghdr* msghdr = stackalloc nn_msghdr[1];                              *msghdr = new nn_msghdr()                              {                                  msg_control = null'                                  msg_controllen = 0'                                  msg_iov = iovecs'                                  msg_iovlen = 2                              };                                req.SendMessage(msghdr);                          }                          Interop.nn_freemsg((IntPtr)s1);                          Interop.nn_freemsg((IntPtr)s2);                      }*/                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_SocketObject,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_SocketObject.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new NanomsgSocket(Domain.SP' Protocol.REQ);                      req.Connect(InprocAddress);                      //req.Options.TcpNoDelay = true;                        /*unsafe                      {                          byte* s1 = (byte*)Interop.nn_allocmsg(4' 0)' s2 = (byte*) Interop.nn_allocmsg(4'0);                          *(uint*)s1 = 0x01020304;                          *(uint*)s2 = 0x05060708;                          //byte[] scatter1 = new byte[] { 1' 2' 3' 4 }' scatter2 = new byte[] { 5' 6' 7' 8 };                          //fixed (byte* s1 = scatter1' s2 = scatter2)                          {                              nn_iovec* iovecs = stackalloc nn_iovec[2];                              *iovecs = new nn_iovec() { iov_base = s1' iov_len = 4 };                              *(iovecs + 1) = new nn_iovec() { iov_base = s2' iov_len = 4 };                              nn_msghdr* msghdr = stackalloc nn_msghdr[1];                              *msghdr = new nn_msghdr()                              {                                  msg_control = null'                                  msg_controllen = 0'                                  msg_iov = iovecs'                                  msg_iovlen = 2                              };                                req.SendMessage(msghdr);                          }                          Interop.nn_freemsg((IntPtr)s1);                          Interop.nn_freemsg((IntPtr)s2);                      }*/                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_SocketObject,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_SocketObject.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new NanomsgSocket(Domain.SP' Protocol.REQ);                      req.Connect(InprocAddress);                      //req.Options.TcpNoDelay = true;                        /*unsafe                      {                          byte* s1 = (byte*)Interop.nn_allocmsg(4' 0)' s2 = (byte*) Interop.nn_allocmsg(4'0);                          *(uint*)s1 = 0x01020304;                          *(uint*)s2 = 0x05060708;                          //byte[] scatter1 = new byte[] { 1' 2' 3' 4 }' scatter2 = new byte[] { 5' 6' 7' 8 };                          //fixed (byte* s1 = scatter1' s2 = scatter2)                          {                              nn_iovec* iovecs = stackalloc nn_iovec[2];                              *iovecs = new nn_iovec() { iov_base = s1' iov_len = 4 };                              *(iovecs + 1) = new nn_iovec() { iov_base = s2' iov_len = 4 };                              nn_msghdr* msghdr = stackalloc nn_msghdr[1];                              *msghdr = new nn_msghdr()                              {                                  msg_control = null'                                  msg_controllen = 0'                                  msg_iov = iovecs'                                  msg_iovlen = 2                              };                                req.SendMessage(msghdr);                          }                          Interop.nn_freemsg((IntPtr)s1);                          Interop.nn_freemsg((IntPtr)s2);                      }*/                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_SocketObject,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_SocketObject.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new NanomsgSocket(Domain.SP' Protocol.REQ);                      req.Connect(InprocAddress);                      //req.Options.TcpNoDelay = true;                        /*unsafe                      {                          byte* s1 = (byte*)Interop.nn_allocmsg(4' 0)' s2 = (byte*) Interop.nn_allocmsg(4'0);                          *(uint*)s1 = 0x01020304;                          *(uint*)s2 = 0x05060708;                          //byte[] scatter1 = new byte[] { 1' 2' 3' 4 }' scatter2 = new byte[] { 5' 6' 7' 8 };                          //fixed (byte* s1 = scatter1' s2 = scatter2)                          {                              nn_iovec* iovecs = stackalloc nn_iovec[2];                              *iovecs = new nn_iovec() { iov_base = s1' iov_len = 4 };                              *(iovecs + 1) = new nn_iovec() { iov_base = s2' iov_len = 4 };                              nn_msghdr* msghdr = stackalloc nn_msghdr[1];                              *msghdr = new nn_msghdr()                              {                                  msg_control = null'                                  msg_controllen = 0'                                  msg_iov = iovecs'                                  msg_iovlen = 2                              };                                req.SendMessage(msghdr);                          }                          Interop.nn_freemsg((IntPtr)s1);                          Interop.nn_freemsg((IntPtr)s2);                      }*/                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_SocketObject,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_SocketObject.cs,Execute,The following statement contains a magic number: var clientThread = new Thread(                  () =>                  {                      var req = new NanomsgSocket(Domain.SP' Protocol.REQ);                      req.Connect(InprocAddress);                      //req.Options.TcpNoDelay = true;                        /*unsafe                      {                          byte* s1 = (byte*)Interop.nn_allocmsg(4' 0)' s2 = (byte*) Interop.nn_allocmsg(4'0);                          *(uint*)s1 = 0x01020304;                          *(uint*)s2 = 0x05060708;                          //byte[] scatter1 = new byte[] { 1' 2' 3' 4 }' scatter2 = new byte[] { 5' 6' 7' 8 };                          //fixed (byte* s1 = scatter1' s2 = scatter2)                          {                              nn_iovec* iovecs = stackalloc nn_iovec[2];                              *iovecs = new nn_iovec() { iov_base = s1' iov_len = 4 };                              *(iovecs + 1) = new nn_iovec() { iov_base = s2' iov_len = 4 };                              nn_msghdr* msghdr = stackalloc nn_msghdr[1];                              *msghdr = new nn_msghdr()                              {                                  msg_control = null'                                  msg_controllen = 0'                                  msg_iov = iovecs'                                  msg_iovlen = 2                              };                                req.SendMessage(msghdr);                          }                          Interop.nn_freemsg((IntPtr)s1);                          Interop.nn_freemsg((IntPtr)s2);                      }*/                        byte[] streamOutput = new byte[BufferSize];                      while (true)                      {                          var sw = Stopwatch.StartNew();                          for (int i = 0; i < Iter; i++)                          {                              var result = req.SendImmediate(_clientData);                              Trace.Assert(result);                              int read = 0;                              using (var stream = req.ReceiveStream())                                  while (stream.Length != stream.Position)                                      read += stream.Read(streamOutput' 0' streamOutput.Length);                              Trace.Assert(read == _serverData.Length);                          }                          sw.Stop();                          var secondsPerSend = sw.Elapsed.TotalSeconds / (double)Iter;                          Console.WriteLine("Time {0} us' {1} per second' {2} mb/s "'                              (int)(secondsPerSend * 1000d * 1000d)'                              (int)(1d / secondsPerSend)'                              (int)(DataSize * 2d / (1024d * 1024d * secondsPerSend)));                      }                  });
Magic Number,Test,Test_Stream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Stream.cs,Execute,The following statement contains a magic number: var bufferSizes = Enumerable.Range(8'7).Select(i => 1 << i);
Magic Number,Test,Test_Stream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Stream.cs,Execute,The following statement contains a magic number: var bufferSizes = Enumerable.Range(8'7).Select(i => 1 << i);
Magic Number,Test,Test_Stream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Stream.cs,Execute,The following statement contains a magic number: const int IterationCount = 1000;
Magic Number,Test,Test_Stream,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_Stream.cs,Test,The following statement contains a magic number: var duration = Enumerable.Range(1' 3).Select(                  _ =>                  {                      var sw = Stopwatch.StartNew();                      a();                      sw.Stop();                      return sw.Elapsed;                  }).Min();
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Thread.Sleep(1000);                  try                  {                      using (var c = new ServiceProxy())                          while (true)                          {                                var sw = Stopwatch.StartNew();                              for (int i = 0; i < iter; i++)                                  c.Call(_data);                              sw.Stop();                              Console.WriteLine("{0} us' {1}/s' {2} mb/s"'                                  (int)(1000d * sw.Elapsed.TotalMilliseconds / iter)'                                  (int)(iter / sw.Elapsed.TotalSeconds)'                                  (int)(2d * _data.Length * iter / sw.Elapsed.TotalSeconds / 1024d / 1024d));                          }                  }                  catch { }// exit when the serice is gone              });
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Thread.Sleep(1000);                  try                  {                      using (var c = new ServiceProxy())                          while (true)                          {                                var sw = Stopwatch.StartNew();                              for (int i = 0; i < iter; i++)                                  c.Call(_data);                              sw.Stop();                              Console.WriteLine("{0} us' {1}/s' {2} mb/s"'                                  (int)(1000d * sw.Elapsed.TotalMilliseconds / iter)'                                  (int)(iter / sw.Elapsed.TotalSeconds)'                                  (int)(2d * _data.Length * iter / sw.Elapsed.TotalSeconds / 1024d / 1024d));                          }                  }                  catch { }// exit when the serice is gone              });
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Thread.Sleep(1000);                  try                  {                      using (var c = new ServiceProxy())                          while (true)                          {                                var sw = Stopwatch.StartNew();                              for (int i = 0; i < iter; i++)                                  c.Call(_data);                              sw.Stop();                              Console.WriteLine("{0} us' {1}/s' {2} mb/s"'                                  (int)(1000d * sw.Elapsed.TotalMilliseconds / iter)'                                  (int)(iter / sw.Elapsed.TotalSeconds)'                                  (int)(2d * _data.Length * iter / sw.Elapsed.TotalSeconds / 1024d / 1024d));                          }                  }                  catch { }// exit when the serice is gone              });
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Thread.Sleep(1000);                  try                  {                      using (var c = new ServiceProxy())                          while (true)                          {                                var sw = Stopwatch.StartNew();                              for (int i = 0; i < iter; i++)                                  c.Call(_data);                              sw.Stop();                              Console.WriteLine("{0} us' {1}/s' {2} mb/s"'                                  (int)(1000d * sw.Elapsed.TotalMilliseconds / iter)'                                  (int)(iter / sw.Elapsed.TotalSeconds)'                                  (int)(2d * _data.Length * iter / sw.Elapsed.TotalSeconds / 1024d / 1024d));                          }                  }                  catch { }// exit when the serice is gone              });
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(_ =>              {                  Thread.Sleep(1000);                  try                  {                      using (var c = new ServiceProxy())                          while (true)                          {                                var sw = Stopwatch.StartNew();                              for (int i = 0; i < iter; i++)                                  c.Call(_data);                              sw.Stop();                              Console.WriteLine("{0} us' {1}/s' {2} mb/s"'                                  (int)(1000d * sw.Elapsed.TotalMilliseconds / iter)'                                  (int)(iter / sw.Elapsed.TotalSeconds)'                                  (int)(2d * _data.Length * iter / sw.Elapsed.TotalSeconds / 1024d / 1024d));                          }                  }                  catch { }// exit when the serice is gone              });
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: Thread.Sleep(10 * 1000);
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,Execute,The following statement contains a magic number: Thread.Sleep(10 * 1000);
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,MakePipeBinding,The following statement contains a magic number: var b = new NetNamedPipeBinding()              {                  MaxReceivedMessageSize = 12800 * 1024'                  Security = new NetNamedPipeSecurity() { Mode = NetNamedPipeSecurityMode.None }              };
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,MakePipeBinding,The following statement contains a magic number: var b = new NetNamedPipeBinding()              {                  MaxReceivedMessageSize = 12800 * 1024'                  Security = new NetNamedPipeSecurity() { Mode = NetNamedPipeSecurityMode.None }              };
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,MakeTcpBinding,The following statement contains a magic number: var b = new NetTcpBinding()              {                  MaxReceivedMessageSize = 12800 * 1024'                  Security = new NetTcpSecurity() { Mode = SecurityMode.None }              };
Magic Number,Test,Test_WCF,D:\research\architectureSmells\repos\mhowlett_NNanomsg\Test\Test_WCF.cs,MakeTcpBinding,The following statement contains a magic number: var b = new NetTcpBinding()              {                  MaxReceivedMessageSize = 12800 * 1024'                  Security = new NetTcpSecurity() { Mode = SecurityMode.None }              };
