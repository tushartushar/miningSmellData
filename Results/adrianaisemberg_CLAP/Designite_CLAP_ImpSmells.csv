Implementation smell,Namespace,Class,File,Method,Description
Long Method,CLAP,DefaultHelpGenerator,C:\repos\adrianaisemberg_CLAP\CLAP\DefaultHelpGenerator.cs,GetHelpString,The method has 118 lines of code.
Long Method,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,RunInternal,The method has 105 lines of code.
Complex Method,CLAP,DefaultHelpGenerator,C:\repos\adrianaisemberg_CLAP\CLAP\DefaultHelpGenerator.cs,GetHelpString,Cyclomatic complexity of the method is 23
Complex Method,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,RunInternal,Cyclomatic complexity of the method is 10
Complex Method,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,SelectMethod,Cyclomatic complexity of the method is 8
Complex Method,CLAP,TypeValidator,C:\repos\adrianaisemberg_CLAP\CLAP\TypeValidator.cs,Validate,Cyclomatic complexity of the method is 11
Complex Method,CLAP,ValuesFactory,C:\repos\adrianaisemberg_CLAP\CLAP\ValuesFactory.cs,CreateParameterValues,Cyclomatic complexity of the method is 9
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The method has 5 parameters. Parameters: args' t1' t2' t3' t4
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The method has 6 parameters. Parameters: args' t1' t2' t3' t4' t5
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The method has 7 parameters. Parameters: args' t1' t2' t3' t4' t5' t6
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The method has 8 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The method has 9 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The method has 10 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8' t9
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The method has 5 parameters. Parameters: args' t1' t2' t3' t4
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The method has 6 parameters. Parameters: args' t1' t2' t3' t4' t5
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The method has 7 parameters. Parameters: args' t1' t2' t3' t4' t5' t6
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The method has 8 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The method has 9 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The method has 10 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8' t9
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,Run,The method has 5 parameters. Parameters: args' t1' t2' t3' t4
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,Run,The method has 6 parameters. Parameters: args' t1' t2' t3' t4' t5
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,Run,The method has 7 parameters. Parameters: args' t1' t2' t3' t4' t5' t6
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,Run,The method has 8 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,Run,The method has 9 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8
Long Parameter List,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,Run,The method has 10 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8' t9
Long Parameter List,CLAP,Parser<T1;T2;T3;T4>,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.cs,Run,The method has 5 parameters. Parameters: args' t1' t2' t3' t4
Long Parameter List,CLAP,Parser<T1;T2;T3;T4;T5>,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.cs,Run,The method has 6 parameters. Parameters: args' t1' t2' t3' t4' t5
Long Parameter List,CLAP,Parser<T1;T2;T3;T4;T5;T6>,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.cs,Run,The method has 7 parameters. Parameters: args' t1' t2' t3' t4' t5' t6
Long Parameter List,CLAP,Parser<T1;T2;T3;T4;T5;T6;T7>,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.cs,Run,The method has 8 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7
Long Parameter List,CLAP,Parser<T1;T2;T3;T4;T5;T6;T7;T8>,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.cs,Run,The method has 9 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8
Long Parameter List,CLAP,Parser<T1;T2;T3;T4;T5;T6;T7;T8;T9>,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.cs,Run,The method has 10 parameters. Parameters: args' t1' t2' t3' t4' t5' t6' t7' t8' t9
Long Parameter List,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,PostInterception,The method has 5 parameters. Parameters: target' method' parameters' preVerbExecutionContext' verbException
Long Parameter List,CLAP,ValuesFactory,C:\repos\adrianaisemberg_CLAP\CLAP\ValuesFactory.cs,ConvertParameterValue,The method has 5 parameters. Parameters: inputKey' stringValue' parameter' parameterType' deserializationException
Long Parameter List,CLAP.Interception,PostVerbExecutionContext,C:\repos\adrianaisemberg_CLAP\CLAP\Interception\PostVerbExecutionContext.cs,PostVerbExecutionContext,The method has 6 parameters. Parameters: method' target' parameters' cancelled' exception' userContext
Long Statement,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunWinForms,The length of the statement  "{ return new Parser<T1' T2' T3' T4' T5' T6' T7' T8' T9>().WinForms().RunTargets(args' t1' t2' t3' t4' t5' t6' t7' t8' t9); }" is 124.
Long Statement,CLAP,Parser,C:\repos\adrianaisemberg_CLAP\CLAP\Parser.WinForms.cs,RunConsole,The length of the statement  "{ return new Parser<T1' T2' T3' T4' T5' T6' T7' T8' T9>().Console().RunTargets(args' t1' t2' t3' t4' t5' t6' t7' t8' t9); }" is 123.
Long Statement,CLAP,EnvironmentParserHandlers,C:\repos\adrianaisemberg_CLAP\CLAP\EnvironmentParserHandlers.cs,WinForms,The length of the statement  "            parser.Register.ErrorHandler(c => MessageBox.Show(c.Exception.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error)); " is 125.
Long Statement,CLAP,MultiParser,C:\repos\adrianaisemberg_CLAP\CLAP\MultiParser.cs,RunTargets,The length of the statement  "            var target = (targetResolver == null || targetResolver.RegisteredTypes.None()) ? null : targetResolver.Resolve(parser.Type); " is 124.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,GetParameters,The length of the statement  "            var paramsToFirstCharDict = parameters.ToDictionary(p => p' p => p.ParameterInfo.Name.ToLowerInvariant()[0].ToString()); " is 120.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,ValidateDefinedErrorHandlers,The length of the statement  "                    "Method '{0}' is marked as [Error] so it should have a single parameter of type CLAP.ExceptionContext".FormatWith(method)); " is 123.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,ValidateDefinedErrorHandlers,The length of the statement  "                        "Method '{0}' is marked as [Error] so it should have a single parameter of type CLAP.ExceptionContext".FormatWith(method)); " is 123.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,ValidateDefinedPreInterceptors,The length of the statement  "                    "Method '{0}' is marked as [PreVerbExecution] so it should have a single parameter of type CLAP.PreVerbExecutionContext".FormatWith(method)); " is 141.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,ValidateDefinedPreInterceptors,The length of the statement  "                        "Method '{0}' is marked as [PreVerbExecution] so it should have a single parameter of type CLAP.PreVerbExecutionContext".FormatWith(method)); " is 141.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,ValidateDefinedPostInterceptors,The length of the statement  "                    "Method '{0}' is marked as [PostVerbExecution] so it should have a single parameter of type CLAP.PostVerbExecutionContext".FormatWith(method)); " is 143.
Long Statement,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,ValidateDefinedPostInterceptors,The length of the statement  "                        "Method '{0}' is marked as [PostVerbExecution] so it should have a single parameter of type CLAP.PostVerbExecutionContext".FormatWith(method)); " is 143.
Long Statement,CLAP,ParserRegistration,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRegistration.cs,GetTargetAliasAttributeValue,The length of the statement  "            var aliasAttribute = targetType.GetCustomAttributes(typeof(TargetAliasAttribute)' false).FirstOrDefault() as TargetAliasAttribute; " is 130.
Magic Number,CLAP,DefaultHelpGenerator,C:\repos\adrianaisemberg_CLAP\CLAP\DefaultHelpGenerator.cs,GetHelpString,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  var parser = helpInfo.Parsers[i];                    foreach (var verb in parser.Verbs.OrderByDescending(v => v.IsDefault))                  {                      sb.AppendLine();                      sb.Append(verbsLead);                        if (multi)                      {                          sb.AppendFormat("{0}."' parser.Type.Name.ToLowerInvariant());                      }                        sb.Append(verb.Names.StringJoin("|").ToLowerInvariant());                        if (verb.IsDefault)                      {                          sb.Append(" (Default)");                      }                        if (!string.IsNullOrEmpty(verb.Description))                      {                          sb.AppendFormat(": {0}"' verb.Description);                      }                        sb.AppendLine();                        if (verb.Parameters.Any())                      {                          var longestParameter = verb.Parameters.Max(p => p.Names.StringJoin(" /").Length);                          var longestType = verb.Parameters.Max(p => p.Type.GetGenericTypeName().Length);                            foreach (var p in verb.Parameters.OrderBy(p => p.Names.First()))                          {                              sb.Append(parametersLead);                              sb.AppendFormat("/{0} : "'                                  p.Names.StringJoin(" /").ToLowerInvariant().PadRight(longestParameter' ' '));                                if (!string.IsNullOrEmpty(p.Description))                              {                                  sb.AppendFormat("{0} "' p.Description);                              }                                var typeName = GetTypeName(p.Type);                                if (!string.IsNullOrEmpty(typeName))                              {                                  sb.AppendFormat("({0}) "' typeName);                              }                                if (p.Required)                              {                                  sb.Append("(Required) ");                              }                                if (p.Separator != null && p.Separator != SeparatorAttribute.DefaultSeparator)                              {                                  sb.AppendFormat("(Separator = {0}) "' p.Separator);                              }                                if (p.Default != null)                              {                                  sb.AppendFormat("(Default = {0}) "' p.Default);                              }                                if (p.Validations.Any())                              {                                  sb.AppendFormat("({0}) "' p.Validations.StringJoin("' "));                              }                                sb.AppendLine();                          } // foreach (var p in verb.Parameters                      }                        if (verb.Validations.Any())                      {                          sb.AppendLine();                          sb.Append(parametersLead);                          sb.AppendLine("Validation:");                            foreach (var v in verb.Validations)                          {                              sb.Append(validationsLead);                              sb.AppendLine(v);                          }                      }                    } // foreach (var verb in parser.Verbs                    if (parser.Globals.Any())                  {                      sb.AppendLine();                      sb.Append(verbsLead);                      sb.AppendLine("Global Parameters:");                        var longestGlobal = parser.Globals.Max(p => p.Names.StringJoin("|").Length);                        foreach (var g in parser.Globals.OrderBy(g => g.Names.First()))                      {                          sb.Append(parametersLead);                          sb.AppendFormat("/{0} : "'                              g.Names.StringJoin("|").ToLowerInvariant().PadRight(longestGlobal' ' '));                            if (!string.IsNullOrEmpty(g.Description))                          {                              sb.AppendFormat("{0} "' g.Description);                          }                            var typeName = GetTypeName(g.Type);                            if (!string.IsNullOrEmpty(typeName))                          {                              sb.AppendFormat("({0}) "' typeName);                          }                            if (g.Separator != null && g.Separator != SeparatorAttribute.DefaultSeparator)                          {                              sb.AppendFormat("(Separator = {0}) "' g.Separator);                          }                            if (g.Validations != null && g.Validations.Any())                          {                              sb.AppendFormat("({0}) "' g.Validations.StringJoin("' "));                          }                            sb.AppendLine();                      } // foreach (var g in parser.Globals                  }                      if (multi && i < count - 1)                  {                      sb.AppendLine();                      sb.Append(verbsLead);                      sb.AppendLine(string.Empty.PadRight(80' '-'));                  }              }
Magic Number,CLAP,MultiParser,C:\repos\adrianaisemberg_CLAP\CLAP\MultiParser.cs,GetMultiTypesParser,The following statement contains a magic number: if (parts.Length != 2)              {                  throw new InvalidVerbException();              }
Magic Number,CLAP,MultiParser,C:\repos\adrianaisemberg_CLAP\CLAP\MultiParser.cs,GetSingleTypeParser,The following statement contains a magic number: if (verb.Contains(s_delimiters))              {                  var parts = verb.Split(s_delimiters' StringSplitOptions.RemoveEmptyEntries);                    if (parts.Length != 2)                  {                      throw new InvalidVerbException();                  }                    Debug.Assert(parts.Length == 2);                    var typeName = parts[0];                    if (!type.Name.Equals(typeName' StringComparison.InvariantCultureIgnoreCase))                  {                      throw new UnknownParserTypeException(typeName);                  }                    args[0] = args[0].Substring(typeName.Length + 1);              }
Magic Number,CLAP,MultiParser,C:\repos\adrianaisemberg_CLAP\CLAP\MultiParser.cs,GetSingleTypeParser,The following statement contains a magic number: if (verb.Contains(s_delimiters))              {                  var parts = verb.Split(s_delimiters' StringSplitOptions.RemoveEmptyEntries);                    if (parts.Length != 2)                  {                      throw new InvalidVerbException();                  }                    Debug.Assert(parts.Length == 2);                    var typeName = parts[0];                    if (!type.Name.Equals(typeName' StringComparison.InvariantCultureIgnoreCase))                  {                      throw new UnknownParserTypeException(typeName);                  }                    args[0] = args[0].Substring(typeName.Length + 1);              }
Magic Number,CLAP,ParserRunner,C:\repos\adrianaisemberg_CLAP\CLAP\ParserRunner.cs,MapArguments,The following statement contains a magic number: foreach (var arg in args)              {                  // all arguments must start with a valid prefix                  //                  if (!arg.StartsWith(ArgumentPrefixes))                  {                      throw new MissingArgumentPrefixException(arg' string.Join("'"' ArgumentPrefixes));                  }                    var prefix = arg.Substring(1);                    var parts = prefix.Split(new[] { '='' ':' }' 2' StringSplitOptions.RemoveEmptyEntries);                  var name = parts[0].ToLowerInvariant();                    string valueString = null;                    // a switch (a boolean parameter) doesn't need to have a separator'                  // in that case' a null string value is mapped                  //                  if (parts.Length > 1)                  {                      valueString = parts[1];                        // if it has a file input suffix - remove it                      //                      if (name.EndsWith(s_fileInputSuffix))                      {                          name = name.Substring(0' name.Length - 1);                            // the value is replaced with the content of the input file                          //                          valueString = FileSystemHelper.ReadAllText(valueString);                      }                  }                    map.Add(name' valueString);              }
