Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TrotiNet,SystemProxySettings,C:\repos\krys-g_TrotiNet\Lib\SystemProxySettings.cs,GetProtocolSpecificProxy,Cyclomatic complexity of the method is 10
Complex Method,TrotiNet,SystemProxySettings,C:\repos\krys-g_TrotiNet\Lib\SystemProxySettings.cs,SetHttpSpecificProxy,Cyclomatic complexity of the method is 9
Complex Method,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ParseDestinationHostAndPort,Cyclomatic complexity of the method is 11
Complex Method,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ReadRequest,Cyclomatic complexity of the method is 10
Complex Method,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,Cyclomatic complexity of the method is 8
Complex Conditional,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,Connect,The conditional expression  "DestinationHostName != null &&                  DestinationHostName.Equals(hostname) &&                  DestinationPort == port &&                  (SocketPS != null && !SocketPS.IsSocketDead())"  is complex.
Complex Conditional,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The conditional expression  "RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199)"  is complex.
Complex Conditional,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetNonChunkedContent,The conditional expression  "RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199)"  is complex.
Empty Catch Block,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,AcceptCallback,The method has an empty catch block.
Empty Catch Block,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,CheckSockets,The method has an empty catch block.
Empty Catch Block,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,Stop,The method has an empty catch block.
Empty Catch Block,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelDataTo,The method has an empty catch block.
Empty Catch Block,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelDataTo,The method has an empty catch block.
Magic Number,TrotiNet,SystemProxySettings,C:\repos\krys-g_TrotiNet\Lib\SystemProxySettings.cs,GetHttpSpecificProxy,The following statement contains a magic number: GetProtocolSpecificProxy("http="' 80' out proxy_host'                  out proxy_port);
Magic Number,TrotiNet,SystemProxySettings,C:\repos\krys-g_TrotiNet\Lib\SystemProxySettings.cs,GetHttpsSpecificProxy,The following statement contains a magic number: GetProtocolSpecificProxy("https="' 443' out proxy_host'                  out proxy_port);
Magic Number,TrotiNet,HttpHeaders,C:\repos\krys-g_TrotiNet\Lib\HttpHeaders.cs,HttpHeaders,The following statement contains a magic number: StringBuilder sb = new StringBuilder(512);
Magic Number,TrotiNet,HttpHeaders,C:\repos\krys-g_TrotiNet\Lib\HttpHeaders.cs,SetItem,The following statement contains a magic number: if (bHasKey)              {                  string[] items = HeadersInOrder.Split(CRLF_a'                      StringSplitOptions.RemoveEmptyEntries);                  StringBuilder sb = new StringBuilder(512);                  foreach (string item in items)                  {                      var iSplit = item.IndexOf(':');                      System.Diagnostics.Debug.Assert(iSplit > 0);                      var hn = item.Substring(0' iSplit).Trim().ToLower();                      if (hn.Equals(header_name))                      {                          if (s == null)                              // Skip (= remove) the header                              continue;                            sb.Append(HeaderName);                          sb.Append(": ");                          sb.Append(s);                      }                      else                          sb.Append(item);                      sb.Append("\r\n");                  }                  HeadersInOrder = sb.ToString();              }              else                  HeadersInOrder += HeaderName + ": " + s + "\r\n";
Magic Number,TrotiNet,ParserHelper,C:\repos\krys-g_TrotiNet\Lib\HttpRequestLine.cs,ParseProtocolVersion,The following statement contains a magic number: string version = HttpProtocol.Substring(5);
Magic Number,TrotiNet,HttpRequestLine,C:\repos\krys-g_TrotiNet\Lib\HttpRequestLine.cs,HttpRequestLine,The following statement contains a magic number: if (items.Length != 3)                  throw new HttpProtocolBroken("Unrecognized request line '" +                      line + "'");
Magic Number,TrotiNet,HttpRequestLine,C:\repos\krys-g_TrotiNet\Lib\HttpRequestLine.cs,HttpRequestLine,The following statement contains a magic number: ProtocolVersion = ParserHelper.ParseProtocolVersion(items[2]);
Magic Number,TrotiNet,HttpStatusLine,C:\repos\krys-g_TrotiNet\Lib\HttpStatusLine.cs,HttpStatusLine,The following statement contains a magic number: if (items.Length < 2)                  throw new HttpProtocolBroken("Unrecognized status line '" +                      line + "'");
Magic Number,TrotiNet,HttpStatusLine,C:\repos\krys-g_TrotiNet\Lib\HttpStatusLine.cs,HttpStatusLine,The following statement contains a magic number: if (code.Length != 3 ||                  !char.IsDigit(code[0])) // we only test the first character                  throw new HttpProtocolBroken("Invalid status code '" +                      code + "'");
Magic Number,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ParseDestinationHostAndPort,The following statement contains a magic number: port = bIsConnect ? 443 : 80;
Magic Number,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ParseDestinationHostAndPort,The following statement contains a magic number: port = bIsConnect ? 443 : 80;
Magic Number,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ParseDestinationHostAndPort,The following statement contains a magic number: if (hrl.URI.Contains("://"))              {                  if (hrl.URI.StartsWith("http://"))                      prefix = 7; // length of "http://"                  else                  if (hrl.URI.StartsWith("https://"))                  {                      prefix = 8; // length of "https://"                      port = 443;                  }                  else                  throw new HttpProtocolBroken(                      "Expected scheme missing or unsupported");              }
Magic Number,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ParseDestinationHostAndPort,The following statement contains a magic number: if (hrl.URI.Contains("://"))              {                  if (hrl.URI.StartsWith("http://"))                      prefix = 7; // length of "http://"                  else                  if (hrl.URI.StartsWith("https://"))                  {                      prefix = 8; // length of "https://"                      port = 443;                  }                  else                  throw new HttpProtocolBroken(                      "Expected scheme missing or unsupported");              }
Magic Number,TrotiNet,AbstractProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ParseDestinationHostAndPort,The following statement contains a magic number: if (hrl.URI.Contains("://"))              {                  if (hrl.URI.StartsWith("http://"))                      prefix = 7; // length of "http://"                  else                  if (hrl.URI.StartsWith("https://"))                  {                      prefix = 8; // length of "https://"                      port = 443;                  }                  else                  throw new HttpProtocolBroken(                      "Expected scheme missing or unsupported");              }
Magic Number,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))              {                  SendResponseStatusAndHeaders();                    // Is the connection a websocket one?                  if (sc == 101)                  {                      string upgradeHeaderValue;                      ResponseHeaders.Headers.TryGetValue("upgrade"' out upgradeHeaderValue);                      if (!string.IsNullOrEmpty(upgradeHeaderValue) && upgradeHeaderValue.ToLower().Equals("websocket"))                      {                          HandleWebSocket();                      }                  }                  goto no_message_body;              }
Magic Number,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))              {                  SendResponseStatusAndHeaders();                    // Is the connection a websocket one?                  if (sc == 101)                  {                      string upgradeHeaderValue;                      ResponseHeaders.Headers.TryGetValue("upgrade"' out upgradeHeaderValue);                      if (!string.IsNullOrEmpty(upgradeHeaderValue) && upgradeHeaderValue.ToLower().Equals("websocket"))                      {                          HandleWebSocket();                      }                  }                  goto no_message_body;              }
Magic Number,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))              {                  SendResponseStatusAndHeaders();                    // Is the connection a websocket one?                  if (sc == 101)                  {                      string upgradeHeaderValue;                      ResponseHeaders.Headers.TryGetValue("upgrade"' out upgradeHeaderValue);                      if (!string.IsNullOrEmpty(upgradeHeaderValue) && upgradeHeaderValue.ToLower().Equals("websocket"))                      {                          HandleWebSocket();                      }                  }                  goto no_message_body;              }
Magic Number,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))              {                  SendResponseStatusAndHeaders();                    // Is the connection a websocket one?                  if (sc == 101)                  {                      string upgradeHeaderValue;                      ResponseHeaders.Headers.TryGetValue("upgrade"' out upgradeHeaderValue);                      if (!string.IsNullOrEmpty(upgradeHeaderValue) && upgradeHeaderValue.ToLower().Equals("websocket"))                      {                          HandleWebSocket();                      }                  }                  goto no_message_body;              }
Magic Number,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))              {                  SendResponseStatusAndHeaders();                    // Is the connection a websocket one?                  if (sc == 101)                  {                      string upgradeHeaderValue;                      ResponseHeaders.Headers.TryGetValue("upgrade"' out upgradeHeaderValue);                      if (!string.IsNullOrEmpty(upgradeHeaderValue) && upgradeHeaderValue.ToLower().Equals("websocket"))                      {                          HandleWebSocket();                      }                  }                  goto no_message_body;              }
Magic Number,TrotiNet,BaseProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,SendResponse,The following statement contains a magic number: if (ResponseHeaders.TransferEncoding != null)              {                  bResponseMessageChunked = Array.IndexOf<string>(                   ResponseHeaders.TransferEncoding'                   "chunked") >= 0;                  System.Diagnostics.Debug.Assert(                      bResponseMessageChunked);              }              else                  if (ResponseHeaders.ContentLength != null)                  {                      ResponseMessageLength =                          (uint)ResponseHeaders.ContentLength;                      if (ResponseMessageLength == 0)                          goto no_message_body;                  }                  else                  {                      // We really should have been given a response                      // length. It appears that some popular websites                      // send small files without a transfer-encoding                      // or length.                        // It seems that all of the browsers handle this                      // case so we need to as well.                        byte[] buffer = new byte[512];                      SocketPS.TunnelDataTo(ref buffer);                        // Transmit the response header to the client                      ResponseHeaders.ContentLength = (uint)buffer.Length;                      ResponseStatusLine.SendTo(SocketBP);                      ResponseHeaders.SendTo(SocketBP);                        SocketBP.TunnelDataTo(TunnelBP' buffer);                      State.NextStep = null;                      return;                  }
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,ChangeRequestURI,The following statement contains a magic number: if (RequestHeaders != null && RequestHeaders.Host != null)              {                  // Extract the host from the URI                  int prefix = newURI.IndexOf("://");                  string s = (prefix < 0)                      ? newURI                      : newURI.Substring(prefix + 3);                    int i = s.IndexOf("/");                  if (i <= 0)                      // No host in URI                      return;                  int j = s.IndexOf(":"' 0' i);                  if (j >= 0)                      // Ignore the port number                      i = j;                  string host = s.Substring(0' i);                    // Update the 'Host' HTTP header                  RequestHeaders.Host = host;              }
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetChunkedContent,The following statement contains a magic number: while (true)              {                  string chunk_header = SocketPS.ReadAsciiLine();                    if (string.IsNullOrEmpty(chunk_header))                      continue;                    int sc = chunk_header.IndexOfAny(c_ChunkSizeEnd);                  string hexa_size;                  if (sc > -1)                      // We have chunk extensions: ignore them                      hexa_size = chunk_header.Substring(0' sc);                  else                      hexa_size = chunk_header;                    uint size;                  try                  {                      size = Convert.ToUInt32(hexa_size' 16);                  }                  catch                  {                      string s = chunk_header.Length > 20                          ? (chunk_header.Substring(0' 17) + "...")                          : chunk_header;                      throw new HttpProtocolBroken(                          "Could not parse chunk size in: " + s);                  }                    if (size == 0)                      break;                    byte[] buffer = new byte[size];                  SocketPS.TunnelDataTo(buffer' size);                    chunked_stream.Write(buffer' 0' (int)size);              }
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetChunkedContent,The following statement contains a magic number: while (true)              {                  string chunk_header = SocketPS.ReadAsciiLine();                    if (string.IsNullOrEmpty(chunk_header))                      continue;                    int sc = chunk_header.IndexOfAny(c_ChunkSizeEnd);                  string hexa_size;                  if (sc > -1)                      // We have chunk extensions: ignore them                      hexa_size = chunk_header.Substring(0' sc);                  else                      hexa_size = chunk_header;                    uint size;                  try                  {                      size = Convert.ToUInt32(hexa_size' 16);                  }                  catch                  {                      string s = chunk_header.Length > 20                          ? (chunk_header.Substring(0' 17) + "...")                          : chunk_header;                      throw new HttpProtocolBroken(                          "Could not parse chunk size in: " + s);                  }                    if (size == 0)                      break;                    byte[] buffer = new byte[size];                  SocketPS.TunnelDataTo(buffer' size);                    chunked_stream.Write(buffer' 0' (int)size);              }
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetChunkedContent,The following statement contains a magic number: while (true)              {                  string chunk_header = SocketPS.ReadAsciiLine();                    if (string.IsNullOrEmpty(chunk_header))                      continue;                    int sc = chunk_header.IndexOfAny(c_ChunkSizeEnd);                  string hexa_size;                  if (sc > -1)                      // We have chunk extensions: ignore them                      hexa_size = chunk_header.Substring(0' sc);                  else                      hexa_size = chunk_header;                    uint size;                  try                  {                      size = Convert.ToUInt32(hexa_size' 16);                  }                  catch                  {                      string s = chunk_header.Length > 20                          ? (chunk_header.Substring(0' 17) + "...")                          : chunk_header;                      throw new HttpProtocolBroken(                          "Could not parse chunk size in: " + s);                  }                    if (size == 0)                      break;                    byte[] buffer = new byte[size];                  SocketPS.TunnelDataTo(buffer' size);                    chunked_stream.Write(buffer' 0' (int)size);              }
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetNonChunkedContent,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))                  return new byte[0];
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetNonChunkedContent,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))                  return new byte[0];
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetNonChunkedContent,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))                  return new byte[0];
Magic Number,TrotiNet,ProxyLogic,C:\repos\krys-g_TrotiNet\Lib\ProxyLogic.cs,GetNonChunkedContent,The following statement contains a magic number: if (RequestLine.Method.Equals("HEAD") ||                  sc == 204 || sc == 304 || (sc >= 100 && sc <= 199))                  return new byte[0];
Magic Number,TrotiNet,SystemProxy,C:\repos\krys-g_TrotiNet\Lib\SystemProxy.cs,SetProxy,The following statement contains a magic number: var options = new INTERNET_PER_CONN_OPTION[3];
Magic Number,TrotiNet,SystemProxy,C:\repos\krys-g_TrotiNet\Lib\SystemProxy.cs,SetProxy,The following statement contains a magic number: options[2].dwOption = INTERNET_PER_CONN.PROXY_BYPASS;
Magic Number,TrotiNet,SystemProxy,C:\repos\krys-g_TrotiNet\Lib\SystemProxy.cs,SetProxy,The following statement contains a magic number: options[2].Value.iptr = Marshal.StringToHGlobalAuto(                  ProxyBypass);
Magic Number,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,Start,The following statement contains a magic number: const int cleanTimeout = 300 * 1000;
Magic Number,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,Start,The following statement contains a magic number: const int cleanTimeout = 300 * 1000;
Magic Number,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,StartListening,The following statement contains a magic number: ListeningSocket.Listen(1000);
Magic Number,TrotiNet,TcpServer,C:\repos\krys-g_TrotiNet\Lib\TcpServer.cs,Stop,The following statement contains a magic number: if (ListeningThread.IsAlive)              {                  // Create a connection to the port to unblock the                  // listener thread                  using (var sock = new Socket(AddressFamily.Unspecified'                      SocketType.Stream' ProtocolType.Tcp))                  {                      try                      {                          sock.Connect(new IPEndPoint(IPAddress.Loopback'                              this.LocalPort));                          sock.Close();                      } catch { /* ignore */ }                  }                    if (ListeningThread.ThreadState == ThreadState.WaitSleepJoin)                      ListeningThread.Interrupt();                  Thread.Sleep(1000);                  ListeningThread.Abort();              }
Magic Number,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,HttpSocket,The following statement contains a magic number: sb = new StringBuilder(128);
Magic Number,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelDataTo,The following statement contains a magic number: uint byte_count = 512;
Magic Number,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelDataTo,The following statement contains a magic number: while (true)              {                  if (AvailableData == 0)                      if (ReadRaw() == 0)                      {                          break;                      }                    uint to_send = AvailableData;                  UseLeftOverBytes = true;                    if (total_sent + AvailableData > buffer.Length)                      Array.Resize<byte>(ref buffer'                          (int)(total_sent + AvailableData) * 2);                    System.Buffer.BlockCopy(Buffer' (int)BufferPosition' buffer'                      (int)total_sent' (int)to_send);                    total_sent += to_send;                  AvailableData -= to_send;                  BufferPosition += to_send;              }
Magic Number,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelChunkedDataTo,The following statement contains a magic number: while (true)              {                  string chunk_header = ReadAsciiLine();                  if (chunk_header.Length == 0)                      throw new HttpProtocolBroken(                          "Expected chunk header missing");                  int sc = chunk_header.IndexOfAny(c_ChunkSizeEnd);                  string hexa_size;                  if (sc > -1)                      // We have chunk extensions: ignore them                      hexa_size = chunk_header.Substring(0' sc);                  else                      hexa_size = chunk_header;                  uint size;                  try                  {                      size = Convert.ToUInt32(hexa_size' 16);                  }                  catch                  {                      string s = chunk_header.Length > 20                          ? (chunk_header.Substring(0' 17) + "...")                          : chunk_header;                      throw new HttpProtocolBroken(                          "Could not parse chunk size in: " + s);                  }                    if (dest != null)                      dest.WriteAsciiLine(chunk_header);                  if (size == 0)                      break;                  TunnelDataTo(mph' size);                  // Read/write one more CRLF                  string new_line = ReadAsciiLine();                  System.Diagnostics.Debug.Assert(new_line.Length == 0);                  if (dest != null)                      dest.WriteAsciiLine(new_line);              }
Magic Number,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelChunkedDataTo,The following statement contains a magic number: while (true)              {                  string chunk_header = ReadAsciiLine();                  if (chunk_header.Length == 0)                      throw new HttpProtocolBroken(                          "Expected chunk header missing");                  int sc = chunk_header.IndexOfAny(c_ChunkSizeEnd);                  string hexa_size;                  if (sc > -1)                      // We have chunk extensions: ignore them                      hexa_size = chunk_header.Substring(0' sc);                  else                      hexa_size = chunk_header;                  uint size;                  try                  {                      size = Convert.ToUInt32(hexa_size' 16);                  }                  catch                  {                      string s = chunk_header.Length > 20                          ? (chunk_header.Substring(0' 17) + "...")                          : chunk_header;                      throw new HttpProtocolBroken(                          "Could not parse chunk size in: " + s);                  }                    if (dest != null)                      dest.WriteAsciiLine(chunk_header);                  if (size == 0)                      break;                  TunnelDataTo(mph' size);                  // Read/write one more CRLF                  string new_line = ReadAsciiLine();                  System.Diagnostics.Debug.Assert(new_line.Length == 0);                  if (dest != null)                      dest.WriteAsciiLine(new_line);              }
Magic Number,TrotiNet,HttpSocket,C:\repos\krys-g_TrotiNet\Lib\HttpSocket.cs,TunnelChunkedDataTo,The following statement contains a magic number: while (true)              {                  string chunk_header = ReadAsciiLine();                  if (chunk_header.Length == 0)                      throw new HttpProtocolBroken(                          "Expected chunk header missing");                  int sc = chunk_header.IndexOfAny(c_ChunkSizeEnd);                  string hexa_size;                  if (sc > -1)                      // We have chunk extensions: ignore them                      hexa_size = chunk_header.Substring(0' sc);                  else                      hexa_size = chunk_header;                  uint size;                  try                  {                      size = Convert.ToUInt32(hexa_size' 16);                  }                  catch                  {                      string s = chunk_header.Length > 20                          ? (chunk_header.Substring(0' 17) + "...")                          : chunk_header;                      throw new HttpProtocolBroken(                          "Could not parse chunk size in: " + s);                  }                    if (dest != null)                      dest.WriteAsciiLine(chunk_header);                  if (size == 0)                      break;                  TunnelDataTo(mph' size);                  // Read/write one more CRLF                  string new_line = ReadAsciiLine();                  System.Diagnostics.Debug.Assert(new_line.Length == 0);                  if (dest != null)                      dest.WriteAsciiLine(new_line);              }
