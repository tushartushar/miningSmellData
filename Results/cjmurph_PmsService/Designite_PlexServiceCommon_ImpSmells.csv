Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PlexServiceCommon,AuxiliaryApplicationMonitor,C:\repos\cjmurph_PmsService\PlexServiceCommon\AuxiliaryApplicationMonitor.cs,auxProcess_Exited,The length of the statement  "                    System.Threading.Timer t = new System.Threading.Timer((x) => { start(); autoEvent.Set(); }' null' 5000' System.Threading.Timeout.Infinite); " is 139.
Empty Catch Block,PlexServiceCommon,AuxiliaryApplicationMonitor,C:\repos\cjmurph_PmsService\PlexServiceCommon\AuxiliaryApplicationMonitor.cs,end,The method has an empty catch block.
Empty Catch Block,PlexServiceCommon,DriveMap,C:\repos\cjmurph_PmsService\PlexServiceCommon\DriveMap.cs,MapDrive,The method has an empty catch block.
Magic Number,PlexServiceCommon,AuxiliaryApplicationMonitor,C:\repos\cjmurph_PmsService\PlexServiceCommon\AuxiliaryApplicationMonitor.cs,auxProcess_Exited,The following statement contains a magic number: if (_aux.KeepAlive)              {                  OnStatusChange(this' new StatusChangeEventArgs(_aux.Name + " has stopped!"));                  //unsubscribe                  _auxProcess.Exited -= auxProcess_Exited;                  end();                  //restart as required                  if (!_stopping)                  {                      OnStatusChange(this' new StatusChangeEventArgs("Re-starting " + _aux.Name));                      //wait some seconds first                      System.Threading.AutoResetEvent autoEvent = new System.Threading.AutoResetEvent(false);                      System.Threading.Timer t = new System.Threading.Timer((x) => { start(); autoEvent.Set(); }' null' 5000' System.Threading.Timeout.Infinite);                      autoEvent.WaitOne();                      t.Dispose();                  }                  else                  {                      OnStatusChange(this' new StatusChangeEventArgs(_aux.Name + " stopped"));                      Running = false;                  }              }              else              {                  OnStatusChange(this' new StatusChangeEventArgs(_aux.Name + " has completed"));                  //unsubscribe                  _auxProcess.Exited -= this.auxProcess_Exited;                  _auxProcess.Dispose();                  Running = false;              }
Magic Number,PlexServiceCommon,DriveMap,C:\repos\cjmurph_PmsService\PlexServiceCommon\DriveMap.cs,MapDrive,The following statement contains a magic number: if (DriveLetter.Length > 0)              {                  var drive = DriveLetter.Substring(0'1) + ":";                                    //create struct data                  NetworkResource netRes = new NetworkResource();                  netRes.Scope = 2;                  netRes.Type = 0x1;                  netRes.DisplayType = 3;                  netRes.Usage = 1;                  netRes.RemoteName = ShareName;                  netRes.LocalName = drive;                  //if force' unmap ready for new connection                  if (force)                  {                      try                      {                          UnMapDrive(true);                      }                      catch { }                  }                  //call and return                  int i = WNetAddConnection2A(ref netRes' null' null' 0);                    if (i > 0)                      throw new System.ComponentModel.Win32Exception(i);              }              else              {                  throw new Exception("Invalid drive letter: " + DriveLetter);              }
Magic Number,PlexServiceCommon,DriveMap,C:\repos\cjmurph_PmsService\PlexServiceCommon\DriveMap.cs,MapDrive,The following statement contains a magic number: if (DriveLetter.Length > 0)              {                  var drive = DriveLetter.Substring(0'1) + ":";                                    //create struct data                  NetworkResource netRes = new NetworkResource();                  netRes.Scope = 2;                  netRes.Type = 0x1;                  netRes.DisplayType = 3;                  netRes.Usage = 1;                  netRes.RemoteName = ShareName;                  netRes.LocalName = drive;                  //if force' unmap ready for new connection                  if (force)                  {                      try                      {                          UnMapDrive(true);                      }                      catch { }                  }                  //call and return                  int i = WNetAddConnection2A(ref netRes' null' null' 0);                    if (i > 0)                      throw new System.ComponentModel.Win32Exception(i);              }              else              {                  throw new Exception("Invalid drive letter: " + DriveLetter);              }
Magic Number,PlexServiceCommon,Settings,C:\repos\cjmurph_PmsService\PlexServiceCommon\Settings.cs,Settings,The following statement contains a magic number: ServerPort = 8787;
Magic Number,PlexServiceCommon,Settings,C:\repos\cjmurph_PmsService\PlexServiceCommon\Settings.cs,Settings,The following statement contains a magic number: RestartDelay = 300;
