Implementation smell,Namespace,Class,File,Method,Description
Long Method,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,GetPlexExecutable,The method has 100 lines of code.
Complex Method,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,GetPlexExecutable,Cyclomatic complexity of the method is 9
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,PurgeAutoStartRegistryEntry,The length of the statement  "                            OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Unable to remove auto start registry value. Error: {0}"' ex.Message))); " is 137.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,DisableFirstRun,The length of the statement  "                            OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Unable to set the 'FirstRun' registry key to 0. Error: {0}"' ex.Message))); " is 141.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Start,The length of the statement  "                OnPlexStatusChange(this' new StatusChangeEventArgs("Plex Media Server does not appear to be installed!"' EventLogEntryType.Error)); " is 131.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Start,The length of the statement  "                            OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Map share {0} to letter '{1}' successful"' map.ShareName' map.DriveLetter))); " is 143.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Start,The length of the statement  "                            OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Unable to map share {0} to letter '{1}': {2}"' map.ShareName' map.DriveLetter' ex.Message)' EventLogEntryType.Error)); " is 184.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Start,The length of the statement  "                _auxAppMonitors.ForEach(x => x.StatusChange += new AuxiliaryApplicationMonitor.StatusChangeHandler(OnPlexStatusChange)); " is 120.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Restart,The length of the statement  "            System.Threading.Timer t = new System.Threading.Timer((x) => { Start(); autoEvent.Set(); }' null' delay' System.Threading.Timeout.Infinite); " is 140.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Plex_Exited,The length of the statement  "                OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Waiting {0} seconds before re-starting the Plex process."' settings.RestartDelay))); " is 150.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Plex_Exited,The length of the statement  "                System.Threading.Timer t = new System.Threading.Timer((x) => { Start(); autoEvent.Set(); }' null' settings.RestartDelay * 1000' System.Threading.Timeout.Infinite); " is 163.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,StartPlex,The length of the statement  "                        OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Plex Media Server version is {0}. Cannot use startup argument."' plexVersion))); " is 146.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,StartPlex,The length of the statement  "                        OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Plex Media Server version is {0}. Can use startup argument."' plexVersion))); " is 143.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,StartPlex,The length of the statement  "                    OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Plex Media Server already running in session {0}."' _plex.SessionId))); " is 137.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,StartPlex,The length of the statement  "                        OnPlexStatusChange(this' new StatusChangeEventArgs("Unable to attach to already running Plex Media Server instance. The existing instance will continue unmanaged. Please close all instances of Plex Media Server on this computer prior to starting the service")); " is 261.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,GetPlexExecutable,The length of the statement  "                possibleLocations.Add(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)' @"Plex\Plex Media Server\Plex Media Server.exe")); " is 152.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,GetPlexExecutable,The length of the statement  "                //work out the os type (32 or 64) and set the registry view to suit. this is only a reliable check when this project is compiled to x86. " is 136.
Long Statement,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,GetPlexExecutable,The length of the statement  "                using (RegistryKey userDataKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine' architecture).OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Installer\UserData")) " is 174.
Long Statement,PlexServiceWCF,TrayInteraction,C:\repos\cjmurph_PmsService\PlexServiceWCF\TrayInteraction.cs,WriteToLog,The length of the statement  "                System.Diagnostics.EventLog.WriteEntry("PlexService"' "Log file could not be written to" + Environment.NewLine + ex.Message); " is 125.
Empty Catch Block,PlexServiceWCF,LogWriter,C:\repos\cjmurph_PmsService\PlexServiceWCF\LogWriter.cs,Read,The method has an empty catch block.
Empty Catch Block,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,EndPlex,The method has an empty catch block.
Empty Catch Block,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,KillSupportingProcess,The method has an empty catch block.
Empty Catch Block,PlexServiceWCF,TrayInteraction,C:\repos\cjmurph_PmsService\PlexServiceWCF\TrayInteraction.cs,PlexStateChange,The method has an empty catch block.
Magic Number,PlexServiceWCF,LogWriter,C:\repos\cjmurph_PmsService\PlexServiceWCF\LogWriter.cs,WriteLine,The following statement contains a magic number: lock (_syncObject)              {                  if (!System.IO.Directory.Exists(Path.GetDirectoryName(_logFile)))                  {                      System.IO.Directory.CreateDirectory(Path.GetDirectoryName(_logFile));                  }                    //reduce its size if its getting big                  if (getLineCount() > 200)                  {                      //halve the log file                      removeFirstLines(100);                  }                    // Create a writer and open the file:                  using (StreamWriter log = new StreamWriter(_logFile' true))                  {                      log.WriteLine(DateTime.Now.ToString() + ": " + detail);                  }              }
Magic Number,PlexServiceWCF,LogWriter,C:\repos\cjmurph_PmsService\PlexServiceWCF\LogWriter.cs,WriteLine,The following statement contains a magic number: lock (_syncObject)              {                  if (!System.IO.Directory.Exists(Path.GetDirectoryName(_logFile)))                  {                      System.IO.Directory.CreateDirectory(Path.GetDirectoryName(_logFile));                  }                    //reduce its size if its getting big                  if (getLineCount() > 200)                  {                      //halve the log file                      removeFirstLines(100);                  }                    // Create a writer and open the file:                  using (StreamWriter log = new StreamWriter(_logFile' true))                  {                      log.WriteLine(DateTime.Now.ToString() + ": " + detail);                  }              }
Magic Number,PlexServiceWCF,PmsMonitor,C:\repos\cjmurph_PmsService\PlexServiceWCF\PmsMonitor.cs,Plex_Exited,The following statement contains a magic number: if (State != PlexState.Stopping && settings.AutoRestart)              {                  OnPlexStatusChange(this' new StatusChangeEventArgs(string.Format("Waiting {0} seconds before re-starting the Plex process."' settings.RestartDelay)));                  State = PlexState.Pending;                  System.Threading.AutoResetEvent autoEvent = new System.Threading.AutoResetEvent(false);                  System.Threading.Timer t = new System.Threading.Timer((x) => { Start(); autoEvent.Set(); }' null' settings.RestartDelay * 1000' System.Threading.Timeout.Infinite);                  autoEvent.WaitOne();                  t.Dispose();              }              else              {                  //set the status                  State = PlexState.Stopped;              }
Magic Number,PlexServiceWCF,TrayInteraction,C:\repos\cjmurph_PmsService\PlexServiceWCF\TrayInteraction.cs,Restart,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      _pms.Restart(5000);                  });
