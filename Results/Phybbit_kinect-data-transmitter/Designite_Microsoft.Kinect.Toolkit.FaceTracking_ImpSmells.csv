Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,Get3DShape,The method has 7 parameters. Parameters: shapeUnitCoeffPtr' shapeUnitCoeffCount' animUnitCoeffPtr' animUnitCoeffCount' scale' rotation' translation
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,GetProjected3DShape,The method has 10 parameters. Parameters: videoCameraConfig' zoomFactor' viewOffset' shapeUnitCoeffPtr' shapeUnitCoeffCount' animUnitCoeffPtr' animUnitCoeffCount' scale' rotation' translation
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The method has 5 parameters. Parameters: colorImageFormat' colorImage' depthImageFormat' depthImage' skeletonOfInterest
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The method has 5 parameters. Parameters: colorImageFormat' colorImage' depthImageFormat' depthImage' regionOfInterest
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,DepthToColorCallback,The method has 11 parameters. Parameters: depthFrameWidth' depthFrameHeight' colorFrameWidth' colorFrameHeight' zoomFactor' viewOffset' depthX' depthY' depthZ' colorX' colorY
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Initialize,The method has 5 parameters. Parameters: newColorCameraConfig' newDepthCameraConfig' colorImagePtr' depthImagePtr' newRegisterDepthToColorDelegate
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The method has 6 parameters. Parameters: colorImageFormat' colorImage' depthImageFormat' depthImage' skeletonOfInterest' regionOfInterest
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,IFTImage,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FtInterop.cs,Attach,The method has 5 parameters. Parameters: width' height' dataPtr' format' stride
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,IFTModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FtInterop.cs,Get3DShape,The method has 9 parameters. Parameters: shapeUnitCoeffsPtr' shapeUnitCount' animUnitCoeffPtr' animUnitCount' scale' rotationXYZ' translationXYZ' vertices' vertexCount
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,IFTModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FtInterop.cs,GetProjectedShape,The method has 12 parameters. Parameters: cameraConfig' zoomFactor' viewOffset' shapeUnitCoeffPtr' shapeUnitCount' animUnitCoeffsPtr' animUnitCount' scale' rotationXYZ' translationXYZ' vertices' vertexCount
Long Parameter List,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,Attach,The method has 5 parameters. Parameters: width' height' imageDataPtr' format' stride
Long Identifier,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Initialize,The length of the parameter newRegisterDepthToColorDelegate is 31.
Long Identifier,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,,The length of the parameter initializationColorImageFormat is 30.
Long Identifier,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,,The length of the parameter initializationDepthImageFormat is 30.
Long Identifier,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,,The length of the parameter startOrContinueTrackingStopwatch is 32.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,Get3DShape,The length of the statement  "            this.faceTracker.FaceTrackerPtr.GetShapeUnits(out scale' out shapeUnitCoeffPtr' ref shapeUnitCount' out hasSuConverged); " is 120.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,GetProjected3DShape,The length of the statement  "            this.faceTracker.FaceTrackerPtr.GetShapeUnits(out scale' out shapeUnitCoeffPtr' ref shapeUnitCount' out hasSuConverged); " is 120.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Dispose,The length of the statement  "                    "FaceTracker::Dispose() - TotalTracks={0}' TotalSuccessTracks={1}' TimePerTrack={2:F3}ms' TimePerSuccessTrack={3:F3}ms' TimePerDataCopy={4:F3}ms' TimePerStartOrContinueTracking={5:F3}ms"'  " is 187.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Initialize,The length of the statement  "                    string.Format(CultureInfo.CurrentCulture' "Failed to create face tracking result. Error code from native=0x{0:X}"' hr)); " is 120.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The length of the statement  "                throw new ArgumentOutOfRangeException("colorImage"' "Color image data size is needs to match initialization configuration."); " is 125.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The length of the statement  "                throw new ArgumentOutOfRangeException("depthImage"' "Depth image data size is needs to match initialization configuration."); " is 125.
Long Statement,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The length of the statement  "            var sensorData = new SensorData(this.colorFaceTrackingImage' this.depthFaceTrackingImage' DefaultZoomFactor' Point.Empty); " is 122.
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,GetTriangles,The following statement contains a magic number: if (trianglesCount > 0)              {                  triangles = new FaceTriangle[trianglesCount];                  for (int i = 0; i < trianglesCount; i++)                  {                      triangles[i] = new FaceTriangle();                      IntPtr trianglesIthPtr;                      if (IntPtr.Size == 8)                      {                          // 64bit                          trianglesIthPtr = new IntPtr(trianglesPtr.ToInt64() + (i * Marshal.SizeOf(typeof(FaceTriangle))));                      }                      else                      {                          // 32bit                          trianglesIthPtr = new IntPtr(trianglesPtr.ToInt32() + (i * Marshal.SizeOf(typeof(FaceTriangle))));                      }                        triangles[i] = (FaceTriangle)Marshal.PtrToStructure(trianglesIthPtr' typeof(FaceTriangle));                  }              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,Get3DShape,The following statement contains a magic number: if (vertexCount > 0)              {                  try                  {                      faceModel3DVerticesPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Vector3DF)) * (int)vertexCount);                      this.faceTrackingModelPtr.Get3DShape(                          shapeUnitCoeffPtr'                           shapeUnitCoeffCount'                           animUnitCoeffPtr'                           animUnitCoeffCount'                           scale'                           ref rotation'                           ref translation'                           faceModel3DVerticesPtr'                           vertexCount);                      faceModel3DShape = new Vector3DF[vertexCount];                      for (int i = 0; i < (int)vertexCount; i++)                      {                          IntPtr faceModel3DVerticesIthPtr;                          if (IntPtr.Size == 8)                          {                              // 64bit                              faceModel3DVerticesIthPtr =                                  new IntPtr(faceModel3DVerticesPtr.ToInt64() + (i * Marshal.SizeOf(typeof(Vector3DF))));                          }                          else                          {                              // 32bit                              faceModel3DVerticesIthPtr =                                  new IntPtr(faceModel3DVerticesPtr.ToInt32() + (i * Marshal.SizeOf(typeof(Vector3DF))));                          }                            faceModel3DShape[i] = (Vector3DF)Marshal.PtrToStructure(faceModel3DVerticesIthPtr' typeof(Vector3DF));                      }                  }                  finally                  {                      if (faceModel3DVerticesPtr != IntPtr.Zero)                      {                          Marshal.FreeHGlobal(faceModel3DVerticesPtr);                      }                  }              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,FaceModel,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceModel.cs,GetProjected3DShape,The following statement contains a magic number: if (vertexCount > 0)              {                  try                  {                      faceModel3DVerticesPtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Vector3DF)) * (int)vertexCount);                      this.faceTrackingModelPtr.GetProjectedShape(                          videoCameraConfig'                           zoomFactor'                           viewOffset'                           shapeUnitCoeffPtr'                           shapeUnitCoeffCount'                           animUnitCoeffPtr'                           animUnitCoeffCount'                           scale'                           ref rotation'                           ref translation'                           faceModel3DVerticesPtr'                           vertexCount);                      faceModelProjected3DShape = new PointF[vertexCount];                      for (int i = 0; i < (int)vertexCount; i++)                      {                          IntPtr faceModel3DVerticesIthPtr;                          if (IntPtr.Size == 8)                          {                              // 64bit                              faceModel3DVerticesIthPtr = new IntPtr(faceModel3DVerticesPtr.ToInt64() + (i * Marshal.SizeOf(typeof(PointF))));                          }                          else                          {                              // 32bit                              faceModel3DVerticesIthPtr = new IntPtr(faceModel3DVerticesPtr.ToInt32() + (i * Marshal.SizeOf(typeof(PointF))));                          }                            faceModelProjected3DShape[i] = (PointF)Marshal.PtrToStructure(faceModel3DVerticesIthPtr' typeof(PointF));                      }                  }                  finally                  {                      if (faceModel3DVerticesPtr != IntPtr.Zero)                      {                          Marshal.FreeHGlobal(faceModel3DVerticesPtr);                      }                  }              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,GetHeadPointsFromSkeleton,The following statement contains a magic number: if (skeletonOfInterest != null && skeletonOfInterest.TrackingState == SkeletonTrackingState.Tracked)              {                  headPoints = new Vector3DF[2];                    SkeletonPoint sp0 = skeletonOfInterest.Joints[JointType.ShoulderCenter].Position;                  headPoints[0] = new Vector3DF(sp0.X' sp0.Y' sp0.Z);                    SkeletonPoint sp1 = skeletonOfInterest.Joints[JointType.Head].Position;                  headPoints[1] = new Vector3DF(sp1.X' sp1.Y' sp1.Z);              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,FaceTracker,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\FaceTracker.cs,Track,The following statement contains a magic number: if (headPoints != null && headPoints.Length == 2)              {                  headPointsObj = new HeadPoints { Points = headPoints };              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
Magic Number,Microsoft.Kinect.Toolkit.FaceTracking,Image,C:\repos\Phybbit_kinect-data-transmitter\Microsoft.Kinect.Toolkit.FaceTracking\Image.cs,FormatToSize,The following statement contains a magic number: switch (format)              {                  case FaceTrackingImageFormat.FTIMAGEFORMAT_INVALID:                      return 0;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_GR8:                      return 1;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_R8G8B8:                      return 3;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_X8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_A8R8G8B8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8X8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT8_B8G8R8A8:                      return 4;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D16:                      return 2;                  case FaceTrackingImageFormat.FTIMAGEFORMAT_UINT16_D13P3:                      return 2;                  default:                      throw new ArgumentException("Invalid image format specified");              }
