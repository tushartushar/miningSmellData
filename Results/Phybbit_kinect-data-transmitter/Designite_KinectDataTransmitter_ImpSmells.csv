Implementation smell,Namespace,Class,File,Method,Description
Long Statement,KinectDataTransmitter,InteractionDataTracker,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\InteractionDataTracker.cs,ConvertHandPointerFromBodyAndHandType,The length of the statement  "            Vector4 shoulderLength = VectorBetweenJoints(body' Microsoft.Kinect.JointType.ShoulderLeft' Microsoft.Kinect.JointType.ShoulderRight); " is 134.
Long Statement,KinectDataTransmitter,InteractionDataTracker,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\InteractionDataTracker.cs,ConvertHandPointerFromBodyAndHandType,The length of the statement  "            //Console.WriteLine(System.String.Format("IsCurrentUserAndHand TrackedBodyId:{0} UserId:{1} {2}"' Math.Abs(spineToHand.Z)' VectorLength(shoulderLength)' pressExtent>0)); " is 169.
Long Statement,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,ParseReceivedData,The length of the statement  "                    //Console.WriteLine(inputStr + " " + i + " " + (inputStr[0] == 0xEF) + " " + (inputStr[1] == 0xBB) + " " + (inputStr[2] == 0xBF)); " is 130.
Long Statement,KinectDataTransmitter,StreamWriter,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\StreamWriter.cs,ProcessColorData,The length of the statement  "            using (var accessor = _colorMemoryMappedFile.CreateViewAccessor(0' colorImageData.Length' MemoryMappedFileAccess.Write)) " is 120.
Long Statement,KinectDataTransmitter,StreamWriter,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\StreamWriter.cs,ProcessDepthData,The length of the statement  "            using (var accessor = _depthMemoryMappedFile.CreateViewAccessor(0' depthImageData.Length * bytesPerShort' MemoryMappedFileAccess.Write)) " is 136.
Long Statement,KinectDataTransmitter,StreamWriter,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\StreamWriter.cs,ProcessInfraRedData,The length of the statement  "            using (var accessor = _infraredMemoryMappedFile.CreateViewAccessor(0' data.Length * bytesPerShort' MemoryMappedFileAccess.Write)) " is 129.
Complex Conditional,KinectDataTransmitter,InteractionDataTracker,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\InteractionDataTracker.cs,PerformHitTest,The conditional expression  "(this.buttonControl.Left <= x) && (x <= this.buttonControl.Right) &&                  (this.buttonControl.Top <= y) && (y <= this.buttonControl.Bottom)"  is complex.
Complex Conditional,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,Main,The conditional expression  "inputStr.Length < 3|| inputStr.Length > 3 && inputStr[0] == 0xEF && inputStr[1] == 0xBB && inputStr[2] == 0xBF"  is complex.
Empty Catch Block,KinectDataTransmitter,KinectDevice,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\KinectDevice.cs,Reader_MultiSourceFrameArrived,The method has an empty catch block.
Empty Catch Block,KinectDataTransmitter,KinectDevice,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\KinectDevice.cs,Reader_FrameArrived,The method has an empty catch block.
Empty Catch Block,KinectDataTransmitter,KinectDevice,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\KinectDevice.cs,Reader_FrameArrived,The method has an empty catch block.
Empty Catch Block,KinectDataTransmitter,KinectDevice,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\KinectDevice.cs,Reader_FrameArrived,The method has an empty catch block.
Magic Number,KinectDataTransmitter,InteractionDataTracker,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\InteractionDataTracker.cs,VectorLength,The following statement contains a magic number: return (float)Math.Sqrt(Math.Pow((double)vector.X' 2) + Math.Pow((double)vector.Y' 2) + Math.Pow((double)vector.Z' 2));
Magic Number,KinectDataTransmitter,InteractionDataTracker,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\InteractionDataTracker.cs,VectorLength,The following statement contains a magic number: return (float)Math.Sqrt(Math.Pow((double)vector.X' 2) + Math.Pow((double)vector.Y' 2) + Math.Pow((double)vector.Z' 2));
Magic Number,KinectDataTransmitter,InteractionDataTracker,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\InteractionDataTracker.cs,VectorLength,The following statement contains a magic number: return (float)Math.Sqrt(Math.Pow((double)vector.X' 2) + Math.Pow((double)vector.Y' 2) + Math.Pow((double)vector.Z' 2));
Magic Number,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,Main,The following statement contains a magic number: try              {                    _kinectDevice = new KinectDevice();                  _kinectDevice.IsTrackingSkeletons = true;                  //_kinectDevice.IsTrackingFace = true;                  _kinectDevice.IsWritingDepthStream = true;                  _kinectDevice.IsTrackingInteraction = true;                  //_kinectDevice.IsUsingInfraRedStream = true;                  _kinectDevice.Initialize();                    var pingThread = new Thread(SendPings);                  pingThread.Start();                    string inputStr = null;                  while ((inputStr = Console.ReadLine()) != null)                  {                      const string byteOrderMark = "ï»¿";                      if (inputStr.Length < 3|| inputStr.Length > 3 && inputStr[0] == 0xEF && inputStr[1] == 0xBB && inputStr[2] == 0xBF)                      {                          // ignore the bom.                          continue;                      }                        ParseReceivedData(inputStr);                  }              }              catch (Exception e)              {                  Console.WriteLine(Converter.EncodeError(e.Message));              }
Magic Number,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,Main,The following statement contains a magic number: try              {                    _kinectDevice = new KinectDevice();                  _kinectDevice.IsTrackingSkeletons = true;                  //_kinectDevice.IsTrackingFace = true;                  _kinectDevice.IsWritingDepthStream = true;                  _kinectDevice.IsTrackingInteraction = true;                  //_kinectDevice.IsUsingInfraRedStream = true;                  _kinectDevice.Initialize();                    var pingThread = new Thread(SendPings);                  pingThread.Start();                    string inputStr = null;                  while ((inputStr = Console.ReadLine()) != null)                  {                      const string byteOrderMark = "ï»¿";                      if (inputStr.Length < 3|| inputStr.Length > 3 && inputStr[0] == 0xEF && inputStr[1] == 0xBB && inputStr[2] == 0xBF)                      {                          // ignore the bom.                          continue;                      }                        ParseReceivedData(inputStr);                  }              }              catch (Exception e)              {                  Console.WriteLine(Converter.EncodeError(e.Message));              }
Magic Number,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,Main,The following statement contains a magic number: try              {                    _kinectDevice = new KinectDevice();                  _kinectDevice.IsTrackingSkeletons = true;                  //_kinectDevice.IsTrackingFace = true;                  _kinectDevice.IsWritingDepthStream = true;                  _kinectDevice.IsTrackingInteraction = true;                  //_kinectDevice.IsUsingInfraRedStream = true;                  _kinectDevice.Initialize();                    var pingThread = new Thread(SendPings);                  pingThread.Start();                    string inputStr = null;                  while ((inputStr = Console.ReadLine()) != null)                  {                      const string byteOrderMark = "ï»¿";                      if (inputStr.Length < 3|| inputStr.Length > 3 && inputStr[0] == 0xEF && inputStr[1] == 0xBB && inputStr[2] == 0xBF)                      {                          // ignore the bom.                          continue;                      }                        ParseReceivedData(inputStr);                  }              }              catch (Exception e)              {                  Console.WriteLine(Converter.EncodeError(e.Message));              }
Magic Number,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,SendPings,The following statement contains a magic number: while (true)              {                  Console.WriteLine(Converter.EncodePingData());                  _nonAcknoledgedPings++;                  Thread.Sleep(10000);                    if (_nonAcknoledgedPings >= 3)                  {                      //Environment.Exit(-1);                  }              }
Magic Number,KinectDataTransmitter,Program,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\Program.cs,SendPings,The following statement contains a magic number: while (true)              {                  Console.WriteLine(Converter.EncodePingData());                  _nonAcknoledgedPings++;                  Thread.Sleep(10000);                    if (_nonAcknoledgedPings >= 3)                  {                      //Environment.Exit(-1);                  }              }
Magic Number,KinectDataTransmitter,StreamWriter,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\StreamWriter.cs,ProcessDepthData,The following statement contains a magic number: const int bytesPerShort = 2;
Magic Number,KinectDataTransmitter,StreamWriter,C:\repos\Phybbit_kinect-data-transmitter\KinectDataTransmitter\StreamWriter.cs,ProcessInfraRedData,The following statement contains a magic number: const int bytesPerShort = 2;
