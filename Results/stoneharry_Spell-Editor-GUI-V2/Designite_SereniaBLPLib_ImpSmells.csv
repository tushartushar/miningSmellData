Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,Cyclomatic complexity of the method is 8
Long Parameter List,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The method has 5 parameters. Parameters: rgba' width' height' blocks' flags
Long Statement,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getImageBytes,The length of the statement  "                int flag = (this.alphaDepth > 1) ? ((this.alphaEncoding == 7) ? (int)DXTDecompression.DXTFlags.DXT5 : (int)DXTDecompression.DXTFlags.DXT3) : (int)DXTDecompression.DXTFlags.DXT1; " is 177.
Long Statement,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getImageBytes,The length of the statement  "                DXTDecompression.decompressImage(out pic' (this.width / (int)(Math.Pow(2' MipmapLevel)))' (this.height / (int)(Math.Pow(2' MipmapLevel)))' this.getPictureData(MipmapLevel)' flag); " is 179.
Long Statement,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getBitmap,The length of the statement  "            System.Drawing.Imaging.BitmapData bmpdata = bmp.LockBits(new Rectangle(0' 0' x' y)' System.Drawing.Imaging.ImageLockMode.WriteOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 184.
Magic Number,SereniaBLPLib,ARGBColor8,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,ARGBColor8,The following statement contains a magic number: this.alpha = (byte)255;
Magic Number,SereniaBLPLib,ARGBColor8,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,ARGBColor8,The following statement contains a magic number: this.alpha = 255;
Magic Number,SereniaBLPLib,ARGBColor8,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,convertToBGRA,The following statement contains a magic number: for (int i = 0; i < pixel.Length; i += 4)              {                  tmp = pixel[i];                  pixel[i] = pixel[i + 2];                  pixel[i + 2] = tmp;              }
Magic Number,SereniaBLPLib,ARGBColor8,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,convertToBGRA,The following statement contains a magic number: for (int i = 0; i < pixel.Length; i += 4)              {                  tmp = pixel[i];                  pixel[i] = pixel[i + 2];                  pixel[i + 2] = tmp;              }
Magic Number,SereniaBLPLib,ARGBColor8,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,convertToBGRA,The following statement contains a magic number: for (int i = 0; i < pixel.Length; i += 4)              {                  tmp = pixel[i];                  pixel[i] = pixel[i + 2];                  pixel[i + 2] = tmp;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: byte[] pic = new byte[((this.width * this.height) * 4) / (int)(Math.Pow(2' MipmapLevel))];
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: byte[] pic = new byte[((this.width * this.height) * 4) / (int)(Math.Pow(2' MipmapLevel))];
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getPictureUncompressedByteArray,The following statement contains a magic number: for (int i = 0; i < indices.Length; i++)              {                  pic[i * 4] = this.paletteBGRA[indices[i]].red;                  pic[i * 4 + 1] = this.paletteBGRA[indices[i]].green;                  pic[i * 4 + 2] = this.paletteBGRA[indices[i]].blue;                  pic[i * 4 + 3] = (this.alphaDepth > 0) ? this.paletteBGRA[indices[i]].alpha : (byte)255;              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: byte[] buffer = new byte[4];
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: this.str.Read(buffer' 0' 4);
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: str.Read(buffer' 0' 4);
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: this.str.Read(buffer' 0' 4);
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: this.alphaEncoding = buffer[2];
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: this.hasMipmaps = buffer[3];
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: str.Read(buffer' 0' 4);
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: str.Read(buffer' 0' 4);
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  _str.Read(buffer' 0' 4);                  this.mipmapOffsets[i] = BitConverter.ToUInt32(buffer' 0);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  _str.Read(buffer' 0' 4);                  this.mipmapOffsets[i] = BitConverter.ToUInt32(buffer' 0);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  str.Read(buffer' 0' 4);                  this.mippmapSize[i] = BitConverter.ToUInt32(buffer' 0);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  str.Read(buffer' 0' 4);                  this.mippmapSize[i] = BitConverter.ToUInt32(buffer' 0);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: if (this.encoding == 1)              {                  // Reading palette                  for (int i = 0; i < 256; i++)                  {                      byte[] color = new byte[4];                      str.Read(color' 0' 4);                      this.paletteBGRA[i].blue = color[0];                      this.paletteBGRA[i].green = color[1];                      this.paletteBGRA[i].red = color[2];                      this.paletteBGRA[i].alpha = color[3];                  }              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: if (this.encoding == 1)              {                  // Reading palette                  for (int i = 0; i < 256; i++)                  {                      byte[] color = new byte[4];                      str.Read(color' 0' 4);                      this.paletteBGRA[i].blue = color[0];                      this.paletteBGRA[i].green = color[1];                      this.paletteBGRA[i].red = color[2];                      this.paletteBGRA[i].alpha = color[3];                  }              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: if (this.encoding == 1)              {                  // Reading palette                  for (int i = 0; i < 256; i++)                  {                      byte[] color = new byte[4];                      str.Read(color' 0' 4);                      this.paletteBGRA[i].blue = color[0];                      this.paletteBGRA[i].green = color[1];                      this.paletteBGRA[i].red = color[2];                      this.paletteBGRA[i].alpha = color[3];                  }              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: if (this.encoding == 1)              {                  // Reading palette                  for (int i = 0; i < 256; i++)                  {                      byte[] color = new byte[4];                      str.Read(color' 0' 4);                      this.paletteBGRA[i].blue = color[0];                      this.paletteBGRA[i].green = color[1];                      this.paletteBGRA[i].red = color[2];                      this.paletteBGRA[i].alpha = color[3];                  }              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,BlpFile,The following statement contains a magic number: if (this.encoding == 1)              {                  // Reading palette                  for (int i = 0; i < 256; i++)                  {                      byte[] color = new byte[4];                      str.Read(color' 0' 4);                      this.paletteBGRA[i].blue = color[0];                      this.paletteBGRA[i].green = color[1];                      this.paletteBGRA[i].red = color[2];                      this.paletteBGRA[i].alpha = color[3];                  }              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getImageBytes,The following statement contains a magic number: if (this.encoding == 2)              {                  // Determine the correct DXT-Format                  int flag = (this.alphaDepth > 1) ? ((this.alphaEncoding == 7) ? (int)DXTDecompression.DXTFlags.DXT5 : (int)DXTDecompression.DXTFlags.DXT3) : (int)DXTDecompression.DXTFlags.DXT1;                  // Decompress the picture                  DXTDecompression.decompressImage(out pic' (this.width / (int)(Math.Pow(2' MipmapLevel)))' (this.height / (int)(Math.Pow(2' MipmapLevel)))' this.getPictureData(MipmapLevel)' flag);              }              else              {                  // Using the palette to determine the color                  pic = this.getPictureUncompressedByteArray(MipmapLevel);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getImageBytes,The following statement contains a magic number: if (this.encoding == 2)              {                  // Determine the correct DXT-Format                  int flag = (this.alphaDepth > 1) ? ((this.alphaEncoding == 7) ? (int)DXTDecompression.DXTFlags.DXT5 : (int)DXTDecompression.DXTFlags.DXT3) : (int)DXTDecompression.DXTFlags.DXT1;                  // Decompress the picture                  DXTDecompression.decompressImage(out pic' (this.width / (int)(Math.Pow(2' MipmapLevel)))' (this.height / (int)(Math.Pow(2' MipmapLevel)))' this.getPictureData(MipmapLevel)' flag);              }              else              {                  // Using the palette to determine the color                  pic = this.getPictureUncompressedByteArray(MipmapLevel);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getImageBytes,The following statement contains a magic number: if (this.encoding == 2)              {                  // Determine the correct DXT-Format                  int flag = (this.alphaDepth > 1) ? ((this.alphaEncoding == 7) ? (int)DXTDecompression.DXTFlags.DXT5 : (int)DXTDecompression.DXTFlags.DXT3) : (int)DXTDecompression.DXTFlags.DXT1;                  // Decompress the picture                  DXTDecompression.decompressImage(out pic' (this.width / (int)(Math.Pow(2' MipmapLevel)))' (this.height / (int)(Math.Pow(2' MipmapLevel)))' this.getPictureData(MipmapLevel)' flag);              }              else              {                  // Using the palette to determine the color                  pic = this.getPictureUncompressedByteArray(MipmapLevel);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getImageBytes,The following statement contains a magic number: if (this.encoding == 2)              {                  // Determine the correct DXT-Format                  int flag = (this.alphaDepth > 1) ? ((this.alphaEncoding == 7) ? (int)DXTDecompression.DXTFlags.DXT5 : (int)DXTDecompression.DXTFlags.DXT3) : (int)DXTDecompression.DXTFlags.DXT1;                  // Decompress the picture                  DXTDecompression.decompressImage(out pic' (this.width / (int)(Math.Pow(2' MipmapLevel)))' (this.height / (int)(Math.Pow(2' MipmapLevel)))' this.getPictureData(MipmapLevel)' flag);              }              else              {                  // Using the palette to determine the color                  pic = this.getPictureUncompressedByteArray(MipmapLevel);              }
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getBitmap,The following statement contains a magic number: int x = (this.width / (int)(Math.Pow(2' MipmapLevel)))' y = (this.height / (int)(Math.Pow(2' MipmapLevel)));
Magic Number,SereniaBLPLib,BlpFile,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\BlpFile.cs,getBitmap,The following statement contains a magic number: int x = (this.width / (int)(Math.Pow(2' MipmapLevel)))' y = (this.height / (int)(Math.Pow(2' MipmapLevel)));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompress,The following statement contains a magic number: byte[] colourBlock = new byte[8];
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompress,The following statement contains a magic number: if ((flags & ((int)DXTFlags.DXT3 | (int)DXTFlags.DXT5)) != 0)                  Array.Copy(block' 8' colourBlock' 0' 8);              else                  Array.Copy(block' 0' colourBlock' 0' 8);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompress,The following statement contains a magic number: if ((flags & ((int)DXTFlags.DXT3 | (int)DXTFlags.DXT5)) != 0)                  Array.Copy(block' 8' colourBlock' 0' 8);              else                  Array.Copy(block' 0' colourBlock' 0' 8);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompress,The following statement contains a magic number: if ((flags & ((int)DXTFlags.DXT3 | (int)DXTFlags.DXT5)) != 0)                  Array.Copy(block' 8' colourBlock' 0' 8);              else                  Array.Copy(block' 0' colourBlock' 0' 8);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt3,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  // Quantise down to 4 bits                  byte quant = bytes[i];                    byte lo = (byte)(quant & 0x0F);                  byte hi = (byte)(quant & 0xF0);                    // Convert back up to bytes                  rgba[8 * i + 3] = (byte)(lo | (lo << 4));                  rgba[8 * i + 7] = (byte)(hi | (hi >> 4));              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: byte[] codes = new byte[8];
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: if (alpha0 <= alpha1)              {                  // Use 5-Alpha Codebook                  for (int i = 1; i < 5; i++)                      codes[1 + i] = (byte)(((5 - i) * alpha0 + i * alpha1) / 5);                  codes[6] = 0;                  codes[7] = 255;              }              else              {                  // Use 7-Alpha Codebook                  for (int i = 1; i < 7; i++)                  {                      codes[i + 1] = (byte)(((7 - i) * alpha0 + i * alpha1) / 7);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: byte[] indices = new byte[16];
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: int blockSrc_pos = 2;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  // grab 3 bytes                  int value = 0;                  for (int j = 0; j < 3; j++)                  {                      int _byte = blockSrc[blockSrc_pos++];                      value |= (_byte << 8 * j);                  }                    // unpack 8 3-bit values from it                  for (int j = 0; j < 8; j++)                  {                      int index = (value >> 3 * j) & 0x07;                      dest[indices_pos++] = (byte)index;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  // grab 3 bytes                  int value = 0;                  for (int j = 0; j < 3; j++)                  {                      int _byte = blockSrc[blockSrc_pos++];                      value |= (_byte << 8 * j);                  }                    // unpack 8 3-bit values from it                  for (int j = 0; j < 8; j++)                  {                      int index = (value >> 3 * j) & 0x07;                      dest[indices_pos++] = (byte)index;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  // grab 3 bytes                  int value = 0;                  for (int j = 0; j < 3; j++)                  {                      int _byte = blockSrc[blockSrc_pos++];                      value |= (_byte << 8 * j);                  }                    // unpack 8 3-bit values from it                  for (int j = 0; j < 8; j++)                  {                      int index = (value >> 3 * j) & 0x07;                      dest[indices_pos++] = (byte)index;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  // grab 3 bytes                  int value = 0;                  for (int j = 0; j < 3; j++)                  {                      int _byte = blockSrc[blockSrc_pos++];                      value |= (_byte << 8 * j);                  }                    // unpack 8 3-bit values from it                  for (int j = 0; j < 8; j++)                  {                      int index = (value >> 3 * j) & 0x07;                      dest[indices_pos++] = (byte)index;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  // grab 3 bytes                  int value = 0;                  for (int j = 0; j < 3; j++)                  {                      int _byte = blockSrc[blockSrc_pos++];                      value |= (_byte << 8 * j);                  }                    // unpack 8 3-bit values from it                  for (int j = 0; j < 8; j++)                  {                      int index = (value >> 3 * j) & 0x07;                      dest[indices_pos++] = (byte)index;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  rgba[4 * i + 3] = codes[indices[i]];              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  rgba[4 * i + 3] = codes[indices[i]];              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,DecompressAlphaDxt5,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  rgba[4 * i + 3] = codes[indices[i]];              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: byte[] codes = new byte[16];
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: int b = unpack565(bytes' 2' ref codes' 4);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: int b = unpack565(bytes' 2' ref codes' 4);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  int c = codes[i];                  int d = codes[4 + i];                    if (isDxt1 && a <= b)                  {                      codes[8 + i] = (byte)((c + d) / 2);                      codes[12 + i] = 0;                  }                  else                  {                      codes[8 + i] = (byte)((2 * c + d) / 3);                      codes[12 + i] = (byte)((c + 2 * d) / 3);                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: codes[8 + 3] = 255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: codes[8 + 3] = 255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: codes[8 + 3] = 255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: codes[12 + 3] = (isDxt1 && a <= b) ? (byte)0 : (byte)255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: codes[12 + 3] = (isDxt1 && a <= b) ? (byte)0 : (byte)255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: codes[12 + 3] = (isDxt1 && a <= b) ? (byte)0 : (byte)255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: byte[] indices = new byte[16];
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  byte packed = bytes[4 + i];                    indices[0 + i * 4] = (byte)(packed & 0x3);                  indices[1 + i * 4] = (byte)((packed >> 2) & 0x3);                  indices[2 + i * 4] = (byte)((packed >> 4) & 0x3);                  indices[3 + i * 4] = (byte)((packed >> 6) & 0x3);              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte offset = (byte)(4 * indices[i]);                  for (int j = 0; j < 4; j++)                  {                      rgba[4 * i + j] = codes[offset + j];                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte offset = (byte)(4 * indices[i]);                  for (int j = 0; j < 4; j++)                  {                      rgba[4 * i + j] = codes[offset + j];                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte offset = (byte)(4 * indices[i]);                  for (int j = 0; j < 4; j++)                  {                      rgba[4 * i + j] = codes[offset + j];                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressColor,The following statement contains a magic number: for (int i = 0; i < 16; i++)              {                  byte offset = (byte)(4 * indices[i]);                  for (int j = 0; j < 4; j++)                  {                      rgba[4 * i + j] = codes[offset + j];                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: int value = (int)packed[0 + packed_offset] | ((int)packed[1 + packed_offset] << 8);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: byte red = (byte)((value >> 11) & 0x1F);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: byte green = (byte)((value >> 5) & 0x3F);
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[0 + colour_offset] = (byte)((red << 3) | (red >> 2));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[0 + colour_offset] = (byte)((red << 3) | (red >> 2));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[1 + colour_offset] = (byte)((green << 2) | (green >> 4));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[1 + colour_offset] = (byte)((green << 2) | (green >> 4));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[2 + colour_offset] = (byte)((blue << 3) | (blue >> 2));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[2 + colour_offset] = (byte)((blue << 3) | (blue >> 2));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[2 + colour_offset] = (byte)((blue << 3) | (blue >> 2));
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[3 + colour_offset] = 255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,unpack565,The following statement contains a magic number: colour[3 + colour_offset] = 255;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: rgba = new byte[width * height * 4];
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: int bytesPerBlock = ((flags & (int)DXTFlags.DXT1) != 0) ? 8 : 16;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: int bytesPerBlock = ((flags & (int)DXTFlags.DXT1) != 0) ? 8 : 16;
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
Magic Number,SereniaBLPLib,DXTDecompression,C:\repos\stoneharry_Spell-Editor-GUI-V2\SereniaBLPLib\DXTDecompression.cs,decompressImage,The following statement contains a magic number: for (int y = 0; y < height; y += 4)              {                  for (int x = 0; x < width; x += 4)                  {                      // decompress the block                      byte[] targetRGBA = new byte[4 * 16];                      int targetRGBA_pos = 0;                      byte[] sourceBlockBuffer = new byte[bytesPerBlock]; // größe korrekt?                      if (sourceBlock.Length == sourceBlock_pos) continue;                      Array.Copy(sourceBlock' sourceBlock_pos' sourceBlockBuffer' 0' bytesPerBlock);                      //sourceBlock.CopyTo(sourceBlockBuffer' sourceBlock_pos);                      decompress(ref targetRGBA' sourceBlockBuffer' flags);                        // Write the decompressed pixels to the correct image locations                      byte[] sourcePixel = new byte[4];                        for (int py = 0; py < 4; py++)                      {                          for (int px = 0; px < 4; px++)                          {                              int sx = x + px;                              int sy = y + py;                              if (sx < width && sy < height)                              {                                  int targetPixel = 4 * (width * sy + sx);                                    //targetRGBA.CopyTo(sourcePixel' targetRGBA_pos);                                  Array.Copy(targetRGBA' targetRGBA_pos' sourcePixel' 0' 4);                                  targetRGBA_pos += 4;                                    for (int i = 0; i < 4; i++)                                      rgba[targetPixel + i] = sourcePixel[i];                              }                              else                              {                                  // Ignore that pixel                                  targetRGBA_pos += 4;                              }                          }                      }                      sourceBlock_pos += bytesPerBlock;                  }              }
