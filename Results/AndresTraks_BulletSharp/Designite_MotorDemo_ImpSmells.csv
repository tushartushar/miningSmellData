Implementation smell,Namespace,Class,File,Method,Description
Magic Number,MotorDemo,MotorDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: World.Gravity = new Vector3 (0' -10' 0);  
Magic Number,MotorDemo,MotorDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: SpawnTestRig (new Vector3 (-2' 0.5f' 0)' true);  
Magic Number,MotorDemo,MotorDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,SetMotorTargets,The following statement contains a magic number: foreach (var rig in rigs) {  	for (int i = 0; i < 2 * NumLegs; i++) {  		HingeConstraint hingeC = rig.GetJoints () [i] as HingeConstraint;  		float fCurAngle = hingeC.HingeAngle;  		float fTargetPercent = ((int)(m_Time / 1000.0f) % (int)fCyclePeriod) / fCyclePeriod;  		float fTargetAngle = (float)(0.5 * (1 + Math.Sin (2.0f * Math.PI * fTargetPercent)));  		float fTargetLimitAngle = hingeC.LowerLimit + fTargetAngle * (hingeC.UpperLimit - hingeC.LowerLimit);  		float fAngleError = fTargetLimitAngle - fCurAngle;  		float fDesiredAngularVel = 1000000.0f * fAngleError / ms;  		hingeC.EnableAngularMotor (true' fDesiredAngularVel' fMuscleStrength);  	}  }  
Magic Number,MotorDemo,MotorDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,SetMotorTargets,The following statement contains a magic number: foreach (var rig in rigs) {  	for (int i = 0; i < 2 * NumLegs; i++) {  		HingeConstraint hingeC = rig.GetJoints () [i] as HingeConstraint;  		float fCurAngle = hingeC.HingeAngle;  		float fTargetPercent = ((int)(m_Time / 1000.0f) % (int)fCyclePeriod) / fCyclePeriod;  		float fTargetAngle = (float)(0.5 * (1 + Math.Sin (2.0f * Math.PI * fTargetPercent)));  		float fTargetLimitAngle = hingeC.LowerLimit + fTargetAngle * (hingeC.UpperLimit - hingeC.LowerLimit);  		float fAngleError = fTargetLimitAngle - fCurAngle;  		float fDesiredAngularVel = 1000000.0f * fAngleError / ms;  		hingeC.EnableAngularMotor (true' fDesiredAngularVel' fMuscleStrength);  	}  }  
Magic Number,MotorDemo,MotorDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,SetMotorTargets,The following statement contains a magic number: for (int i = 0; i < 2 * NumLegs; i++) {  	HingeConstraint hingeC = rig.GetJoints () [i] as HingeConstraint;  	float fCurAngle = hingeC.HingeAngle;  	float fTargetPercent = ((int)(m_Time / 1000.0f) % (int)fCyclePeriod) / fCyclePeriod;  	float fTargetAngle = (float)(0.5 * (1 + Math.Sin (2.0f * Math.PI * fTargetPercent)));  	float fTargetLimitAngle = hingeC.LowerLimit + fTargetAngle * (hingeC.UpperLimit - hingeC.LowerLimit);  	float fAngleError = fTargetLimitAngle - fCurAngle;  	float fDesiredAngularVel = 1000000.0f * fAngleError / ms;  	hingeC.EnableAngularMotor (true' fDesiredAngularVel' fMuscleStrength);  }  
Magic Number,MotorDemo,MotorDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,SetMotorTargets,The following statement contains a magic number: for (int i = 0; i < 2 * NumLegs; i++) {  	HingeConstraint hingeC = rig.GetJoints () [i] as HingeConstraint;  	float fCurAngle = hingeC.HingeAngle;  	float fTargetPercent = ((int)(m_Time / 1000.0f) % (int)fCyclePeriod) / fCyclePeriod;  	float fTargetAngle = (float)(0.5 * (1 + Math.Sin (2.0f * Math.PI * fTargetPercent)));  	float fTargetLimitAngle = hingeC.LowerLimit + fTargetAngle * (hingeC.UpperLimit - hingeC.LowerLimit);  	float fAngleError = fTargetLimitAngle - fCurAngle;  	float fDesiredAngularVel = 1000000.0f * fAngleError / ms;  	hingeC.EnableAngularMotor (true' fDesiredAngularVel' fMuscleStrength);  }  
