Implementation smell,Namespace,Class,File,Method,Description
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitialize,The following statement contains a magic number: Freelook.Eye = new Vector3(8' 4' 8);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitialize,The following statement contains a magic number: Freelook.Eye = new Vector3(8' 4' 8);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitialize,The following statement contains a magic number: Freelook.Eye = new Vector3(8' 4' 8);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: Vector3 worldAabbMin = new Vector3(-10000' -10000' -10000);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: Vector3 worldAabbMin = new Vector3(-10000' -10000' -10000);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: Vector3 worldAabbMin = new Vector3(-10000' -10000' -10000);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: Vector3 worldAabbMax = new Vector3(10000' 10000' 10000);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: Vector3 worldAabbMax = new Vector3(10000' 10000' 10000);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: Vector3 worldAabbMax = new Vector3(10000' 10000' 10000);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: World.Gravity = new Vector3(0' -10' 0);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: CollisionShape groundShape = new BoxShape(200' 10' 200);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: CollisionShape groundShape = new BoxShape(200' 10' 200);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: CollisionShape groundShape = new BoxShape(200' 10' 200);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: CollisionObject ground = LocalCreateRigidBody(0' Matrix.Translation(0' -10' 0)' groundShape);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,OnInitializePhysics,The following statement contains a magic number: SpawnTestRig(new Vector3(-2' 1' 0)' true);
Magic Number,MotorDemo,MotorDemo,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\MotorDemo.cs,SetMotorTargets,The following statement contains a magic number: foreach (var rig in rigs)              {                  foreach (HingeConstraint hinge in rig.Joints)                  {                      float currentAngle = hinge.HingeAngle;                        float targetPercent = ((int)(time / 1000.0f) % (int)CyclePeriod) / CyclePeriod;                      float targetAngle = (float)(0.5 * (1 + Math.Sin(2.0f * Math.PI * targetPercent)));                      float targetLimitAngle = hinge.LowerLimit + targetAngle * (hinge.UpperLimit - hinge.LowerLimit);                      float angleError = targetLimitAngle - currentAngle;                      float desiredAngularVel = 1000000.0f * angleError / ms;                      hinge.EnableAngularMotor(true' desiredAngularVel' MuscleStrength);                  }              }
Magic Number,MotorDemo,TestRig,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\TestRig.cs,CreateLegs,The following statement contains a magic number: for (int i = 0; i < NumLegs; i++)              {                  float direction = (float)(2 * Math.PI * i / NumLegs);                    Vector3 thighOrigin = ToCartesian(direction' BodyRadius + 0.5f * ThighLength);                  Vector3 toBone = thighOrigin.Normalized;                  Vector3 vAxis = Vector3.Cross(toBone' up);                  Matrix transform = Matrix.RotationQuaternion(Quaternion.RotationAxis(vAxis' PI_2)) * Matrix.Translation(thighOrigin);                  RigidBody thigh = LocalCreateRigidBody(1' transform * rootTransform' _thighShape);                  SetDamping(thigh);                    Vector3 translation = ToCartesian(direction' BodyRadius + ThighLength);                  translation.Y = -0.5f * ShinLength;                  transform = Matrix.Translation(translation);                  RigidBody shin = LocalCreateRigidBody(1' transform * rootTransform' _shinShape);                  SetDamping(shin);                    Joints[2 * i] = CreateHipJoint(_rootBody' thigh' direction);                  _ownerWorld.AddConstraint(Joints[2 * i]' true);                    Joints[2 * i + 1] = CreateKneeJoint(_rootBody' thigh' shin' direction);                  _ownerWorld.AddConstraint(Joints[2 * i + 1]' true);                    _jointBodies.Add(thigh);                  _jointBodies.Add(shin);              }
Magic Number,MotorDemo,TestRig,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\TestRig.cs,CreateLegs,The following statement contains a magic number: for (int i = 0; i < NumLegs; i++)              {                  float direction = (float)(2 * Math.PI * i / NumLegs);                    Vector3 thighOrigin = ToCartesian(direction' BodyRadius + 0.5f * ThighLength);                  Vector3 toBone = thighOrigin.Normalized;                  Vector3 vAxis = Vector3.Cross(toBone' up);                  Matrix transform = Matrix.RotationQuaternion(Quaternion.RotationAxis(vAxis' PI_2)) * Matrix.Translation(thighOrigin);                  RigidBody thigh = LocalCreateRigidBody(1' transform * rootTransform' _thighShape);                  SetDamping(thigh);                    Vector3 translation = ToCartesian(direction' BodyRadius + ThighLength);                  translation.Y = -0.5f * ShinLength;                  transform = Matrix.Translation(translation);                  RigidBody shin = LocalCreateRigidBody(1' transform * rootTransform' _shinShape);                  SetDamping(shin);                    Joints[2 * i] = CreateHipJoint(_rootBody' thigh' direction);                  _ownerWorld.AddConstraint(Joints[2 * i]' true);                    Joints[2 * i + 1] = CreateKneeJoint(_rootBody' thigh' shin' direction);                  _ownerWorld.AddConstraint(Joints[2 * i + 1]' true);                    _jointBodies.Add(thigh);                  _jointBodies.Add(shin);              }
Magic Number,MotorDemo,TestRig,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\TestRig.cs,CreateLegs,The following statement contains a magic number: for (int i = 0; i < NumLegs; i++)              {                  float direction = (float)(2 * Math.PI * i / NumLegs);                    Vector3 thighOrigin = ToCartesian(direction' BodyRadius + 0.5f * ThighLength);                  Vector3 toBone = thighOrigin.Normalized;                  Vector3 vAxis = Vector3.Cross(toBone' up);                  Matrix transform = Matrix.RotationQuaternion(Quaternion.RotationAxis(vAxis' PI_2)) * Matrix.Translation(thighOrigin);                  RigidBody thigh = LocalCreateRigidBody(1' transform * rootTransform' _thighShape);                  SetDamping(thigh);                    Vector3 translation = ToCartesian(direction' BodyRadius + ThighLength);                  translation.Y = -0.5f * ShinLength;                  transform = Matrix.Translation(translation);                  RigidBody shin = LocalCreateRigidBody(1' transform * rootTransform' _shinShape);                  SetDamping(shin);                    Joints[2 * i] = CreateHipJoint(_rootBody' thigh' direction);                  _ownerWorld.AddConstraint(Joints[2 * i]' true);                    Joints[2 * i + 1] = CreateKneeJoint(_rootBody' thigh' shin' direction);                  _ownerWorld.AddConstraint(Joints[2 * i + 1]' true);                    _jointBodies.Add(thigh);                  _jointBodies.Add(shin);              }
Magic Number,MotorDemo,TestRig,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\TestRig.cs,CreateLegs,The following statement contains a magic number: for (int i = 0; i < NumLegs; i++)              {                  float direction = (float)(2 * Math.PI * i / NumLegs);                    Vector3 thighOrigin = ToCartesian(direction' BodyRadius + 0.5f * ThighLength);                  Vector3 toBone = thighOrigin.Normalized;                  Vector3 vAxis = Vector3.Cross(toBone' up);                  Matrix transform = Matrix.RotationQuaternion(Quaternion.RotationAxis(vAxis' PI_2)) * Matrix.Translation(thighOrigin);                  RigidBody thigh = LocalCreateRigidBody(1' transform * rootTransform' _thighShape);                  SetDamping(thigh);                    Vector3 translation = ToCartesian(direction' BodyRadius + ThighLength);                  translation.Y = -0.5f * ShinLength;                  transform = Matrix.Translation(translation);                  RigidBody shin = LocalCreateRigidBody(1' transform * rootTransform' _shinShape);                  SetDamping(shin);                    Joints[2 * i] = CreateHipJoint(_rootBody' thigh' direction);                  _ownerWorld.AddConstraint(Joints[2 * i]' true);                    Joints[2 * i + 1] = CreateKneeJoint(_rootBody' thigh' shin' direction);                  _ownerWorld.AddConstraint(Joints[2 * i + 1]' true);                    _jointBodies.Add(thigh);                  _jointBodies.Add(shin);              }
Magic Number,MotorDemo,TestRig,C:\repos\AndresTraks_BulletSharp\demos\Generic\MotorDemo\TestRig.cs,CreateLegs,The following statement contains a magic number: for (int i = 0; i < NumLegs; i++)              {                  float direction = (float)(2 * Math.PI * i / NumLegs);                    Vector3 thighOrigin = ToCartesian(direction' BodyRadius + 0.5f * ThighLength);                  Vector3 toBone = thighOrigin.Normalized;                  Vector3 vAxis = Vector3.Cross(toBone' up);                  Matrix transform = Matrix.RotationQuaternion(Quaternion.RotationAxis(vAxis' PI_2)) * Matrix.Translation(thighOrigin);                  RigidBody thigh = LocalCreateRigidBody(1' transform * rootTransform' _thighShape);                  SetDamping(thigh);                    Vector3 translation = ToCartesian(direction' BodyRadius + ThighLength);                  translation.Y = -0.5f * ShinLength;                  transform = Matrix.Translation(translation);                  RigidBody shin = LocalCreateRigidBody(1' transform * rootTransform' _shinShape);                  SetDamping(shin);                    Joints[2 * i] = CreateHipJoint(_rootBody' thigh' direction);                  _ownerWorld.AddConstraint(Joints[2 * i]' true);                    Joints[2 * i + 1] = CreateKneeJoint(_rootBody' thigh' shin' direction);                  _ownerWorld.AddConstraint(Joints[2 * i + 1]' true);                    _jointBodies.Add(thigh);                  _jointBodies.Add(shin);              }
