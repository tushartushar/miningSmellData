Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: World.Gravity = new Vector3(0' -10' 0);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: CollisionShape groundShape = new BoxShape(150' 7' 150);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: CollisionShape groundShape = new BoxShape(150' 7' 150);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: CollisionShape groundShape = new BoxShape(150' 7' 150);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: Vector3 x = new Vector3(-ArraySizeX' 8' -20);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: Vector3 x = new Vector3(-ArraySizeX' 8' -20);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: Vector3 deltaX = new Vector3(1' 2' 0);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: Vector3 deltaY = new Vector3(2' 0' 0);
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: for (int i = 0; i < ArraySizeY; i++)              {                  y = x;                  for (int j = 0; j < ArraySizeX; j++)                  {                      startTransform = Matrix.Translation(y - new Vector3(-10' 0' 0));                        //using motionstate is recommended' it provides interpolation capabilities' and only synchronizes 'active' objects                      DefaultMotionState myMotionState = new DefaultMotionState(startTransform);                        RigidBodyConstructionInfo rbInfo;                      switch (j % 3)                      {                          case 0:                              rbInfo = new RigidBodyConstructionInfo(mass' myMotionState' colShape' localInertia);                              break;                          case 1:                              rbInfo = new RigidBodyConstructionInfo(mass' myMotionState' colShape3' localInertia);                              break;                          default:                              rbInfo = new RigidBodyConstructionInfo(mass' myMotionState' colShape2' localInertia);                              break;                      }                      RigidBody body = new RigidBody(rbInfo);                      rbInfo.Dispose();                      //body.ActivationState = ActivationState.IslandSleeping;                      body.LinearFactor = new Vector3(1' 1' 0);                      body.AngularFactor = new Vector3(0' 0' 1);                        World.AddRigidBody(body);                        y += deltaY;                  }                  x += deltaX;              }
Magic Number,Box2DDemo,Physics,C:\repos\AndresTraks_BulletSharp\demos\SlimDX\Box2dDemo\Physics.cs,Physics,The following statement contains a magic number: for (int i = 0; i < ArraySizeY; i++)              {                  y = x;                  for (int j = 0; j < ArraySizeX; j++)                  {                      startTransform = Matrix.Translation(y - new Vector3(-10' 0' 0));                        //using motionstate is recommended' it provides interpolation capabilities' and only synchronizes 'active' objects                      DefaultMotionState myMotionState = new DefaultMotionState(startTransform);                        RigidBodyConstructionInfo rbInfo;                      switch (j % 3)                      {                          case 0:                              rbInfo = new RigidBodyConstructionInfo(mass' myMotionState' colShape' localInertia);                              break;                          case 1:                              rbInfo = new RigidBodyConstructionInfo(mass' myMotionState' colShape3' localInertia);                              break;                          default:                              rbInfo = new RigidBodyConstructionInfo(mass' myMotionState' colShape2' localInertia);                              break;                      }                      RigidBody body = new RigidBody(rbInfo);                      rbInfo.Dispose();                      //body.ActivationState = ActivationState.IslandSleeping;                      body.LinearFactor = new Vector3(1' 1' 0);                      body.AngularFactor = new Vector3(0' 0' 1);                        World.AddRigidBody(body);                        y += deltaY;                  }                  x += deltaX;              }
