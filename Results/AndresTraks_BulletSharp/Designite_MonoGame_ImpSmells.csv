Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DemoFramework.MonoGame,GraphicsDeviceControl,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\GraphicsDeviceControl.cs,HandleDeviceReset,Cyclomatic complexity of the method is 10
Complex Method,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,InitInstancedRender,Cyclomatic complexity of the method is 10
Long Statement,DemoFramework.MonoGame,MonoGameGraphics,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MonoGameGraphics.cs,UpdateView,The length of the statement  "		effect.View = Matrix.CreateLookAt (MathHelper.Convert (freelook.Eye)' MathHelper.Convert (freelook.Target)' MathHelper.Convert (freelook.Up)); " is 142.
Long Statement,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,InitRigidBodyInstance,The length of the statement  "			Color = "Ground".Equals (colObj.UserObject) ? groundColor : colObj.ActivationState == ActivationState.ActiveTag ? activeColor : passiveColor " is 140.
Complex Conditional,DemoFramework.MonoGame,GraphicsDeviceControl,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\GraphicsDeviceControl.cs,GraphicsDeviceControl_PreviewKeyDown,The conditional expression  "e.KeyCode == Keys.Left || e.KeyCode == Keys.Right || e.KeyCode == Keys.Up || e.KeyCode == Keys.Down"  is complex.
Empty Catch Block,DemoFramework.MonoGame,GraphicsDeviceControl,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\GraphicsDeviceControl.cs,OnPaint,The method has an empty catch block.
Magic Number,DemoFramework.MonoGame,MonoGameGraphics,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MonoGameGraphics.cs,Initialize,The following statement contains a magic number: Width = 1024;  
Magic Number,DemoFramework.MonoGame,MonoGameGraphics,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MonoGameGraphics.cs,Initialize,The following statement contains a magic number: Height = 768;  
Magic Number,DemoFramework.MonoGame,ShapeData,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,SetVertexNormalBuffer,The following statement contains a magic number: VertexCount = vectors.Length / 2;  
Magic Number,DemoFramework.MonoGame,ShapeData,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,SetDynamicVertexNormalBuffer,The following statement contains a magic number: if (VertexBuffer != null && VertexCount * 2 == vectors.Length) {  	// Update existing buffer  	VertexBuffer.SetData (vectors);  } else {  	// Create new buffer  	if (VertexBuffer != null)  		VertexBuffer.Dispose ();  	SetVertexNormalBuffer (device' vectors);  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: foreach (ShapeData s in shapes.Values) {  	device.SetVertexBuffer (s.VertexBuffer);  	foreach (InstanceData instance in s.Instances) {  		effect.DiffuseColor = instance.Color;  		effect.World = instance.WorldTransform;  		pass.Apply ();  		if (s.IndexBuffer != null) {  			device.Indices = s.IndexBuffer;  			device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  		} else {  			device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  		}  	}  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: foreach (ShapeData s in shapes.Values) {  	device.SetVertexBuffer (s.VertexBuffer);  	foreach (InstanceData instance in s.Instances) {  		effect.DiffuseColor = instance.Color;  		effect.World = instance.WorldTransform;  		pass.Apply ();  		if (s.IndexBuffer != null) {  			device.Indices = s.IndexBuffer;  			device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  		} else {  			device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  		}  	}  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: foreach (InstanceData instance in s.Instances) {  	effect.DiffuseColor = instance.Color;  	effect.World = instance.WorldTransform;  	pass.Apply ();  	if (s.IndexBuffer != null) {  		device.Indices = s.IndexBuffer;  		device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  	} else {  		device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  	}  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: foreach (InstanceData instance in s.Instances) {  	effect.DiffuseColor = instance.Color;  	effect.World = instance.WorldTransform;  	pass.Apply ();  	if (s.IndexBuffer != null) {  		device.Indices = s.IndexBuffer;  		device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  	} else {  		device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  	}  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: if (s.IndexBuffer != null) {  	device.Indices = s.IndexBuffer;  	device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  } else {  	device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: if (s.IndexBuffer != null) {  	device.Indices = s.IndexBuffer;  	device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  } else {  	device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  }  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: device.DrawIndexedPrimitives (s.PrimitiveType' 0' 0' s.VertexCount' 0' s.IndexCount / 3);  
Magic Number,DemoFramework.MonoGame,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\MeshFactory.cs,RenderInstanced,The following statement contains a magic number: device.DrawPrimitives (s.PrimitiveType' 0' s.VertexCount / 3);  
Magic Number,DemoFramework.MonoGame,PhysicsDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\PhysicsDebugDraw.cs,DrawDebugWorld,The following statement contains a magic number: for (int i = 0; i < pointCount; i++) {  	int color = lines [i].Color;  	linesArray [i].Color = new Color (color & 0xff' (color & 0xff00) >> 8' (color & 0xff0000) >> 16' 1);  	linesArray [i].Position = MathHelper.Convert (lines [i].Position);  }  
Magic Number,DemoFramework.MonoGame,PhysicsDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\PhysicsDebugDraw.cs,DrawDebugWorld,The following statement contains a magic number: for (int i = 0; i < pointCount; i++) {  	int color = lines [i].Color;  	linesArray [i].Color = new Color (color & 0xff' (color & 0xff00) >> 8' (color & 0xff0000) >> 16' 1);  	linesArray [i].Position = MathHelper.Convert (lines [i].Position);  }  
Magic Number,DemoFramework.MonoGame,PhysicsDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\PhysicsDebugDraw.cs,DrawDebugWorld,The following statement contains a magic number: linesArray [i].Color = new Color (color & 0xff' (color & 0xff00) >> 8' (color & 0xff0000) >> 16' 1);  
Magic Number,DemoFramework.MonoGame,PhysicsDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\PhysicsDebugDraw.cs,DrawDebugWorld,The following statement contains a magic number: linesArray [i].Color = new Color (color & 0xff' (color & 0xff00) >> 8' (color & 0xff0000) >> 16' 1);  
Magic Number,DemoFramework.MonoGame,XnaForm,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\XnaForm.cs,InitializeComponent,The following statement contains a magic number: this.graphicsDeviceControl1.Size = new System.Drawing.Size (1024' 768);  
Magic Number,DemoFramework.MonoGame,XnaForm,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\XnaForm.cs,InitializeComponent,The following statement contains a magic number: this.graphicsDeviceControl1.Size = new System.Drawing.Size (1024' 768);  
Magic Number,DemoFramework.MonoGame,XnaForm,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\XnaForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (1024' 768);  
Magic Number,DemoFramework.MonoGame,XnaForm,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MonoGame\XnaForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (1024' 768);  
