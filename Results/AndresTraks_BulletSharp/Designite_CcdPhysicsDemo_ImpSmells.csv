Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,OnInitializePhysics,The length of the statement  "	//    CollisionConf.GetCollisionAlgorithmCreateFunc(BroadphaseNativeType.ConvexShape' BroadphaseNativeType.ConvexShape)); " is 121.
Long Statement,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The length of the statement  "		Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0); " is 155.
Long Statement,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The length of the statement  "		body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction); " is 125.
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,OnInitializePhysics,The following statement contains a magic number: shootBoxInitialSpeed = 4000;  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,OnInitializePhysics,The following statement contains a magic number: World.SolverInfo.NumIterations = 20;  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,OnInitializePhysics,The following statement contains a magic number: World.Gravity = new Vector3 (0' -10' 0);  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: for (int i = 0; i < numObjects; i++) {  	//stack them  	const int colsize = 10;  	int row = (int)((i * CubeHalfExtents * 2) / (colsize * 2 * CubeHalfExtents));  	int row2 = row;  	int col = (i) % (colsize) - colsize / 2;  	if (col > 3) {  		col = 11;  		row2 |= 1;  	}  	Matrix trans = Matrix.Translation (col * 2 * CubeHalfExtents + (row2 % 2) * CubeHalfExtents' row * 2 * CubeHalfExtents + CubeHalfExtents + ExtraHeight' 0);  	RigidBody body = LocalCreateRigidBody (1' trans' shape);  	body.SetAnisotropicFriction (shape.AnisotropicRollingFrictionDirection' AnisotropicFrictionFlags.AnisotropicRollingFriction);  	body.Friction = 0.5f;  	//body.RollingFriction = 0.3f;  	if (ccdMode) {  		body.CcdMotionThreshold = 1e-7f;  		body.CcdSweptSphereRadius = 0.9f * CubeHalfExtents;  	}  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: if (col > 3) {  	col = 11;  	row2 |= 1;  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: if (col > 3) {  	col = 11;  	row2 |= 1;  }  
Magic Number,CcdPhysicsDemo,CcdPhysicsDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\CcdPhysicsDemo\CcdPhysicsDemo.cs,CreateBoxStack,The following statement contains a magic number: col = 11;  
