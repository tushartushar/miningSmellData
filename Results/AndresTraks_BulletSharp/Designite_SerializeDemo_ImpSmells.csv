Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,Cyclomatic complexity of the method is 8
Long Parameter List,SerializeDemo,CustomBulletWorldImporter,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,CreateRigidBody,The method has 5 parameters.
Long Statement,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The length of the statement  "		Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0)); " is 121.
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: World.Gravity = new Vector3 (0' -10' 0);  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: if (!fileLoader.LoadFile (bulletFile)) {  	CollisionShape groundShape = new BoxShape (50);  	CollisionShapes.Add (groundShape);  	RigidBody ground = LocalCreateRigidBody (0' Matrix.Translation (0' -50' 0)' groundShape);  	ground.UserObject = "Ground";  	// create a few dynamic rigidbodies  	float mass = 1.0f;  	Vector3[] positions = new Vector3[2] {  		new Vector3 (0.1f' 0.2f' 0.3f)'  		new Vector3 (0.4f' 0.5f' 0.6f)  	};  	float[] radi = new float[2] {  		0.3f'  		0.4f  	};  	CollisionShape colShape = new MultiSphereShape (positions' radi);  	//CollisionShape colShape = new CapsuleShapeZ(1' 1);  	//CollisionShape colShape = new CylinderShapeZ(1' 1' 1);  	//CollisionShape colShape = new BoxShape(1);  	//CollisionShape colShape = new SphereShape(1);  	CollisionShapes.Add (colShape);  	Vector3 localInertia = colShape.CalculateLocalInertia (mass);  	float start_x = StartPosX - ArraySizeX / 2;  	float start_y = StartPosY;  	float start_z = StartPosZ - ArraySizeZ / 2;  	for (int k = 0; k < ArraySizeY; k++) {  		for (int i = 0; i < ArraySizeX; i++) {  			for (int j = 0; j < ArraySizeZ; j++) {  				Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  				// using motionstate is recommended' it provides interpolation capabilities  				// and only synchronizes 'active' objects  				DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  				RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  				RigidBody body = new RigidBody (rbInfo);  				rbInfo.Dispose ();  				// make it drop from a height  				body.Translate (new Vector3 (0' 20' 0));  				World.AddRigidBody (body);  			}  		}  	}  	DefaultSerializer serializer = new DefaultSerializer ();  	serializer.RegisterNameForObject (ground' "GroundName");  	for (int i = 0; i < CollisionShapes.Count; i++)  		serializer.RegisterNameForObject (CollisionShapes [i]);  	Point2PointConstraint p2p = new Point2PointConstraint ((RigidBody)World.CollisionObjectArray [2]' new Vector3 (0' 1' 0));  	World.AddConstraint (p2p);  	serializer.RegisterNameForObject (p2p' "constraintje");  	World.Serialize (serializer);  	BulletSharp.DataStream data = serializer.LockBuffer ();  	byte[] dataBytes = new byte[data.Length];  	data.Read (dataBytes' 0' dataBytes.Length);  	FileStream file = new FileStream ("testFile.bullet"' FileMode.Create);  	file.Write (dataBytes' 0' dataBytes.Length);  	file.Close ();  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int k = 0; k < ArraySizeY; k++) {  	for (int i = 0; i < ArraySizeX; i++) {  		for (int j = 0; j < ArraySizeZ; j++) {  			Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  			// using motionstate is recommended' it provides interpolation capabilities  			// and only synchronizes 'active' objects  			DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  			RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  			RigidBody body = new RigidBody (rbInfo);  			rbInfo.Dispose ();  			// make it drop from a height  			body.Translate (new Vector3 (0' 20' 0));  			World.AddRigidBody (body);  		}  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int k = 0; k < ArraySizeY; k++) {  	for (int i = 0; i < ArraySizeX; i++) {  		for (int j = 0; j < ArraySizeZ; j++) {  			Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  			// using motionstate is recommended' it provides interpolation capabilities  			// and only synchronizes 'active' objects  			DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  			RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  			RigidBody body = new RigidBody (rbInfo);  			rbInfo.Dispose ();  			// make it drop from a height  			body.Translate (new Vector3 (0' 20' 0));  			World.AddRigidBody (body);  		}  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int k = 0; k < ArraySizeY; k++) {  	for (int i = 0; i < ArraySizeX; i++) {  		for (int j = 0; j < ArraySizeZ; j++) {  			Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  			// using motionstate is recommended' it provides interpolation capabilities  			// and only synchronizes 'active' objects  			DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  			RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  			RigidBody body = new RigidBody (rbInfo);  			rbInfo.Dispose ();  			// make it drop from a height  			body.Translate (new Vector3 (0' 20' 0));  			World.AddRigidBody (body);  		}  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int k = 0; k < ArraySizeY; k++) {  	for (int i = 0; i < ArraySizeX; i++) {  		for (int j = 0; j < ArraySizeZ; j++) {  			Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  			// using motionstate is recommended' it provides interpolation capabilities  			// and only synchronizes 'active' objects  			DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  			RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  			RigidBody body = new RigidBody (rbInfo);  			rbInfo.Dispose ();  			// make it drop from a height  			body.Translate (new Vector3 (0' 20' 0));  			World.AddRigidBody (body);  		}  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int i = 0; i < ArraySizeX; i++) {  	for (int j = 0; j < ArraySizeZ; j++) {  		Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  		// using motionstate is recommended' it provides interpolation capabilities  		// and only synchronizes 'active' objects  		DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  		RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  		RigidBody body = new RigidBody (rbInfo);  		rbInfo.Dispose ();  		// make it drop from a height  		body.Translate (new Vector3 (0' 20' 0));  		World.AddRigidBody (body);  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int i = 0; i < ArraySizeX; i++) {  	for (int j = 0; j < ArraySizeZ; j++) {  		Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  		// using motionstate is recommended' it provides interpolation capabilities  		// and only synchronizes 'active' objects  		DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  		RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  		RigidBody body = new RigidBody (rbInfo);  		rbInfo.Dispose ();  		// make it drop from a height  		body.Translate (new Vector3 (0' 20' 0));  		World.AddRigidBody (body);  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int i = 0; i < ArraySizeX; i++) {  	for (int j = 0; j < ArraySizeZ; j++) {  		Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  		// using motionstate is recommended' it provides interpolation capabilities  		// and only synchronizes 'active' objects  		DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  		RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  		RigidBody body = new RigidBody (rbInfo);  		rbInfo.Dispose ();  		// make it drop from a height  		body.Translate (new Vector3 (0' 20' 0));  		World.AddRigidBody (body);  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int i = 0; i < ArraySizeX; i++) {  	for (int j = 0; j < ArraySizeZ; j++) {  		Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  		// using motionstate is recommended' it provides interpolation capabilities  		// and only synchronizes 'active' objects  		DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  		RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  		RigidBody body = new RigidBody (rbInfo);  		rbInfo.Dispose ();  		// make it drop from a height  		body.Translate (new Vector3 (0' 20' 0));  		World.AddRigidBody (body);  	}  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int j = 0; j < ArraySizeZ; j++) {  	Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  	// using motionstate is recommended' it provides interpolation capabilities  	// and only synchronizes 'active' objects  	DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  	RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  	RigidBody body = new RigidBody (rbInfo);  	rbInfo.Dispose ();  	// make it drop from a height  	body.Translate (new Vector3 (0' 20' 0));  	World.AddRigidBody (body);  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int j = 0; j < ArraySizeZ; j++) {  	Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  	// using motionstate is recommended' it provides interpolation capabilities  	// and only synchronizes 'active' objects  	DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  	RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  	RigidBody body = new RigidBody (rbInfo);  	rbInfo.Dispose ();  	// make it drop from a height  	body.Translate (new Vector3 (0' 20' 0));  	World.AddRigidBody (body);  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int j = 0; j < ArraySizeZ; j++) {  	Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  	// using motionstate is recommended' it provides interpolation capabilities  	// and only synchronizes 'active' objects  	DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  	RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  	RigidBody body = new RigidBody (rbInfo);  	rbInfo.Dispose ();  	// make it drop from a height  	body.Translate (new Vector3 (0' 20' 0));  	World.AddRigidBody (body);  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: for (int j = 0; j < ArraySizeZ; j++) {  	Matrix startTransform = Matrix.Translation (2 * i + start_x' 2 * k + start_y' 2 * j + start_z);  	// using motionstate is recommended' it provides interpolation capabilities  	// and only synchronizes 'active' objects  	DefaultMotionState myMotionState = new DefaultMotionState (startTransform);  	RigidBodyConstructionInfo rbInfo = new RigidBodyConstructionInfo (mass' myMotionState' colShape' localInertia);  	RigidBody body = new RigidBody (rbInfo);  	rbInfo.Dispose ();  	// make it drop from a height  	body.Translate (new Vector3 (0' 20' 0));  	World.AddRigidBody (body);  }  
Magic Number,SerializeDemo,SerializeDemo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\SerializeDemo\SerializeDemo.cs,OnInitializePhysics,The following statement contains a magic number: body.Translate (new Vector3 (0' 20' 0));  
