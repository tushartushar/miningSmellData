Implementation smell,Namespace,Class,File,Method,Description
Long Method,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The method has 197 lines of code.
Complex Method,DemoFramework,Demo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Demo.cs,Run,Cyclomatic complexity of the method is 10
Complex Method,DemoFramework,Demo,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Demo.cs,ExitPhysics,Cyclomatic complexity of the method is 10
Complex Method,DemoFramework,GraphicsLibraryManager,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\GraphicsLibraryManager.cs,IsLibraryAvailable,Cyclomatic complexity of the method is 18
Complex Method,DemoFramework,GraphicsLibraryManager,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\GraphicsLibraryManager.cs,GetGraphics,Cyclomatic complexity of the method is 21
Complex Method,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateShape,Cyclomatic complexity of the method is 20
Complex Method,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,Cyclomatic complexity of the method is 9
Complex Method,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,Cyclomatic complexity of the method is 8
Complex Method,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,Cyclomatic complexity of the method is 29
Complex Method,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,Cyclomatic complexity of the method is 18
Long Parameter List,DemoFramework,BufferedDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\BufferedDebugDraw.cs,DrawTriangle,The method has 5 parameters.
Long Parameter List,DemoFramework,BufferedDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\BufferedDebugDraw.cs,DrawArc,The method has 9 parameters.
Long Parameter List,DemoFramework,BufferedDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\BufferedDebugDraw.cs,DrawArc,The method has 10 parameters.
Long Parameter List,DemoFramework,BufferedDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\BufferedDebugDraw.cs,DrawContactPoint,The method has 5 parameters.
Long Statement,DemoFramework,MouseController,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Controller\MouseController.cs,SetByAngles,The length of the statement  "	Vector = new Vector3 ((float)(Math.Cos (horizontalAngle) * Math.Cos (verticalAngle))' (float)Math.Sin (verticalAngle)' (float)(Math.Sin (horizontalAngle) * Math.Cos (verticalAngle))); " is 183.
Long Statement,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The length of the statement  "			vTemp = GetVectorByAxis ((float)Math.Cos (vAngle) * (float)Math.Sin (angle)' (float)Math.Sin (vAngle)' (float)Math.Cos (vAngle) * (float)Math.Cos (angle)' up); " is 159.
Long Statement,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The length of the statement  "			vTemp = new Vector3 ((float)Math.Cos (vAngle) * (float)Math.Sin (angle)' (float)Math.Sin (vAngle)' (float)Math.Cos (vAngle) * (float)Math.Cos (angle)); " is 151.
Long Statement,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateTriangleMesh,The length of the statement  "	meshInterface.GetLockedReadOnlyVertexIndexData (out vertexBuffer' out numVerts' out vertsType' out vertexStride' out indexBuffer' out indexStride' out numFaces' out indicesType); " is 178.
Long Statement,DemoFramework.FileLoaders,BspConverter,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspConverter.cs,ConvertBsp,The length of the statement  "			ContentFlags flags = bspLoader.IsVbsp ? (ContentFlags)brush.ShaderNum : bspLoader.Shaders [brush.ShaderNum].ContentFlags; " is 121.
Long Statement,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The length of the statement  "				bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture)); " is 221.
Long Statement,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ToVector3,The length of the statement  "	return new Vector3 (float.Parse (f0' CultureInfo.InvariantCulture)' float.Parse (f1' CultureInfo.InvariantCulture)' float.Parse (f2' CultureInfo.InvariantCulture)); " is 164.
Magic Number,DemoFramework,FreeLook,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Controller\FreeLook.cs,Update,The following statement contains a magic number: if (input.KeysDown.Count != 0) {  	Vector3 relDirection = frameDelta * direction;  	float flySpeed = input.KeysDown.Contains (Keys.ShiftKey) ? 15 : 5;  	if (input.KeysDown.Contains (Keys.W)) {  		Eye += flySpeed * relDirection;  	}  	if (input.KeysDown.Contains (Keys.S)) {  		Eye -= flySpeed * relDirection;  	}  	if (input.KeysDown.Contains (Keys.A)) {  		Eye += Vector3.Cross (relDirection' Up);  	}  	if (input.KeysDown.Contains (Keys.D)) {  		Eye -= Vector3.Cross (relDirection' Up);  	}  }  
Magic Number,DemoFramework,FreeLook,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Controller\FreeLook.cs,Update,The following statement contains a magic number: if (input.KeysDown.Count != 0) {  	Vector3 relDirection = frameDelta * direction;  	float flySpeed = input.KeysDown.Contains (Keys.ShiftKey) ? 15 : 5;  	if (input.KeysDown.Contains (Keys.W)) {  		Eye += flySpeed * relDirection;  	}  	if (input.KeysDown.Contains (Keys.S)) {  		Eye -= flySpeed * relDirection;  	}  	if (input.KeysDown.Contains (Keys.A)) {  		Eye += Vector3.Cross (relDirection' Up);  	}  	if (input.KeysDown.Contains (Keys.D)) {  		Eye -= Vector3.Cross (relDirection' Up);  	}  }  
Magic Number,DemoFramework,BufferedDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\BufferedDebugDraw.cs,ColorToInt,The following statement contains a magic number: return (ci & 0xff0000) >> 16 | (ci & 0xff00) | (ci & 0xff) << 16;  
Magic Number,DemoFramework,BufferedDebugDraw,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\BufferedDebugDraw.cs,ColorToInt,The following statement contains a magic number: return (ci & 0xff0000) >> 16 | (ci & 0xff00) | (ci & 0xff) << 16;  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.libraryList.Location = new System.Drawing.Point (13' 13);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.libraryList.Location = new System.Drawing.Point (13' 13);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.libraryList.Size = new System.Drawing.Size (266' 160);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.libraryList.Size = new System.Drawing.Size (266' 160);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.runButton.Location = new System.Drawing.Point (13' 244);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.runButton.Location = new System.Drawing.Point (13' 244);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.runButton.Size = new System.Drawing.Size (87' 43);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.runButton.Size = new System.Drawing.Size (87' 43);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (204' 244);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Location = new System.Drawing.Point (204' 244);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (75' 43);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.Size = new System.Drawing.Size (75' 43);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.cancelButton.TabIndex = 2;  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.logText.Location = new System.Drawing.Point (13' 180);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.logText.Location = new System.Drawing.Point (13' 180);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.logText.Size = new System.Drawing.Size (266' 58);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.logText.Size = new System.Drawing.Size (266' 58);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.logText.TabIndex = 3;  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (291' 293);  
Magic Number,DemoFramework,LibrarySelection,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\LibrarySelection.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (291' 293);  
Magic Number,DemoFramework,Graphics,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\Graphics.cs,Graphics,The following statement contains a magic number: FieldOfView = (float)Math.PI / 4;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CompactIndexBuffer,The following statement contains a magic number: if (indices.Length > 65535) {  	return null;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	for (int i = 1; i != -3; i -= 2) {  		normal = GetVectorByAxis (0' i' 0' j);  		vertices [v++] = GetVectorByAxis (i' i' i' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-i' i' -i' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  		vertices [v++] = normal;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	for (int i = 1; i != -3; i -= 2) {  		normal = GetVectorByAxis (0' i' 0' j);  		vertices [v++] = GetVectorByAxis (i' i' i' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-i' i' -i' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  		vertices [v++] = normal;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox,The following statement contains a magic number: for (int j = 0; j < 3; j++) {  	for (int i = 1; i != -3; i -= 2) {  		normal = GetVectorByAxis (0' i' 0' j);  		vertices [v++] = GetVectorByAxis (i' i' i' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-i' i' -i' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  		vertices [v++] = normal;  		vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  		vertices [v++] = normal;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox,The following statement contains a magic number: for (int i = 1; i != -3; i -= 2) {  	normal = GetVectorByAxis (0' i' 0' j);  	vertices [v++] = GetVectorByAxis (i' i' i' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (-i' i' -i' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  	vertices [v++] = normal;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox,The following statement contains a magic number: for (int i = 1; i != -3; i -= 2) {  	normal = GetVectorByAxis (0' i' 0' j);  	vertices [v++] = GetVectorByAxis (i' i' i' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (-i' i' -i' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (-1' i' 1' j) * size;  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (1' i' -1' j) * size;  	vertices [v++] = normal;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox,The following statement contains a magic number: i -= 2
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox2DShape,The following statement contains a magic number: return new Vector3[12] {  	v [0]'  	Vector3.UnitZ'  	v [1]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [0]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [3]'  	Vector3.UnitZ'  };  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox2DShape,The following statement contains a magic number: return new Vector3[12] {  	v [0]'  	Vector3.UnitZ'  	v [1]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [0]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [3]'  	Vector3.UnitZ'  };  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox2DShape,The following statement contains a magic number: return new Vector3[12] {  	v [0]'  	Vector3.UnitZ'  	v [1]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [0]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [3]'  	Vector3.UnitZ'  };  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateBox2DShape,The following statement contains a magic number: return new Vector3[12] {  	v [0]'  	Vector3.UnitZ'  	v [1]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [0]'  	Vector3.UnitZ'  	v [2]'  	Vector3.UnitZ'  	v [3]'  	Vector3.UnitZ'  };  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 3) ? 3 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 3) ? 3 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 3) ? 3 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 3) ? 3 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: indices [i - 1] = 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 2];  	indices [i + 1] = index++;  	indices [i + 2] = indices [i - sliceDiff];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 2];  	indices [i + 1] = index++;  	indices [i + 2] = indices [i - sliceDiff];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 2];  	indices [i + 1] = index++;  	indices [i + 2] = indices [i - sliceDiff];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: indices [i] = indices [i - sliceDiff + 2];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: indices [i + 2] = indices [i - sliceDiff];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: i += 3;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 1];  	indices [i + 1] = indices [i - sliceDiff];  	indices [i + 2] = indices [i - sliceDiff + 4];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 1];  	indices [i + 1] = indices [i - sliceDiff];  	indices [i + 2] = indices [i - sliceDiff + 4];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 1];  	indices [i + 1] = indices [i - sliceDiff];  	indices [i + 2] = indices [i - sliceDiff + 4];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: indices [i + 2] = indices [i - sliceDiff + 4];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: indices [i + 2] = indices [i - sliceDiff + 4];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCapsule,The following statement contains a magic number: i += 3;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: index += 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: index += 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: for (int j = 1; j < numSteps + 1; j++) {  	float x = radius * (float)Math.Sin (j * angleStep);  	float z = radius * (float)Math.Cos (j * angleStep);  	normal = GetVectorByAxis (x' 0' z' up);  	normal.Normalize ();  	vertices [v++] = GetVectorByAxis (0' halfHeight' 0' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (x' -halfHeight' z' up);  	vertices [v++] = normal;  	indices [i++] = index - 2;  	indices [i++] = index - 1;  	indices [i++] = index;  	indices [i++] = index;  	indices [i++] = index - 1;  	indices [i++] = index + 1;  	index += 2;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: for (int j = 1; j < numSteps + 1; j++) {  	float x = radius * (float)Math.Sin (j * angleStep);  	float z = radius * (float)Math.Cos (j * angleStep);  	normal = GetVectorByAxis (x' 0' z' up);  	normal.Normalize ();  	vertices [v++] = GetVectorByAxis (0' halfHeight' 0' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (x' -halfHeight' z' up);  	vertices [v++] = normal;  	indices [i++] = index - 2;  	indices [i++] = index - 1;  	indices [i++] = index;  	indices [i++] = index;  	indices [i++] = index - 1;  	indices [i++] = index + 1;  	index += 2;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: indices [i++] = index - 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: index += 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCone,The following statement contains a magic number: indices [i++] = index - 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: for (int side = 1; side != -3; side -= 2) {  	normal = GetVectorByAxis (side * Vector3.UnitY' up);  	baseIndex = index;  	vertices [v++] = GetVectorByAxis (0' side * halfHeight' 0' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (0' side * halfHeight' radius' up);  	vertices [v++] = normal;  	index += 2;  	for (int j = 1; j < numSteps; j++) {  		float x = radius * (float)Math.Sin (j * angleStep);  		float z = radius * (float)Math.Cos (j * angleStep);  		vertices [v++] = GetVectorByAxis (x' side * halfHeight' z' up);  		vertices [v++] = normal;  		indices [i++] = baseIndex;  		if (side == 1) {  			indices [i++] = index - 1;  			indices [i++] = index;  		} else {  			indices [i++] = index;  			indices [i++] = index - 1;  		}  		index++;  	}  	indices [i++] = baseIndex;  	if (side == 1) {  		indices [i++] = index - 1;  		indices [i++] = baseIndex + 1;  	} else {  		indices [i++] = baseIndex + 1;  		indices [i++] = index - 1;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: for (int side = 1; side != -3; side -= 2) {  	normal = GetVectorByAxis (side * Vector3.UnitY' up);  	baseIndex = index;  	vertices [v++] = GetVectorByAxis (0' side * halfHeight' 0' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (0' side * halfHeight' radius' up);  	vertices [v++] = normal;  	index += 2;  	for (int j = 1; j < numSteps; j++) {  		float x = radius * (float)Math.Sin (j * angleStep);  		float z = radius * (float)Math.Cos (j * angleStep);  		vertices [v++] = GetVectorByAxis (x' side * halfHeight' z' up);  		vertices [v++] = normal;  		indices [i++] = baseIndex;  		if (side == 1) {  			indices [i++] = index - 1;  			indices [i++] = index;  		} else {  			indices [i++] = index;  			indices [i++] = index - 1;  		}  		index++;  	}  	indices [i++] = baseIndex;  	if (side == 1) {  		indices [i++] = index - 1;  		indices [i++] = baseIndex + 1;  	} else {  		indices [i++] = baseIndex + 1;  		indices [i++] = index - 1;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: for (int side = 1; side != -3; side -= 2) {  	normal = GetVectorByAxis (side * Vector3.UnitY' up);  	baseIndex = index;  	vertices [v++] = GetVectorByAxis (0' side * halfHeight' 0' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (0' side * halfHeight' radius' up);  	vertices [v++] = normal;  	index += 2;  	for (int j = 1; j < numSteps; j++) {  		float x = radius * (float)Math.Sin (j * angleStep);  		float z = radius * (float)Math.Cos (j * angleStep);  		vertices [v++] = GetVectorByAxis (x' side * halfHeight' z' up);  		vertices [v++] = normal;  		indices [i++] = baseIndex;  		if (side == 1) {  			indices [i++] = index - 1;  			indices [i++] = index;  		} else {  			indices [i++] = index;  			indices [i++] = index - 1;  		}  		index++;  	}  	indices [i++] = baseIndex;  	if (side == 1) {  		indices [i++] = index - 1;  		indices [i++] = baseIndex + 1;  	} else {  		indices [i++] = baseIndex + 1;  		indices [i++] = index - 1;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: side -= 2
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: index += 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: index += 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: for (int j = 1; j < numSteps + 1; j++) {  	float x = radius * (float)Math.Sin (j * angleStep);  	float z = radius * (float)Math.Cos (j * angleStep);  	normal = GetVectorByAxis (x' 0' z' up);  	normal.Normalize ();  	vertices [v++] = GetVectorByAxis (x' halfHeight' z' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (x' -halfHeight' z' up);  	vertices [v++] = normal;  	indices [i++] = index - 2;  	indices [i++] = index - 1;  	indices [i++] = index;  	indices [i++] = index;  	indices [i++] = index - 1;  	indices [i++] = index + 1;  	index += 2;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: for (int j = 1; j < numSteps + 1; j++) {  	float x = radius * (float)Math.Sin (j * angleStep);  	float z = radius * (float)Math.Cos (j * angleStep);  	normal = GetVectorByAxis (x' 0' z' up);  	normal.Normalize ();  	vertices [v++] = GetVectorByAxis (x' halfHeight' z' up);  	vertices [v++] = normal;  	vertices [v++] = GetVectorByAxis (x' -halfHeight' z' up);  	vertices [v++] = normal;  	indices [i++] = index - 2;  	indices [i++] = index - 1;  	indices [i++] = index;  	indices [i++] = index;  	indices [i++] = index - 1;  	indices [i++] = index + 1;  	index += 2;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: indices [i++] = index - 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: index += 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateCylinder,The following statement contains a magic number: indices [i++] = index - 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateConvexHull,The following statement contains a magic number: for (i = 0; i < vertexCount; i += 3) {  	Vector3 v0 = points [(int)indices [i]];  	Vector3 v1 = points [(int)indices [i + 1]];  	Vector3 v2 = points [(int)indices [i + 2]];  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	normal.Normalize ();  	vertices [v++] = v0;  	vertices [v++] = normal;  	vertices [v++] = v1;  	vertices [v++] = normal;  	vertices [v++] = v2;  	vertices [v++] = normal;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateConvexHull,The following statement contains a magic number: for (i = 0; i < vertexCount; i += 3) {  	Vector3 v0 = points [(int)indices [i]];  	Vector3 v1 = points [(int)indices [i + 1]];  	Vector3 v2 = points [(int)indices [i + 2]];  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	normal.Normalize ();  	vertices [v++] = v0;  	vertices [v++] = normal;  	vertices [v++] = v1;  	vertices [v++] = normal;  	vertices [v++] = v2;  	vertices [v++] = normal;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateConvexHull,The following statement contains a magic number: i += 3
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: for (i = 0; i < shape.SphereCount; i++) {  	uint[] sphereIndices;  	Vector3[] sphereVertices = CreateSphere (shape.GetSphereRadius (i)' out sphereIndices);  	// Adjust sphere position  	Vector3 position = shape.GetSpherePosition (i);  	for (int j = 0; j < sphereVertices.Length / 2; j++) {  		sphereVertices [j * 2] += position;  	}  	// Adjust indices  	if (indexCount != 0) {  		int indexOffset = vertexCount / 2;  		for (int j = 0; j < sphereIndices.Length; j++) {  			sphereIndices [j] += (uint)indexOffset;  		}  	}  	allVertices.Add (sphereVertices);  	allIndices.Add (sphereIndices);  	vertexCount += sphereVertices.Length;  	indexCount += sphereIndices.Length;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: for (i = 0; i < shape.SphereCount; i++) {  	uint[] sphereIndices;  	Vector3[] sphereVertices = CreateSphere (shape.GetSphereRadius (i)' out sphereIndices);  	// Adjust sphere position  	Vector3 position = shape.GetSpherePosition (i);  	for (int j = 0; j < sphereVertices.Length / 2; j++) {  		sphereVertices [j * 2] += position;  	}  	// Adjust indices  	if (indexCount != 0) {  		int indexOffset = vertexCount / 2;  		for (int j = 0; j < sphereIndices.Length; j++) {  			sphereIndices [j] += (uint)indexOffset;  		}  	}  	allVertices.Add (sphereVertices);  	allIndices.Add (sphereIndices);  	vertexCount += sphereVertices.Length;  	indexCount += sphereIndices.Length;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: for (i = 0; i < shape.SphereCount; i++) {  	uint[] sphereIndices;  	Vector3[] sphereVertices = CreateSphere (shape.GetSphereRadius (i)' out sphereIndices);  	// Adjust sphere position  	Vector3 position = shape.GetSpherePosition (i);  	for (int j = 0; j < sphereVertices.Length / 2; j++) {  		sphereVertices [j * 2] += position;  	}  	// Adjust indices  	if (indexCount != 0) {  		int indexOffset = vertexCount / 2;  		for (int j = 0; j < sphereIndices.Length; j++) {  			sphereIndices [j] += (uint)indexOffset;  		}  	}  	allVertices.Add (sphereVertices);  	allIndices.Add (sphereIndices);  	vertexCount += sphereVertices.Length;  	indexCount += sphereIndices.Length;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: for (int j = 0; j < sphereVertices.Length / 2; j++) {  	sphereVertices [j * 2] += position;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: for (int j = 0; j < sphereVertices.Length / 2; j++) {  	sphereVertices [j * 2] += position;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: sphereVertices [j * 2] += position;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateMultiSphere,The following statement contains a magic number: if (indexCount != 0) {  	int indexOffset = vertexCount / 2;  	for (int j = 0; j < sphereIndices.Length; j++) {  		sphereIndices [j] += (uint)indexOffset;  	}  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: for (int i = 0; i < numVertices; i += 4) {  	Vector3 v0' v1' v2' v3;  	polyhedralConvexShape.GetVertex (i' out v0);  	polyhedralConvexShape.GetVertex (i + 1' out v1);  	polyhedralConvexShape.GetVertex (i + 2' out v2);  	polyhedralConvexShape.GetVertex (i + 3' out v3);  	Vector3 v01 = v0 - v1;  	Vector3 v02 = v0 - v2;  	Vector3 normal = Vector3.Cross (v01' v02);  	int i3 = i * 3;  	vertices [i3] = v0;  	vertices [i3 + 1] = normal;  	vertices [i3 + 2] = v1;  	vertices [i3 + 3] = normal;  	vertices [i3 + 4] = v2;  	vertices [i3 + 5] = normal;  	vertices [i3 + 6] = v0;  	vertices [i3 + 7] = normal;  	vertices [i3 + 8] = v2;  	vertices [i3 + 9] = normal;  	vertices [i3 + 10] = v3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: i += 4
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: polyhedralConvexShape.GetVertex (i + 2' out v2);  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: polyhedralConvexShape.GetVertex (i + 3' out v3);  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 2] = v1;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 3] = normal;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 4] = v2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 5] = normal;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 6] = v0;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 7] = normal;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 8] = v2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 9] = normal;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreatePolyhedralConvexShape,The following statement contains a magic number: vertices [i3 + 10] = v3;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: slices = (slices > 16) ? 16 : (slices < 3) ? 3 : slices;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 2) ? 2 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 2) ? 2 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 2) ? 2 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: stacks = (stacks > 16) ? 16 : (stacks < 2) ? 2 : stacks;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: indices [i - 1] = 2;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (j = 0; j < stacks - 2; j++) {  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 2];  		indices [i + 1] = index++;  		indices [i + 2] = indices [i - sliceDiff];  		i += 3;  	}  	for (k = 0; k < slices; k++) {  		indices [i] = indices [i - sliceDiff + 1];  		indices [i + 1] = indices [i - sliceDiff];  		indices [i + 2] = indices [i - sliceDiff + 4];  		i += 3;  	}  	indices [i - 1] = indices [i - sliceDiff];  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 2];  	indices [i + 1] = index++;  	indices [i + 2] = indices [i - sliceDiff];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 2];  	indices [i + 1] = index++;  	indices [i + 2] = indices [i - sliceDiff];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 2];  	indices [i + 1] = index++;  	indices [i + 2] = indices [i - sliceDiff];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: indices [i] = indices [i - sliceDiff + 2];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: indices [i + 2] = indices [i - sliceDiff];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: i += 3;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 1];  	indices [i + 1] = indices [i - sliceDiff];  	indices [i + 2] = indices [i - sliceDiff + 4];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 1];  	indices [i + 1] = indices [i - sliceDiff];  	indices [i + 2] = indices [i - sliceDiff + 4];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: for (k = 0; k < slices; k++) {  	indices [i] = indices [i - sliceDiff + 1];  	indices [i + 1] = indices [i - sliceDiff];  	indices [i + 2] = indices [i - sliceDiff + 4];  	i += 3;  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: indices [i + 2] = indices [i - sliceDiff + 4];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: indices [i + 2] = indices [i - sliceDiff + 4];  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateSphere,The following statement contains a magic number: i += 3;  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: if (Math.Abs (n [2]) > (Math.Sqrt (2) / 2)) {  	// choose p in y-z plane  	float a = n [1] * n [1] + n [2] * n [2];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (0' -n [2] * k' n [1] * k);  	// set q = n x p  	q = Vector3.Cross (n' p);  } else {  	// choose p in x-y plane  	float a = n [0] * n [0] + n [1] * n [1];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (-n [1] * k' n [0] * k' 0);  	// set q = n x p  	q = Vector3.Cross (n' p);  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: if (Math.Abs (n [2]) > (Math.Sqrt (2) / 2)) {  	// choose p in y-z plane  	float a = n [1] * n [1] + n [2] * n [2];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (0' -n [2] * k' n [1] * k);  	// set q = n x p  	q = Vector3.Cross (n' p);  } else {  	// choose p in x-y plane  	float a = n [0] * n [0] + n [1] * n [1];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (-n [1] * k' n [0] * k' 0);  	// set q = n x p  	q = Vector3.Cross (n' p);  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: if (Math.Abs (n [2]) > (Math.Sqrt (2) / 2)) {  	// choose p in y-z plane  	float a = n [1] * n [1] + n [2] * n [2];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (0' -n [2] * k' n [1] * k);  	// set q = n x p  	q = Vector3.Cross (n' p);  } else {  	// choose p in x-y plane  	float a = n [0] * n [0] + n [1] * n [1];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (-n [1] * k' n [0] * k' 0);  	// set q = n x p  	q = Vector3.Cross (n' p);  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: if (Math.Abs (n [2]) > (Math.Sqrt (2) / 2)) {  	// choose p in y-z plane  	float a = n [1] * n [1] + n [2] * n [2];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (0' -n [2] * k' n [1] * k);  	// set q = n x p  	q = Vector3.Cross (n' p);  } else {  	// choose p in x-y plane  	float a = n [0] * n [0] + n [1] * n [1];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (-n [1] * k' n [0] * k' 0);  	// set q = n x p  	q = Vector3.Cross (n' p);  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: if (Math.Abs (n [2]) > (Math.Sqrt (2) / 2)) {  	// choose p in y-z plane  	float a = n [1] * n [1] + n [2] * n [2];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (0' -n [2] * k' n [1] * k);  	// set q = n x p  	q = Vector3.Cross (n' p);  } else {  	// choose p in x-y plane  	float a = n [0] * n [0] + n [1] * n [1];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (-n [1] * k' n [0] * k' 0);  	// set q = n x p  	q = Vector3.Cross (n' p);  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: if (Math.Abs (n [2]) > (Math.Sqrt (2) / 2)) {  	// choose p in y-z plane  	float a = n [1] * n [1] + n [2] * n [2];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (0' -n [2] * k' n [1] * k);  	// set q = n x p  	q = Vector3.Cross (n' p);  } else {  	// choose p in x-y plane  	float a = n [0] * n [0] + n [1] * n [1];  	float k = 1.0f / (float)Math.Sqrt (a);  	p = new Vector3 (-n [1] * k' n [0] * k' 0);  	// set q = n x p  	q = Vector3.Cross (n' p);  }  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,PlaneSpace1,The following statement contains a magic number: p = new Vector3 (0' -n [2] * k' n [1] * k);  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateStaticPlane,The following statement contains a magic number: indices = new uint[] {  	0'  	2'  	1'  	0'  	1'  	3  };  
Magic Number,DemoFramework,MeshFactory,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\Graphics\MeshFactory.cs,CreateStaticPlane,The following statement contains a magic number: indices = new uint[] {  	0'  	2'  	1'  	0'  	1'  	3  };  
Magic Number,DemoFramework.FileLoaders,BspConverter,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspConverter.cs,GetPlayerPosition,The following statement contains a magic number: return new Vector3 (0' 0' 100);  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: if (id == "IBSP") {  	if (version != 0x2E) {  		return false;  	}  	nHeaderLumps = 17;  } else// if (id == "VBSP")   {  	if (version != 0x14) {  		return false;  	}  	nHeaderLumps = 64;  	IsVbsp = true;  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: if (id == "IBSP") {  	if (version != 0x2E) {  		return false;  	}  	nHeaderLumps = 17;  } else// if (id == "VBSP")   {  	if (version != 0x14) {  		return false;  	}  	nHeaderLumps = 64;  	IsVbsp = true;  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: nHeaderLumps = 17;  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: nHeaderLumps = 64;  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: foreach (string entity in entityStrings) {  	switch (entity) {  	case "\0":  		continue;  	case "{":  		bspEntity = new BspEntity ();  		break;  	case "}":  		Entities.Add (bspEntity.ClassName' bspEntity);  		break;  	default:  		string[] keyValue = entity.Trim ('\"').Split (new[] {  			"\" \""  		}' 2' 0);  		switch (keyValue [0]) {  		case "classname":  			bspEntity.ClassName = keyValue [1];  			break;  		case "origin":  			string[] originStrings = keyValue [1].Split (' ');  			bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture));  			break;  		default:  			if (!bspEntity.KeyValues.ContainsKey (keyValue [0])) {  				if (keyValue.Length == 1) {  					bspEntity.KeyValues.Add (keyValue [0]' "");  				} else {  					bspEntity.KeyValues.Add (keyValue [0]' keyValue [1]);  				}  			}  			break;  		}  		break;  	}  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: foreach (string entity in entityStrings) {  	switch (entity) {  	case "\0":  		continue;  	case "{":  		bspEntity = new BspEntity ();  		break;  	case "}":  		Entities.Add (bspEntity.ClassName' bspEntity);  		break;  	default:  		string[] keyValue = entity.Trim ('\"').Split (new[] {  			"\" \""  		}' 2' 0);  		switch (keyValue [0]) {  		case "classname":  			bspEntity.ClassName = keyValue [1];  			break;  		case "origin":  			string[] originStrings = keyValue [1].Split (' ');  			bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture));  			break;  		default:  			if (!bspEntity.KeyValues.ContainsKey (keyValue [0])) {  				if (keyValue.Length == 1) {  					bspEntity.KeyValues.Add (keyValue [0]' "");  				} else {  					bspEntity.KeyValues.Add (keyValue [0]' keyValue [1]);  				}  			}  			break;  		}  		break;  	}  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: switch (entity) {  case "\0":  	continue;  case "{":  	bspEntity = new BspEntity ();  	break;  case "}":  	Entities.Add (bspEntity.ClassName' bspEntity);  	break;  default:  	string[] keyValue = entity.Trim ('\"').Split (new[] {  		"\" \""  	}' 2' 0);  	switch (keyValue [0]) {  	case "classname":  		bspEntity.ClassName = keyValue [1];  		break;  	case "origin":  		string[] originStrings = keyValue [1].Split (' ');  		bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture));  		break;  	default:  		if (!bspEntity.KeyValues.ContainsKey (keyValue [0])) {  			if (keyValue.Length == 1) {  				bspEntity.KeyValues.Add (keyValue [0]' "");  			} else {  				bspEntity.KeyValues.Add (keyValue [0]' keyValue [1]);  			}  		}  		break;  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: switch (entity) {  case "\0":  	continue;  case "{":  	bspEntity = new BspEntity ();  	break;  case "}":  	Entities.Add (bspEntity.ClassName' bspEntity);  	break;  default:  	string[] keyValue = entity.Trim ('\"').Split (new[] {  		"\" \""  	}' 2' 0);  	switch (keyValue [0]) {  	case "classname":  		bspEntity.ClassName = keyValue [1];  		break;  	case "origin":  		string[] originStrings = keyValue [1].Split (' ');  		bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture));  		break;  	default:  		if (!bspEntity.KeyValues.ContainsKey (keyValue [0])) {  			if (keyValue.Length == 1) {  				bspEntity.KeyValues.Add (keyValue [0]' "");  			} else {  				bspEntity.KeyValues.Add (keyValue [0]' keyValue [1]);  			}  		}  		break;  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: switch (keyValue [0]) {  case "classname":  	bspEntity.ClassName = keyValue [1];  	break;  case "origin":  	string[] originStrings = keyValue [1].Split (' ');  	bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture));  	break;  default:  	if (!bspEntity.KeyValues.ContainsKey (keyValue [0])) {  		if (keyValue.Length == 1) {  			bspEntity.KeyValues.Add (keyValue [0]' "");  		} else {  			bspEntity.KeyValues.Add (keyValue [0]' keyValue [1]);  		}  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: bspEntity.Origin = new Vector3 (float.Parse (originStrings [0]' CultureInfo.InvariantCulture)' float.Parse (originStrings [1]' CultureInfo.InvariantCulture)' float.Parse (originStrings [2]' CultureInfo.InvariantCulture));  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: length /= IsVbsp ? 32 : Marshal.SizeOf (typeof(BspLeaf));  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: if (!IsVbsp) {  	// read shaders  	Shaders = new List<BspShader> ();  	buffer.Position = lumps [(int)IBspLumpType.Shaders].Offset;  	length = lumps [(int)IBspLumpType.Shaders].Length / (64 + 2 * sizeof(int));  	byte[] shaderBytes = new byte[64];  	for (int i = 0; i < length; i++) {  		BspShader shader = new BspShader ();  		reader.Read (shaderBytes' 0' 64);  		shader.Shader = Encoding.ASCII.GetString (shaderBytes' 0' Array.IndexOf (shaderBytes' (byte)0));  		shader.SurfaceFlags = reader.ReadInt32 ();  		shader.ContentFlags = (ContentFlags)reader.ReadInt32 ();  		Shaders.Add (shader);  	}  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: if (!IsVbsp) {  	// read shaders  	Shaders = new List<BspShader> ();  	buffer.Position = lumps [(int)IBspLumpType.Shaders].Offset;  	length = lumps [(int)IBspLumpType.Shaders].Length / (64 + 2 * sizeof(int));  	byte[] shaderBytes = new byte[64];  	for (int i = 0; i < length; i++) {  		BspShader shader = new BspShader ();  		reader.Read (shaderBytes' 0' 64);  		shader.Shader = Encoding.ASCII.GetString (shaderBytes' 0' Array.IndexOf (shaderBytes' (byte)0));  		shader.SurfaceFlags = reader.ReadInt32 ();  		shader.ContentFlags = (ContentFlags)reader.ReadInt32 ();  		Shaders.Add (shader);  	}  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: if (!IsVbsp) {  	// read shaders  	Shaders = new List<BspShader> ();  	buffer.Position = lumps [(int)IBspLumpType.Shaders].Offset;  	length = lumps [(int)IBspLumpType.Shaders].Length / (64 + 2 * sizeof(int));  	byte[] shaderBytes = new byte[64];  	for (int i = 0; i < length; i++) {  		BspShader shader = new BspShader ();  		reader.Read (shaderBytes' 0' 64);  		shader.Shader = Encoding.ASCII.GetString (shaderBytes' 0' Array.IndexOf (shaderBytes' (byte)0));  		shader.SurfaceFlags = reader.ReadInt32 ();  		shader.ContentFlags = (ContentFlags)reader.ReadInt32 ();  		Shaders.Add (shader);  	}  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: if (!IsVbsp) {  	// read shaders  	Shaders = new List<BspShader> ();  	buffer.Position = lumps [(int)IBspLumpType.Shaders].Offset;  	length = lumps [(int)IBspLumpType.Shaders].Length / (64 + 2 * sizeof(int));  	byte[] shaderBytes = new byte[64];  	for (int i = 0; i < length; i++) {  		BspShader shader = new BspShader ();  		reader.Read (shaderBytes' 0' 64);  		shader.Shader = Encoding.ASCII.GetString (shaderBytes' 0' Array.IndexOf (shaderBytes' (byte)0));  		shader.SurfaceFlags = reader.ReadInt32 ();  		shader.ContentFlags = (ContentFlags)reader.ReadInt32 ();  		Shaders.Add (shader);  	}  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: length = lumps [(int)IBspLumpType.Shaders].Length / (64 + 2 * sizeof(int));  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: length = lumps [(int)IBspLumpType.Shaders].Length / (64 + 2 * sizeof(int));  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	BspShader shader = new BspShader ();  	reader.Read (shaderBytes' 0' 64);  	shader.Shader = Encoding.ASCII.GetString (shaderBytes' 0' Array.IndexOf (shaderBytes' (byte)0));  	shader.SurfaceFlags = reader.ReadInt32 ();  	shader.ContentFlags = (ContentFlags)reader.ReadInt32 ();  	Shaders.Add (shader);  }  
Magic Number,DemoFramework.FileLoaders,BspLoader,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\BspLoader.cs,LoadBspFile,The following statement contains a magic number: reader.Read (shaderBytes' 0' 64);  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: _vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: _vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: if (numVertices == 4) {  	Indices.Add (face [0]);  	Indices.Add (face [2]);  	face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: if (numVertices == 4) {  	Indices.Add (face [0]);  	Indices.Add (face [2]);  	face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: if (numVertices == 4) {  	Indices.Add (face [0]);  	Indices.Add (face [2]);  	face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: if (numVertices == 4) {  	Indices.Add (face [0]);  	Indices.Add (face [2]);  	face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  }  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: Indices.Add (face [2]);  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  
Magic Number,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following statement contains a magic number: face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  
Missing Default,DemoFramework.FileLoaders,WavefrontObj,F:\newReposMay17\AndresTraks_BulletSharp\demos\Generic\DemoFramework\FileLoaders\Wavefront.cs,ProcessLine,The following switch statement is missing a default case: switch (command) {  case "v":  	_vertices.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vn":  	Normals.Add (ToVector3 (parts [1]' parts [2]' parts [3]));  	break;  case "vt":  	//Texels.Add(ToVector2(parts[1]' parts[2]));  	break;  case "f":  	int numVertices = parts.Length - 1;  	int[] face = new int[numVertices];  	face [0] = GetVertex (parts [1].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [1] = GetVertex (parts [2].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	face [2] = GetVertex (parts [3].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	if (numVertices == 4) {  		Indices.Add (face [0]);  		Indices.Add (face [2]);  		face [3] = GetVertex (parts [4].Split (_faceSplitSchars' StringSplitOptions.RemoveEmptyEntries));  	}  	break;  }  
