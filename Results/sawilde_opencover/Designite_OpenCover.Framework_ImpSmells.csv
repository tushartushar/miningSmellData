Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,ExtractAndValidateArguments,The method has 137 lines of code.
Complex Method,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,ExtractAndValidateArguments,Cyclomatic complexity of the method is 35
Complex Method,OpenCover.Framework.Communication,MessageHandler,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Communication\MessageHandler.cs,StandardMessage,Cyclomatic complexity of the method is 8
Complex Method,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,ProcessSkippedAction,Cyclomatic complexity of the method is 8
Complex Method,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,GetBranchPointsForToken,Cyclomatic complexity of the method is 10
Long Parameter List,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,GetAssemblyClassName,The method has 6 parameters. Parameters: processAssemblyClassFilter' useRegEx' filterType' assemblyFilter' classFilter' processFilter
Long Parameter List,OpenCover.Framework.Manager,ManagedMemoryBlock,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\MemoryManager.cs,ManagedMemoryBlock,The method has 5 parameters. Parameters: namespace' key' bufferSize' bufferId' servicePrincpal
Long Parameter List,OpenCover.Framework.Manager,ManagedCommunicationBlock,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\MemoryManager.cs,ManagedCommunicationBlock,The method has 5 parameters. Parameters: namespace' key' bufferSize' bufferId' servicePrincpal
Long Parameter List,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProfilerManager,The method has 5 parameters. Parameters: communicationManager' persistance' memoryManager' commandLine' perfCounters
Long Parameter List,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,SetProfilerAttributes,The method has 5 parameters. Parameters: process' profilerKey' profilerNamespace' environmentKeyRead' processMgmt
Long Parameter List,OpenCover.Framework.Model,InstrumentationModelBuilderFactory,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Model\InstrumentationModelBuilderFactory.cs,InstrumentationModelBuilderFactory,The method has 5 parameters. Parameters: commandLine' filter' logger' trackedMethodStrategyManager' symbolFileHelper
Long Parameter List,OpenCover.Framework.Service,IProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\IProfilerCommunication.cs,GetSequencePoints,The method has 5 parameters. Parameters: processPath' modulePath' assemblyName' functionToken' sequencePoints
Long Parameter List,OpenCover.Framework.Service,IProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\IProfilerCommunication.cs,GetBranchPoints,The method has 5 parameters. Parameters: processPath' modulePath' assemblyName' functionToken' branchPoints
Long Parameter List,OpenCover.Framework.Service,ProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\ProfilerCommunication.cs,GetBranchPoints,The method has 5 parameters. Parameters: processPath' modulePath' assemblyName' functionToken' instrumentPoints
Long Parameter List,OpenCover.Framework.Service,ProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\ProfilerCommunication.cs,GetSequencePoints,The method has 5 parameters. Parameters: processPath' modulePath' assemblyName' functionToken' instrumentPoints
Long Parameter List,OpenCover.Framework.Service,ProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\ProfilerCommunication.cs,GetPoints,The method has 6 parameters. Parameters: getPointsFunc' processPath' modulePath' assemblyName' functionToken' points
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,CecilSymbolManager,The method has 5 parameters. Parameters: commandLine' filter' logger' trackedMethodStrategyManager' symbolFileHelper
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,GetMethodsForType,The method has 6 parameters. Parameters: typeDefinitions' fullName' methods' files' filter' commandLine
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,BuildMethods,The method has 5 parameters. Parameters: methods' files' filter' typeDefinition' commandLine
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,BuildPropertyMethods,The method has 5 parameters. Parameters: methods' files' filter' typeDefinition' commandLine
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,BuildMethod,The method has 5 parameters. Parameters: files' filter' methodDefinition' alreadySkippedDueToAttr' commandLine
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,LoadPointsForConditionalBranch,The method has 8 parameters. Parameters: list' instruction' branchingInstructionLine' document' branchOffset' pathCounter' instructions' ordinal
Long Parameter List,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,BuildPointsForConditionalBranch,The method has 8 parameters. Parameters: list' current' branchInstructions' branchingInstructionLine' document' branchOffset' ordinal' pathCounter
Long Identifier,OpenCover.Framework.Service,ProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\ProfilerCommunication.cs,ProfilerCommunication,The length of the parameter instrumentationModelBuilderFactory is 34.
Long Identifier,OpenCover.Framework.Service,ProfilerCommunication,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Service\ProfilerCommunication.cs,,The length of the parameter _instrumentationModelBuilderFactory is 35.
Long Identifier,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,,The length of the parameter CachedAnonymousDelegateFieldName is 32.
Long Statement,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,Usage,The length of the statement  "            builder.AppendLine("    [[\"]-searchdirs:<additional PDB directory>[;<additional PDB directory>][;<additional PDB directory>][\"]]"); " is 133.
Long Statement,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,ExtractAndValidateArguments,The length of the statement  "                        { throw new InvalidOperationException(string.Format("The communication timeout must be an integer: {0}"' GetArgumentValue("communicationtimeout"))); }); " is 152.
Long Statement,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,AddFilter,The length of the statement  "                    processFilter = ValidateAndEscape((string.IsNullOrEmpty(processFilter) ? "*" : processFilter)' "<>|\""' "process"); // Path.GetInvalidPathChars except *? " is 153.
Long Statement,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,HandleInvalidFilterFormat,The length of the statement  "            Logger.ErrorFormat("Unable to process the filter '{0}'. Please check your syntax against the usage guide and try again."' filter); " is 130.
Long Statement,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The length of the statement  "                    fieldGetter = owner.CustomAttributes.Where(x => x.AttributeType.FullName == "Microsoft.FSharp.Core.CompilationMappingAttribute") " is 128.
Long Statement,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The length of the statement  "                || method.CustomAttributes.Any(x => x.AttributeType.FullName == typeof(System.Diagnostics.DebuggerNonUserCodeAttribute).FullName) " is 129.
Long Statement,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsProcessExcluded,The length of the statement  "            return matchingExclusionFilters.Any(exclusionFilter =>(exclusionFilter.AssemblyName == ".*" && exclusionFilter.ClassName == ".*")); " is 131.
Long Statement,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,AddFilters,The length of the statement  "            foreach (var regexFilter in filters.Where(x => x != null).Select(filter => isRegexFilter ? new RegexFilter(filter' false) : new RegexFilter(ValidateAndEscape(filter' @"[]"' filterType)))) " is 187.
Long Statement,OpenCover.Framework,ProfilerRegistration,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\ProfilerRegistration.cs,ExecuteProcess,The length of the statement  "                Logger.ErrorFormat("Failed to create the following profiler registration command '{0} {1}'"' psi.FileName' psi.Arguments); " is 122.
Long Statement,OpenCover.Framework,ProfilerRegistration,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\ProfilerRegistration.cs,ExecuteProcess,The length of the statement  "                Logger.ErrorFormat("Failed to execute the following profiler registration command '{0} {1}'"' psi.FileName' psi.Arguments); " is 123.
Long Statement,OpenCover.Framework,ProfilerRegistration,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\ProfilerRegistration.cs,ExecuteRegsvr32,The length of the statement  "                Logger.ErrorFormat($"Failed to locate 'regsvr32.exe' in the following location '{Environment.GetFolderPath(Environment.SpecialFolder.System)}'"); " is 145.
Long Statement,OpenCover.Framework,ProfilerRegistration,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\ProfilerRegistration.cs,ExecuteRegsvr32,The length of the statement  "            if (register && 0 != exitCode) // there is an oddity where unregistering the x64 version after the x86 (or vice versa) issues an access denied (5) " is 146.
Long Statement,OpenCover.Framework,ProfilerRegistration,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\ProfilerRegistration.cs,ExecuteRegsvr32,The length of the statement  "                Logger.ErrorFormat("Failed to register(user:{0}'register:{1}'is64:{2}):{3} the profiler assembly; you may want to look into permissions or using the -register:user option instead. {4} {5}"' " is 189.
Long Statement,OpenCover.Framework.Communication,MessageHandler,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Communication\MessageHandler.cs,HandleAllocateBufferMessage,The length of the statement  "            var response = new MSG_AllocateBuffer_Response { allocated = false' bufferId = 0' reason = MSG_AllocateBufferFailure.ABF_NotApplicable }; " is 137.
Long Statement,OpenCover.Framework.Communication,MessageHandler,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Communication\MessageHandler.cs,HandleAllocateBufferMessage,The length of the statement  "                    Console.WriteLine("Incorrect profiler version detected: expected {0}' received {1}"' executingVersion' profilerVersion); " is 120.
Long Statement,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,IsTracking,The length of the statement  "                return CoverageSession.Modules.Any(x => x.Aliases.Any(path => path.Equals(modulePath' StringComparison.InvariantCultureIgnoreCase)) && " is 134.
Long Statement,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,TransformSequences,The length of the statement  "            var sessionModulesQuery = CoverageSession.Modules.Where(module => module != null && !module.ShouldSerializeSkippedDueTo()); " is 123.
Long Statement,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,TransformSequences,The length of the statement  "                var moduleMethodsQuery = moduleClassesQuery.SelectMany(@class => (@class.Methods ?? new Method[0])).Where(x => x != null && !x.ShouldSerializeSkippedDueTo()); " is 158.
Long Statement,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,TransformSequences_RemoveCompilerGeneratedBranches,The length of the statement  "            var sourceLineOrderedSps = method.SequencePoints.OrderBy(sp => sp.StartLine).ThenBy(sp => sp.StartColumn).Where(sp => sp.FileId == method.FileRefUniqueId).ToArray(); " is 165.
Long Statement,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,TransformSequences_RemoveFalsePositiveUnvisited,The length of the statement  "            var sequencePointsQuery = methods.Where(m => m.FileRefUniqueId != 0 && m.SequencePoints.Length != 0).SelectMany(m => m.SequencePoints).Where(sp => sp.FileId != 0 && sp.VisitCount != 0); " is 185.
Long Statement,OpenCover.Framework.Persistance,FilePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\FilePersistance.cs,HandleFileAccess,The length of the statement  "                        "Could not access the location of the supplied coverage file '{0}'' please check the path and your permissions and try again."' " is 127.
Long Statement,OpenCover.Framework.Persistance,FilePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\FilePersistance.cs,HandleFileAccess,The length of the statement  "                        "Could not access the location of the supplied coverage file '{0}'' please check the path and your permissions and try again."' " is 127.
Long Statement,OpenCover.Framework.Persistance,FilePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\FilePersistance.cs,HandleFileAccess,The length of the statement  "                        "Could not access the location of the supplied coverage file '{0}'' please check the path and your permissions and try again."' " is 127.
Long Statement,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,GetBranchPointsForToken,The length of the statement  "                foreach (var instruction in instructions.Where(instruction => instruction.OpCode.FlowControl == FlowControl.Cond_Branch)) " is 121.
Long Statement,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,GetBranchPointsForToken,The length of the statement  "                    var closestSeqPt = FindClosestInstructionWithSequencePoint(methodDefinition.Body' instruction).Maybe(i => methodDefinition.DebugInformation.GetSequencePoint(i)); " is 161.
Long Statement,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,GetBranchPointsForToken,The length of the statement  "                    if (!LoadPointsForConditionalBranch(list' instruction' branchingInstructionLine' document' branchOffset' pathCounter' instructions' ref ordinal))  " is 145.
Long Statement,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,IgnoreConditionalBranchSequence,The length of the statement  "                new[] {Code.Brtrue_S' Code.Pop' Code.Ldsfld' Code.Ldftn' Code.Newobj' Code.Dup' Code.Stsfld}' // CachedAnonymousMethodDelegate field allocation  " is 143.
Long Statement,OpenCover.Framework.Utility,SequencePointComparer,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Utility\SequencePointComparer.cs,GetHashCode,The length of the statement  "            return unchecked ((int)obj.FileId << 4) ^ unchecked(obj.StartLine << 3) ^ unchecked (obj.EndLine << 2) ^ unchecked (obj.StartColumn << 1) ^ (obj.EndColumn); " is 156.
Complex Conditional,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The conditional expression  "y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0)"  is complex.
Empty Catch Block,OpenCover.Framework,HelperExtensions,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\HelperExtensions.cs,Try,The method has an empty catch block.
Empty Catch Block,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProcessBlock,The method has an empty catch block.
Empty Catch Block,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,SearchForSymbolsAndLoad,The method has an empty catch block.
Empty Catch Block,OpenCover.Framework.Symbols,CecilSymbolManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Symbols\CecilSymbolManager.cs,SearchForSymbolsAndLoad,The method has an empty catch block.
Magic Number,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,CommandLineParser,The following statement contains a magic number: ServiceStartTimeout = new TimeSpan(0' 0' 30);
Magic Number,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,ExtractAndValidateArguments,The following statement contains a magic number: switch(lower)                  {                      case "register":                          Register = true;                          Registration registration;                          Enum.TryParse(GetArgumentValue("register")' true' out registration);                          Registration = registration;                          break;                      case "target":                          Target = GetArgumentValue("target");                          break;                      case "targetdir":                          TargetDir = GetArgumentValue("targetdir");                          break;                      case "searchdirs":                          SearchDirs = GetArgumentValue("searchdirs").Split(';');                          break;                      case "excludedirs":                          ExcludeDirs =                              GetArgumentValue("excludedirs")                                  .Split(';')                                  .Where(_ => _ != null)                                  .Select(_ => Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory()' _)))                                  .Where(Directory.Exists)                                  .Distinct()                                  .ToArray();                          break;                      case "targetargs":                          TargetArgs = GetArgumentValue("targetargs");                          break;                      case "output":                          OutputFile = GetArgumentValue("output");                          break;                      case "mergeoutput":                          MergeExistingOutputFile = true;                          break;                      case "nodefaultfilters":                          NoDefaultFilters = true;                          break;                      case "mergebyhash":                          MergeByHash = true;                          break;                      case "regex":                          RegExFilters = true;                          break;                      case "showunvisited":                          ShowUnvisited = true;                          break;                      case "returntargetcode":                          ReturnTargetCode = true;                          ReturnCodeOffset = ExtractValue<int>("returntargetcode"' () =>                              { throw new InvalidOperationException("The return target code offset must be an integer"); });                          break;                      case "communicationtimeout":                          CommunicationTimeout = ExtractValue<int>("communicationtimeout"' () =>                          { throw new InvalidOperationException(string.Format("The communication timeout must be an integer: {0}"' GetArgumentValue("communicationtimeout"))); });                          CommunicationTimeout = Math.Max(Math.Min(CommunicationTimeout' 60000)' 10000);                          break;                      case "filter":                          Filters = ExtractFilters(GetArgumentValue("filter"));                          break;                      case "filterfile":                          FilterFile = GetArgumentValue("filterfile");                          break;                      case "excludebyattribute":                          AttributeExclusionFilters = GetArgumentValue("excludebyattribute")                              .Split(';').ToList();                          break;                      case "excludebyfile":                          FileExclusionFilters = GetArgumentValue("excludebyfile")                              .Split(';').ToList();                          break;                      case "hideskipped":                          HideSkipped = ExtractSkipped(GetArgumentValue("hideskipped"));                          break;                      case "coverbytest":                          TestFilters = GetArgumentValue("coverbytest")                              .Split(';').ToList();                          TraceByTest = TestFilters.Any();                          break;                      case "log":                          var value = GetArgumentValue("log");                          LogLevel = (Level)typeof(Level).GetFields(BindingFlags.Static | BindingFlags.Public)                              .First(x => string.Compare(x.Name' value' true' CultureInfo.InvariantCulture) == 0).GetValue(typeof(Level));                          break;                      case "service":                          Service = true;                          ServiceEnvironment val;                          if (Enum.TryParse(GetArgumentValue("service")' true' out val))                          {                              ServiceEnvironment = val;                          }                          break;                      case "servicestarttimeout":                          var timeoutValue = GetArgumentValue("servicestarttimeout");                          ServiceStartTimeout = ParseTimeoutValue(timeoutValue);                                                  break;                      case "oldstyle":                          OldStyleInstrumentation = true;                          break;                      case "enableperformancecounters":                          EnablePerformanceCounters = true;                          break;                      case "threshold":                          Threshold = ExtractValue<ulong>("threshold"' () =>                              { throw new InvalidOperationException("The threshold must be an integer"); });                          break;                      case "skipautoprops":                          SkipAutoImplementedProperties = true;                          break;                      case "safemode":                          SafeMode = ExtractSafeMode(GetArgumentValue("safemode")) == Framework.SafeMode.On;                          break;                      case "?":                          PrintUsage = true;                          break;                      case "version":                          PrintVersion = true;                          break;                      case "diagmode":                          DiagMode = true;                          break;                      case "sendvisitpointstimerinterval":                          SendVisitPointsTimerInterval = ExtractValue<uint>("sendvisitpointstimerinterval"' () =>                          { throw new InvalidOperationException("The send visit points timer interval must be a non-negative integer"); });                          break;                      default:                          throw new InvalidOperationException(string.Format("The argument '-{0}' is not recognised"' key));                  }
Magic Number,OpenCover.Framework,CommandLineParser,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\CommandLineParser.cs,ExtractAndValidateArguments,The following statement contains a magic number: switch(lower)                  {                      case "register":                          Register = true;                          Registration registration;                          Enum.TryParse(GetArgumentValue("register")' true' out registration);                          Registration = registration;                          break;                      case "target":                          Target = GetArgumentValue("target");                          break;                      case "targetdir":                          TargetDir = GetArgumentValue("targetdir");                          break;                      case "searchdirs":                          SearchDirs = GetArgumentValue("searchdirs").Split(';');                          break;                      case "excludedirs":                          ExcludeDirs =                              GetArgumentValue("excludedirs")                                  .Split(';')                                  .Where(_ => _ != null)                                  .Select(_ => Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory()' _)))                                  .Where(Directory.Exists)                                  .Distinct()                                  .ToArray();                          break;                      case "targetargs":                          TargetArgs = GetArgumentValue("targetargs");                          break;                      case "output":                          OutputFile = GetArgumentValue("output");                          break;                      case "mergeoutput":                          MergeExistingOutputFile = true;                          break;                      case "nodefaultfilters":                          NoDefaultFilters = true;                          break;                      case "mergebyhash":                          MergeByHash = true;                          break;                      case "regex":                          RegExFilters = true;                          break;                      case "showunvisited":                          ShowUnvisited = true;                          break;                      case "returntargetcode":                          ReturnTargetCode = true;                          ReturnCodeOffset = ExtractValue<int>("returntargetcode"' () =>                              { throw new InvalidOperationException("The return target code offset must be an integer"); });                          break;                      case "communicationtimeout":                          CommunicationTimeout = ExtractValue<int>("communicationtimeout"' () =>                          { throw new InvalidOperationException(string.Format("The communication timeout must be an integer: {0}"' GetArgumentValue("communicationtimeout"))); });                          CommunicationTimeout = Math.Max(Math.Min(CommunicationTimeout' 60000)' 10000);                          break;                      case "filter":                          Filters = ExtractFilters(GetArgumentValue("filter"));                          break;                      case "filterfile":                          FilterFile = GetArgumentValue("filterfile");                          break;                      case "excludebyattribute":                          AttributeExclusionFilters = GetArgumentValue("excludebyattribute")                              .Split(';').ToList();                          break;                      case "excludebyfile":                          FileExclusionFilters = GetArgumentValue("excludebyfile")                              .Split(';').ToList();                          break;                      case "hideskipped":                          HideSkipped = ExtractSkipped(GetArgumentValue("hideskipped"));                          break;                      case "coverbytest":                          TestFilters = GetArgumentValue("coverbytest")                              .Split(';').ToList();                          TraceByTest = TestFilters.Any();                          break;                      case "log":                          var value = GetArgumentValue("log");                          LogLevel = (Level)typeof(Level).GetFields(BindingFlags.Static | BindingFlags.Public)                              .First(x => string.Compare(x.Name' value' true' CultureInfo.InvariantCulture) == 0).GetValue(typeof(Level));                          break;                      case "service":                          Service = true;                          ServiceEnvironment val;                          if (Enum.TryParse(GetArgumentValue("service")' true' out val))                          {                              ServiceEnvironment = val;                          }                          break;                      case "servicestarttimeout":                          var timeoutValue = GetArgumentValue("servicestarttimeout");                          ServiceStartTimeout = ParseTimeoutValue(timeoutValue);                                                  break;                      case "oldstyle":                          OldStyleInstrumentation = true;                          break;                      case "enableperformancecounters":                          EnablePerformanceCounters = true;                          break;                      case "threshold":                          Threshold = ExtractValue<ulong>("threshold"' () =>                              { throw new InvalidOperationException("The threshold must be an integer"); });                          break;                      case "skipautoprops":                          SkipAutoImplementedProperties = true;                          break;                      case "safemode":                          SafeMode = ExtractSafeMode(GetArgumentValue("safemode")) == Framework.SafeMode.On;                          break;                      case "?":                          PrintUsage = true;                          break;                      case "version":                          PrintVersion = true;                          break;                      case "diagmode":                          DiagMode = true;                          break;                      case "sendvisitpointstimerinterval":                          SendVisitPointsTimerInterval = ExtractValue<uint>("sendvisitpointstimerinterval"' () =>                          { throw new InvalidOperationException("The send visit points timer interval must be a non-negative integer"); });                          break;                      default:                          throw new InvalidOperationException(string.Format("The argument '-{0}' is not recognised"' key));                  }
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: mappings = mappings                  .Where(x =>                  {                      // expect 01' 00' 01' 00' 00' 00' 00' 00 or 01' 00' 02' 00' 00' 00' 00' 00                      var y = x.GetBlob();                      if (y.Length != 8 || y[0] != 1 || y[1] != 0 || y.Skip(3).Any(z => z != 0))                      {                          return false;                      }                        // Mask out the class kind from its public/non-public state                      // SourceConstructFlags.NonPublicRepresentation = 32                      // SourceConstructFlags.KindMask = 31                      return (y[2] & 31).Equals(1)  // SourceConstructFlags.SumType = 1                          || (y[2] & 31).Equals(2); // SourceConstructFlags.RecordType = 2                  }).ToList();
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: fieldGetter = owner.CustomAttributes.Where(x => x.AttributeType.FullName == "Microsoft.FSharp.Core.CompilationMappingAttribute")                          .Any(x => (x.GetBlob()[2] & 31) == 4);
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: fieldGetter = owner.CustomAttributes.Where(x => x.AttributeType.FullName == "Microsoft.FSharp.Core.CompilationMappingAttribute")                          .Any(x => (x.GetBlob()[2] & 31) == 4);
Magic Number,OpenCover.Framework,Filter,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Filter.cs,IsFSharpInternal,The following statement contains a magic number: fieldGetter = owner.CustomAttributes.Where(x => x.AttributeType.FullName == "Microsoft.FSharp.Core.CompilationMappingAttribute")                          .Any(x => (x.GetBlob()[2] & 31) == 4);
Magic Number,OpenCover.Framework.Communication,CommunicationManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Communication\CommunicationManager.cs,SendChunkAndWaitForConfirmation,The following statement contains a magic number: WaitHandle.SignalAndWait(mcb.InformationReadyForProfiler' mcb.InformationReadByProfiler' 10000' false);
Magic Number,OpenCover.Framework.Communication,MessageHandler,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Communication\MessageHandler.cs,HandleAllocateBufferMessage,The following statement contains a magic number: var profilerVersion = new Version((int) (request.version_high >> 16 & 0xffff)' (int) (request.version_high & 0xffff)'                      (int) (request.version_low >> 16 & 0xffff)' (int) (request.version_low & 0xffff));
Magic Number,OpenCover.Framework.Communication,MessageHandler,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Communication\MessageHandler.cs,HandleAllocateBufferMessage,The following statement contains a magic number: var profilerVersion = new Version((int) (request.version_high >> 16 & 0xffff)' (int) (request.version_high & 0xffff)'                      (int) (request.version_low >> 16 & 0xffff)' (int) (request.version_low & 0xffff));
Magic Number,OpenCover.Framework.Manager,MemoryManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\MemoryManager.cs,WaitForBlocksToClose,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,OpenCover.Framework.Manager,ManagedMemoryBlock,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\MemoryManager.cs,ManagedMemoryBlock,The following statement contains a magic number: _semaphore = new Semaphore(0' 2'                      MakeName(@"\OpenCover_Profiler_Results_Semaphore_"' bufferId)'                      out createdNew'                      semaphoreSecurity);
Magic Number,OpenCover.Framework.Manager,ManagedMemoryBlock,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\MemoryManager.cs,ManagedMemoryBlock,The following statement contains a magic number: StreamAccessorResults.Write(BitConverter.GetBytes(0)' 0' 4);
Magic Number,OpenCover.Framework.Manager,ManagedCommunicationBlock,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\MemoryManager.cs,ManagedCommunicationBlock,The following statement contains a magic number: _semaphore = new Semaphore(0' 2'                      MakeName(@"\OpenCover_Profiler_Communication_Semaphore_"' bufferId)'                      out createdNew'                      semaphoreSecurity);
Magic Number,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,SaveVisitData,The following statement contains a magic number: return state =>              {                  while (true)                  {                      byte[] data;                      while (!_messageQueue.TryDequeue(out data))                          ThreadHelper.YieldOrSleep(100);                        _perfCounters.CurrentMemoryQueueSize = _messageQueue.Count;                      _perfCounters.IncrementBlocksReceived();                        if (data.Length == 0)                      {                          _communicationManager.Complete();                          queueMgmt.Set();                          return;                      }                      _persistance.SaveVisitData(data);                  }              };
Magic Number,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProfilerManager,The following statement contains a magic number: BufferWaitCount = 30;
Magic Number,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProcessMessages,The following statement contains a magic number: var tasks = threadHandles                          .Select((e' index) => new {ThreadTermination = e' Block = index/NumHandlesPerBlock})                          .GroupBy(g => g.Block)                          .Select(g => g.Select(a => a.ThreadTermination).ToList())                          .Select(g => Task.Factory.StartNew(() =>                          {                              ConsumeException(() =>                              {                                  g.Select(h => h.CancelThreadEvent).ToList().ForEach(h => h.Set());                                  WaitHandle.WaitAll(g.Select(h => h.ThreadFinishedEvent).ToArray<WaitHandle>()'                                      new TimeSpan(0' 0' 20));                              });                          })).ToArray();
Magic Number,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProcessActiveBlock,The following statement contains a magic number: switch (WaitHandle.WaitAny(processEvents))                  {                      case 0:                          _communicationManager.HandleCommunicationBlock(block.CommunicationBlock' b => { });                          break;                      case 1:                          var data = _communicationManager.HandleMemoryBlock(block.MemoryBlock);                          // don't let the queue get too big as using too much memory causes                           // problems i.e. the target process closes down but the host takes                           // ages to shutdown; this is a compromise.                           _messageQueue.Enqueue(data);                          if (_messageQueue.Count > 400)                          {                              do                              {                                  ThreadHelper.YieldOrSleep(100);                              } while (_messageQueue.Count > 200);                          }                          break;                      default: // 2                          return true;                  }
Magic Number,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProcessActiveBlock,The following statement contains a magic number: switch (WaitHandle.WaitAny(processEvents))                  {                      case 0:                          _communicationManager.HandleCommunicationBlock(block.CommunicationBlock' b => { });                          break;                      case 1:                          var data = _communicationManager.HandleMemoryBlock(block.MemoryBlock);                          // don't let the queue get too big as using too much memory causes                           // problems i.e. the target process closes down but the host takes                           // ages to shutdown; this is a compromise.                           _messageQueue.Enqueue(data);                          if (_messageQueue.Count > 400)                          {                              do                              {                                  ThreadHelper.YieldOrSleep(100);                              } while (_messageQueue.Count > 200);                          }                          break;                      default: // 2                          return true;                  }
Magic Number,OpenCover.Framework.Manager,ProfilerManager,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Manager\ProfilerManager.cs,ProcessActiveBlock,The following statement contains a magic number: switch (WaitHandle.WaitAny(processEvents))                  {                      case 0:                          _communicationManager.HandleCommunicationBlock(block.CommunicationBlock' b => { });                          break;                      case 1:                          var data = _communicationManager.HandleMemoryBlock(block.MemoryBlock);                          // don't let the queue get too big as using too much memory causes                           // problems i.e. the target process closes down but the host takes                           // ages to shutdown; this is a compromise.                           _messageQueue.Enqueue(data);                          if (_messageQueue.Count > 400)                          {                              do                              {                                  ThreadHelper.YieldOrSleep(100);                              } while (_messageQueue.Count > 200);                          }                          break;                      default: // 2                          return true;                  }
Magic Number,OpenCover.Framework.Model,InstrumentationPoint,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Model\InstrumentationPoint.cs,InstrumentationPoint,The following statement contains a magic number: InstrumentPoints = new List<InstrumentationPoint>(8192) {null};
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCrapScore,The following statement contains a magic number: method.CrapScore = Math.Round((decimal) Math.Pow(method.CyclomaticComplexity' 2) *                                            (decimal) Math.Pow(1.0 - (double) (method.SequenceCoverage / (decimal) 100.0)' 3.0) +                                            method.CyclomaticComplexity'                                             2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCrapScore,The following statement contains a magic number: method.CrapScore = Math.Round((decimal) Math.Pow(method.CyclomaticComplexity' 2) *                                            (decimal) Math.Pow(1.0 - (double) (method.SequenceCoverage / (decimal) 100.0)' 3.0) +                                            method.CyclomaticComplexity'                                             2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCrapScore,The following statement contains a magic number: method.CrapScore = Math.Round((decimal) Math.Pow(method.CyclomaticComplexity' 2) *                                            (decimal) Math.Pow(1.0 - (double) (method.SequenceCoverage / (decimal) 100.0)' 3.0) +                                            method.CyclomaticComplexity'                                             2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCrapScore,The following statement contains a magic number: method.CrapScore = Math.Round((decimal) Math.Pow(method.CyclomaticComplexity' 2) *                                            (decimal) Math.Pow(1.0 - (double) (method.SequenceCoverage / (decimal) 100.0)' 3.0) +                                            method.CyclomaticComplexity'                                             2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCoverage,The following statement contains a magic number: summary.SequenceCoverage = Math.Round((summary.VisitedSequencePoints*100m)/summary.NumSequencePoints' 2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCoverage,The following statement contains a magic number: summary.SequenceCoverage = Math.Round((summary.VisitedSequencePoints*100m)/summary.NumSequencePoints' 2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCoverage,The following statement contains a magic number: summary.BranchCoverage = Math.Round((summary.VisitedBranchPoints*100m)/summary.NumBranchPoints' 2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,CalculateCoverage,The following statement contains a magic number: summary.BranchCoverage = Math.Round((summary.VisitedBranchPoints*100m)/summary.NumBranchPoints' 2);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,SaveVisitData,The following statement contains a magic number: _logger.ErrorFormat("Failed to process points as count ({0}) exceeded available buffer size ({1})"'                      nCount' (data.Count()/4) - 1);
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,SaveVisitData,The following statement contains a magic number: nCount > (data.Count()/4) - 1
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,TransformSequences_RemoveCompilerGeneratedBranches,The following statement contains a magic number: index < Math.Min (2' sourceLineOrderedSps.Length)
Magic Number,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,TransformSequences_RemoveFalsePositiveUnvisited,The following statement contains a magic number: int countDown = 2;
Magic Number,OpenCover.Framework.Utility,SequencePointComparer,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Utility\SequencePointComparer.cs,GetHashCode,The following statement contains a magic number: return unchecked ((int)obj.FileId << 4) ^ unchecked(obj.StartLine << 3) ^ unchecked (obj.EndLine << 2) ^ unchecked (obj.StartColumn << 1) ^ (obj.EndColumn);
Magic Number,OpenCover.Framework.Utility,SequencePointComparer,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Utility\SequencePointComparer.cs,GetHashCode,The following statement contains a magic number: return unchecked ((int)obj.FileId << 4) ^ unchecked(obj.StartLine << 3) ^ unchecked (obj.EndLine << 2) ^ unchecked (obj.StartColumn << 1) ^ (obj.EndColumn);
Magic Number,OpenCover.Framework.Utility,SequencePointComparer,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Utility\SequencePointComparer.cs,GetHashCode,The following statement contains a magic number: return unchecked ((int)obj.FileId << 4) ^ unchecked(obj.StartLine << 3) ^ unchecked (obj.EndLine << 2) ^ unchecked (obj.StartColumn << 1) ^ (obj.EndColumn);
Missing Default,OpenCover.Framework.Persistance,BasePersistance,D:\research\architectureSmells\repos1\sawilde_opencover\main\OpenCover.Framework\Persistance\BasePersistance.cs,ProcessSkippedAction,The following switch statement is missing a default case: switch (skippedMethod)              {                  case SkippedMethod.File:                      RemoveSkippedMethods(SkippedMethod.File);                      RemoveEmptyClasses();                      RemoveUnreferencedFiles();                      break;                  case SkippedMethod.Filter:                      RemoveSkippedModules(SkippedMethod.Filter);                      RemoveSkippedClasses(SkippedMethod.Filter);                      break;                  case SkippedMethod.FolderExclusion:                      RemoveSkippedModules(SkippedMethod.FolderExclusion);                      break;                  case SkippedMethod.MissingPdb:                      RemoveSkippedModules(SkippedMethod.MissingPdb);                      break;                  case SkippedMethod.Attribute:                      RemoveSkippedClasses(SkippedMethod.Attribute);                      RemoveSkippedMethods(SkippedMethod.Attribute);                      RemoveEmptyClasses();                      break;                  case SkippedMethod.AutoImplementedProperty:                      RemoveSkippedMethods(SkippedMethod.AutoImplementedProperty);                      RemoveEmptyClasses();                      break;                  case SkippedMethod.Delegate:                      RemoveSkippedMethods(SkippedMethod.Delegate);                      RemoveEmptyClasses();                      break;                  case SkippedMethod.FSharpInternal:                      RemoveSkippedMethods(SkippedMethod.FSharpInternal);                      RemoveEmptyClasses();                      break;              }
