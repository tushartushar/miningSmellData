Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ResolveInternal,Cyclomatic complexity of the method is 17
Complex Method,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ConstructType,Cyclomatic complexity of the method is 9
Long Parameter List,TinyIoC,TypeExtensions,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetGenericMethod,The method has 5 parameters.
Long Parameter List,TinyIoC,TypeExtensions,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetMethod,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,TryResolve,The method has 5 parameters.
Long Parameter List,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ConstructType,The method has 5 parameters.
Long Statement,TinyIoC,TypeExtensions,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetMethod,The length of the statement  "	var methods = sourceType.GetMethods (bindingFlags).Where (mi => string.Equals (methodName' mi.Name' StringComparison.Ordinal)).Where (mi => mi.ContainsGenericParameters).Where (mi => mi.GetGenericArguments ().Length == genericTypes.Length).Where (mi => mi.GetParameters ().Length == parameterTypes.Length).Select (mi => mi.MakeGenericMethod (genericTypes)).Where (mi => mi.GetParameters ().Select (pi => pi.ParameterType).SequenceEqual (parameterTypes)).ToList (); " is 464.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' DuplicateImplementationActions.RegisterSingle' null); " is 153.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' DuplicateImplementationActions.RegisterSingle' registrationPredicate); " is 170.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' duplicateAction' null); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	AutoRegisterInternal (AppDomain.CurrentDomain.GetAssemblies ().Where (a => !IsIgnoredAssembly (a))' duplicateAction' registrationPredicate); " is 140.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegister,The length of the statement  "	            AutoRegisterInternal(new Assembly[] { this.GetType().Assembly() }' ignoreDuplicateImplementations' registrationPredicate);" is 122.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,Register,The length of the statement  "	return this.RegisterInternal (registerType' string.Empty' GetDefaultObjectFactory (registerType' registerImplementation)); " is 122.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,Register,The length of the statement  "	return RegisterInternal (registerType' string.Empty' new InstanceFactory (registerType' registerImplementation' instance)); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,RegisterMultiple,The length of the statement  "			throw new ArgumentException (String.Format ("types: The type {0} is not assignable from {1}"' registrationType.FullName' type.FullName)); " is 137.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,RegisterMultiple,The length of the statement  "		var multipleRegMessage = string.Format ("types: The same implementation type cannot be specified multiple times for {0}\n\n{1}"' registrationType.FullName' fullNamesOfDuplicatedTypes); " is 184.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,Resolve,The length of the statement  "	return ResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 123.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 120.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,CanResolve,The length of the statement  "	return CanResolveInternal (new TypeRegistration (resolveType' name)' NamedParameterOverloads.Default' ResolveOptions.Default); " is 126.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		var types = assemblies.SelectMany (a => a.SafeGetTypes ()).Where (t => !IsIgnoredType (t' registrationPredicate)).ToList (); " is 124.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		var concreteTypes = types.Where (type => type.IsClass () && (type.IsAbstract () == false) && (type != this.GetType () && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition ()))).ToList (); " is 211.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegisterInternal,The length of the statement  "		where ((type.IsInterface () || type.IsAbstract ()) && (type.DeclaringType != this.GetType ()) && (!type.IsGenericTypeDefinition ())) " is 132.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,IsIgnoredType,The length of the statement  "		t => (t.GetConstructors (BindingFlags.Instance | BindingFlags.Public).Length == 0) && !(t.IsInterface () || t.IsAbstract ()) " is 124.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 133.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,CanResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (checkType.IsGenericType () && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) " is 209.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,CanResolveInternal,The length of the statement  "		return (GetBestConstructor (checkType' parameters' options) != null) || (_Parent != null) && _Parent.CanResolveInternal (registration' parameters' options); " is 156.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "	//			if ((genericType == typeof(Func<''>) && type.GetTypeInfo().GenericTypeArguments[0] == typeof(string) && type.GetTypeInfo().GenericTypeArguments[1] == typeof(IDictionary<String' object>))) " is 192.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,IsAutomaticLazyFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<String' object>))) " is 167.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.Fail) " is 124.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ResolveInternal,The length of the statement  "	if (!String.IsNullOrEmpty (registration.Name) && options.NamedResolutionFailureAction == NamedResolutionFailureActions.AttemptUnnamedResolution) { " is 146.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ResolveInternal,The length of the statement  "	if ((options.UnregisteredResolutionAction == UnregisteredResolutionActions.AttemptResolve) || (registration.Type.IsGenericType () && options.UnregisteredResolutionAction == UnregisteredResolutionActions.GenericsOnly)) { " is 219.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => !mi.GetParameters().Any()); " is 141.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 1 && mi.GetParameters()[0].GetType() == typeof(String)); " is 199.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "	//			if ((genericType == typeof(Func<''>) && type.GenericTypeArguments[0] == typeof(string) && type.GenericTypeArguments[1] == typeof(IDictionary<string' object>))) " is 164.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "	if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>)))//#endif " is 175.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads)); " is 269.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The length of the statement  "		var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters)); " is 172.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "	//			var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll"' type.GenericTypeArguments' new[] { typeof(bool) }); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetIEnumerableRequest,The length of the statement  "	var genericResolveAllMethod = this.GetType ().GetGenericMethod (BindingFlags.Public | BindingFlags.Instance' "ResolveAll"' type.GetGenericArguments ()' new[] { " is 159.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,CanConstruct,The length of the statement  "		if (!isParameterOverload && !CanResolveInternal (new TypeRegistration (parameter.ParameterType)' NamedParameterOverloads.Default' options)) " is 139.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ConstructType,The length of the statement  "		constructor = GetBestConstructor (typeToConstruct' parameters' options) ?? GetTypeConstructors (typeToConstruct).LastOrDefault (); " is 130.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ConstructType,The length of the statement  "			args [parameterIndex] = parameters.ContainsKey (currentParam.Name) ? parameters [currentParam.Name] : ResolveInternal (new TypeRegistration (currentParam.ParameterType)' NamedParameterOverloads.Default' options); " is 212.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,BuildUpInternal,The length of the statement  "	//							 where (property.GetMethod != null) && (property.SetMethod != null) && !property.PropertyType.GetTypeInfo().IsValueType " is 128.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,BuildUpInternal,The length of the statement  "				property.SetValue (input' ResolveInternal (new TypeRegistration (property.PropertyType)' NamedParameterOverloads.Default' resolveOptions)' null); " is 145.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	var registrations = _RegisteredTypes.Keys.Where (tr => tr.Type == resolveType).Concat (GetParentRegistrationsForType (resolveType)); " is 132.
Long Statement,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,ResolveAllInternal,The length of the statement  "	return registrations.Select (registration => this.ResolveInternal (registration' NamedParameterOverloads.Default' ResolveOptions.Default)); " is 139.
Empty Catch Block,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,AutoRegisterInternal,The method has an empty catch block.
Empty Catch Block,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,BuildUpInternal,The method has an empty catch block.
Magic Number,TinyIoC,TinyIoCContainer,F:\newReposMay17\JaCraig_Batman\Batman.Core.Bootstrapper.TinyIoC\TinyIoC.cs,GetLazyAutomaticFactoryRequest,The following statement contains a magic number: if ((genericType == typeof(Func<' ' >) && type.GetGenericArguments () [0] == typeof(string) && type.GetGenericArguments () [1] == typeof(IDictionary<string' object>)))//#endif   {  	Type returnType = genericArguments [2];  	var name = Expression.Parameter (typeof(string)' "name");  	var parameters = Expression.Parameter (typeof(IDictionary<string' object>)' "parameters");  	//#if NETFX_CORE  	//				MethodInfo resolveMethod = typeof(TinyIoCContainer).GetTypeInfo().GetDeclaredMethods("Resolve").First(mi => mi.GetParameters().Length == 2 && mi.GetParameters()[0].GetType() == typeof(String) && mi.GetParameters()[1].GetType() == typeof(NamedParameterOverloads));  	//#else  	MethodInfo resolveMethod = typeof(TinyIoCContainer).GetMethod ("Resolve"' new Type[] {  		typeof(String)'  		typeof(NamedParameterOverloads)  	});  	//#endif  	resolveMethod = resolveMethod.MakeGenericMethod (returnType);  	var resolveCall = Expression.Call (Expression.Constant (this)' resolveMethod' name' Expression.Call (typeof(NamedParameterOverloads)' "FromIDictionary"' null' parameters));  	var resolveLambda = Expression.Lambda (resolveCall' name' parameters).Compile ();  	return resolveLambda;  }  
