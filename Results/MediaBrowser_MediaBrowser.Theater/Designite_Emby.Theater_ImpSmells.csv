Implementation smell,Namespace,Class,File,Method,Description
Long Method,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,ProcessRequestInternal,The method has 103 lines of code.
Complex Method,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetRequest,Cyclomatic complexity of the method is 13
Complex Method,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,SendAsyncInternal,Cyclomatic complexity of the method is 8
Complex Method,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetException,Cyclomatic complexity of the method is 10
Complex Method,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,GetTrigger,Cyclomatic complexity of the method is 11
Long Parameter List,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,ApplicationHost,The method has 9 parameters. Parameters: applicationPaths' logManager' options' fileSystem' powerManagement' releaseAssetFilename' environmentInfo' systemEvents' networkManager
Long Parameter List,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,DirectShowPlayerBridge,The method has 8 parameters. Parameters: logManager' appPaths' isoManager' zipClient' httpClient' configurationManager' json' context
Long Parameter List,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,Play,The method has 8 parameters. Parameters: path' startPositionTicks' isVideo' mediaSource' item' isFullScreen' options' videoWindowHandle
Long Parameter List,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,HttpClientManager,The method has 5 parameters. Parameters: appPaths' logger' fileSystem' memoryStreamProvider' defaultUserAgentFn
Long Parameter List,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,GetFileStream,The method has 5 parameters. Parameters: path' mode' access' share' isAsync
Long Parameter List,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,GetFileStream,The method has 5 parameters. Parameters: path' mode' access' share' fileOpenOptions
Long Parameter List,Emby.Theater.Logging,UnhandledExceptionWriter,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Logging\UnhandledExceptionWriter.cs,UnhandledExceptionWriter,The method has 5 parameters. Parameters: appPaths' logger' logManager' fileSystem' console
Long Parameter List,Emby.Theater.Net,SocketStream,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Emby.Theater.Net,SocketStream,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,SendToAsync,The method has 5 parameters. Parameters: buffer' offset' size' endPoint' cancellationToken
Long Parameter List,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,BeginSendTo,The method has 6 parameters. Parameters: buffer' offset' size' endPoint' callback' state
Long Parameter List,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,ScheduledTaskWorker,The method has 7 parameters. Parameters: scheduledTask' applicationPaths' taskManager' jsonSerializer' logger' fileSystem' systemEvents
Long Parameter List,Emby.Theater.ScheduledTasks,TaskManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\TaskManager.cs,TaskManager,The method has 5 parameters. Parameters: applicationPaths' jsonSerializer' logger' fileSystem' systemEvents
Long Parameter List,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,InstallationManager,The method has 9 parameters. Parameters: logger' appHost' appPaths' httpClient' jsonSerializer' config' fileSystem' cryptographyProvider' packageRuntime
Long Parameter List,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetLatestCompatibleVersion,The method has 5 parameters. Parameters: availablePackages' name' guid' currentServerVersion' classification
Long Identifier,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,SetInvalidFileNameChars,The length of the parameter enableManagedInvalidFileNameChars is 33.
Long Identifier,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,,The length of the parameter _currentReceiveTaskCompletionSource is 35.
Long Identifier,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,,The length of the parameter _currentSendTaskCompletionSource is 32.
Long Statement,Emby.Theater,Program,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Program.cs,InstallCecDriver,The length of the statement  "            var result = MessageBox.Show("Click OK to install the PulseEight HDMI CEC driver' which allows you to control Emby Theater with your HDTV remote control (compatible hardware required)."' "HDMI CEC Driver"' MessageBoxButtons.OKCancel); " is 234.
Long Statement,Emby.Theater,Program,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Program.cs,GetProgramDataPath,The length of the statement  "            programDataPath = programDataPath.Replace("%ApplicationData%"' Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)); " is 133.
Long Statement,Emby.Theater,Program,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Program.cs,GetProgramDataPath,The length of the statement  "            if (string.Equals(Path.GetFileName(Path.GetDirectoryName(applicationPath))' "system"' StringComparison.OrdinalIgnoreCase)) " is 122.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,CreateJsonSerializer,The length of the statement  "                Licensing.RegisterLicense("1001-e1JlZjoxMDAxLE5hbWU6VGVzdCBCdXNpbmVzcyxUeXBlOkJ1c2luZXNzLEhhc2g6UHVNTVRPclhvT2ZIbjQ5MG5LZE1mUTd5RUMzQnBucTFEbTE3TDczVEF4QUNMT1FhNXJMOWkzVjFGL2ZkVTE3Q2pDNENqTkQyUktRWmhvUVBhYTBiekJGUUZ3ZE5aZHFDYm9hL3lydGlwUHI5K1JsaTBYbzNsUC85cjVJNHE5QVhldDN6QkE4aTlvdldrdTgyTk1relY2eis2dFFqTThYN2lmc0JveHgycFdjPSxFeHBpcnk6MjAxMy0wMS0wMX0="); " is 355.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,OnLoggerLoaded,The length of the statement  "            Logger.LogMultiline("Application configuration:"' LogSeverity.Info' new StringBuilder(JsonSerializer.SerializeToString(ConfigurationManager.CommonConfiguration))); " is 163.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,RegisterResources,The length of the statement  "            HttpClient = new HttpClientManager.HttpClientManager(ApplicationPaths' LogManager.GetLogger("HttpClient")' FileSystemManager' MemoryStreamFactory' GetDefaultUserAgent); " is 168.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,RegisterResources,The length of the statement  "            TaskManager = new TaskManager(ApplicationPaths' JsonSerializer' LogManager.GetLogger("TaskManager")' FileSystemManager' SystemEvents); " is 134.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,RegisterResources,The length of the statement  "            InstallationManager = new InstallationManager(LogManager.GetLogger("InstallationManager")' this' ApplicationPaths' HttpClient' JsonSerializer' ConfigurationManager' FileSystemManager' CryptographyProvider' PackageRuntime); " is 222.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,CheckForApplicationUpdate,The length of the statement  "                .CheckForUpdateResult("MediaBrowser"' "Emby.Theater.Windows"' ApplicationVersion' updateLevel' Program.UpdatePackageName' "emby.theater"' Program.DownloadedPackageFilename' TimeSpan.FromTicks(0)' cancellationToken); " is 215.
Long Statement,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,ConfigureAutoRunAtStartup,The length of the statement  "            var shortcutPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.StartMenu)' "Emby"' "Emby Theater.lnk"); " is 124.
Long Statement,Emby.Theater.App,ApplicationUpdater,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationUpdater.cs,UpdateApplication,The length of the statement  "            var args = string.Format("product=\"{0}\" archive=\"{1}\" caller={2} pismo=false version={3} installpath=\"{4}\" startpath=\"{5}\" systempath=\"{6}\""' " is 151.
Long Statement,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,Play,The length of the statement  "                    if (File.Exists(mediaSource.Path) && !string.Equals(Path.GetExtension(mediaSource.Path)' "dvr-ms"' StringComparison.OrdinalIgnoreCase)) " is 135.
Long Statement,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,SetPlayerOptions,The length of the statement  "            config.AudioConfig.BitstreamCodecs = (options.audioSpdif ?? string.Empty).Split(''').Where(i => !string.IsNullOrWhiteSpace(i)).ToList(); " is 136.
Long Statement,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,ProcessRequestInternal,The length of the statement  "                Play(playRequest.url' playRequest.startPositionTicks ?? 0' playRequest.isVideo' playRequest.mediaSource' playRequest.item' playRequest.fullscreen' playRequest.playerOptions' playerWindowHandle); " is 194.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,CreateWebRequest,The length of the statement  "                //the issue occurs in the GetCreator method here: http://www.oschina.net/code/explore/mono-2.8.1/mcs/class/System/System.Net/WebRequest.cs " is 138.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,CreateWebRequest,The length of the statement  "                var type = Type.GetType("System.Net.HttpRequestCreator' System' Version=4.0.0.0'Culture=neutral' PublicKeyToken=b77a5c561934e089"); " is 131.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetCachedResponse,The length of the statement  "                    using (var stream = _fileSystem.GetFileStream(responseCachePath' FileOpenMode.Open' FileAccessMode.Read' FileShareMode.Read' true)) " is 131.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,CacheResponse,The length of the statement  "                using (var fileStream = _fileSystem.GetFileStream(responseCachePath' FileOpenMode.Create' FileAccessMode.Write' FileShareMode.None' true)) " is 138.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,SendAsyncInternal,The length of the statement  "                    var response = await GetResponseAsync(httpWebRequest' TimeSpan.FromMilliseconds(options.TimeoutMs)).ConfigureAwait(false); " is 122.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,SendAsyncInternal,The length of the statement  "                using (var response = await GetResponseAsync(httpWebRequest' TimeSpan.FromMilliseconds(options.TimeoutMs)).ConfigureAwait(false)) " is 129.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetTempFileResponse,The length of the statement  "                        using (var fs = _fileSystem.GetFileStream(tempFile' FileOpenMode.Create' FileAccessMode.Write' FileShareMode.Read' true)) " is 121.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetResponseAsync,The length of the statement  "            Task<WebResponse> asyncTask = Task.Factory.FromAsync<WebResponse>(request.BeginGetResponse' request.EndGetResponse' null); " is 122.
Long Statement,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetResponseAsync,The length of the statement  "            ThreadPool.RegisterWaitForSingleObject((asyncTask as IAsyncResult).AsyncWaitHandle' TimeoutCallback' request' timeout' true); " is 125.
Long Statement,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,SetInvalidFileNameChars,The length of the statement  "                // GetInvalidFileNameChars is less restrictive in Linux/Mac than Windows' this mimic Windows behavior for mono under Linux/Mac. " is 127.
Long Statement,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,ResolveShortcut,The length of the statement  "            var handler = _shortcutHandlers.FirstOrDefault(i => string.Equals(extension' i.Extension' StringComparison.OrdinalIgnoreCase)); " is 127.
Long Statement,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,CreateShortcut,The length of the statement  "            var handler = _shortcutHandlers.FirstOrDefault(i => string.Equals(extension' i.Extension' StringComparison.OrdinalIgnoreCase)); " is 127.
Long Statement,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,GetFileStream,The length of the statement  "            return new FileStream(path' GetFileMode(mode)' GetFileAccess(access)' GetFileShare(share)' defaultBufferSize' GetFileOptions(fileOpenOptions)); " is 143.
Long Statement,Emby.Theater.IO,SharpCifsFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\SharpCifsFileSystem.cs,GetDirectoryName,The length of the statement  "                if (result.StartsWith("smb:/"' StringComparison.OrdinalIgnoreCase) && !result.StartsWith("smb://"' StringComparison.OrdinalIgnoreCase)) " is 135.
Long Statement,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,GetIPsDefault,The length of the statement  "                    Logger.Debug("Querying interface: {0}. Type: {1}. Status: {2}"' network.Name' network.NetworkInterfaceType' network.OperationalStatus); " is 135.
Long Statement,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,ToIpAddressInfo,The length of the statement  "            return new IpAddressInfo(address.ToString()' address.AddressFamily == AddressFamily.InterNetworkV6 ? IpAddressFamily.InterNetworkV6 : IpAddressFamily.InterNetwork); " is 164.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateUdpSocket,The length of the statement  "            var retVal = new Socket(AddressFamily.InterNetwork' System.Net.Sockets.SocketType.Dgram' System.Net.Sockets.ProtocolType.Udp); " is 126.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateUdpBroadcastSocket,The length of the statement  "            var retVal = new Socket(AddressFamily.InterNetwork' System.Net.Sockets.SocketType.Dgram' System.Net.Sockets.ProtocolType.Udp); " is 126.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateSsdpUdpSocket,The length of the statement  "            var retVal = new Socket(AddressFamily.InterNetwork' System.Net.Sockets.SocketType.Dgram' System.Net.Sockets.ProtocolType.Udp); " is 126.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateSsdpUdpSocket,The length of the statement  "                retVal.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(IPAddress.Parse("239.255.255.250")' localIp)); " is 143.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateUdpMulticastSocket,The length of the statement  "            if (multicastTimeToLive <= 0) throw new ArgumentException("multicastTimeToLive cannot be zero or less."' "multicastTimeToLive"); " is 128.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateUdpMulticastSocket,The length of the statement  "            var retVal = new Socket(AddressFamily.InterNetwork' System.Net.Sockets.SocketType.Dgram' System.Net.Sockets.ProtocolType.Udp); " is 126.
Long Statement,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateUdpMulticastSocket,The length of the statement  "                retVal.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(IPAddress.Parse(ipAddress)' localIp)); " is 135.
Long Statement,Emby.Theater.ScheduledTasks,DailyTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\DailyTrigger.cs,Start,The length of the statement  "            logger.Info("Daily trigger for {0} set to fire at {1}' which is {2} minutes from now."' taskName' triggerDate.ToString()' dueTime.TotalMinutes.ToString(CultureInfo.InvariantCulture)); " is 183.
Long Statement,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,LoadTriggers,The length of the statement  "            // This null check is not great' but is needed to handle bad user input' or user mucking with the config file incorrectly " is 121.
Long Statement,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,OnTaskCompleted,The length of the statement  "            Logger.Info("{0} {1} after {2} minute(s) and {3} seconds"' Name' status' Math.Truncate(elapsedTime.TotalMinutes)' elapsedTime.Seconds); " is 135.
Long Statement,Emby.Theater.ScheduledTasks,SystemEventTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\SystemEventTrigger.cs,_systemEvents_Resume,The length of the statement  "                // This value is a bit arbitrary' but add a delay to help ensure network connections have been restored before running the task " is 127.
Long Statement,Emby.Theater.ScheduledTasks,TaskManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\TaskManager.cs,AddTasks,The length of the statement  "            myTasks.AddRange(list.Select(t => new ScheduledTaskWorker(t' ApplicationPaths' this' JsonSerializer' Logger' _fileSystem' _systemEvents))); " is 139.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,OnPluginUpdated,The length of the statement  "            _logger.Info("Plugin updated: {0} {1} {2}"' newVersion.name' newVersion.versionStr ?? string.Empty' newVersion.classification); " is 127.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,OnPluginUpdated,The length of the statement  "            EventHelper.FireEventIfNotNull(PluginUpdated' this' new GenericEventArgs<Tuple<IPlugin' PackageVersionInfo>> { Argument = new Tuple<IPlugin' PackageVersionInfo>(plugin' newVersion) }' _logger); " is 193.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,OnPluginInstalled,The length of the statement  "            _logger.Info("New plugin installed: {0} {1} {2}"' package.name' package.versionStr ?? string.Empty' package.classification); " is 124.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,OnPluginInstalled,The length of the statement  "            EventHelper.FireEventIfNotNull(PluginInstalled' this' new GenericEventArgs<PackageVersionInfo> { Argument = package }' _logger); " is 128.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetAvailablePackages,The length of the statement  "                using (var json = await _httpClient.Post("https://www.mb3admin.com/admin/service/package/retrieveall?includeAllRuntimes=true"' data' cancellationToken).ConfigureAwait(false)) " is 174.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,FilterPackages,The length of the statement  "                    if (string.IsNullOrWhiteSpace(version.runtimes) || version.runtimes.IndexOf(_packageRuntime' StringComparison.OrdinalIgnoreCase) == -1) " is 135.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,IsPackageVersionUpToDate,The length of the statement  "            return Version.TryParse(packageVersionInfo.requiredVersionStr' out requiredVersion) && currentServerVersion >= requiredVersion; " is 127.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetPackage,The length of the statement  "            return package.versions.FirstOrDefault(v => GetPackageVersion(v).Equals(version) && v.classification == classification); " is 120.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetLatestCompatibleVersion,The length of the statement  "            var package = availablePackages.FirstOrDefault(p => string.Equals(p.guid' guid ?? "none"' StringComparison.OrdinalIgnoreCase)) " is 126.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetAvailablePluginUpdates,The length of the statement  "                var latestPluginInfo = GetLatestCompatibleVersion(catalog' p.Name' p.Id.ToString()' applicationVersion' systemUpdateLevel); " is 123.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetAvailablePluginUpdates,The length of the statement  "            .Where(p => !string.IsNullOrWhiteSpace(p.sourceUrl) && !CompletedInstallations.Any(i => string.Equals(i.AssemblyGuid' p.guid' StringComparison.OrdinalIgnoreCase))); " is 164.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,InstallPackage,The length of the statement  "            var linkedToken = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken' innerCancellationTokenSource.Token).Token; " is 127.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,InstallPackageInternal,The length of the statement  "                var plugin = _applicationHost.Plugins.FirstOrDefault(p => string.Equals(p.Id.ToString()' package.guid' StringComparison.OrdinalIgnoreCase)) " is 139.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,PerformPackageInstallation,The length of the statement  "            var isArchive = string.Equals(extension' ".zip"' StringComparison.OrdinalIgnoreCase) || string.Equals(extension' ".rar"' StringComparison.OrdinalIgnoreCase) || string.Equals(extension' ".7z"' StringComparison.OrdinalIgnoreCase); " is 228.
Long Statement,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,PerformPackageInstallation,The length of the statement  "                        throw new Exception(string.Format("Download validation failed for {0}.  Probably corrupted during transfer."' package.name)); " is 125.
Empty Catch Block,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,CreateJsonSerializer,The method has an empty catch block.
Empty Catch Block,Emby.Theater.App,DeviceId,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\DeviceId.cs,GetCachedId,The method has an empty catch block.
Empty Catch Block,Emby.Theater.App,DeviceId,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\DeviceId.cs,GetCachedId,The method has an empty catch block.
Empty Catch Block,Emby.Theater.App,ElectronApp,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ElectronApp.cs,CloseProcess,The method has an empty catch block.
Empty Catch Block,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetCachedResponse,The method has an empty catch block.
Empty Catch Block,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetCachedResponse,The method has an empty catch block.
Empty Catch Block,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,DeleteTempFile,The method has an empty catch block.
Empty Catch Block,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,EnsureSuccessStatusCode,The method has an empty catch block.
Empty Catch Block,Emby.Theater.Logging,FileLogger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Logging\SimpleLogManager.cs,LogInternal,The method has an empty catch block.
Empty Catch Block,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,IsInLocalNetworkInternal,The method has an empty catch block.
Empty Catch Block,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateTcpSocket,The method has an empty catch block.
Empty Catch Block,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateUdpMulticastSocket,The method has an empty catch block.
Empty Catch Block,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,LoadTriggerSettings,The method has an empty catch block.
Empty Catch Block,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetAvailablePackagesWithoutRegistrationInfo,The method has an empty catch block.
Magic Number,Emby.Theater,Program,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Program.cs,Main,The following statement contains a magic number: using (var logManager = new SimpleLogManager(appPaths.LogDirectoryPath' "theater"))              {                  _logManager = logManager;                  logManager.ReloadLogger(LogSeverity.Debug);                  logManager.AddConsoleOutput();                    var logger = _logger = logManager.GetLogger("Main");                    logger.Info("Application path: {0}"' ApplicationPath);                    ApplicationHost.LogEnvironmentInfo(logger' appPaths' true);                    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;                    // Mutex credit: https://stackoverflow.com/questions/229565/what-is-a-good-pattern-for-using-a-global-mutex-in-c/229567                    // unique id for global mutex - Global prefix means it is global to the machine                  string mutexId = string.Format("Global\\{{{0}}}"' "EmbyTheater");                    // Need a place to store a return value in Mutex() constructor call                  bool createdNew;                    // edited by MasonGZhwiti to prevent race condition on security settings via VanNguyen                  using (var mutex = new Mutex(false' mutexId' out createdNew))                  {                      // edited by acidzombie24                      var hasHandle = false;                      try                      {                          // note' you may want to time out here instead of waiting forever                          // edited by acidzombie24                          hasHandle = mutex.WaitOne(5000' false);                          if (hasHandle == false)                          {                              logger.Info("Exiting because another instance is already running.");                              return;                          }                      }                      catch (AbandonedMutexException)                      {                          // Log the fact that the mutex was abandoned in another process'                          // it will still get acquired                          hasHandle = true;                          logger.Info("Mutex was abandoned in another process.");                      }                        using (new MutexHandle(mutex' hasHandle' _logger))                      {                          if (PerformUpdateIfNeeded(appPaths' environmentInfo' logger))                          {                              logger.Info("Exiting to perform application update.");                              return;                          }                            RunApplication(appPaths' logManager' environmentInfo' new StartupOptions(Environment.GetCommandLineArgs()));                      }                  }                    logger.Info("Shutdown complete");                    if (_restartOnShutdown)                  {                      // This is artificial' but add some delay to ensure sockets are released.                      var delay = environmentInfo.OperatingSystem == MediaBrowser.Model.System.OperatingSystem.Windows                          ? 5000                          : 60000;                        var task = Task.Delay(delay);                      Task.WaitAll(task);                        logger.Info("Starting new server process");                      var restartCommandLine = GetRestartCommandLine();                        Process.Start(restartCommandLine.Item1' restartCommandLine.Item2);                  }              }
Magic Number,Emby.Theater,Program,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Program.cs,Main,The following statement contains a magic number: using (var logManager = new SimpleLogManager(appPaths.LogDirectoryPath' "theater"))              {                  _logManager = logManager;                  logManager.ReloadLogger(LogSeverity.Debug);                  logManager.AddConsoleOutput();                    var logger = _logger = logManager.GetLogger("Main");                    logger.Info("Application path: {0}"' ApplicationPath);                    ApplicationHost.LogEnvironmentInfo(logger' appPaths' true);                    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;                    // Mutex credit: https://stackoverflow.com/questions/229565/what-is-a-good-pattern-for-using-a-global-mutex-in-c/229567                    // unique id for global mutex - Global prefix means it is global to the machine                  string mutexId = string.Format("Global\\{{{0}}}"' "EmbyTheater");                    // Need a place to store a return value in Mutex() constructor call                  bool createdNew;                    // edited by MasonGZhwiti to prevent race condition on security settings via VanNguyen                  using (var mutex = new Mutex(false' mutexId' out createdNew))                  {                      // edited by acidzombie24                      var hasHandle = false;                      try                      {                          // note' you may want to time out here instead of waiting forever                          // edited by acidzombie24                          hasHandle = mutex.WaitOne(5000' false);                          if (hasHandle == false)                          {                              logger.Info("Exiting because another instance is already running.");                              return;                          }                      }                      catch (AbandonedMutexException)                      {                          // Log the fact that the mutex was abandoned in another process'                          // it will still get acquired                          hasHandle = true;                          logger.Info("Mutex was abandoned in another process.");                      }                        using (new MutexHandle(mutex' hasHandle' _logger))                      {                          if (PerformUpdateIfNeeded(appPaths' environmentInfo' logger))                          {                              logger.Info("Exiting to perform application update.");                              return;                          }                            RunApplication(appPaths' logManager' environmentInfo' new StartupOptions(Environment.GetCommandLineArgs()));                      }                  }                    logger.Info("Shutdown complete");                    if (_restartOnShutdown)                  {                      // This is artificial' but add some delay to ensure sockets are released.                      var delay = environmentInfo.OperatingSystem == MediaBrowser.Model.System.OperatingSystem.Windows                          ? 5000                          : 60000;                        var task = Task.Delay(delay);                      Task.WaitAll(task);                        logger.Info("Starting new server process");                      var restartCommandLine = GetRestartCommandLine();                        Process.Start(restartCommandLine.Item1' restartCommandLine.Item2);                  }              }
Magic Number,Emby.Theater,Program,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Program.cs,Main,The following statement contains a magic number: using (var logManager = new SimpleLogManager(appPaths.LogDirectoryPath' "theater"))              {                  _logManager = logManager;                  logManager.ReloadLogger(LogSeverity.Debug);                  logManager.AddConsoleOutput();                    var logger = _logger = logManager.GetLogger("Main");                    logger.Info("Application path: {0}"' ApplicationPath);                    ApplicationHost.LogEnvironmentInfo(logger' appPaths' true);                    AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;                    // Mutex credit: https://stackoverflow.com/questions/229565/what-is-a-good-pattern-for-using-a-global-mutex-in-c/229567                    // unique id for global mutex - Global prefix means it is global to the machine                  string mutexId = string.Format("Global\\{{{0}}}"' "EmbyTheater");                    // Need a place to store a return value in Mutex() constructor call                  bool createdNew;                    // edited by MasonGZhwiti to prevent race condition on security settings via VanNguyen                  using (var mutex = new Mutex(false' mutexId' out createdNew))                  {                      // edited by acidzombie24                      var hasHandle = false;                      try                      {                          // note' you may want to time out here instead of waiting forever                          // edited by acidzombie24                          hasHandle = mutex.WaitOne(5000' false);                          if (hasHandle == false)                          {                              logger.Info("Exiting because another instance is already running.");                              return;                          }                      }                      catch (AbandonedMutexException)                      {                          // Log the fact that the mutex was abandoned in another process'                          // it will still get acquired                          hasHandle = true;                          logger.Info("Mutex was abandoned in another process.");                      }                        using (new MutexHandle(mutex' hasHandle' _logger))                      {                          if (PerformUpdateIfNeeded(appPaths' environmentInfo' logger))                          {                              logger.Info("Exiting to perform application update.");                              return;                          }                            RunApplication(appPaths' logManager' environmentInfo' new StartupOptions(Environment.GetCommandLineArgs()));                      }                  }                    logger.Info("Shutdown complete");                    if (_restartOnShutdown)                  {                      // This is artificial' but add some delay to ensure sockets are released.                      var delay = environmentInfo.OperatingSystem == MediaBrowser.Model.System.OperatingSystem.Windows                          ? 5000                          : 60000;                        var task = Task.Delay(delay);                      Task.WaitAll(task);                        logger.Info("Starting new server process");                      var restartCommandLine = GetRestartCommandLine();                        Process.Start(restartCommandLine.Item1' restartCommandLine.Item2);                  }              }
Magic Number,Emby.Theater,TheaterServer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\TheaterServer.cs,StartServer,The following statement contains a magic number: var serverPort = 8154;
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: progress.Report(2);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: progress.Report(3);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: progress.Report(14);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: progress.Report(15);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: innerProgress.RegisterAction(p => progress.Report(.8 * p + 15));
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: innerProgress.RegisterAction(p => progress.Report(.8 * p + 15));
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: progress.Report(95);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,Init,The following statement contains a magic number: progress.Report(100);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,RegisterResources,The following statement contains a magic number: progress.Report(100);
Magic Number,Emby.Theater.App,ApplicationHost,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ApplicationHost.cs,SetHttpLimit,The following statement contains a magic number: try              {                  // Increase the max http request limit                  ServicePointManager.DefaultConnectionLimit = Math.Max(96' ServicePointManager.DefaultConnectionLimit);              }              catch (Exception ex)              {                  Logger.ErrorException("Error setting http limit"' ex);              }
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,GetDefaultTriggers,The following statement contains a magic number: return new[] {                                 // At startup                  new TaskTriggerInfo {Type = TaskTriggerInfo.TriggerStartup}'                    // Every so often                  new TaskTriggerInfo { Type = TaskTriggerInfo.TriggerInterval' IntervalTicks = TimeSpan.FromHours(12).Ticks}              };
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,Execute,The following statement contains a magic number: EventHandler<double> innerProgressHandler = (sender' e) => progress.Report(e * .1);
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,Execute,The following statement contains a magic number: progress.Report(10);
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,Execute,The following statement contains a magic number: if (!updateInfo.IsUpdateAvailable)              {                  Logger.Debug("No application update available.");                  progress.Report(100);                  return;              }
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,Execute,The following statement contains a magic number: if (ConfigurationManager.CommonConfiguration.EnableAutoUpdate)              {                  Logger.Info("Update Revision {0} available.  Updating..."' updateInfo.AvailableVersion);                    innerProgressHandler = (sender' e) => progress.Report((e * .9) + .1);                    innerProgress = new Progress<double>();                  innerProgress.ProgressChanged += innerProgressHandler;                    await _appHost.UpdateApplication(updateInfo.Package' cancellationToken' innerProgress).ConfigureAwait(false);                    // Release the event handler                  innerProgress.ProgressChanged -= innerProgressHandler;              }              else              {                  Logger.Info("A new version of Emby is available.");              }
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,Execute,The following statement contains a magic number: if (ConfigurationManager.CommonConfiguration.EnableAutoUpdate)              {                  Logger.Info("Update Revision {0} available.  Updating..."' updateInfo.AvailableVersion);                    innerProgressHandler = (sender' e) => progress.Report((e * .9) + .1);                    innerProgress = new Progress<double>();                  innerProgress.ProgressChanged += innerProgressHandler;                    await _appHost.UpdateApplication(updateInfo.Package' cancellationToken' innerProgress).ConfigureAwait(false);                    // Release the event handler                  innerProgress.ProgressChanged -= innerProgressHandler;              }              else              {                  Logger.Info("A new version of Emby is available.");              }
Magic Number,Emby.Theater.App,SystemUpdateTask,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemUpdateTask.cs,Execute,The following statement contains a magic number: progress.Report(100);
Magic Number,Emby.Theater.App,ElectronApp,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ElectronApp.cs,StartProcess,The following statement contains a magic number: while (process.MainWindowHandle.Equals(IntPtr.Zero))              {                  var task = Task.Delay(50);                  Task.WaitAll(task);              }
Magic Number,Emby.Theater.App,ElectronApp,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\ElectronApp.cs,CloseProcess,The following statement contains a magic number: using (process)              {                  try                  {                      var url = "http://127.0.0.1:8024/exit";                      using (_httpClient().Post(url' new Dictionary<string' string>()' CancellationToken.None).Result)                      {                        }                  }                  catch (Exception ex)                  {                      _logger.ErrorException("Error attempting to close electron"' ex);                  }                    var exited = false;                    try                  {                      _logger.Info("electron WaitForExit");                      exited = process.WaitForExit(1000);                  }                  catch (Exception ex)                  {                      _logger.ErrorException("Error in WaitForExit"' ex);                  }                    if (exited)                  {                      _logger.Info("electron exited");                  }                  else                  {                      try                      {                          _logger.Info("electron Kill");                          process.Kill();                      }                      catch                      {                        }                  }              }
Magic Number,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,SetPlayerOptions,The following statement contains a magic number: if (string.Equals(options.videoOutputLevels' "full"' StringComparison.OrdinalIgnoreCase))              {                  config.VideoConfig.NominalRange = 1;              }              else if (string.Equals(options.videoOutputLevels' "limited"' StringComparison.OrdinalIgnoreCase))              {                  config.VideoConfig.NominalRange = 2;              }
Magic Number,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,Stop,The following statement contains a magic number: if (!_isVideo && fade)              {                  _isFadingOut = true;                    for (int i = -100; i > -10000; i -= 20)                  {                      if (!_isFadingOut)                      {                          break;                      }                        _player.SetVolume(i);                      Thread.Sleep(1);                  }                  //reset volume just in case this graph gets reused                  _player.SetVolume(0);              }
Magic Number,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,Stop,The following statement contains a magic number: if (!_isVideo && fade)              {                  _isFadingOut = true;                    for (int i = -100; i > -10000; i -= 20)                  {                      if (!_isFadingOut)                      {                          break;                      }                        _player.SetVolume(i);                      Thread.Sleep(1);                  }                  //reset volume just in case this graph gets reused                  _player.SetVolume(0);              }
Magic Number,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,Stop,The following statement contains a magic number: if (!_isVideo && fade)              {                  _isFadingOut = true;                    for (int i = -100; i > -10000; i -= 20)                  {                      if (!_isFadingOut)                      {                          break;                      }                        _player.SetVolume(i);                      Thread.Sleep(1);                  }                  //reset volume just in case this graph gets reused                  _player.SetVolume(0);              }
Magic Number,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,GetVolume,The following statement contains a magic number: if (audioDevice != null)              {                  return audioDevice.AudioEndpointVolume.MasterVolumeLevelScalar * 100;              }
Magic Number,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,SetVolume,The following statement contains a magic number: if (audioDevice != null)              {                  audioDevice.AudioEndpointVolume.MasterVolumeLevelScalar = volume / 100;              }
Magic Number,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetRequest,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(userInfo))              {                  var parts = userInfo.Split(':');                  if (parts.Length == 2)                  {                      request.Credentials = GetCredential(url' parts[0]' parts[1]);                      // TODO: .net core ??                      request.PreAuthenticate = true;                  }              }
Magic Number,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetTempFileResponse,The following statement contains a magic number: try              {                  options.CancellationToken.ThrowIfCancellationRequested();                    using (var response = await httpWebRequest.GetResponseAsync().ConfigureAwait(false))                  {                      var httpResponse = (HttpWebResponse)response;                        EnsureSuccessStatusCode(client' httpResponse' options);                        options.CancellationToken.ThrowIfCancellationRequested();                        var contentLength = GetContentLength(httpResponse);                        // We're not able to track progress                      using (var stream = httpResponse.GetResponseStream())                      {                          using (var fs = _fileSystem.GetFileStream(tempFile' FileOpenMode.Create' FileAccessMode.Write' FileShareMode.Read' true))                          {                              await stream.CopyToAsync(fs' StreamDefaults.DefaultCopyToBufferSize' options.CancellationToken).ConfigureAwait(false);                          }                      }                        options.Progress.Report(100);                        return GetResponseInfo(httpResponse' tempFile' contentLength);                  }              }              catch (Exception ex)              {                  DeleteTempFile(tempFile);                  throw GetException(ex' options' client);              }              finally              {                  if (options.ResourcePool != null)                  {                      options.ResourcePool.Release();                  }              }
Magic Number,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetException,The following statement contains a magic number: if (webException != null)              {                  if (options.LogErrors)                  {                      _logger.ErrorException("Error " + webException.Status + " getting response from " + options.Url' webException);                  }                    var exception = new HttpException(webException.Message' webException);                    var response = webException.Response as HttpWebResponse;                  if (response != null)                  {                      exception.StatusCode = response.StatusCode;                        if ((int)response.StatusCode == 429)                      {                          client.LastTimeout = DateTime.UtcNow;                      }                  }                    if (!exception.StatusCode.HasValue)                  {                      if (webException.Status == WebExceptionStatus.NameResolutionFailure ||                          webException.Status == WebExceptionStatus.ConnectFailure)                      {                          exception.IsTimedOut = true;                      }                  }                    return exception;              }
Magic Number,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,GetHostFromUrl,The following statement contains a magic number: if (index != -1)              {                  url = url.Substring(index + 3);                  var host = url.Split(new[] { '/' }' StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();                    if (!string.IsNullOrWhiteSpace(host))                  {                      return host;                  }              }
Magic Number,Emby.Theater.HttpClientManager,HttpClientManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\HttpClientManager\HttpClientManager.cs,EnsureSuccessStatusCode,The following statement contains a magic number: var isSuccessful = statusCode >= HttpStatusCode.OK && statusCode <= (HttpStatusCode)299;
Magic Number,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,SetInvalidFileNameChars,The following statement contains a magic number: if (enableManagedInvalidFileNameChars)              {                  _invalidFileNameChars = Path.GetInvalidFileNameChars();              }              else              {                  // GetInvalidFileNameChars is less restrictive in Linux/Mac than Windows' this mimic Windows behavior for mono under Linux/Mac.                  _invalidFileNameChars = new char[41] { '\x00'' '\x01'' '\x02'' '\x03'' '\x04'' '\x05'' '\x06'' '\x07''              '\x08'' '\x09'' '\x0A'' '\x0B'' '\x0C'' '\x0D'' '\x0E'' '\x0F'' '\x10'' '\x11'' '\x12''              '\x13'' '\x14'' '\x15'' '\x16'' '\x17'' '\x18'' '\x19'' '\x1A'' '\x1B'' '\x1C'' '\x1D''              '\x1E'' '\x1F'' '\x22'' '\x3C'' '\x3E'' '\x7C'' ':'' '*'' '?'' '\\'' '/' };              }
Magic Number,Emby.Theater.IO,ManagedFileSystem,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\IO\ManagedFileSystem.cs,GetFileStream,The following statement contains a magic number: var defaultBufferSize = 4096;
Magic Number,Emby.Theater.Logging,SimpleLogManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Logging\SimpleLogManager.cs,ReloadLogger,The following statement contains a magic number: var path = Path.Combine(LogDirectory' LogFilePrefix + "-" + decimal.Floor(DateTime.Now.Ticks / 10000000) + ".txt");
Magic Number,Emby.Theater.Logging,FileLogger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Logging\SimpleLogManager.cs,FileLogger,The following statement contains a magic number: _fileStream = new FileStream(path' FileMode.Create' FileAccess.Write' FileShare.Read' 32768);
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,GetLocalIpAddresses,The following statement contains a magic number: const int cacheMinutes = 5;
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,Is172AddressPrivate,The following statement contains a magic number: for (var i = 16; i <= 31; i++)              {                  if (endpoint.StartsWith("172." + i.ToString(CultureInfo.InvariantCulture) + "."' StringComparison.OrdinalIgnoreCase))                  {                      return true;                  }              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,Is172AddressPrivate,The following statement contains a magic number: for (var i = 16; i <= 31; i++)              {                  if (endpoint.StartsWith("172." + i.ToString(CultureInfo.InvariantCulture) + "."' StringComparison.OrdinalIgnoreCase))                  {                      return true;                  }              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,IsInLocalNetworkInternal,The following statement contains a magic number: if (IPAddress.TryParse(endpoint' out address))              {                  var addressString = address.ToString();                    int lengthMatch = 100;                  if (address.AddressFamily == AddressFamily.InterNetwork)                  {                      lengthMatch = 4;                      if (IsInPrivateAddressSpace(addressString))                      {                          return true;                      }                  }                  else if (address.AddressFamily == AddressFamily.InterNetworkV6)                  {                      lengthMatch = 10;                      if (IsInPrivateAddressSpace(endpoint))                      {                          return true;                      }                  }                    // Should be even be doing this with ipv6?                  if (addressString.Length >= lengthMatch)                  {                      var prefix = addressString.Substring(0' lengthMatch);                        if (GetLocalIpAddresses().Any(i => i.ToString().StartsWith(prefix' StringComparison.OrdinalIgnoreCase)))                      {                          return true;                      }                  }              }              else if (resolveHost)              {                  Uri uri;                  if (Uri.TryCreate(endpoint' UriKind.RelativeOrAbsolute' out uri))                  {                      try                      {                          var host = uri.DnsSafeHost;                          Logger.Debug("Resolving host {0}"' host);                            address = GetIpAddresses(host).Result.FirstOrDefault();                            if (address != null)                          {                              Logger.Debug("{0} resolved to {1}"' host' address);                                return IsInLocalNetworkInternal(address.ToString()' false);                          }                      }                      catch (InvalidOperationException)                      {                          // Can happen with reverse proxy or IIS url rewriting                      }                      catch (Exception ex)                      {                          Logger.ErrorException("Error resovling hostname"' ex);                      }                  }              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,IsInLocalNetworkInternal,The following statement contains a magic number: if (IPAddress.TryParse(endpoint' out address))              {                  var addressString = address.ToString();                    int lengthMatch = 100;                  if (address.AddressFamily == AddressFamily.InterNetwork)                  {                      lengthMatch = 4;                      if (IsInPrivateAddressSpace(addressString))                      {                          return true;                      }                  }                  else if (address.AddressFamily == AddressFamily.InterNetworkV6)                  {                      lengthMatch = 10;                      if (IsInPrivateAddressSpace(endpoint))                      {                          return true;                      }                  }                    // Should be even be doing this with ipv6?                  if (addressString.Length >= lengthMatch)                  {                      var prefix = addressString.Substring(0' lengthMatch);                        if (GetLocalIpAddresses().Any(i => i.ToString().StartsWith(prefix' StringComparison.OrdinalIgnoreCase)))                      {                          return true;                      }                  }              }              else if (resolveHost)              {                  Uri uri;                  if (Uri.TryCreate(endpoint' UriKind.RelativeOrAbsolute' out uri))                  {                      try                      {                          var host = uri.DnsSafeHost;                          Logger.Debug("Resolving host {0}"' host);                            address = GetIpAddresses(host).Result.FirstOrDefault();                            if (address != null)                          {                              Logger.Debug("{0} resolved to {1}"' host' address);                                return IsInLocalNetworkInternal(address.ToString()' false);                          }                      }                      catch (InvalidOperationException)                      {                          // Can happen with reverse proxy or IIS url rewriting                      }                      catch (Exception ex)                      {                          Logger.ErrorException("Error resovling hostname"' ex);                      }                  }              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,IsInLocalNetworkInternal,The following statement contains a magic number: if (IPAddress.TryParse(endpoint' out address))              {                  var addressString = address.ToString();                    int lengthMatch = 100;                  if (address.AddressFamily == AddressFamily.InterNetwork)                  {                      lengthMatch = 4;                      if (IsInPrivateAddressSpace(addressString))                      {                          return true;                      }                  }                  else if (address.AddressFamily == AddressFamily.InterNetworkV6)                  {                      lengthMatch = 10;                      if (IsInPrivateAddressSpace(endpoint))                      {                          return true;                      }                  }                    // Should be even be doing this with ipv6?                  if (addressString.Length >= lengthMatch)                  {                      var prefix = addressString.Substring(0' lengthMatch);                        if (GetLocalIpAddresses().Any(i => i.ToString().StartsWith(prefix' StringComparison.OrdinalIgnoreCase)))                      {                          return true;                      }                  }              }              else if (resolveHost)              {                  Uri uri;                  if (Uri.TryCreate(endpoint' UriKind.RelativeOrAbsolute' out uri))                  {                      try                      {                          var host = uri.DnsSafeHost;                          Logger.Debug("Resolving host {0}"' host);                            address = GetIpAddresses(host).Result.FirstOrDefault();                            if (address != null)                          {                              Logger.Debug("{0} resolved to {1}"' host' address);                                return IsInLocalNetworkInternal(address.ToString()' false);                          }                      }                      catch (InvalidOperationException)                      {                          // Can happen with reverse proxy or IIS url rewriting                      }                      catch (Exception ex)                      {                          Logger.ErrorException("Error resovling hostname"' ex);                      }                  }              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,Parse,The following statement contains a magic number: if (values.Length <= 2) // ipv4 or hostname              {                  port = values.Length == 1 ? defaultport : GetPort(values[1]);                    //try to use the address as IPv4' otherwise get hostname                  if (!IPAddress.TryParse(values[0]' out ipaddy))                      ipaddy = await GetIPfromHost(values[0]).ConfigureAwait(false);              }              else if (values.Length > 2) //ipv6              {                  //could [a:b:c]:d                  if (values[0].StartsWith("[") && values[values.Length - 2].EndsWith("]"))                  {                      string ipaddressstring = String.Join(":"' values.Take(values.Length - 1).ToArray());                      ipaddy = IPAddress.Parse(ipaddressstring);                      port = GetPort(values[values.Length - 1]);                  }                  else //[a:b:c] or a:b:c                  {                      ipaddy = IPAddress.Parse(endpointstring);                      port = defaultport;                  }              }              else              {                  throw new FormatException(String.Format("Invalid endpoint ipaddress '{0}'"' endpointstring));              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,Parse,The following statement contains a magic number: if (values.Length <= 2) // ipv4 or hostname              {                  port = values.Length == 1 ? defaultport : GetPort(values[1]);                    //try to use the address as IPv4' otherwise get hostname                  if (!IPAddress.TryParse(values[0]' out ipaddy))                      ipaddy = await GetIPfromHost(values[0]).ConfigureAwait(false);              }              else if (values.Length > 2) //ipv6              {                  //could [a:b:c]:d                  if (values[0].StartsWith("[") && values[values.Length - 2].EndsWith("]"))                  {                      string ipaddressstring = String.Join(":"' values.Take(values.Length - 1).ToArray());                      ipaddy = IPAddress.Parse(ipaddressstring);                      port = GetPort(values[values.Length - 1]);                  }                  else //[a:b:c] or a:b:c                  {                      ipaddy = IPAddress.Parse(endpointstring);                      port = defaultport;                  }              }              else              {                  throw new FormatException(String.Format("Invalid endpoint ipaddress '{0}'"' endpointstring));              }
Magic Number,Emby.Theater.Networking,NetworkManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Networking\NetworkManager.cs,Parse,The following statement contains a magic number: if (values.Length <= 2) // ipv4 or hostname              {                  port = values.Length == 1 ? defaultport : GetPort(values[1]);                    //try to use the address as IPv4' otherwise get hostname                  if (!IPAddress.TryParse(values[0]' out ipaddy))                      ipaddy = await GetIPfromHost(values[0]).ConfigureAwait(false);              }              else if (values.Length > 2) //ipv6              {                  //could [a:b:c]:d                  if (values[0].StartsWith("[") && values[values.Length - 2].EndsWith("]"))                  {                      string ipaddressstring = String.Join(":"' values.Take(values.Length - 1).ToArray());                      ipaddy = IPAddress.Parse(ipaddressstring);                      port = GetPort(values[values.Length - 1]);                  }                  else //[a:b:c] or a:b:c                  {                      ipaddy = IPAddress.Parse(endpointstring);                      port = defaultport;                  }              }              else              {                  throw new FormatException(String.Format("Invalid endpoint ipaddress '{0}'"' endpointstring));              }
Magic Number,Emby.Theater.Net,SocketFactory,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\SocketFactory.cs,CreateSsdpUdpSocket,The following statement contains a magic number: try              {                  retVal.SetSocketOption(SocketOptionLevel.Socket' SocketOptionName.ReuseAddress' true);                  retVal.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.MulticastTimeToLive' 4);                    var localIp = NetworkManager.ToIPAddress(localIpAddress);                    retVal.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(IPAddress.Parse("239.255.255.250")' localIp));                  return new UdpSocket(retVal' localPort' localIp);              }              catch              {                  if (retVal != null)                      retVal.Dispose();                    throw;              }
Magic Number,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,InitReceiveSocketAsyncEventArgs,The following statement contains a magic number: var receiveBuffer = new byte[8192];
Magic Number,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,InitReceiveSocketAsyncEventArgs,The following statement contains a magic number: var sendBuffer = new byte[8192];
Magic Number,Emby.Theater.Net,UdpSocket,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Net\UdpSocket.cs,ReceiveAsync,The following statement contains a magic number: var buffer = new byte[8192];
Magic Number,Emby.Theater.Serialization,JsonSerializer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Serialization\JsonSerializer.cs,OpenFile,The following statement contains a magic number: return new FileStream(path' FileMode.Open' FileAccess.Read' FileShare.Read' 131072);
Magic Number,Emby.Theater.ScheduledTasks,IntervalTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\IntervalTrigger.cs,Start,The following statement contains a magic number: var maxDueTime = TimeSpan.FromDays(7);
Magic Number,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,trigger_Triggered,The following statement contains a magic number: await Task.Delay(1000).ConfigureAwait(false);
Magic Number,Emby.Theater.ScheduledTasks,ScheduledTaskWorker,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\ScheduledTaskWorker.cs,Dispose,The following statement contains a magic number: if (dispose)              {                  DisposeTriggers();                    var wassRunning = State == TaskState.Running;                  var startTime = CurrentExecutionStartTime;                    var token = CurrentCancellationTokenSource;                  if (token != null)                  {                      try                      {                          Logger.Info(Name + ": Cancelling");                          token.Cancel();                      }                      catch (Exception ex)                      {                          Logger.ErrorException("Error calling CancellationToken.Cancel();"' ex);                      }                  }                  var task = _currentTask;                  if (task != null)                  {                      try                      {                          Logger.Info(Name + ": Waiting on Task");                          var exited = Task.WaitAll(new[] { task }' 2000);                            if (exited)                          {                              Logger.Info(Name + ": Task exited");                          }                          else                          {                              Logger.Info(Name + ": Timed out waiting for task to stop");                          }                      }                      catch (Exception ex)                      {                          Logger.ErrorException("Error calling Task.WaitAll();"' ex);                      }                  }                    if (token != null)                  {                      try                      {                          Logger.Debug(Name + ": Disposing CancellationToken");                          token.Dispose();                      }                      catch (Exception ex)                      {                          Logger.ErrorException("Error calling CancellationToken.Dispose();"' ex);                      }                  }                  if (wassRunning)                  {                      OnTaskCompleted(startTime' DateTime.UtcNow' TaskCompletionStatus.Aborted' null);                  }              }
Magic Number,Emby.Theater.ScheduledTasks,StartupTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\StartupTrigger.cs,StartupTrigger,The following statement contains a magic number: DelayMs = 3000;
Magic Number,Emby.Theater.ScheduledTasks,SystemEventTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\SystemEventTrigger.cs,_systemEvents_Resume,The following statement contains a magic number: if (SystemEvent == SystemEvent.WakeFromSleep)              {                  // This value is a bit arbitrary' but add a delay to help ensure network connections have been restored before running the task                  await Task.Delay(10000).ConfigureAwait(false);                    OnTriggered();              }
Magic Number,Emby.Theater.ScheduledTasks,WeeklyTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\WeeklyTrigger.cs,GetNextTriggerDateTime,The following statement contains a magic number: if (now.DayOfWeek == DayOfWeek)              {                  // It's either later today' or a week from now                  return now.TimeOfDay < TimeOfDay ? now.Date.Add(TimeOfDay) : now.Date.AddDays(7).Add(TimeOfDay);              }
Magic Number,Emby.Theater.Updates,InstallationManager,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\Updates\InstallationManager.cs,GetCacheLength,The following statement contains a magic number: return TimeSpan.FromMinutes(3);
Missing Default,Emby.Theater.App,SystemEvents,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemEvents.cs,SystemEvents_SessionEnding,The following switch statement is missing a default case: switch (e.Reason)              {                  case Microsoft.Win32.SessionEndReasons.Logoff:                      EventHelper.FireEventIfNotNull(SessionLogoff' this' EventArgs.Empty' _logger);                      break;                  case Microsoft.Win32.SessionEndReasons.SystemShutdown:                      EventHelper.FireEventIfNotNull(SystemShutdown' this' EventArgs.Empty' _logger);                      break;              }
Missing Default,Emby.Theater.App,SystemEvents,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\App\SystemEvents.cs,SystemEvents_PowerModeChanged,The following switch statement is missing a default case: switch (e.Mode)              {                  case Microsoft.Win32.PowerModes.Resume:                      EventHelper.FireEventIfNotNull(Resume' this' EventArgs.Empty' _logger);                      break;                  case Microsoft.Win32.PowerModes.Suspend:                      EventHelper.FireEventIfNotNull(Suspend' this' EventArgs.Empty' _logger);                      break;              }
Missing Default,Emby.Theater.DirectShowPlayer,DirectShowPlayerBridge,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\DirectShowPlayer\DirectShowPlayerBridge.cs,SetPlayerOptions,The following switch statement is missing a default case: switch (options.audioChannels ?? string.Empty)              {                  case "7.1":                      config.AudioConfig.SpeakerLayout = "SevenDotOneSurround";                      break;                  case "5.1":                      config.AudioConfig.SpeakerLayout = "FiveDotOneSurround";                      break;                  case "stereo":                      config.AudioConfig.SpeakerLayout = "Stereo";                      break;              }
Missing Default,Emby.Theater.ScheduledTasks,SystemEventTrigger,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater\ScheduledTasks\SystemEventTrigger.cs,Start,The following switch statement is missing a default case: switch (SystemEvent)              {                  case SystemEvent.WakeFromSleep:                      _systemEvents.Resume += _systemEvents_Resume;                      break;              }
