Implementation smell,Namespace,Class,File,Method,Description
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The method has 100 lines of code.
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Initialize,The method has 120 lines of code.
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The method has 760 lines of code.
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The method has 138 lines of code.
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The method has 101 lines of code.
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,CloseInterfaces,The method has 109 lines of code.
Long Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetInternalStreams,The method has 115 lines of code.
Long Method,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The method has 133 lines of code.
Long Method,MediaFoundation.Misc,ConstPropVariant,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The method has 115 lines of code.
Long Method,MediaFoundation.Misc,ConstPropVariant,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,Equals,The method has 133 lines of code.
Complex Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,Cyclomatic complexity of the method is 34
Complex Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,Cyclomatic complexity of the method is 8
Complex Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,CloseInterfaces,Cyclomatic complexity of the method is 13
Complex Method,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetInternalStreams,Cyclomatic complexity of the method is 17
Complex Method,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,Cyclomatic complexity of the method is 15
Complex Method,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IndividualNumToText,Cyclomatic complexity of the method is 15
Complex Method,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,Cyclomatic complexity of the method is 11
Long Parameter List,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,DirectShowPlayer,The method has 5 parameters. Parameters: playerWrapper' logger' config' httpClient' videoWindowHandle
Long Parameter List,Emby.Theater.DirectShow,InternalDirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\InternalDirectShowPlayer.cs,InternalDirectShowPlayer,The method has 7 parameters. Parameters: logManager' appPaths' isoManager' zipClient' httpClient' configurationManager' dispatcher
Long Parameter List,Emby.Theater.DirectShow,InternalDirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\InternalDirectShowPlayer.cs,Play,The method has 8 parameters. Parameters: path' startPositionTicks' isVideo' item' mediaSource' enableFullScreen' videoWindowHandle' config
Long Parameter List,Emby.Theater.DirectShow,ILAVAudioStatus,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\LavInterfaces.cs,GetDecodeDetails,The method has 5 parameters. Parameters: pCodec' pDecodeFormat' pnChannels' pSampleRate' pChannelMask
Long Parameter List,Emby.Theater.DirectShow,IMadVROsdServices,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,OsdSetBitmap,The method has 13 parameters. Parameters: name' leftEye' rightEye' colorKey' posX' posY' posRelativeToVideoRect' zOrder' duration' flags' callback' callbackContext' reserved
Long Parameter List,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The method has 7 parameters. Parameters: name' leftEye' Posx' Posy' Duration' ImagePriority' madvr
Long Parameter List,Emby.Theater.DirectShow,Resolution,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,Resolution,The method has 6 parameters. Parameters: width' height' rate' interlaced' fixedOutput' pixelDepth
Long Parameter List,Emby.Theater.DirectShow,IDirectVobSub,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Subtitles.cs,get_TextSettings,The method has 6 parameters. Parameters: lf' lflen' color' fShadow' fOutline' fAdvancedRenderer
Long Parameter List,Emby.Theater.DirectShow,IDirectVobSub,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Subtitles.cs,put_TextSettings,The method has 6 parameters. Parameters: lf' lflen' color' fShadow' fOutline' fAdvancedRenderer
Long Parameter List,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,ConnectFilters,The method has 6 parameters. Parameters: graphBuilder' upFilter' sourcePinName' downFilter' destPinName' useIntelligentConnect
Long Parameter List,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,ConnectFilters,The method has 7 parameters. Parameters: graphBuilder' upFilter' sourcePinName' downFilter' destPinName' useIntelligentConnect' ignoreConnectedPins
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,CreateStream,The method has 5 parameters. Parameters: pwcsName' grfMode' reserved1' reserved2' ppstm
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,OpenStream,The method has 5 parameters. Parameters: pwcsName' reserved1' grfMode' reserved2' ppstm
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,CreateStorage,The method has 5 parameters. Parameters: pwcsName' grfMode' reserved1' reserved2' ppstg
Long Parameter List,DirectShowLib.Utils,IStorage,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,OpenStorage,The method has 6 parameters. Parameters: pwcsName' pstgPriority' grfMode' snbExclude' reserved' ppstg
Long Parameter List,DirectShowLib.Utils,NativeMethods,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,OleCreatePropertyFrame,The method has 11 parameters. Parameters: hwndOwner' x' y' lpszCaption' cObjects' ppUnk' cPages' pPageClsID' lcid' dwReserved' pvReserved
Long Parameter List,DirectShowLib.Utils,NativeMethods,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,StgOpenStorage,The method has 6 parameters. Parameters: pwcsName' pstgPriority' grfMode' snbExclude' reserved' ppstgOpen
Long Parameter List,DirectShowLib.Utils,NativeMethods,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,ChangeDisplaySettingsEx,The method has 5 parameters. Parameters: lpszDeviceName' lpDevMode' hwnd' dwflags' lParam
Long Parameter List,MediaFoundation,MFExtern,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\Externs.cs,MFCreateMediaEvent,The method has 5 parameters. Parameters: met' guidExtendedType' hrStatus' pvValue' ppEvent
Long Parameter List,MediaFoundation,MFExtern,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\Externs.cs,MFTRegister,The method has 9 parameters. Parameters: clsidMFT' guidCategory' pszName' Flags' cInputTypes' pInputTypes' cOutputTypes' pOutputTypes' pAttributes
Long Parameter List,MediaFoundation,MFExtern,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\Externs.cs,MFTGetInfo,The method has 7 parameters. Parameters: clsidMFT' pszName' ppInputTypes' pcInputTypes' ppOutputTypes' pcOutputTypes' ip
Long Parameter List,MediaFoundation,MFExtern,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\Externs.cs,MFCreateFile,The method has 5 parameters. Parameters: AccessMode' OpenMode' fFlags' pwszFileURL' ppIByteStream
Long Parameter List,MediaFoundation,MFExtern,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\Externs.cs,MFBeginCreateFile,The method has 7 parameters. Parameters: AccessMode' OpenMode' fFlags' pwszFilePath' pCallback' pState' ppCancelCookie
Long Parameter List,MediaFoundation,MFExtern,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\Externs.cs,MFTEnum,The method has 7 parameters. Parameters: guidCategory' Flags' pInputType' pOutputType' pAttributes' ppclsidMFT' pcMFTs
Long Parameter List,MediaFoundation,IMFSourceResolver,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,CreateObjectFromURL,The method has 5 parameters. Parameters: pwszURL' dwFlags' pProps' pObjectType' ppObject
Long Parameter List,MediaFoundation,IMFSourceResolver,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,CreateObjectFromByteStream,The method has 6 parameters. Parameters: pByteStream' pwszURL' dwFlags' pProps' pObjectType' ppObject
Long Parameter List,MediaFoundation,IMFSourceResolver,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,BeginCreateObjectFromURL,The method has 6 parameters. Parameters: pwszURL' dwFlags' pProps' ppIUnknownCancelCookie' pCallback' punkState
Long Parameter List,MediaFoundation,IMFSourceResolver,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,BeginCreateObjectFromByteStream,The method has 7 parameters. Parameters: pByteStream' pwszURL' dwFlags' pProps' ppIUnknownCancelCookie' pCallback' punkState
Long Parameter List,MediaFoundation,IMFByteStreamHandler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,BeginCreateObject,The method has 7 parameters. Parameters: pByteStream' pwszURL' dwFlags' pProps' ppIUnknownCancelCookie' pCallback' pUnkState
Long Parameter List,MediaFoundation,IMFTimer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,SetTimer,The method has 5 parameters. Parameters: dwFlags' llClockTime' pCallback' pUnkState' ppunkKey
Long Parameter List,MediaFoundation,IMFASFStreamConfig,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\WMContainer.cs,GetPayloadExtension,The method has 5 parameters. Parameters: wPayloadExtensionNumber' pguidExtensionSystemID' pcbExtensionDataSize' pbExtensionSystemInfo' pcbExtensionSystemInfo
Long Parameter List,MediaFoundation,IMFASFIndexer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\WMContainer.cs,GetSeekPositionForValue,The method has 5 parameters. Parameters: pvarValue' pIndexIdentifier' pcbOffsetWithinData' phnsApproxTime' pdwPayloadNumberOfStreamWithinPacket
Long Parameter List,MediaFoundation.EVR,IMFVideoPositionMapper,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\EVR.cs,MapOutputCoordinateToInputStream,The method has 6 parameters. Parameters: xOut' yOut' dwOutputStreamIndex' dwInputStreamIndex' pxIn' pyIn
Long Parameter List,MediaFoundation.EVR,IMFTopologyServiceLookup,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\EVR.cs,LookupService,The method has 6 parameters. Parameters: type' dwIndex' guidService' riid' ppvObjects' pnObjects
Long Parameter List,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,FormatMessage,The method has 7 parameters. Parameters: dwFlags' lpSource' dwMessageId' dwLanguageId' lpBuffer' nSize' Arguments
Long Parameter List,Emby.Theater.DirectShow.Window,NativeWindowMethods,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Window\WindowMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Identifier,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetExternalSubtitleStreams,The length of the parameter hasActiveInternalSubtitleStream is 31.
Long Identifier,MediaFoundation,MF_MEDIA_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter BROWSER_COMPATIBILITY_MODE_IE9 is 30.
Long Identifier,MediaFoundation,MF_MEDIA_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter BROWSER_COMPATIBILITY_MODE_IE10 is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE is 41.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_BYTESTREAM_LAST_MODIFIED_TIME is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE is 43.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SA_REQUIRED_SAMPLE_COUNT_PROGRESSIVE is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SA_MINIMUM_OUTPUT_SAMPLE_COUNT_PROGRESSIVE is 45.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_FORMAT_CHANGE_REQUEST_SOURCE_SAR is 41.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_PRESENTATION_TIME_OFFSET is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_SOURCE_CHARACTERISTICS is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_SOURCE_CHARACTERISTICS_OLD is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_SOURCE_TOPOLOGY_CANCELED is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_START_PRESENTATION_TIME is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT is 42.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SESSION_CONTENT_PROTECTION_MANAGER is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_AUDIO_SAMPLES_PER_SECOND is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_AUDIO_AVG_BYTES_PER_SECOND is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_AUDIO_VALID_BITS_PER_SAMPLE is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_AUDIO_PREFER_WAVEFORMATEX is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_H264_MAX_CODEC_CONFIG_DELAY is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_H264_SUPPORTED_SLICE_MODES is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_MINIMUM_DISPLAY_APERTURE is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_DecodeTimestamp is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_VideoEncodeQP is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_VideoEncodePictureType is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_FrameCorruption is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_BottomFieldFirst is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_DerivedFromTopField is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_Discontinuity is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_RepeatFirstField is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_3DVideo_SampleFormat is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_NOSHUTDOWN_ON_REMOVE is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_PRESENTATION_DESCRIPTOR is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_SEQUENCE_ELEMENTID is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_TRANSFORM_OBJECTID is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_WORKQUEUE_MMCSS_CLASS is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_WORKQUEUE_MMCSS_TASKID is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_FILE_ID is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_CREATION_TIME is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_PACKETS is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_SEND_DURATION is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_PREROLL is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_FLAGS is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_CONTENTENCRYPTION_TYPE is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_CONTENTENCRYPTION_KEYID is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA is 45.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_METADATA_V8_BUFFERAVERAGE is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_STREAMBITRATES_BITRATE is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE is 46.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ASFSTREAMCONFIG_LEAKYBUCKET1 is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_ASFSTREAMCONFIG_LEAKYBUCKET2 is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_MPEG4_SAMPLE_DESCRIPTION is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MT_ORIGINAL_WAVE_FORMAT_TAG is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS is 41.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPOLOGY_PLAYBACK_FRAMERATE is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH is 45.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SAMPLEGRABBERSINK_IGNORE_CLOCK is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TRANSCODE_SKIP_METADATA_TRANSFER is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TRANSCODE_DONOT_INSERT_ENCODER is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE is 51.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY is 50.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK is 55.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS is 53.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID is 53.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE is 46.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_DeviceTimestamp is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TRANSFORM_CATEGORY_Attribute is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_ENUM_HARDWARE_URL_Attribute is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_CONNECTED_STREAM_ATTRIBUTE is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_PREFERRED_OUTPUTTYPE_Attribute is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_HW_TIMESTAMP_WITH_QPC_Attribute is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_FIELDOFUSE_UNLOCK_Attribute is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SINK_WRITER_DISABLE_THROTTLING is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_READWRITE_DISABLE_CONVERTERS is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_READWRITE_MMCSS_CLASS_AUDIO is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_READWRITE_MMCSS_PRIORITY_AUDIO is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_ASYNC_CALLBACK is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_MEDIASOURCE_CONFIG is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS is 44.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN is 51.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING is 49.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS is 49.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER is 47.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT is 39.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFT_ENUM_HARDWARE_VENDOR_ID_Attribute is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_MPEG4SINK_SPSPPS_PASSTHROUGH is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_STREAM_SINK_SUPPORTS_HW_CONNECTION is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_STREAM_SINK_SUPPORTS_ROTATION is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DISABLE_LOCALLY_REGISTERED_PLUGINS is 37.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_LOCAL_PLUGIN_CONTROL_POLICY is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY is 36.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY is 43.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MR_CAPTURE_POLICY_VOLUME_SERVICE is 32.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_ENABLE_PRIVATEMODE is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTION_PROTECTED_SURFACE is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTION_DISABLE_SCREEN_SCRAPE is 34.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTIONATTRIBUTE_BEST_EFFORT is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTIONATTRIBUTE_FAIL_OVER is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION is 45.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFTranscodeContainerType_MPEG2 is 30.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFTranscodeContainerType_FMPEG4 is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK is 55.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM is 40.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_STREAM_CATEGORY is 31.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_TRANSFORM_STREAM_ID is 35.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID is 38.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT is 49.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_TAKEPHOTO_TRIGGER is 33.
Long Identifier,MediaFoundation,MFAttributesClsid,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVICESTREAM_MAX_FRAME_BUFFERS is 33.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES is 41.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES is 41.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES is 39.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES is 39.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute is 39.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute is 39.
Long Identifier,MediaFoundation,MF_CAPTURE_ENGINE,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter SOURCE_CURRENT_DEVICE_MEDIA_TYPE_SET is 36.
Long Identifier,MediaFoundation,MFConnector,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFCONNECTOR_DISPLAYPORT_EMBEDDED is 32.
Long Identifier,MediaFoundation,MFConnector,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFCONNECTOR_DISPLAYPORT_EXTERNAL is 32.
Long Identifier,MediaFoundation,MFEnabletype,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFENABLETYPE_MF_RebootRequired is 30.
Long Identifier,MediaFoundation,MFEnabletype,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFENABLETYPE_MF_UpdateRevocationInformation is 43.
Long Identifier,MediaFoundation,MFEnabletype,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFENABLETYPE_MF_UpdateUntrustedComponent is 40.
Long Identifier,MediaFoundation,MFEnabletype,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFENABLETYPE_WMDRMV1_LicenseAcquisition is 39.
Long Identifier,MediaFoundation,MFEnabletype,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFENABLETYPE_WMDRMV7_Individualization is 38.
Long Identifier,MediaFoundation,MFEnabletype,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFENABLETYPE_WMDRMV7_LicenseAcquisition is 39.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_ACCELERATEDSTREAMINGDURATION is 40.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_AUTORECONNECTLIMIT is 30.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_AUTORECONNECTPROGRESS is 33.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_CONNECTIONBANDWIDTH is 31.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_CREDENTIAL_MANAGER is 30.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION is 41.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION is 46.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_PROXYBYPASSFORLOCAL is 31.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_PROXYEXCEPTIONLIST is 30.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_PROXYLOCATORFACTORY is 31.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_PROXYRERUNAUTODETECTION is 35.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_SSLCERTIFICATE_MANAGER is 34.
Long Identifier,MediaFoundation,MFProperties,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_PREVIEWMODEENABLED is 30.
Long Identifier,MediaFoundation,MFServices,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_SOURCE_PRESENTATION_PROVIDER_SERVICE is 39.
Long Identifier,MediaFoundation,MFServices,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE is 36.
Long Identifier,MediaFoundation,MFServices,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFNETSOURCE_STATISTICS_SERVICE is 30.
Long Identifier,MediaFoundation,MFServices,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_LOCAL_MFT_REGISTRATION_SERVICE is 33.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter ASFMediaSource_IterativeSeekIfNoIndex is 37.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter ASFMediaSource_IterativeSeek_Max_Count is 38.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter ASFMediaSource_IterativeSeek_Tolerance_In_MilliSecond is 53.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFP_PKEY_StreamRenderingResults is 31.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter HTTP_ByteStream_Urlmon_Bind_Flags is 33.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter HTTP_ByteStream_Urlmon_Security_Id is 34.
Long Identifier,MediaFoundation,MFPKEY,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter HTTP_ByteStream_Urlmon_Callback_QueryService is 44.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID is 46.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID is 46.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTION_TRUSTEDAUDIODRIVERS is 32.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE is 46.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFPROTECTIONATTRIBUTE_HDCP_SRM is 30.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_DescrambleData is 32.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MFSampleExtension_PacketCrossOffsets is 36.
Long Identifier,MediaFoundation,CLSID,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFIdl.cs,,The length of the parameter MF_QUALITY_NOTIFY_PROCESSING_LATENCY is 36.
Long Identifier,MediaFoundation,IMFASFIndexer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\WMContainer.cs,GetSeekPositionForValue,The length of the parameter pdwPayloadNumberOfStreamWithinPacket is 36.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNSUPPORTED_REPRESENTATION is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNSUPPORTED_BYTESTREAM_TYPE is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNSUPPORTED_RATE_TRANSITION is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNSUPPORTED_STATE_TRANSITION is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNRECOVERABLE_ERROR_OCCURRED is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_SAMPLE_HAS_TOO_MANY_BUFFERS is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_PROPERTY_TYPE_NOT_ALLOWED is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_PROPERTY_TYPE_NOT_SUPPORTED is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_PROPERTY_VECTOR_NOT_ALLOWED is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_SOURCERESOLVER_MUTUALLY_EXCLUSIVE_FLAGS is 44.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_RT_THROUGHPUT_NOT_AVAILABLE is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_RT_WORKQUEUE_CLASS_NOT_SPECIFIED is 37.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_BYTESTREAM_UNKNOWN_LENGTH is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_SESSION_PAUSEWHILESTOPPED is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_FORMAT_CHANGE_NOT_SUPPORTED is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_HW_MFT_FAILED_START_STREAMING is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ASF_UNSUPPORTED_STREAM_TYPE is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_MEDIA_SOURCE_NO_STREAMS_SELECTED is 37.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CANNOT_FIND_KEYFRAME_SAMPLE is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNSUPPORTED_CHARACTERISTICS is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NO_AUDIO_RECORDING_DEVICE is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_AUDIO_RECORDING_DEVICE_IN_USE is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_AUDIO_RECORDING_DEVICE_INVALIDATED is 39.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_VIDEO_RECORDING_DEVICE_INVALIDATED is 39.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_VIDEO_RECORDING_DEVICE_PREEMPTED is 37.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_BWLEVEL_NOT_SUPPORTED is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_STREAMGROUPS_NOT_SUPPORTED is 35.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_MANUALSS_NOT_SUPPORTED is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_INVALID_PRESENTATION_DESCRIPTOR is 40.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_CACHESTREAM_NOT_FOUND is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_INTERNAL_SERVER_ERROR is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_INCOMPATIBLE_PUSHSERVER is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_INVALID_PUSH_TEMPLATE is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_INVALID_PUSH_PUBLISHING_POINT is 38.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NET_UNSUPPORTED_CONFIGURATION is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ASF_FILESINK_BITRATE_UNKNOWN is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_SINK_NO_SAMPLES_PROCESSED is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_VIDEO_REN_NO_DEINTERLACE_HW is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_VIDEO_REN_COPYPROT_FAILED is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_VIDEO_REN_SURFACE_NOT_SHARED is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NO_VIDEO_SAMPLE_AVAILABLE is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_AUDIO_PLAYBACK_DEVICE_IN_USE is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_AUDIO_PLAYBACK_DEVICE_INVALIDATED is 38.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_AUDIO_SERVICE_NOT_RUNNING is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_INVALID_OPTIONAL_NODE is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_CANNOT_FIND_DECRYPTOR is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_INVALID_TIME_ATTRIBUTES is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_MISSING_PRESENTATION_DESCRIPTOR is 41.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_MISSING_STREAM_DESCRIPTOR is 35.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_STREAM_DESCRIPTOR_NOT_SELECTED is 40.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPO_SINK_ACTIVATES_UNSUPPORTED is 36.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_SEQUENCER_UNKNOWN_SEGMENT_ID is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_S_SEQUENCER_CONTEXT_CANCELED is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_S_SEQUENCER_SEGMENT_AT_END_OF_STREAM is 39.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_INPUT_REMAINING is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROFILE_MISSING is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROFILE_INVALID_OR_CORRUPT is 41.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROFILE_TRUNCATED is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_PID_NOT_RECOGNIZED is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_VARIANT_TYPE_WRONG is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_NOT_WRITEABLE is 37.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_ARRAY_VALUE_WRONG_NUM_DIM is 49.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_VALUE_SIZE_WRONG is 40.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_VALUE_OUT_OF_RANGE is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_PROPERTY_VALUE_INCOMPATIBLE is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_OUTPUT_MEDIATYPE is 56.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_INPUT_MEDIATYPE is 55.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_MEDIATYPE_COMBINATION is 61.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_CONFLICTS_WITH_OTHER_CURRENTLY_ENABLED_FEATURES is 62.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_NEED_MORE_INPUT is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_NOT_POSSIBLE_FOR_CURRENT_SPKR_CONFIG is 51.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_CANNOT_CHANGE_MEDIATYPE_WHILE_PROCESSING is 55.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_S_TRANSFORM_DO_NOT_PROPAGATE_EVENT is 37.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSFORM_CANNOT_INITIALIZE_ACM_DRIVER is 43.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_DRM_HARDWARE_INCONSISTENT is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NO_CONTENT_PROTECTION_MANAGER is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_LICENSE_RESTORE_NO_RIGHTS is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_BACKUP_RESTRICTED_LICENSE is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_LICENSE_RESTORE_NEEDS_INDIVIDUALIZATION is 44.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_WMDRMOTA_ACTION_ALREADY_SET is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_WMDRMOTA_DRM_HEADER_NOT_AVAILABLE is 38.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_WMDRMOTA_DRM_ENCRYPTION_SCHEME_NOT_SUPPORTED is 49.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TOPOLOGY_VERIFICATION_FAILED is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_SIGNATURE_VERIFICATION_FAILED is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_GRL_EXTENSIBLE_ENTRY_NOT_FOUND is 35.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_S_VIDEO_DISABLED_WITH_UNKNOWN_SOFTWARE_OUTPUT is 48.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ALL_PROCESS_RESTART_REQUIRED is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_PEAUTH_SESSION_NOT_STARTED is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_INCOMPATIBLE_SAMPLE_PROTECTION is 35.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_HIGH_SECURITY_LEVEL_CONTENT_NOT_ALLOWED is 44.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TEST_SIGNED_COMPONENTS_NOT_ALLOWED is 39.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ITA_ERROR_PARSING_SAP_PARAMETERS is 37.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_POLICY_MGR_ACTION_OUTOFBOUNDS is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_PROTECTION_GUID is 50.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ITA_OPL_DATA_NOT_INITIALIZED is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ITA_UNRECOGNIZED_ANALOG_VIDEO_OUTPUT is 41.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ITA_UNRECOGNIZED_DIGITAL_VIDEO_OUTPUT is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_RESOLUTION_REQUIRES_PMP_CREATION_CALLBACK is 46.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_INVALID_AKE_CHANNEL_PARAMETERS is 35.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CONTENT_PROTECTION_SYSTEM_NOT_ENABLED is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_UNSUPPORTED_CONTENT_PROTECTION_SYSTEM is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_DRM_MIGRATION_NOT_SUPPORTED is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CLOCK_INVALID_CONTINUITY_KEY is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSCODE_NO_CONTAINERTYPE is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSCODE_PROFILE_NO_MATCHING_STREAMS is 42.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSCODE_NO_MATCHING_ENCODER is 34.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_TRANSCODE_INVALID_PROFILE is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ALLOCATOR_NOT_INITIALIZED is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_ALLOCATOR_ALREADY_COMMITED is 31.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_NO_CAPTURE_DEVICES_AVAILABLE is 33.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CAPTURE_SINK_OUTPUT_NOT_SET is 32.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CAPTURE_SINK_MIRROR_ERROR is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CAPTURE_SINK_ROTATE_ERROR is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_CAPTURE_ENGINE_INVALID_OP is 30.
Long Identifier,MediaFoundation.Misc,MFError,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,,The length of the parameter MF_E_DXGI_DEVICE_NOT_INITIALIZED is 32.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The length of the statement  "                var isInterlaced = item.MediaStreams != null && item.MediaStreams.Any(i => i.Type == MediaStreamType.Video && i.IsInterlaced); " is 126.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Initialize,The length of the statement  "                            _logger.Debug("SetNetworkStreamAnalysisDuration: from {0} to {1}"' NetworkStreamAnalysisDuration' _config.SplitterConfig.NetworkStreamAnalysisDurationMs); " is 154.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The length of the statement  "                                        if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?")) " is 124.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The length of the statement  "                                            audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor); " is 149.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The length of the statement  "                                            audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor); " is 139.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The length of the statement  "                    _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy); " is 142.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The length of the statement  "                _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right); " is 195.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetExternalSubtitleStreams,The length of the statement  "                if (externalSubtitleStreams.Any() && (internalStreams == null || internalStreams.All(i => i.Type != MediaStreamType.Subtitle))) " is 127.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,OrderStreams,The length of the statement  "            var noSubtitleStream = streamsIn.FirstOrDefault(i => i.Type == MediaStreamType.Subtitle && i.Name.ToLower().Contains("no subtitles")); " is 134.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,OrderStreams,The length of the statement  "            var subtitleStreams = streamsIn.Where(i => i.Type == MediaStreamType.Subtitle && !i.Name.ToLower().Contains("no subtitles")); " is 125.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetSubtitleStreamIndex,The length of the statement  "                var rawSubtitleStreams = _streams.Where(i => i.Type == MediaStreamType.Subtitle && !i.Name.ToLower().Contains("no subtitles")).ToList(); " is 136.
Long Statement,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetActiveExternalSubtitleStream,The length of the statement  "            return _streams.FirstOrDefault(i => i.Type == MediaStreamType.Subtitle && i.IsActive == true && i.Identifier == "external"); " is 124.
Long Statement,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The length of the statement  "                            osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' ScreenBottom' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved); " is 157.
Long Statement,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The length of the statement  "                        osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' ScreenBottom' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved); " is 157.
Long Statement,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The length of the statement  "                        osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' Posy' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved); " is 149.
Long Statement,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The length of the statement  "                    osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' Posy' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved); " is 149.
Long Statement,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The length of the statement  "                osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' Posy' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved); " is 149.
Long Statement,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetResolutions,The length of the statement  "                        Resolution r = new Resolution(dm.dmPelsWidth' dm.dmPelsHeight' dm.dmDisplayFrequency' (dm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED' dm.dmDisplayFixedOutput' dm.dmBitsPerPel); " is 210.
Long Statement,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetCurrentResolution,The length of the statement  "            NativeMethods.EnumDisplaySettings(GetScreenFromHandle(windowHandle).DeviceName' NativeMethods.ENUM_CURRENT_SETTINGS' ref cDm); " is 126.
Long Statement,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetCurrentResolution,The length of the statement  "            Resolution res = new Resolution(cDm.dmPelsWidth' cDm.dmPelsHeight' cDm.dmDisplayFrequency' ((cDm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED)' cDm.dmDisplayFixedOutput' cDm.dmBitsPerPel); " is 220.
Long Statement,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,ChangeResolution,The length of the statement  "                    DISP_CHANGE iRet = NativeMethods.ChangeDisplaySettingsEx(hostScreen.DeviceName' ref dm' IntPtr.Zero' CDS.Test' IntPtr.Zero); " is 124.
Long Statement,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,ChangeResolution,The length of the statement  "                            iRet = NativeMethods.ChangeDisplaySettingsEx(hostScreen.DeviceName' ref dm' IntPtr.Zero' CDS.UpdateRegistry' IntPtr.Zero); " is 122.
Long Statement,Emby.Theater.DirectShow,Resolution,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,ToString,The length of the statement  "            return string.Format("{0}x{1}{3} {5}-bit @{2}Hz - {4}"' _width' _height' _rate' _interlaced ? "i" : "p"' ((DisplayFixedOutput)_fixedOutput)' _pixelDepth); " is 154.
Long Statement,Emby.Theater.DirectShow,Standby,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Standby.cs,PreventSleepAndMonitorOff,The length of the statement  "            NativeMethods.SetThreadExecutionState(NativeMethods.ES_CONTINUOUS | NativeMethods.ES_SYSTEM_REQUIRED | NativeMethods.ES_DISPLAY_REQUIRED); " is 138.
Long Statement,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,CleanWebCharacters,The length of the statement  "                input = input.Replace("&#x2022;"' "•").Replace("&#x00E1;"' "á").Replace("&#x00C1;"' "Á").Replace("&#x00E2;"' "â").Replace("&#x00C2;"' "Â").Replace("&#x00E0;"' "à").Replace("&#x00C0;"' "À").Replace("&#x00E5;"' "å").Replace("&#x00C5;"' "Å").Replace("&#x00E3;"' "ã").Replace("&#x00C3;"' "Ã").Replace("&#x00E4;"' "ä").Replace("&#x00C4;"' "Ä").Replace("&#x00E6;"' "æ").Replace("&#x00C6;"' "Æ").Replace("&#x00E7;"' "ç").Replace("&#x00C7;"' "Ç").Replace("&#x00F0;"' "ð").Replace("&#x00E9;"' "Ð").Replace("&#x00E9;"' "é").Replace("&#x00C9;"' "É").Replace("&#x00EA;"' "ê").Replace("&#x00CA;"' "Ê").Replace("&#x00E8;"' "è").Replace("&#x00C8;"' "È").Replace("&#x00EB;"' "ë").Replace("&#x00CB;"' "Ë").Replace("&#x00ED;"' "í").Replace("&#x00CD;"' "Í").Replace("&#x00EE;"' "î").Replace("&#x00CE;"' "Î").Replace("&#x00EC;"' "ì").Replace("&#x00CC;"' "Ì").Replace("&#x00EF;"' "ï").Replace("&#x00CF;"' "Ï").Replace("&#x00F1;"' "ñ").Replace("&#x00D1;"' "Ñ").Replace("&#x00F3;"' "ó").Replace("&#x00D3;"' "Ó").Replace("&#x00F4;"' "ô").Replace("&#x00D4;"' "Ô").Replace("&#x00F2;"' "ò").Replace("&#x00D2;"' "Ò").Replace("&#x00F8;"' "ø").Replace("&#x00D8;"' "Ø").Replace("&#x00F5;"' "õ").Replace("&#x00D5;"' "Õ").Replace("&#x00F6;"' "ö").Replace("&#x00D6;"' "Ö").Replace("&#x00DF;"' "ß").Replace("&#x00FE;"' "þ").Replace("&#x00DE;"' "Þ").Replace("&#x00FA;"' "ú").Replace("&#x00DA;"' "Ú").Replace("&#x00FB;"' "û").Replace("&#x00DB;"' "Û").Replace("&#x00F9;"' "ù").Replace("&#x00D9;"' "Ù").Replace("&#x00FC;"' "ü").Replace("&#x00DC;"' "Ü").Replace("&#x00FD;"' "ý").Replace("&#x00DD;"' "Ý").Replace("&#x00FF;"' "Ÿ").Replace("&#x00A6;"' "¦").Replace("&#x00A2;"' "¢").Replace("&#x00A9;"' "©").Replace("&#x00A4;"' "¤").Replace("&#x2020;"' "†").Replace("&#x2021;"' "‡").Replace("&#x00B0;"' "°").Replace("&#x00F7;"' "÷").Replace("&#x2193;"' "?").Replace("&#x2026;"' "…").Replace("&#x00A1;"' "¡").Replace("&#x00BF;"' "¿").Replace("&#x00AB;"' "«").Replace("&#x2190;"' "?").Replace("&#x201C;"' "“").Replace("&#x201E;"' "„").Replace("&#x2018;"' "‘").Replace("&#x201A;"' "‚").Replace("&#x2014;"' "-").Replace("&#x00B7;"' "·").Replace("&#x00A0;"' " ").Replace("&#x2013;"' "-").Replace("&#x00B6;"' "¶").Replace("&#x00B1;"' "±").Replace("&#x00A3;"' "£").Replace("&#x2032;"' "?").Replace("&#x2033;"' "?").Replace("&#x00BB;"' "»").Replace("&#x2192;"' "?").Replace("&#x201D;"' "”").Replace("&#x00AE;"' "®").Replace("&#x201D;"' "“").Replace("&#x2019;"' "’").Replace("&#x201F;"' "‘").Replace("&#x00A7;"' "§").Replace("&#x00D7;"' "×").Replace("&#x2122;"' "™").Replace("&#x2191;"' "?").Replace("&#x00A5;"' "¥"); " is 2564.
Long Statement,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,containsIllegalCharacters,The length of the statement  "            if (searchText.Contains("/") || searchText.Contains("\\") || searchText.Contains(":") || searchText.Contains("?") || searchText.Contains("\"") || searchText.Contains("<") || searchText.Contains(">") || searchText.Contains("|") || searchText.Contains("*")) " is 255.
Long Statement,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetSortTitle,The length of the statement  "            if ((((title.StartsWith("A "' StringComparison.InvariantCultureIgnoreCase) || title.StartsWith("An "' StringComparison.InvariantCultureIgnoreCase)) || (title.StartsWith("The "' StringComparison.InvariantCultureIgnoreCase) || title.StartsWith("Le "' StringComparison.InvariantCultureIgnoreCase))) || ((title.StartsWith("Les "' StringComparison.InvariantCultureIgnoreCase) || title.StartsWith("Das "' StringComparison.InvariantCultureIgnoreCase)) || title.StartsWith("Das "' StringComparison.InvariantCultureIgnoreCase))) || title.StartsWith("La "' StringComparison.InvariantCultureIgnoreCase)) " is 592.
Long Statement,Emby.Theater.DirectShow,URCOMLoader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\URCOMLoader.cs,CreateObjectFromPath,The length of the statement  "                        DllGETCLASSOBJECTInvoker fn = Marshal.GetDelegateForFunctionPointer(fnP' typeof(DllGETCLASSOBJECTInvoker)) as DllGETCLASSOBJECTInvoker; " is 135.
Long Statement,Emby.Theater.DirectShow,URCOMLoader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\URCOMLoader.cs,GetObject,The length of the statement  "                //TODO: might be better to call _mreFilterBlock.WaitOne with a small value (e.g. 1000) and surface an actionalbe result if it fails so the UI can signal a potentially long running process " is 187.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{171252A0-8820-4AFE-9DF8-5C92B2D66B04}")] = new KnownCOMObject("LAV Splitter"' "LAV\\LAVSplitter.ax"' new Guid("{171252A0-8820-4AFE-9DF8-5C92B2D66B04}")); " is 175.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{B98D13E7-55DB-4385-A33D-09FD1BA26338}")] = new KnownCOMObject("LAV Splitter Source"' "LAV\\LAVSplitter.ax"' new Guid("{B98D13E7-55DB-4385-A33D-09FD1BA26338}")); " is 182.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{E8E73B6B-4CB3-44A4-BE99-4F7BCB96E491}")] = new KnownCOMObject("LAV Audio Decoder"' "LAV\\LAVAudio.ax"' new Guid("{E8E73B6B-4CB3-44A4-BE99-4F7BCB96E491}")); " is 177.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{EE30215D-164F-4A92-A4EB-9D4C13390F9F}")] = new KnownCOMObject("LAV Video Decoder"' "LAV\\LAVVideo.ax"' new Guid("{EE30215D-164F-4A92-A4EB-9D4C13390F9F}")); " is 177.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{E1A8B82A-32CE-4B0D-BE0D-AA68C772E423}")] = new KnownCOMObject("madVR"' "madVR\\madVR.ax"' new Guid("{E1A8B82A-32CE-4B0D-BE0D-AA68C772E423}")); " is 164.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{2DFCB782-EC20-4A7C-B530-4577ADB33F21}")] = new KnownCOMObject("XySubFilter"' "XySubFilter\\XySubFilter.dll"' new Guid("{2DFCB782-EC20-4A7C-B530-4577ADB33F21}")); " is 183.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            //FilterList[new Guid("{5325DF1C-6F10-4292-B8FB-BE855F99F88A}")] = new KnownCOMObject("EVR Presenter (babgvant)"' "babgvant\\EVRPresenter.dll"' new Guid("{5325DF1C-6F10-4292-B8FB-BE855F99F88A}")); " is 196.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{EC9ED6FC-7B03-4CB6-8C01-4EABE109F26B}")] = new KnownCOMObject("MP Audio Renderer"' "mpaudio\\mpaudiorenderer.ax"' new Guid("{EC9ED6FC-7B03-4CB6-8C01-4EABE109F26B}")); " is 188.
Long Statement,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The length of the statement  "            FilterList[new Guid("{93A22E7A-5091-45EF-BA61-6DA26156A5D0}")] = new KnownCOMObject("XYVSFilter"' "xy-VSFilter\\VSFilter.dll"' new Guid("{93A22E7A-5091-45EF-BA61-6DA26156A5D0}")); " is 179.
Complex Conditional,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The conditional expression  "item.IsVideo                      && IsFullScreen                      && !string.IsNullOrWhiteSpace(item.OriginalItem.ParentId)                      && _config.VideoConfig.AutoChangeRefreshRate                      && _config.VideoConfig.MinRefreshRateMin < itemDuration.TotalMinutes"  is complex.
Complex Conditional,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatioLegacy,The conditional expression  "aspectX == 0 || aspectY == 0 || sourceWidth > 0 || sourceHeight > 0"  is complex.
Complex Conditional,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleGraphEvent,The conditional expression  "evCode == EventCode.ErrorAbort ||                          evCode == EventCode.ErrorStPlaying ||                          evCode == EventCode.StErrStopped ||                          evCode == EventCode.ErrorStPlaying"  is complex.
Complex Conditional,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,ChangeResolution,The conditional expression  "cDm.dmBitsPerPel == res.PixelDepth                      && cDm.dmPelsWidth == res.Width                      && cDm.dmPelsHeight == res.Height                      && cDm.dmDisplayFrequency == res.Rate                      && ((cDm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED) == res.Interlaced                      && cDm.dmDisplayFixedOutput == res.FixedOutput"  is complex.
Complex Conditional,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,ChangeResolution,The conditional expression  "dm.dmBitsPerPel == res.PixelDepth                      && dm.dmPelsWidth == res.Width                      && dm.dmPelsHeight == res.Height                      && dm.dmDisplayFrequency == res.Rate                      && ((dm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED) == res.Interlaced                      && dm.dmDisplayFixedOutput == res.FixedOutput"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,containsIllegalCharacters,The conditional expression  "searchText.Contains("/") || searchText.Contains("\\") || searchText.Contains(":") || searchText.Contains("?") || searchText.Contains("\"") || searchText.Contains("<") || searchText.Contains(">") || searchText.Contains("|") || searchText.Contains("*")"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetSortTitle,The conditional expression  "(((title.StartsWith("A "' StringComparison.InvariantCultureIgnoreCase) || title.StartsWith("An "' StringComparison.InvariantCultureIgnoreCase)) || (title.StartsWith("The "' StringComparison.InvariantCultureIgnoreCase) || title.StartsWith("Le "' StringComparison.InvariantCultureIgnoreCase))) || ((title.StartsWith("Les "' StringComparison.InvariantCultureIgnoreCase) || title.StartsWith("Das "' StringComparison.InvariantCultureIgnoreCase)) || title.StartsWith("Das "' StringComparison.InvariantCultureIgnoreCase))) || title.StartsWith("La "' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,HasVowels,The conditional expression  "string.Compare(currentLetter' "a"' true) == 0 ||                    string.Compare(currentLetter' "e"' true) == 0 ||                    string.Compare(currentLetter' "i"' true) == 0 ||                    string.Compare(currentLetter' "o"' true) == 0 ||                    string.Compare(currentLetter' "u"' true) == 0"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The conditional expression  "!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122)"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,isLetters,The conditional expression  "!(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122)"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The conditional expression  "(Convert.ToInt32(currentLetter) <= 47 && Convert.ToInt32(currentLetter) >= 123) ||                      (Convert.ToInt32(currentLetter) >= 58 && Convert.ToInt32(currentLetter) <= 64)"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringProcessing,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,RemoveVowels,The conditional expression  "string.Compare(currentLetter' "a"' true) != 0 &&                          string.Compare(currentLetter' "e"' true) != 0 &&                          string.Compare(currentLetter' "i"' true) != 0 &&                          string.Compare(currentLetter' "o"' true) != 0 &&                          string.Compare(currentLetter' "u"' true) != 0"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringProcessing,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,KeepVowels,The conditional expression  "string.Compare(currentLetter' "a"' true) == 0 ||                          string.Compare(currentLetter' "e"' true) == 0 ||                          string.Compare(currentLetter' "i"' true) == 0 ||                          string.Compare(currentLetter' "o"' true) == 0 ||                          string.Compare(currentLetter' "u"' true) == 0"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringBuilderProcessing,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,RemoveVowels,The conditional expression  "string.Compare(currentLetter' "a"' true) != 0 &&                          string.Compare(currentLetter' "e"' true) != 0 &&                          string.Compare(currentLetter' "i"' true) != 0 &&                          string.Compare(currentLetter' "o"' true) != 0 &&                          string.Compare(currentLetter' "u"' true) != 0"  is complex.
Complex Conditional,Emby.Theater.DirectShow,StringBuilderProcessing,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,KeepVowels,The conditional expression  "string.Compare(currentLetter' "a"' true) == 0 ||                          string.Compare(currentLetter' "e"' true) == 0 ||                          string.Compare(currentLetter' "i"' true) == 0 ||                          string.Compare(currentLetter' "o"' true) == 0 ||                          string.Compare(currentLetter' "u"' true) == 0"  is complex.
Complex Conditional,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,FindPinByMediaType,The conditional expression  "amtDvr[0] != null && amtDvr[0].majorType == mType && (amtDvr[0].subType == sType || sType == MediaSubType.Null)"  is complex.
Empty Catch Block,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleDvdEvent,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleGraphEvent,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,InternalDirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\InternalDirectShowPlayer.cs,Play,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,InternalDirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\InternalDirectShowPlayer.cs,Play,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,InternalDirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\InternalDirectShowPlayer.cs,Play,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,InternalDirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\InternalDirectShowPlayer.cs,Play,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,CleanWebCharacters,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,DateAndVersion,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\URCOMLoader.cs,DateAndVersion,The method has an empty catch block.
Empty Catch Block,Emby.Theater.DirectShow,DateAndVersion,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\URCOMLoader.cs,Write,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,AddFilterByDevicePath,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,DisconnectAllPins,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,IsThisComObjectInstalled,The method has an empty catch block.
Empty Catch Block,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,IsThisDeviceInstalled,The method has an empty catch block.
Magic Number,Emby.Theater.DirectShow,CanPing,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\CanPing.cs,TryPing,The following statement contains a magic number: try              {                  Ping myPing = new Ping();                  byte[] buffer = new byte[32];                  int timeout = 1000;                  PingOptions pingOptions = new PingOptions();                  PingReply reply = myPing.Send(host' timeout' buffer' pingOptions);                  return (reply.Status == IPStatus.Success);              }              catch (Exception)              {                  return false;              }
Magic Number,Emby.Theater.DirectShow,CanPing,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\CanPing.cs,TryPing,The following statement contains a magic number: try              {                  Ping myPing = new Ping();                  byte[] buffer = new byte[32];                  int timeout = 1000;                  PingOptions pingOptions = new PingOptions();                  PingReply reply = myPing.Send(host' timeout' buffer' pingOptions);                  return (reply.Status == IPStatus.Success);              }              catch (Exception)              {                  return false;              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,DirectShowPlayer,The following statement contains a magic number: _timer = new System.Timers.Timer(400);
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The following statement contains a magic number: try              {                  // Don't need madvr when not playing fullscreen                  string videoRenderer = enableFullScreen ?                      _config.VideoConfig.VideoRenderer :                      (IsEvrAvailable() ? "evr" : "evrcp");                    if (string.IsNullOrWhiteSpace(videoRenderer))                  {                      //videoRenderer = IsIntelGPU() ? "evrcp" : (IsEvrAvailable() ? "evr" : "madvr");                      videoRenderer = IsIntelGPU() ? (IsEvrAvailable() ? "evr" : "evrcp") : (IsEvrAvailable() ? "evr" : "madvr");                  }                    var enableMadVr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                    _logger.Info("Playing {0}. Audio Renderer: {1}' Madvr: {2}' xySubFilter: {3}' ParentID: {4}"' item.OriginalItem.Name'                      _config.AudioConfig.Renderer' enableMadVr'                      _config.SubtitleConfig.EnableXySubFilter'                      item.OriginalItem.ParentId);                  _logger.Info("Playing Path {0}"' item.PlayablePath);                    var mediaSource = item.MediaSource;                    _item = item;                  _isInExclusiveMode = false;                  TimeSpan itemDuration = TimeSpan.MaxValue;                    if (mediaSource.RunTimeTicks.HasValue && mediaSource.RunTimeTicks.Value > 0)                      itemDuration = TimeSpan.FromTicks(mediaSource.RunTimeTicks.Value);                    _iVideoScaling = (VideoScalingScheme)_config.VideoConfig.ScalingMode;                    if (item.IsVideo                      && IsFullScreen                      && !string.IsNullOrWhiteSpace(item.OriginalItem.ParentId)                      && _config.VideoConfig.AutoChangeRefreshRate                      && _config.VideoConfig.MinRefreshRateMin < itemDuration.TotalMinutes                      )                  {                      if (item.MediaStreams == null)                      {                          _logger.Warn("item.MediaStreams is null' cannot detect framerate");                      }                      else                      {                          //find the video stream (assume that the first one is the main one)                          foreach (var ms in item.MediaStreams)                          {                              if (ms.Type == MediaStreamType.Video)                              {                                  _startResolution = Display.GetCurrentResolution(VideoWindowHandle);                                    if (ms.RealFrameRate.HasValue && !ms.IsInterlaced)                                  {                                      int videoRate = (int)ms.RealFrameRate;                                        if (videoRate == 25 || videoRate == 29 || videoRate == 30)                                      {                                          //Every display/GPU should be able to display @2x FPS and it's quite likely that 2x is the rendered FPS anyway                                          videoRate = (int)(ms.RealFrameRate * 2);                                      }                                        _logger.Info("RealFrameRate: {0} videoRate: {1} startRate: {2}"' ms.RealFrameRate' videoRate' _startResolution);                                        if (videoRate != _startResolution.Rate)                                      {                                          Resolution desiredRes = new Resolution(_startResolution.ToString());                                          desiredRes.Rate = videoRate;                                          if (Display.ChangeResolution(VideoWindowHandle' desiredRes' false))                                              _logger.Info("Changed resolution from {0} to {1}"' _startResolution' desiredRes);                                          else                                          {                                              _logger.Info("Couldn't change resolution from {0} to {1}"' _startResolution' desiredRes);                                              _startResolution = null;                                          }                                      }                                      else                                          _startResolution = null;                                        break;                                  }                              }                              else                                  _startResolution = null;                          }                      }                  }                    var isDvd = ((item.MediaSource.VideoType ?? VideoType.VideoFile) == VideoType.Dvd ||                               (item.MediaSource.IsoType ?? IsoType.BluRay) == IsoType.Dvd);                    var isInterlaced = item.MediaStreams != null && item.MediaStreams.Any(i => i.Type == MediaStreamType.Video && i.IsInterlaced);                    Initialize(item.PlayablePath' isDvd' videoRenderer' isInterlaced);                    //_hiddenWindow.OnWMGRAPHNOTIFY = HandleGraphEvent;                  //_hiddenWindow.OnDVDEVENT = HandleDvdEvent;                    //pre-roll the graph                  _logger.Info("pre-roll the graph");                  var hr = _mediaControl.Pause();                  DsError.ThrowExceptionForHR(hr);                    //Task.WaitAll(Task.Delay(300));                  _logger.Info("run the graph");                  hr = _mediaControl.Run();                  DsError.ThrowExceptionForHR(hr);                    PlayState = PlayState.Playing;                  _currentPlaybackRate = 1.0;                    _streams = GetStreams();                    _logger.Info("DSPlayer Done in play");              }              catch (Exception ex)              {                  CloseInterfaces();                  throw ex;              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The following statement contains a magic number: try              {                  // Don't need madvr when not playing fullscreen                  string videoRenderer = enableFullScreen ?                      _config.VideoConfig.VideoRenderer :                      (IsEvrAvailable() ? "evr" : "evrcp");                    if (string.IsNullOrWhiteSpace(videoRenderer))                  {                      //videoRenderer = IsIntelGPU() ? "evrcp" : (IsEvrAvailable() ? "evr" : "madvr");                      videoRenderer = IsIntelGPU() ? (IsEvrAvailable() ? "evr" : "evrcp") : (IsEvrAvailable() ? "evr" : "madvr");                  }                    var enableMadVr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                    _logger.Info("Playing {0}. Audio Renderer: {1}' Madvr: {2}' xySubFilter: {3}' ParentID: {4}"' item.OriginalItem.Name'                      _config.AudioConfig.Renderer' enableMadVr'                      _config.SubtitleConfig.EnableXySubFilter'                      item.OriginalItem.ParentId);                  _logger.Info("Playing Path {0}"' item.PlayablePath);                    var mediaSource = item.MediaSource;                    _item = item;                  _isInExclusiveMode = false;                  TimeSpan itemDuration = TimeSpan.MaxValue;                    if (mediaSource.RunTimeTicks.HasValue && mediaSource.RunTimeTicks.Value > 0)                      itemDuration = TimeSpan.FromTicks(mediaSource.RunTimeTicks.Value);                    _iVideoScaling = (VideoScalingScheme)_config.VideoConfig.ScalingMode;                    if (item.IsVideo                      && IsFullScreen                      && !string.IsNullOrWhiteSpace(item.OriginalItem.ParentId)                      && _config.VideoConfig.AutoChangeRefreshRate                      && _config.VideoConfig.MinRefreshRateMin < itemDuration.TotalMinutes                      )                  {                      if (item.MediaStreams == null)                      {                          _logger.Warn("item.MediaStreams is null' cannot detect framerate");                      }                      else                      {                          //find the video stream (assume that the first one is the main one)                          foreach (var ms in item.MediaStreams)                          {                              if (ms.Type == MediaStreamType.Video)                              {                                  _startResolution = Display.GetCurrentResolution(VideoWindowHandle);                                    if (ms.RealFrameRate.HasValue && !ms.IsInterlaced)                                  {                                      int videoRate = (int)ms.RealFrameRate;                                        if (videoRate == 25 || videoRate == 29 || videoRate == 30)                                      {                                          //Every display/GPU should be able to display @2x FPS and it's quite likely that 2x is the rendered FPS anyway                                          videoRate = (int)(ms.RealFrameRate * 2);                                      }                                        _logger.Info("RealFrameRate: {0} videoRate: {1} startRate: {2}"' ms.RealFrameRate' videoRate' _startResolution);                                        if (videoRate != _startResolution.Rate)                                      {                                          Resolution desiredRes = new Resolution(_startResolution.ToString());                                          desiredRes.Rate = videoRate;                                          if (Display.ChangeResolution(VideoWindowHandle' desiredRes' false))                                              _logger.Info("Changed resolution from {0} to {1}"' _startResolution' desiredRes);                                          else                                          {                                              _logger.Info("Couldn't change resolution from {0} to {1}"' _startResolution' desiredRes);                                              _startResolution = null;                                          }                                      }                                      else                                          _startResolution = null;                                        break;                                  }                              }                              else                                  _startResolution = null;                          }                      }                  }                    var isDvd = ((item.MediaSource.VideoType ?? VideoType.VideoFile) == VideoType.Dvd ||                               (item.MediaSource.IsoType ?? IsoType.BluRay) == IsoType.Dvd);                    var isInterlaced = item.MediaStreams != null && item.MediaStreams.Any(i => i.Type == MediaStreamType.Video && i.IsInterlaced);                    Initialize(item.PlayablePath' isDvd' videoRenderer' isInterlaced);                    //_hiddenWindow.OnWMGRAPHNOTIFY = HandleGraphEvent;                  //_hiddenWindow.OnDVDEVENT = HandleDvdEvent;                    //pre-roll the graph                  _logger.Info("pre-roll the graph");                  var hr = _mediaControl.Pause();                  DsError.ThrowExceptionForHR(hr);                    //Task.WaitAll(Task.Delay(300));                  _logger.Info("run the graph");                  hr = _mediaControl.Run();                  DsError.ThrowExceptionForHR(hr);                    PlayState = PlayState.Playing;                  _currentPlaybackRate = 1.0;                    _streams = GetStreams();                    _logger.Info("DSPlayer Done in play");              }              catch (Exception ex)              {                  CloseInterfaces();                  throw ex;              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The following statement contains a magic number: try              {                  // Don't need madvr when not playing fullscreen                  string videoRenderer = enableFullScreen ?                      _config.VideoConfig.VideoRenderer :                      (IsEvrAvailable() ? "evr" : "evrcp");                    if (string.IsNullOrWhiteSpace(videoRenderer))                  {                      //videoRenderer = IsIntelGPU() ? "evrcp" : (IsEvrAvailable() ? "evr" : "madvr");                      videoRenderer = IsIntelGPU() ? (IsEvrAvailable() ? "evr" : "evrcp") : (IsEvrAvailable() ? "evr" : "madvr");                  }                    var enableMadVr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                    _logger.Info("Playing {0}. Audio Renderer: {1}' Madvr: {2}' xySubFilter: {3}' ParentID: {4}"' item.OriginalItem.Name'                      _config.AudioConfig.Renderer' enableMadVr'                      _config.SubtitleConfig.EnableXySubFilter'                      item.OriginalItem.ParentId);                  _logger.Info("Playing Path {0}"' item.PlayablePath);                    var mediaSource = item.MediaSource;                    _item = item;                  _isInExclusiveMode = false;                  TimeSpan itemDuration = TimeSpan.MaxValue;                    if (mediaSource.RunTimeTicks.HasValue && mediaSource.RunTimeTicks.Value > 0)                      itemDuration = TimeSpan.FromTicks(mediaSource.RunTimeTicks.Value);                    _iVideoScaling = (VideoScalingScheme)_config.VideoConfig.ScalingMode;                    if (item.IsVideo                      && IsFullScreen                      && !string.IsNullOrWhiteSpace(item.OriginalItem.ParentId)                      && _config.VideoConfig.AutoChangeRefreshRate                      && _config.VideoConfig.MinRefreshRateMin < itemDuration.TotalMinutes                      )                  {                      if (item.MediaStreams == null)                      {                          _logger.Warn("item.MediaStreams is null' cannot detect framerate");                      }                      else                      {                          //find the video stream (assume that the first one is the main one)                          foreach (var ms in item.MediaStreams)                          {                              if (ms.Type == MediaStreamType.Video)                              {                                  _startResolution = Display.GetCurrentResolution(VideoWindowHandle);                                    if (ms.RealFrameRate.HasValue && !ms.IsInterlaced)                                  {                                      int videoRate = (int)ms.RealFrameRate;                                        if (videoRate == 25 || videoRate == 29 || videoRate == 30)                                      {                                          //Every display/GPU should be able to display @2x FPS and it's quite likely that 2x is the rendered FPS anyway                                          videoRate = (int)(ms.RealFrameRate * 2);                                      }                                        _logger.Info("RealFrameRate: {0} videoRate: {1} startRate: {2}"' ms.RealFrameRate' videoRate' _startResolution);                                        if (videoRate != _startResolution.Rate)                                      {                                          Resolution desiredRes = new Resolution(_startResolution.ToString());                                          desiredRes.Rate = videoRate;                                          if (Display.ChangeResolution(VideoWindowHandle' desiredRes' false))                                              _logger.Info("Changed resolution from {0} to {1}"' _startResolution' desiredRes);                                          else                                          {                                              _logger.Info("Couldn't change resolution from {0} to {1}"' _startResolution' desiredRes);                                              _startResolution = null;                                          }                                      }                                      else                                          _startResolution = null;                                        break;                                  }                              }                              else                                  _startResolution = null;                          }                      }                  }                    var isDvd = ((item.MediaSource.VideoType ?? VideoType.VideoFile) == VideoType.Dvd ||                               (item.MediaSource.IsoType ?? IsoType.BluRay) == IsoType.Dvd);                    var isInterlaced = item.MediaStreams != null && item.MediaStreams.Any(i => i.Type == MediaStreamType.Video && i.IsInterlaced);                    Initialize(item.PlayablePath' isDvd' videoRenderer' isInterlaced);                    //_hiddenWindow.OnWMGRAPHNOTIFY = HandleGraphEvent;                  //_hiddenWindow.OnDVDEVENT = HandleDvdEvent;                    //pre-roll the graph                  _logger.Info("pre-roll the graph");                  var hr = _mediaControl.Pause();                  DsError.ThrowExceptionForHR(hr);                    //Task.WaitAll(Task.Delay(300));                  _logger.Info("run the graph");                  hr = _mediaControl.Run();                  DsError.ThrowExceptionForHR(hr);                    PlayState = PlayState.Playing;                  _currentPlaybackRate = 1.0;                    _streams = GetStreams();                    _logger.Info("DSPlayer Done in play");              }              catch (Exception ex)              {                  CloseInterfaces();                  throw ex;              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,Play,The following statement contains a magic number: try              {                  // Don't need madvr when not playing fullscreen                  string videoRenderer = enableFullScreen ?                      _config.VideoConfig.VideoRenderer :                      (IsEvrAvailable() ? "evr" : "evrcp");                    if (string.IsNullOrWhiteSpace(videoRenderer))                  {                      //videoRenderer = IsIntelGPU() ? "evrcp" : (IsEvrAvailable() ? "evr" : "madvr");                      videoRenderer = IsIntelGPU() ? (IsEvrAvailable() ? "evr" : "evrcp") : (IsEvrAvailable() ? "evr" : "madvr");                  }                    var enableMadVr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                    _logger.Info("Playing {0}. Audio Renderer: {1}' Madvr: {2}' xySubFilter: {3}' ParentID: {4}"' item.OriginalItem.Name'                      _config.AudioConfig.Renderer' enableMadVr'                      _config.SubtitleConfig.EnableXySubFilter'                      item.OriginalItem.ParentId);                  _logger.Info("Playing Path {0}"' item.PlayablePath);                    var mediaSource = item.MediaSource;                    _item = item;                  _isInExclusiveMode = false;                  TimeSpan itemDuration = TimeSpan.MaxValue;                    if (mediaSource.RunTimeTicks.HasValue && mediaSource.RunTimeTicks.Value > 0)                      itemDuration = TimeSpan.FromTicks(mediaSource.RunTimeTicks.Value);                    _iVideoScaling = (VideoScalingScheme)_config.VideoConfig.ScalingMode;                    if (item.IsVideo                      && IsFullScreen                      && !string.IsNullOrWhiteSpace(item.OriginalItem.ParentId)                      && _config.VideoConfig.AutoChangeRefreshRate                      && _config.VideoConfig.MinRefreshRateMin < itemDuration.TotalMinutes                      )                  {                      if (item.MediaStreams == null)                      {                          _logger.Warn("item.MediaStreams is null' cannot detect framerate");                      }                      else                      {                          //find the video stream (assume that the first one is the main one)                          foreach (var ms in item.MediaStreams)                          {                              if (ms.Type == MediaStreamType.Video)                              {                                  _startResolution = Display.GetCurrentResolution(VideoWindowHandle);                                    if (ms.RealFrameRate.HasValue && !ms.IsInterlaced)                                  {                                      int videoRate = (int)ms.RealFrameRate;                                        if (videoRate == 25 || videoRate == 29 || videoRate == 30)                                      {                                          //Every display/GPU should be able to display @2x FPS and it's quite likely that 2x is the rendered FPS anyway                                          videoRate = (int)(ms.RealFrameRate * 2);                                      }                                        _logger.Info("RealFrameRate: {0} videoRate: {1} startRate: {2}"' ms.RealFrameRate' videoRate' _startResolution);                                        if (videoRate != _startResolution.Rate)                                      {                                          Resolution desiredRes = new Resolution(_startResolution.ToString());                                          desiredRes.Rate = videoRate;                                          if (Display.ChangeResolution(VideoWindowHandle' desiredRes' false))                                              _logger.Info("Changed resolution from {0} to {1}"' _startResolution' desiredRes);                                          else                                          {                                              _logger.Info("Couldn't change resolution from {0} to {1}"' _startResolution' desiredRes);                                              _startResolution = null;                                          }                                      }                                      else                                          _startResolution = null;                                        break;                                  }                              }                              else                                  _startResolution = null;                          }                      }                  }                    var isDvd = ((item.MediaSource.VideoType ?? VideoType.VideoFile) == VideoType.Dvd ||                               (item.MediaSource.IsoType ?? IsoType.BluRay) == IsoType.Dvd);                    var isInterlaced = item.MediaStreams != null && item.MediaStreams.Any(i => i.Type == MediaStreamType.Video && i.IsInterlaced);                    Initialize(item.PlayablePath' isDvd' videoRenderer' isInterlaced);                    //_hiddenWindow.OnWMGRAPHNOTIFY = HandleGraphEvent;                  //_hiddenWindow.OnDVDEVENT = HandleDvdEvent;                    //pre-roll the graph                  _logger.Info("pre-roll the graph");                  var hr = _mediaControl.Pause();                  DsError.ThrowExceptionForHR(hr);                    //Task.WaitAll(Task.Delay(300));                  _logger.Info("run the graph");                  hr = _mediaControl.Run();                  DsError.ThrowExceptionForHR(hr);                    PlayState = PlayState.Playing;                  _currentPlaybackRate = 1.0;                    _streams = GetStreams();                    _logger.Info("DSPlayer Done in play");              }              catch (Exception ex)              {                  CloseInterfaces();                  throw ex;              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following statement contains a magic number: while (pEnum.Next(1' pins' IntPtr.Zero) == 0)              {                  //explicitly build graph to avoid unwanted filters worming their way in                  List<Guid> mediaTypes = GetPinMediaTypes(pins[0]);                  bool needsRender = true;                    for (int m = 0; m < mediaTypes.Count; m++)                  {                      DirectShowLib.IPin decIn = null;                      DirectShowLib.IPin decOut = null;                      DirectShowLib.IPin rendIn = null;                        _currentVideoRenderer = videoRenderer;                      var enableMadvr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                        try                      {                          if (mediaTypes[m] == DirectShowLib.MediaType.Video)                          {                              #region Video                                //add the video renderer first so we know whether to enable DXVA2 in "Auto" mode.                              if (enableMadvr)                              {                                  try                                  {                                      _madvr = URCOMLoader.Instance.GetObject(typeof(MadVR).GUID' true); // new MadVR();                                      var vmadvr = _madvr as DirectShowLib.IBaseFilter;                                      if (vmadvr != null)                                      {                                          hr = m_graph.AddFilter(vmadvr' "MadVR Video Renderer");                                          DsError.ThrowExceptionForHR(hr);                                            try                                          {                                              MadVRSettings msett = new MadVRSettings(_madvr);                                                MFNominalRange levels = (MFNominalRange)_config.VideoConfig.NominalRange;                                              string madVrLevelInitial = msett.GetString("levels");                                              switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }                                              string madVrLevel = msett.GetString("levels");                                                if (string.Compare(madVrLevel' madVrLevelInitial' false) != 0)                                                  _logger.Debug("Changed madVR levels from {0} to {1}"' madVrLevelInitial' madVrLevel);                                          }                                          catch (Exception ex)                                          {                                              _logger.ErrorException("Error configuring madVR"' ex);                                          }                                        }                                  }                                  catch (Exception ex)                                  {                                      _logger.ErrorException("Error adding MadVR filter"' ex);                                  }                              }                              else // Add default video renderer                              {                                  _mPEvr = (DirectShowLib.IBaseFilter)new EnhancedVideoRenderer();                                  hr = m_graph.AddFilter(_mPEvr' "EVR");                                  DsError.ThrowExceptionForHR(hr);                                    //we only need 2 input pins on the EVR if LAV Video isn't used for DVDs' but it doesn't hurt to have them                                  InitializeEvr(_mPEvr' _isDvd ? 2 : 1' videoRenderer);                              }                                try                              {                                  _lavvideo = URCOMLoader.Instance.GetObject(typeof(LAVVideo).GUID' true); //new LAVVideo();                                  var vlavvideo = _lavvideo as DirectShowLib.IBaseFilter;                                  if (vlavvideo != null)                                  {                                      hr = m_graph.AddFilter(vlavvideo' "LAV Video Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVVideoSettings vsett = vlavvideo as ILAVVideoSettings;                                      if (vsett != null)                                      {                                          //we only want to set it for MB                                          hr = vsett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Info("GPU Model: {0}"' VideoConfiguration.GpuModel);                                            LAVHWAccel configuredMode =                                              VideoConfigurationUtils.GetHwaMode(                                                  _config.VideoConfig'                                                  _customEvrPresenterLoaded);                                            LAVHWAccel testme = vsett.GetHWAccel();                                          _logger.Info("Current HWA Mode: {0} Desired Mode: {1}"' testme' configuredMode);                                          if (testme != configuredMode)                                          {                                              hr = vsett.SetHWAccel(configuredMode);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVVideoCodecs())                                          //{                                          //    LAVVideoCodec codec = (LAVVideoCodec)Enum.Parse(typeof(LAVVideoCodec)' c);                                            //    bool isEnabled = vsett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.VideoConfig.EnabledCodecs                                          //            .Contains(c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = vsett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = vsett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            foreach (string hwaCodec in DirectShowPlayer.GetLAVVideoHwaCodecs())                                          {                                              LAVVideoHWCodec codec = (LAVVideoHWCodec)Enum.Parse(typeof(LAVVideoHWCodec)' hwaCodec);                                              bool hwaIsEnabled = vsett.GetHWAccelCodec(codec);                                                if (                                                  _config.VideoConfig.HwEnabledCodecs                                                      .Contains(hwaCodec))                                              {                                                  if (!hwaIsEnabled)                                                  {                                                      _logger.Debug("Enable HWA support for: {0}"' hwaCodec);                                                      hr = vsett.SetHWAccelCodec(codec' true);                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                              }                                              else if (hwaIsEnabled)                                              {                                                  _logger.Debug("Disable HWA support for: {0}"' hwaCodec);                                                  hr = vsett.SetHWAccelCodec(codec' false);                                                  DsError.ThrowExceptionForHR(hr);                                              }                                          }                                            if (!vsett.GetDVDVideoSupport())                                          {                                              _logger.Debug("Enable DVD support.");                                              hr = vsett.SetDVDVideoSupport(true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            int hwaRes = vsett.GetHWAccelResolutionFlags();                                          if (hwaRes != _config.VideoConfig.HwaResolution                                              && _config.VideoConfig.HwaResolution > 0)                                          {                                              _logger.Debug("Change HWA resolution support from {0} to {1}."' hwaRes'                                                  _config.VideoConfig.HwaResolution);                                              hr =                                                  vsett.SetHWAccelResolutionFlags(                                                      VideoConfigurationUtils.GetHwaResolutions(                                                          _config.VideoConfig));                                              DsError.ThrowExceptionForHR(hr);                                          }                                            hr =                                              vsett.SetTrayIcon(                                                  _config.VideoConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            LAVSWDeintModes swDi = (LAVSWDeintModes)_config.VideoConfig.SW_DeintModes;                                            if (!isInterlaced)                                          {                                              swDi = LAVSWDeintModes.None;                                          }                                            LAVSWDeintModes testdi = vsett.GetSWDeintMode();                                          _logger.Info("Current SW DI Mode: {0} Desired Mode: {1}"' testdi' swDi);                                          if (testdi != swDi)                                          {                                              hr = vsett.SetSWDeintMode(swDi);                                              DsError.ThrowExceptionForHR(hr);                                          }                                      }                                  }                                    decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo' PinDirection.Input' 0);                                  if (decIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                      DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo'                                          PinDirection.Output' 0);                                        if (enableXySubFilter) //this flag indicates whether we should handle subtitle rendering                                      {                                          _logger.Debug("Enable XySubFilter.");                                          var xySubFilterSucceeded = false;                                            // Load xySubFilter if configured and if madvr succeeded                                          if (_madvr != null || _customEvrPresenterLoaded)                                          {                                              try                                              {                                                  _xySubFilter = URCOMLoader.Instance.GetObject(typeof(XySubFilter).GUID' true); //new XySubFilter();                                                  var vxySubFilter = _xySubFilter as DirectShowLib.IBaseFilter;                                                  if (vxySubFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxySubFilter' "xy-SubFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                                    xySubFilterSucceeded = true;                                                    _logger.Debug("Enable XySubFilter : {0}."' xySubFilterSucceeded);                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-SubFilter filter"' ex);                                              }                                          }                                            // Fallback to xyVsFilter                                          if (!xySubFilterSucceeded)                                          {                                              _logger.Debug("Fallback xyVsFilter.");                                              try                                              {                                                  _xyVsFilter = URCOMLoader.Instance.GetObject(typeof(XYVSFilter).GUID' true); //new XYVSFilter();                                                  var vxyVsFilter = _xyVsFilter as DirectShowLib.IBaseFilter;                                                  if (vxyVsFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxyVsFilter' "xy-VSFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                        _logger.Debug("Added xy-VSFilter");                                                  }                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-VSFilter filter"' ex);                                              }                                          }                                            if (_xyVsFilter != null) //If using VSFilter                                          {                                              _logger.Debug("insert xyVsFilter b/w LAV Video and the renderer");                                              //insert xyVsFilter b/w LAV Video and the renderer                                              rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Video");                                                //connect it to VSFilter                                              if (decOut != null && rendIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                                  DsError.ThrowExceptionForHR(hr);                                                    CleanUpInterface(rendIn);                                                  CleanUpInterface(decOut);                                                  rendIn = null;                                                  decOut = null;                                              }                                                //grab xyVsFilter's output pin so it can be connected to the renderer                                              decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xyVsFilter'                                                      PinDirection.Output' 0);                                          }                                      }                                        if (_madvr != null)                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_madvr'                                              PinDirection.Input' 0);                                      }                                      else                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_mPEvr'                                              PinDirection.Input' 0);                                      }                                        if (decOut != null && rendIn != null)                                      {                                          hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                            needsRender = false;                                          break;                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Video filter"' ex);                              }                                #endregion                          }                          else if (mediaTypes[m] == DirectShowLib.MediaType.Audio)                          {                              #region Audio                              //we have an audio pin so add a renderer and decoder                              switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }                                if (useDefaultAudioRenderer)                              {                                  AddDefaultAudioRenderer();                              }                                try                              {                                  _lavaudio = URCOMLoader.Instance.GetObject(typeof(LAVAudio).GUID' true); // new LAVAudio();                                  var vlavaudio = _lavaudio as DirectShowLib.IBaseFilter;                                  if (vlavaudio != null)                                  {                                      _logger.Debug("Add LAVAudio to the graph.");                                        hr = m_graph.AddFilter(vlavaudio' "LAV Audio Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioSettings asett = vlavaudio as ILAVAudioSettings;                                      if (asett != null)                                      {                                          _logger.Debug("Enable LAVAudio Runtime Config");                                            //we only want to set it for MB                                          hr = asett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVAudioCodecs())                                          //{                                          //    LAVAudioCodec codec = (LAVAudioCodec)Enum.Parse(typeof(LAVAudioCodec)' c);                                            //    bool isEnabled = asett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.AudioConfig.EnabledCodecs.Contains(                                          //            c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = asett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = asett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            //enable/disable bitstreaming                                          _logger.Debug("Enable LAVAudio S/PDIF bitstreaming");                                            if (_config.AudioConfig.BitstreamCodecs.Contains("AC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.AC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTS' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.BitstreamCodecs.Contains("EAC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.EAC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("TRUEHD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.TRUEHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS-HD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTSHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.Delay > 0)                                          {                                              _logger.Debug("Set LAVAudio audio delay: {0}"'                                                  _config.AudioConfig.Delay);                                                hr = asett.SetAudioDelay(true'                                                  _config.AudioConfig.Delay);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            _logger.Debug("Set LAVAudio auto AV Sync: {0}"'                                              _config.AudioConfig.EnableAutoSync);                                          hr =                                              asett.SetAutoAVSync(                                                  _config.AudioConfig.EnableAutoSync);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio Expand61: {0}"'                                              _config.AudioConfig.Expand61);                                          hr = asett.SetExpand61(_config.AudioConfig.Expand61);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ExpandMono: {0}"'                                              _config.AudioConfig.ExpandMono);                                          hr =                                              asett.SetExpandMono(                                                  _config.AudioConfig.ExpandMono);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ConvertToStandardLayout: {0}"'                                              _config.AudioConfig.ConvertToStandardLayout);                                          hr =                                              asett.SetOutputStandardLayout(                                                  _config.AudioConfig.ConvertToStandardLayout);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio EnableDRC: {0}"'                                              _config.AudioConfig.EnableDRC);                                          hr = asett.SetDRC(_config.AudioConfig.EnableDRC'                                              _config.AudioConfig.DRCLevel);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio ShowTrayIcon: {0}"'                                              _config.AudioConfig.ShowTrayIcon);                                          hr =                                              asett.SetTrayIcon(                                                  _config.AudioConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            bool mixingEnabled = asett.GetMixingEnabled();                                          if (mixingEnabled !=                                              _config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio EnablePCMMixing: {0}"'                                                  _config.AudioConfig.EnablePCMMixing);                                              hr = asett.SetMixingEnabled(!mixingEnabled);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio MixingSetting: {0}"'                                                  _config.AudioConfig.MixingSetting);                                              LAVAudioMixingFlag amf =                                                  (LAVAudioMixingFlag)                                                      _config.AudioConfig.MixingSetting;                                              hr = asett.SetMixingFlags(amf);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingEncoding: {0}"'                                                  _config.AudioConfig.MixingEncoding);                                              LAVAudioMixingMode amm =                                                  (LAVAudioMixingMode)                                                      Enum.Parse(typeof(LAVAudioMixingMode)'                                                          _config.AudioConfig.MixingEncoding);                                              hr = asett.SetMixingMode(amm);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingLayout: {0}"'                                                  _config.AudioConfig.MixingLayout);                                              LAVAudioMixingLayout aml =                                                  (LAVAudioMixingLayout)                                                      Enum.Parse(typeof(LAVAudioMixingLayout)'                                                          _config.AudioConfig.MixingLayout);                                              hr = asett.SetMixingLayout(aml);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug(                                                  "Set LAVAudio LfeMixingLevel: {0} CenterMixingLevel: {1} SurroundMixingLevel: {2}"'                                                  _config.AudioConfig.LfeMixingLevel'                                                  _config.AudioConfig.CenterMixingLevel'                                                  _config.AudioConfig.SurroundMixingLevel);                                              int lfe' center' surround;                                              //convert to the # that LAV Audio expects                                              lfe =                                                  (int)                                                      (_config.AudioConfig.LfeMixingLevel *                                                       10000.01);                                              center =                                                  (int)                                                      (_config.AudioConfig.CenterMixingLevel *                                                       10000.01);                                              surround =                                                  (int)                                                      (_config.AudioConfig                                                          .SurroundMixingLevel * 10000.01);                                                hr = asett.SetMixingLevels(center' surround' lfe);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                          {                                              LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                              bool isEnabled = asett.GetBitstreamConfig(codec);                                              _logger.Log(LogSeverity.Debug' "{0} bitstreaming: {1}"' codec' isEnabled);                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Audio filter"' ex);                              }                                _logger.Log(LogSeverity.Debug' "Connect Audio decoder to renderer");                              decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio' PinDirection.Input' 0);                              if (decIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Got Audio decoder input pin");                                  hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                  if (hr < 0) //LAV cannot handle this audio type                                  {                                      _logger.Warn("LAV Audio could not decode audio media type.");                                  }                                  else                                  {                                      //DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio'                                          PinDirection.Output' 0);                                  }                                    if (!string.IsNullOrWhiteSpace(_config.AudioConfig.AudioProcessor))                                  {                                      bool addProcessor = true;                                        if (_config.AudioConfig.BitstreamCodecs.Count > 0)                                      {                                          _logger.Log(LogSeverity.Debug' "Bit streaming is enabled' we need to decide whether to add processor");                                            ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                          if (audioStatus != null)                                          {                                              IntPtr codec = IntPtr.Zero;// Marshal.AllocCoTaskMem(100);                                              IntPtr format = IntPtr.Zero;                                              IntPtr outFormat = IntPtr.Zero;                                                int nChannels' sRate;                                              uint cMask;                                                hr = audioStatus.GetDecodeDetails(out codec' out format' out nChannels' out sRate' out cMask);                                              DsError.ThrowExceptionForHR(hr);                                                string sCodec' sFormat;//' sOutFormat;                                                sCodec = Marshal.PtrToStringAnsi(codec);                                              sFormat = Marshal.PtrToStringAnsi(format);                                                _logger.Log(LogSeverity.Debug' "input format: {0} - {1} - {2} - {3} - {4}"' sCodec' sFormat' nChannels' sRate' cMask);                                                //hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                              //DsError.ThrowExceptionForHR(hr);                                                //sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                //_logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                                if (_config.AudioConfig.BitstreamCodecs.Contains(sCodec.ToUpper()))                                              {                                                  _logger.Log(LogSeverity.Debug' "Bit streaming format found' do not add processor");                                                  addProcessor = false;                                              }                                          }                                      }                                        if (addProcessor)                                      {                                          _logger.Log(LogSeverity.Debug' "Add audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                          IBaseFilter audioProcessor = null;                                            if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?"))                                              audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor);                                          else                                              audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor);                                            if (audioProcessor != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Connect audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                CleanUpInterface(decIn);                                              decIn = DsFindPin.ByDirection(audioProcessor' PinDirection.Input' 0);                                              if (decIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' decIn' null);                                                  if (hr < 0)                                                  {                                                      _logger.Warn("couldn't connect to audio processor");                                                      hr = _filterGraph.RemoveFilter(audioProcessor);                                                      DsError.ThrowExceptionForHR(hr);                                                      CleanUpInterface(audioProcessor);                                                  }                                                  else                                                  {                                                      _logger.Log(LogSeverity.Debug' "Connected audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                      CleanUpInterface(decOut);                                                      decOut = DsFindPin.ByDirection(audioProcessor' PinDirection.Output' 0);                                                      CleanUpInterface(audioProcessor);                                                  }                                                }                                          }                                      }                                  }                                    rendIn = DsFindPin.ByDirection(AudioRenderer' PinDirection.Input' 0);                                    if (decOut != null && rendIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                      if (hr == -2004287474 && _wasapiAR != null) //AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED                                      {                                          IMPAudioRendererConfig arSett = _wasapiAR as IMPAudioRendererConfig;                                          if (arSett != null)                                          {                                              arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.SHARED);                                              _logger.Warn("WASAPI AR failed to connected in exclusive mode' check device properties");                                              hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          }                                      }                                      else if (hr == -2147220900) //audio format not supported                                      {                                          _logger.Warn("Couldn't connect to Audio Renderer' disable bit streaming and try again");                                          ILAVAudioSettings asett = _lavaudio as ILAVAudioSettings;                                          if (asett != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Disconnect Audio decoder from splitter");                                              hr = pins[0].Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                              hr = decIn.Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                                for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                              {                                                  LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                                  asett.SetBitstreamConfig(codec' false);                                                  _logger.Log(LogSeverity.Warn' "Disable {0} bitstreaming."' codec);                                                  bool isEnabled = asett.GetBitstreamConfig(codec);                                                  _logger.Log(LogSeverity.Warn' "{0} bitstreaming: {1}"' codec' isEnabled);                                              }                                                _logger.Log(LogSeverity.Debug' "Reconnect Audio decoder to splitter");                                              hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                              DsError.ThrowExceptionForHR(hr);                                                hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                              _logger.Log(LogSeverity.Warn' "Renderer reconnect result:{0}"' hr);                                          }                                      }                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                      if (audioStatus != null)                                      {                                          IntPtr outFormat = IntPtr.Zero;                                            int nChannels' sRate;                                          uint cMask;                                            hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                          //DsError.ThrowExceptionForHR(hr);                                          if (hr >= 0)                                          {                                              string sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                _logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                          }                                      }                                        needsRender = false;                                      break;                                  }                              }                              #endregion                          }                          else if (mediaTypes[m] == SubtitleMediaType                              /*DirectShowLib.MediaType.Subtitle*/)                          {                              #region subtitles                              _logger.Log(LogSeverity.Debug' "Connect subtitle filter");                                if (_xySubFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xySubFilter");                                  rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xySubFilter'                                      PinDirection.Input' 0);                              }                              else if (_xyVsFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xyVsFilter");                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Input");                              }                                if (rendIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Connect subtitle pin to subtitle renderer");                                    try                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                      DsError.ThrowExceptionForHR(hr);                                  }                                  catch (Exception ex)                                  {                                      _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                  }                                  needsRender = false;                                  break;                              }                              #endregion                          }                          else if (mediaTypes[m] == DvdSubpictureMediaType)                          {                              #region DVD Subpicture                              _logger.Log(LogSeverity.Debug' "Connect DVD Subpicture");                              if (_lavvideo != null)                              {                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_lavvideo' "Subtitle Input");                                  if (rendIn != null)                                  {                                      _logger.Log(LogSeverity.Debug' "Connect dvd subtitle pin to subtitle renderer");                                        try                                      {                                          hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                      }                                      catch (Exception ex)                                      {                                          _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                      }                                      needsRender = false;                                      break;                                  }                              }                              #endregion                          }                      }                      finally                      {                          CleanUpInterface(decIn);                          CleanUpInterface(decOut);                          CleanUpInterface(rendIn);                      }                  }                    if (needsRender)                  {                      if (_filterGraph.RenderEx(pins[0]' AMRenderExFlags.RenderToExistingRenderers' IntPtr.Zero) >= 0)                          pinsRendered++;                  }                  else                      pinsRendered++;                    Marshal.ReleaseComObject(pins[0]);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following statement contains a magic number: while (pEnum.Next(1' pins' IntPtr.Zero) == 0)              {                  //explicitly build graph to avoid unwanted filters worming their way in                  List<Guid> mediaTypes = GetPinMediaTypes(pins[0]);                  bool needsRender = true;                    for (int m = 0; m < mediaTypes.Count; m++)                  {                      DirectShowLib.IPin decIn = null;                      DirectShowLib.IPin decOut = null;                      DirectShowLib.IPin rendIn = null;                        _currentVideoRenderer = videoRenderer;                      var enableMadvr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                        try                      {                          if (mediaTypes[m] == DirectShowLib.MediaType.Video)                          {                              #region Video                                //add the video renderer first so we know whether to enable DXVA2 in "Auto" mode.                              if (enableMadvr)                              {                                  try                                  {                                      _madvr = URCOMLoader.Instance.GetObject(typeof(MadVR).GUID' true); // new MadVR();                                      var vmadvr = _madvr as DirectShowLib.IBaseFilter;                                      if (vmadvr != null)                                      {                                          hr = m_graph.AddFilter(vmadvr' "MadVR Video Renderer");                                          DsError.ThrowExceptionForHR(hr);                                            try                                          {                                              MadVRSettings msett = new MadVRSettings(_madvr);                                                MFNominalRange levels = (MFNominalRange)_config.VideoConfig.NominalRange;                                              string madVrLevelInitial = msett.GetString("levels");                                              switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }                                              string madVrLevel = msett.GetString("levels");                                                if (string.Compare(madVrLevel' madVrLevelInitial' false) != 0)                                                  _logger.Debug("Changed madVR levels from {0} to {1}"' madVrLevelInitial' madVrLevel);                                          }                                          catch (Exception ex)                                          {                                              _logger.ErrorException("Error configuring madVR"' ex);                                          }                                        }                                  }                                  catch (Exception ex)                                  {                                      _logger.ErrorException("Error adding MadVR filter"' ex);                                  }                              }                              else // Add default video renderer                              {                                  _mPEvr = (DirectShowLib.IBaseFilter)new EnhancedVideoRenderer();                                  hr = m_graph.AddFilter(_mPEvr' "EVR");                                  DsError.ThrowExceptionForHR(hr);                                    //we only need 2 input pins on the EVR if LAV Video isn't used for DVDs' but it doesn't hurt to have them                                  InitializeEvr(_mPEvr' _isDvd ? 2 : 1' videoRenderer);                              }                                try                              {                                  _lavvideo = URCOMLoader.Instance.GetObject(typeof(LAVVideo).GUID' true); //new LAVVideo();                                  var vlavvideo = _lavvideo as DirectShowLib.IBaseFilter;                                  if (vlavvideo != null)                                  {                                      hr = m_graph.AddFilter(vlavvideo' "LAV Video Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVVideoSettings vsett = vlavvideo as ILAVVideoSettings;                                      if (vsett != null)                                      {                                          //we only want to set it for MB                                          hr = vsett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Info("GPU Model: {0}"' VideoConfiguration.GpuModel);                                            LAVHWAccel configuredMode =                                              VideoConfigurationUtils.GetHwaMode(                                                  _config.VideoConfig'                                                  _customEvrPresenterLoaded);                                            LAVHWAccel testme = vsett.GetHWAccel();                                          _logger.Info("Current HWA Mode: {0} Desired Mode: {1}"' testme' configuredMode);                                          if (testme != configuredMode)                                          {                                              hr = vsett.SetHWAccel(configuredMode);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVVideoCodecs())                                          //{                                          //    LAVVideoCodec codec = (LAVVideoCodec)Enum.Parse(typeof(LAVVideoCodec)' c);                                            //    bool isEnabled = vsett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.VideoConfig.EnabledCodecs                                          //            .Contains(c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = vsett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = vsett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            foreach (string hwaCodec in DirectShowPlayer.GetLAVVideoHwaCodecs())                                          {                                              LAVVideoHWCodec codec = (LAVVideoHWCodec)Enum.Parse(typeof(LAVVideoHWCodec)' hwaCodec);                                              bool hwaIsEnabled = vsett.GetHWAccelCodec(codec);                                                if (                                                  _config.VideoConfig.HwEnabledCodecs                                                      .Contains(hwaCodec))                                              {                                                  if (!hwaIsEnabled)                                                  {                                                      _logger.Debug("Enable HWA support for: {0}"' hwaCodec);                                                      hr = vsett.SetHWAccelCodec(codec' true);                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                              }                                              else if (hwaIsEnabled)                                              {                                                  _logger.Debug("Disable HWA support for: {0}"' hwaCodec);                                                  hr = vsett.SetHWAccelCodec(codec' false);                                                  DsError.ThrowExceptionForHR(hr);                                              }                                          }                                            if (!vsett.GetDVDVideoSupport())                                          {                                              _logger.Debug("Enable DVD support.");                                              hr = vsett.SetDVDVideoSupport(true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            int hwaRes = vsett.GetHWAccelResolutionFlags();                                          if (hwaRes != _config.VideoConfig.HwaResolution                                              && _config.VideoConfig.HwaResolution > 0)                                          {                                              _logger.Debug("Change HWA resolution support from {0} to {1}."' hwaRes'                                                  _config.VideoConfig.HwaResolution);                                              hr =                                                  vsett.SetHWAccelResolutionFlags(                                                      VideoConfigurationUtils.GetHwaResolutions(                                                          _config.VideoConfig));                                              DsError.ThrowExceptionForHR(hr);                                          }                                            hr =                                              vsett.SetTrayIcon(                                                  _config.VideoConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            LAVSWDeintModes swDi = (LAVSWDeintModes)_config.VideoConfig.SW_DeintModes;                                            if (!isInterlaced)                                          {                                              swDi = LAVSWDeintModes.None;                                          }                                            LAVSWDeintModes testdi = vsett.GetSWDeintMode();                                          _logger.Info("Current SW DI Mode: {0} Desired Mode: {1}"' testdi' swDi);                                          if (testdi != swDi)                                          {                                              hr = vsett.SetSWDeintMode(swDi);                                              DsError.ThrowExceptionForHR(hr);                                          }                                      }                                  }                                    decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo' PinDirection.Input' 0);                                  if (decIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                      DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo'                                          PinDirection.Output' 0);                                        if (enableXySubFilter) //this flag indicates whether we should handle subtitle rendering                                      {                                          _logger.Debug("Enable XySubFilter.");                                          var xySubFilterSucceeded = false;                                            // Load xySubFilter if configured and if madvr succeeded                                          if (_madvr != null || _customEvrPresenterLoaded)                                          {                                              try                                              {                                                  _xySubFilter = URCOMLoader.Instance.GetObject(typeof(XySubFilter).GUID' true); //new XySubFilter();                                                  var vxySubFilter = _xySubFilter as DirectShowLib.IBaseFilter;                                                  if (vxySubFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxySubFilter' "xy-SubFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                                    xySubFilterSucceeded = true;                                                    _logger.Debug("Enable XySubFilter : {0}."' xySubFilterSucceeded);                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-SubFilter filter"' ex);                                              }                                          }                                            // Fallback to xyVsFilter                                          if (!xySubFilterSucceeded)                                          {                                              _logger.Debug("Fallback xyVsFilter.");                                              try                                              {                                                  _xyVsFilter = URCOMLoader.Instance.GetObject(typeof(XYVSFilter).GUID' true); //new XYVSFilter();                                                  var vxyVsFilter = _xyVsFilter as DirectShowLib.IBaseFilter;                                                  if (vxyVsFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxyVsFilter' "xy-VSFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                        _logger.Debug("Added xy-VSFilter");                                                  }                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-VSFilter filter"' ex);                                              }                                          }                                            if (_xyVsFilter != null) //If using VSFilter                                          {                                              _logger.Debug("insert xyVsFilter b/w LAV Video and the renderer");                                              //insert xyVsFilter b/w LAV Video and the renderer                                              rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Video");                                                //connect it to VSFilter                                              if (decOut != null && rendIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                                  DsError.ThrowExceptionForHR(hr);                                                    CleanUpInterface(rendIn);                                                  CleanUpInterface(decOut);                                                  rendIn = null;                                                  decOut = null;                                              }                                                //grab xyVsFilter's output pin so it can be connected to the renderer                                              decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xyVsFilter'                                                      PinDirection.Output' 0);                                          }                                      }                                        if (_madvr != null)                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_madvr'                                              PinDirection.Input' 0);                                      }                                      else                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_mPEvr'                                              PinDirection.Input' 0);                                      }                                        if (decOut != null && rendIn != null)                                      {                                          hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                            needsRender = false;                                          break;                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Video filter"' ex);                              }                                #endregion                          }                          else if (mediaTypes[m] == DirectShowLib.MediaType.Audio)                          {                              #region Audio                              //we have an audio pin so add a renderer and decoder                              switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }                                if (useDefaultAudioRenderer)                              {                                  AddDefaultAudioRenderer();                              }                                try                              {                                  _lavaudio = URCOMLoader.Instance.GetObject(typeof(LAVAudio).GUID' true); // new LAVAudio();                                  var vlavaudio = _lavaudio as DirectShowLib.IBaseFilter;                                  if (vlavaudio != null)                                  {                                      _logger.Debug("Add LAVAudio to the graph.");                                        hr = m_graph.AddFilter(vlavaudio' "LAV Audio Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioSettings asett = vlavaudio as ILAVAudioSettings;                                      if (asett != null)                                      {                                          _logger.Debug("Enable LAVAudio Runtime Config");                                            //we only want to set it for MB                                          hr = asett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVAudioCodecs())                                          //{                                          //    LAVAudioCodec codec = (LAVAudioCodec)Enum.Parse(typeof(LAVAudioCodec)' c);                                            //    bool isEnabled = asett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.AudioConfig.EnabledCodecs.Contains(                                          //            c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = asett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = asett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            //enable/disable bitstreaming                                          _logger.Debug("Enable LAVAudio S/PDIF bitstreaming");                                            if (_config.AudioConfig.BitstreamCodecs.Contains("AC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.AC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTS' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.BitstreamCodecs.Contains("EAC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.EAC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("TRUEHD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.TRUEHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS-HD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTSHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.Delay > 0)                                          {                                              _logger.Debug("Set LAVAudio audio delay: {0}"'                                                  _config.AudioConfig.Delay);                                                hr = asett.SetAudioDelay(true'                                                  _config.AudioConfig.Delay);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            _logger.Debug("Set LAVAudio auto AV Sync: {0}"'                                              _config.AudioConfig.EnableAutoSync);                                          hr =                                              asett.SetAutoAVSync(                                                  _config.AudioConfig.EnableAutoSync);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio Expand61: {0}"'                                              _config.AudioConfig.Expand61);                                          hr = asett.SetExpand61(_config.AudioConfig.Expand61);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ExpandMono: {0}"'                                              _config.AudioConfig.ExpandMono);                                          hr =                                              asett.SetExpandMono(                                                  _config.AudioConfig.ExpandMono);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ConvertToStandardLayout: {0}"'                                              _config.AudioConfig.ConvertToStandardLayout);                                          hr =                                              asett.SetOutputStandardLayout(                                                  _config.AudioConfig.ConvertToStandardLayout);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio EnableDRC: {0}"'                                              _config.AudioConfig.EnableDRC);                                          hr = asett.SetDRC(_config.AudioConfig.EnableDRC'                                              _config.AudioConfig.DRCLevel);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio ShowTrayIcon: {0}"'                                              _config.AudioConfig.ShowTrayIcon);                                          hr =                                              asett.SetTrayIcon(                                                  _config.AudioConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            bool mixingEnabled = asett.GetMixingEnabled();                                          if (mixingEnabled !=                                              _config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio EnablePCMMixing: {0}"'                                                  _config.AudioConfig.EnablePCMMixing);                                              hr = asett.SetMixingEnabled(!mixingEnabled);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio MixingSetting: {0}"'                                                  _config.AudioConfig.MixingSetting);                                              LAVAudioMixingFlag amf =                                                  (LAVAudioMixingFlag)                                                      _config.AudioConfig.MixingSetting;                                              hr = asett.SetMixingFlags(amf);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingEncoding: {0}"'                                                  _config.AudioConfig.MixingEncoding);                                              LAVAudioMixingMode amm =                                                  (LAVAudioMixingMode)                                                      Enum.Parse(typeof(LAVAudioMixingMode)'                                                          _config.AudioConfig.MixingEncoding);                                              hr = asett.SetMixingMode(amm);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingLayout: {0}"'                                                  _config.AudioConfig.MixingLayout);                                              LAVAudioMixingLayout aml =                                                  (LAVAudioMixingLayout)                                                      Enum.Parse(typeof(LAVAudioMixingLayout)'                                                          _config.AudioConfig.MixingLayout);                                              hr = asett.SetMixingLayout(aml);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug(                                                  "Set LAVAudio LfeMixingLevel: {0} CenterMixingLevel: {1} SurroundMixingLevel: {2}"'                                                  _config.AudioConfig.LfeMixingLevel'                                                  _config.AudioConfig.CenterMixingLevel'                                                  _config.AudioConfig.SurroundMixingLevel);                                              int lfe' center' surround;                                              //convert to the # that LAV Audio expects                                              lfe =                                                  (int)                                                      (_config.AudioConfig.LfeMixingLevel *                                                       10000.01);                                              center =                                                  (int)                                                      (_config.AudioConfig.CenterMixingLevel *                                                       10000.01);                                              surround =                                                  (int)                                                      (_config.AudioConfig                                                          .SurroundMixingLevel * 10000.01);                                                hr = asett.SetMixingLevels(center' surround' lfe);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                          {                                              LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                              bool isEnabled = asett.GetBitstreamConfig(codec);                                              _logger.Log(LogSeverity.Debug' "{0} bitstreaming: {1}"' codec' isEnabled);                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Audio filter"' ex);                              }                                _logger.Log(LogSeverity.Debug' "Connect Audio decoder to renderer");                              decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio' PinDirection.Input' 0);                              if (decIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Got Audio decoder input pin");                                  hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                  if (hr < 0) //LAV cannot handle this audio type                                  {                                      _logger.Warn("LAV Audio could not decode audio media type.");                                  }                                  else                                  {                                      //DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio'                                          PinDirection.Output' 0);                                  }                                    if (!string.IsNullOrWhiteSpace(_config.AudioConfig.AudioProcessor))                                  {                                      bool addProcessor = true;                                        if (_config.AudioConfig.BitstreamCodecs.Count > 0)                                      {                                          _logger.Log(LogSeverity.Debug' "Bit streaming is enabled' we need to decide whether to add processor");                                            ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                          if (audioStatus != null)                                          {                                              IntPtr codec = IntPtr.Zero;// Marshal.AllocCoTaskMem(100);                                              IntPtr format = IntPtr.Zero;                                              IntPtr outFormat = IntPtr.Zero;                                                int nChannels' sRate;                                              uint cMask;                                                hr = audioStatus.GetDecodeDetails(out codec' out format' out nChannels' out sRate' out cMask);                                              DsError.ThrowExceptionForHR(hr);                                                string sCodec' sFormat;//' sOutFormat;                                                sCodec = Marshal.PtrToStringAnsi(codec);                                              sFormat = Marshal.PtrToStringAnsi(format);                                                _logger.Log(LogSeverity.Debug' "input format: {0} - {1} - {2} - {3} - {4}"' sCodec' sFormat' nChannels' sRate' cMask);                                                //hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                              //DsError.ThrowExceptionForHR(hr);                                                //sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                //_logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                                if (_config.AudioConfig.BitstreamCodecs.Contains(sCodec.ToUpper()))                                              {                                                  _logger.Log(LogSeverity.Debug' "Bit streaming format found' do not add processor");                                                  addProcessor = false;                                              }                                          }                                      }                                        if (addProcessor)                                      {                                          _logger.Log(LogSeverity.Debug' "Add audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                          IBaseFilter audioProcessor = null;                                            if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?"))                                              audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor);                                          else                                              audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor);                                            if (audioProcessor != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Connect audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                CleanUpInterface(decIn);                                              decIn = DsFindPin.ByDirection(audioProcessor' PinDirection.Input' 0);                                              if (decIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' decIn' null);                                                  if (hr < 0)                                                  {                                                      _logger.Warn("couldn't connect to audio processor");                                                      hr = _filterGraph.RemoveFilter(audioProcessor);                                                      DsError.ThrowExceptionForHR(hr);                                                      CleanUpInterface(audioProcessor);                                                  }                                                  else                                                  {                                                      _logger.Log(LogSeverity.Debug' "Connected audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                      CleanUpInterface(decOut);                                                      decOut = DsFindPin.ByDirection(audioProcessor' PinDirection.Output' 0);                                                      CleanUpInterface(audioProcessor);                                                  }                                                }                                          }                                      }                                  }                                    rendIn = DsFindPin.ByDirection(AudioRenderer' PinDirection.Input' 0);                                    if (decOut != null && rendIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                      if (hr == -2004287474 && _wasapiAR != null) //AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED                                      {                                          IMPAudioRendererConfig arSett = _wasapiAR as IMPAudioRendererConfig;                                          if (arSett != null)                                          {                                              arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.SHARED);                                              _logger.Warn("WASAPI AR failed to connected in exclusive mode' check device properties");                                              hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          }                                      }                                      else if (hr == -2147220900) //audio format not supported                                      {                                          _logger.Warn("Couldn't connect to Audio Renderer' disable bit streaming and try again");                                          ILAVAudioSettings asett = _lavaudio as ILAVAudioSettings;                                          if (asett != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Disconnect Audio decoder from splitter");                                              hr = pins[0].Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                              hr = decIn.Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                                for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                              {                                                  LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                                  asett.SetBitstreamConfig(codec' false);                                                  _logger.Log(LogSeverity.Warn' "Disable {0} bitstreaming."' codec);                                                  bool isEnabled = asett.GetBitstreamConfig(codec);                                                  _logger.Log(LogSeverity.Warn' "{0} bitstreaming: {1}"' codec' isEnabled);                                              }                                                _logger.Log(LogSeverity.Debug' "Reconnect Audio decoder to splitter");                                              hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                              DsError.ThrowExceptionForHR(hr);                                                hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                              _logger.Log(LogSeverity.Warn' "Renderer reconnect result:{0}"' hr);                                          }                                      }                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                      if (audioStatus != null)                                      {                                          IntPtr outFormat = IntPtr.Zero;                                            int nChannels' sRate;                                          uint cMask;                                            hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                          //DsError.ThrowExceptionForHR(hr);                                          if (hr >= 0)                                          {                                              string sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                _logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                          }                                      }                                        needsRender = false;                                      break;                                  }                              }                              #endregion                          }                          else if (mediaTypes[m] == SubtitleMediaType                              /*DirectShowLib.MediaType.Subtitle*/)                          {                              #region subtitles                              _logger.Log(LogSeverity.Debug' "Connect subtitle filter");                                if (_xySubFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xySubFilter");                                  rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xySubFilter'                                      PinDirection.Input' 0);                              }                              else if (_xyVsFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xyVsFilter");                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Input");                              }                                if (rendIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Connect subtitle pin to subtitle renderer");                                    try                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                      DsError.ThrowExceptionForHR(hr);                                  }                                  catch (Exception ex)                                  {                                      _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                  }                                  needsRender = false;                                  break;                              }                              #endregion                          }                          else if (mediaTypes[m] == DvdSubpictureMediaType)                          {                              #region DVD Subpicture                              _logger.Log(LogSeverity.Debug' "Connect DVD Subpicture");                              if (_lavvideo != null)                              {                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_lavvideo' "Subtitle Input");                                  if (rendIn != null)                                  {                                      _logger.Log(LogSeverity.Debug' "Connect dvd subtitle pin to subtitle renderer");                                        try                                      {                                          hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                      }                                      catch (Exception ex)                                      {                                          _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                      }                                      needsRender = false;                                      break;                                  }                              }                              #endregion                          }                      }                      finally                      {                          CleanUpInterface(decIn);                          CleanUpInterface(decOut);                          CleanUpInterface(rendIn);                      }                  }                    if (needsRender)                  {                      if (_filterGraph.RenderEx(pins[0]' AMRenderExFlags.RenderToExistingRenderers' IntPtr.Zero) >= 0)                          pinsRendered++;                  }                  else                      pinsRendered++;                    Marshal.ReleaseComObject(pins[0]);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following statement contains a magic number: while (pEnum.Next(1' pins' IntPtr.Zero) == 0)              {                  //explicitly build graph to avoid unwanted filters worming their way in                  List<Guid> mediaTypes = GetPinMediaTypes(pins[0]);                  bool needsRender = true;                    for (int m = 0; m < mediaTypes.Count; m++)                  {                      DirectShowLib.IPin decIn = null;                      DirectShowLib.IPin decOut = null;                      DirectShowLib.IPin rendIn = null;                        _currentVideoRenderer = videoRenderer;                      var enableMadvr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                        try                      {                          if (mediaTypes[m] == DirectShowLib.MediaType.Video)                          {                              #region Video                                //add the video renderer first so we know whether to enable DXVA2 in "Auto" mode.                              if (enableMadvr)                              {                                  try                                  {                                      _madvr = URCOMLoader.Instance.GetObject(typeof(MadVR).GUID' true); // new MadVR();                                      var vmadvr = _madvr as DirectShowLib.IBaseFilter;                                      if (vmadvr != null)                                      {                                          hr = m_graph.AddFilter(vmadvr' "MadVR Video Renderer");                                          DsError.ThrowExceptionForHR(hr);                                            try                                          {                                              MadVRSettings msett = new MadVRSettings(_madvr);                                                MFNominalRange levels = (MFNominalRange)_config.VideoConfig.NominalRange;                                              string madVrLevelInitial = msett.GetString("levels");                                              switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }                                              string madVrLevel = msett.GetString("levels");                                                if (string.Compare(madVrLevel' madVrLevelInitial' false) != 0)                                                  _logger.Debug("Changed madVR levels from {0} to {1}"' madVrLevelInitial' madVrLevel);                                          }                                          catch (Exception ex)                                          {                                              _logger.ErrorException("Error configuring madVR"' ex);                                          }                                        }                                  }                                  catch (Exception ex)                                  {                                      _logger.ErrorException("Error adding MadVR filter"' ex);                                  }                              }                              else // Add default video renderer                              {                                  _mPEvr = (DirectShowLib.IBaseFilter)new EnhancedVideoRenderer();                                  hr = m_graph.AddFilter(_mPEvr' "EVR");                                  DsError.ThrowExceptionForHR(hr);                                    //we only need 2 input pins on the EVR if LAV Video isn't used for DVDs' but it doesn't hurt to have them                                  InitializeEvr(_mPEvr' _isDvd ? 2 : 1' videoRenderer);                              }                                try                              {                                  _lavvideo = URCOMLoader.Instance.GetObject(typeof(LAVVideo).GUID' true); //new LAVVideo();                                  var vlavvideo = _lavvideo as DirectShowLib.IBaseFilter;                                  if (vlavvideo != null)                                  {                                      hr = m_graph.AddFilter(vlavvideo' "LAV Video Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVVideoSettings vsett = vlavvideo as ILAVVideoSettings;                                      if (vsett != null)                                      {                                          //we only want to set it for MB                                          hr = vsett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Info("GPU Model: {0}"' VideoConfiguration.GpuModel);                                            LAVHWAccel configuredMode =                                              VideoConfigurationUtils.GetHwaMode(                                                  _config.VideoConfig'                                                  _customEvrPresenterLoaded);                                            LAVHWAccel testme = vsett.GetHWAccel();                                          _logger.Info("Current HWA Mode: {0} Desired Mode: {1}"' testme' configuredMode);                                          if (testme != configuredMode)                                          {                                              hr = vsett.SetHWAccel(configuredMode);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVVideoCodecs())                                          //{                                          //    LAVVideoCodec codec = (LAVVideoCodec)Enum.Parse(typeof(LAVVideoCodec)' c);                                            //    bool isEnabled = vsett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.VideoConfig.EnabledCodecs                                          //            .Contains(c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = vsett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = vsett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            foreach (string hwaCodec in DirectShowPlayer.GetLAVVideoHwaCodecs())                                          {                                              LAVVideoHWCodec codec = (LAVVideoHWCodec)Enum.Parse(typeof(LAVVideoHWCodec)' hwaCodec);                                              bool hwaIsEnabled = vsett.GetHWAccelCodec(codec);                                                if (                                                  _config.VideoConfig.HwEnabledCodecs                                                      .Contains(hwaCodec))                                              {                                                  if (!hwaIsEnabled)                                                  {                                                      _logger.Debug("Enable HWA support for: {0}"' hwaCodec);                                                      hr = vsett.SetHWAccelCodec(codec' true);                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                              }                                              else if (hwaIsEnabled)                                              {                                                  _logger.Debug("Disable HWA support for: {0}"' hwaCodec);                                                  hr = vsett.SetHWAccelCodec(codec' false);                                                  DsError.ThrowExceptionForHR(hr);                                              }                                          }                                            if (!vsett.GetDVDVideoSupport())                                          {                                              _logger.Debug("Enable DVD support.");                                              hr = vsett.SetDVDVideoSupport(true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            int hwaRes = vsett.GetHWAccelResolutionFlags();                                          if (hwaRes != _config.VideoConfig.HwaResolution                                              && _config.VideoConfig.HwaResolution > 0)                                          {                                              _logger.Debug("Change HWA resolution support from {0} to {1}."' hwaRes'                                                  _config.VideoConfig.HwaResolution);                                              hr =                                                  vsett.SetHWAccelResolutionFlags(                                                      VideoConfigurationUtils.GetHwaResolutions(                                                          _config.VideoConfig));                                              DsError.ThrowExceptionForHR(hr);                                          }                                            hr =                                              vsett.SetTrayIcon(                                                  _config.VideoConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            LAVSWDeintModes swDi = (LAVSWDeintModes)_config.VideoConfig.SW_DeintModes;                                            if (!isInterlaced)                                          {                                              swDi = LAVSWDeintModes.None;                                          }                                            LAVSWDeintModes testdi = vsett.GetSWDeintMode();                                          _logger.Info("Current SW DI Mode: {0} Desired Mode: {1}"' testdi' swDi);                                          if (testdi != swDi)                                          {                                              hr = vsett.SetSWDeintMode(swDi);                                              DsError.ThrowExceptionForHR(hr);                                          }                                      }                                  }                                    decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo' PinDirection.Input' 0);                                  if (decIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                      DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo'                                          PinDirection.Output' 0);                                        if (enableXySubFilter) //this flag indicates whether we should handle subtitle rendering                                      {                                          _logger.Debug("Enable XySubFilter.");                                          var xySubFilterSucceeded = false;                                            // Load xySubFilter if configured and if madvr succeeded                                          if (_madvr != null || _customEvrPresenterLoaded)                                          {                                              try                                              {                                                  _xySubFilter = URCOMLoader.Instance.GetObject(typeof(XySubFilter).GUID' true); //new XySubFilter();                                                  var vxySubFilter = _xySubFilter as DirectShowLib.IBaseFilter;                                                  if (vxySubFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxySubFilter' "xy-SubFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                                    xySubFilterSucceeded = true;                                                    _logger.Debug("Enable XySubFilter : {0}."' xySubFilterSucceeded);                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-SubFilter filter"' ex);                                              }                                          }                                            // Fallback to xyVsFilter                                          if (!xySubFilterSucceeded)                                          {                                              _logger.Debug("Fallback xyVsFilter.");                                              try                                              {                                                  _xyVsFilter = URCOMLoader.Instance.GetObject(typeof(XYVSFilter).GUID' true); //new XYVSFilter();                                                  var vxyVsFilter = _xyVsFilter as DirectShowLib.IBaseFilter;                                                  if (vxyVsFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxyVsFilter' "xy-VSFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                        _logger.Debug("Added xy-VSFilter");                                                  }                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-VSFilter filter"' ex);                                              }                                          }                                            if (_xyVsFilter != null) //If using VSFilter                                          {                                              _logger.Debug("insert xyVsFilter b/w LAV Video and the renderer");                                              //insert xyVsFilter b/w LAV Video and the renderer                                              rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Video");                                                //connect it to VSFilter                                              if (decOut != null && rendIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                                  DsError.ThrowExceptionForHR(hr);                                                    CleanUpInterface(rendIn);                                                  CleanUpInterface(decOut);                                                  rendIn = null;                                                  decOut = null;                                              }                                                //grab xyVsFilter's output pin so it can be connected to the renderer                                              decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xyVsFilter'                                                      PinDirection.Output' 0);                                          }                                      }                                        if (_madvr != null)                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_madvr'                                              PinDirection.Input' 0);                                      }                                      else                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_mPEvr'                                              PinDirection.Input' 0);                                      }                                        if (decOut != null && rendIn != null)                                      {                                          hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                            needsRender = false;                                          break;                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Video filter"' ex);                              }                                #endregion                          }                          else if (mediaTypes[m] == DirectShowLib.MediaType.Audio)                          {                              #region Audio                              //we have an audio pin so add a renderer and decoder                              switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }                                if (useDefaultAudioRenderer)                              {                                  AddDefaultAudioRenderer();                              }                                try                              {                                  _lavaudio = URCOMLoader.Instance.GetObject(typeof(LAVAudio).GUID' true); // new LAVAudio();                                  var vlavaudio = _lavaudio as DirectShowLib.IBaseFilter;                                  if (vlavaudio != null)                                  {                                      _logger.Debug("Add LAVAudio to the graph.");                                        hr = m_graph.AddFilter(vlavaudio' "LAV Audio Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioSettings asett = vlavaudio as ILAVAudioSettings;                                      if (asett != null)                                      {                                          _logger.Debug("Enable LAVAudio Runtime Config");                                            //we only want to set it for MB                                          hr = asett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVAudioCodecs())                                          //{                                          //    LAVAudioCodec codec = (LAVAudioCodec)Enum.Parse(typeof(LAVAudioCodec)' c);                                            //    bool isEnabled = asett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.AudioConfig.EnabledCodecs.Contains(                                          //            c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = asett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = asett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            //enable/disable bitstreaming                                          _logger.Debug("Enable LAVAudio S/PDIF bitstreaming");                                            if (_config.AudioConfig.BitstreamCodecs.Contains("AC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.AC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTS' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.BitstreamCodecs.Contains("EAC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.EAC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("TRUEHD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.TRUEHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS-HD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTSHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.Delay > 0)                                          {                                              _logger.Debug("Set LAVAudio audio delay: {0}"'                                                  _config.AudioConfig.Delay);                                                hr = asett.SetAudioDelay(true'                                                  _config.AudioConfig.Delay);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            _logger.Debug("Set LAVAudio auto AV Sync: {0}"'                                              _config.AudioConfig.EnableAutoSync);                                          hr =                                              asett.SetAutoAVSync(                                                  _config.AudioConfig.EnableAutoSync);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio Expand61: {0}"'                                              _config.AudioConfig.Expand61);                                          hr = asett.SetExpand61(_config.AudioConfig.Expand61);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ExpandMono: {0}"'                                              _config.AudioConfig.ExpandMono);                                          hr =                                              asett.SetExpandMono(                                                  _config.AudioConfig.ExpandMono);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ConvertToStandardLayout: {0}"'                                              _config.AudioConfig.ConvertToStandardLayout);                                          hr =                                              asett.SetOutputStandardLayout(                                                  _config.AudioConfig.ConvertToStandardLayout);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio EnableDRC: {0}"'                                              _config.AudioConfig.EnableDRC);                                          hr = asett.SetDRC(_config.AudioConfig.EnableDRC'                                              _config.AudioConfig.DRCLevel);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio ShowTrayIcon: {0}"'                                              _config.AudioConfig.ShowTrayIcon);                                          hr =                                              asett.SetTrayIcon(                                                  _config.AudioConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            bool mixingEnabled = asett.GetMixingEnabled();                                          if (mixingEnabled !=                                              _config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio EnablePCMMixing: {0}"'                                                  _config.AudioConfig.EnablePCMMixing);                                              hr = asett.SetMixingEnabled(!mixingEnabled);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio MixingSetting: {0}"'                                                  _config.AudioConfig.MixingSetting);                                              LAVAudioMixingFlag amf =                                                  (LAVAudioMixingFlag)                                                      _config.AudioConfig.MixingSetting;                                              hr = asett.SetMixingFlags(amf);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingEncoding: {0}"'                                                  _config.AudioConfig.MixingEncoding);                                              LAVAudioMixingMode amm =                                                  (LAVAudioMixingMode)                                                      Enum.Parse(typeof(LAVAudioMixingMode)'                                                          _config.AudioConfig.MixingEncoding);                                              hr = asett.SetMixingMode(amm);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingLayout: {0}"'                                                  _config.AudioConfig.MixingLayout);                                              LAVAudioMixingLayout aml =                                                  (LAVAudioMixingLayout)                                                      Enum.Parse(typeof(LAVAudioMixingLayout)'                                                          _config.AudioConfig.MixingLayout);                                              hr = asett.SetMixingLayout(aml);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug(                                                  "Set LAVAudio LfeMixingLevel: {0} CenterMixingLevel: {1} SurroundMixingLevel: {2}"'                                                  _config.AudioConfig.LfeMixingLevel'                                                  _config.AudioConfig.CenterMixingLevel'                                                  _config.AudioConfig.SurroundMixingLevel);                                              int lfe' center' surround;                                              //convert to the # that LAV Audio expects                                              lfe =                                                  (int)                                                      (_config.AudioConfig.LfeMixingLevel *                                                       10000.01);                                              center =                                                  (int)                                                      (_config.AudioConfig.CenterMixingLevel *                                                       10000.01);                                              surround =                                                  (int)                                                      (_config.AudioConfig                                                          .SurroundMixingLevel * 10000.01);                                                hr = asett.SetMixingLevels(center' surround' lfe);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                          {                                              LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                              bool isEnabled = asett.GetBitstreamConfig(codec);                                              _logger.Log(LogSeverity.Debug' "{0} bitstreaming: {1}"' codec' isEnabled);                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Audio filter"' ex);                              }                                _logger.Log(LogSeverity.Debug' "Connect Audio decoder to renderer");                              decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio' PinDirection.Input' 0);                              if (decIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Got Audio decoder input pin");                                  hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                  if (hr < 0) //LAV cannot handle this audio type                                  {                                      _logger.Warn("LAV Audio could not decode audio media type.");                                  }                                  else                                  {                                      //DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio'                                          PinDirection.Output' 0);                                  }                                    if (!string.IsNullOrWhiteSpace(_config.AudioConfig.AudioProcessor))                                  {                                      bool addProcessor = true;                                        if (_config.AudioConfig.BitstreamCodecs.Count > 0)                                      {                                          _logger.Log(LogSeverity.Debug' "Bit streaming is enabled' we need to decide whether to add processor");                                            ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                          if (audioStatus != null)                                          {                                              IntPtr codec = IntPtr.Zero;// Marshal.AllocCoTaskMem(100);                                              IntPtr format = IntPtr.Zero;                                              IntPtr outFormat = IntPtr.Zero;                                                int nChannels' sRate;                                              uint cMask;                                                hr = audioStatus.GetDecodeDetails(out codec' out format' out nChannels' out sRate' out cMask);                                              DsError.ThrowExceptionForHR(hr);                                                string sCodec' sFormat;//' sOutFormat;                                                sCodec = Marshal.PtrToStringAnsi(codec);                                              sFormat = Marshal.PtrToStringAnsi(format);                                                _logger.Log(LogSeverity.Debug' "input format: {0} - {1} - {2} - {3} - {4}"' sCodec' sFormat' nChannels' sRate' cMask);                                                //hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                              //DsError.ThrowExceptionForHR(hr);                                                //sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                //_logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                                if (_config.AudioConfig.BitstreamCodecs.Contains(sCodec.ToUpper()))                                              {                                                  _logger.Log(LogSeverity.Debug' "Bit streaming format found' do not add processor");                                                  addProcessor = false;                                              }                                          }                                      }                                        if (addProcessor)                                      {                                          _logger.Log(LogSeverity.Debug' "Add audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                          IBaseFilter audioProcessor = null;                                            if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?"))                                              audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor);                                          else                                              audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor);                                            if (audioProcessor != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Connect audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                CleanUpInterface(decIn);                                              decIn = DsFindPin.ByDirection(audioProcessor' PinDirection.Input' 0);                                              if (decIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' decIn' null);                                                  if (hr < 0)                                                  {                                                      _logger.Warn("couldn't connect to audio processor");                                                      hr = _filterGraph.RemoveFilter(audioProcessor);                                                      DsError.ThrowExceptionForHR(hr);                                                      CleanUpInterface(audioProcessor);                                                  }                                                  else                                                  {                                                      _logger.Log(LogSeverity.Debug' "Connected audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                      CleanUpInterface(decOut);                                                      decOut = DsFindPin.ByDirection(audioProcessor' PinDirection.Output' 0);                                                      CleanUpInterface(audioProcessor);                                                  }                                                }                                          }                                      }                                  }                                    rendIn = DsFindPin.ByDirection(AudioRenderer' PinDirection.Input' 0);                                    if (decOut != null && rendIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                      if (hr == -2004287474 && _wasapiAR != null) //AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED                                      {                                          IMPAudioRendererConfig arSett = _wasapiAR as IMPAudioRendererConfig;                                          if (arSett != null)                                          {                                              arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.SHARED);                                              _logger.Warn("WASAPI AR failed to connected in exclusive mode' check device properties");                                              hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          }                                      }                                      else if (hr == -2147220900) //audio format not supported                                      {                                          _logger.Warn("Couldn't connect to Audio Renderer' disable bit streaming and try again");                                          ILAVAudioSettings asett = _lavaudio as ILAVAudioSettings;                                          if (asett != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Disconnect Audio decoder from splitter");                                              hr = pins[0].Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                              hr = decIn.Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                                for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                              {                                                  LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                                  asett.SetBitstreamConfig(codec' false);                                                  _logger.Log(LogSeverity.Warn' "Disable {0} bitstreaming."' codec);                                                  bool isEnabled = asett.GetBitstreamConfig(codec);                                                  _logger.Log(LogSeverity.Warn' "{0} bitstreaming: {1}"' codec' isEnabled);                                              }                                                _logger.Log(LogSeverity.Debug' "Reconnect Audio decoder to splitter");                                              hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                              DsError.ThrowExceptionForHR(hr);                                                hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                              _logger.Log(LogSeverity.Warn' "Renderer reconnect result:{0}"' hr);                                          }                                      }                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                      if (audioStatus != null)                                      {                                          IntPtr outFormat = IntPtr.Zero;                                            int nChannels' sRate;                                          uint cMask;                                            hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                          //DsError.ThrowExceptionForHR(hr);                                          if (hr >= 0)                                          {                                              string sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                _logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                          }                                      }                                        needsRender = false;                                      break;                                  }                              }                              #endregion                          }                          else if (mediaTypes[m] == SubtitleMediaType                              /*DirectShowLib.MediaType.Subtitle*/)                          {                              #region subtitles                              _logger.Log(LogSeverity.Debug' "Connect subtitle filter");                                if (_xySubFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xySubFilter");                                  rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xySubFilter'                                      PinDirection.Input' 0);                              }                              else if (_xyVsFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xyVsFilter");                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Input");                              }                                if (rendIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Connect subtitle pin to subtitle renderer");                                    try                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                      DsError.ThrowExceptionForHR(hr);                                  }                                  catch (Exception ex)                                  {                                      _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                  }                                  needsRender = false;                                  break;                              }                              #endregion                          }                          else if (mediaTypes[m] == DvdSubpictureMediaType)                          {                              #region DVD Subpicture                              _logger.Log(LogSeverity.Debug' "Connect DVD Subpicture");                              if (_lavvideo != null)                              {                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_lavvideo' "Subtitle Input");                                  if (rendIn != null)                                  {                                      _logger.Log(LogSeverity.Debug' "Connect dvd subtitle pin to subtitle renderer");                                        try                                      {                                          hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                      }                                      catch (Exception ex)                                      {                                          _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                      }                                      needsRender = false;                                      break;                                  }                              }                              #endregion                          }                      }                      finally                      {                          CleanUpInterface(decIn);                          CleanUpInterface(decOut);                          CleanUpInterface(rendIn);                      }                  }                    if (needsRender)                  {                      if (_filterGraph.RenderEx(pins[0]' AMRenderExFlags.RenderToExistingRenderers' IntPtr.Zero) >= 0)                          pinsRendered++;                  }                  else                      pinsRendered++;                    Marshal.ReleaseComObject(pins[0]);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following statement contains a magic number: while (pEnum.Next(1' pins' IntPtr.Zero) == 0)              {                  //explicitly build graph to avoid unwanted filters worming their way in                  List<Guid> mediaTypes = GetPinMediaTypes(pins[0]);                  bool needsRender = true;                    for (int m = 0; m < mediaTypes.Count; m++)                  {                      DirectShowLib.IPin decIn = null;                      DirectShowLib.IPin decOut = null;                      DirectShowLib.IPin rendIn = null;                        _currentVideoRenderer = videoRenderer;                      var enableMadvr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                        try                      {                          if (mediaTypes[m] == DirectShowLib.MediaType.Video)                          {                              #region Video                                //add the video renderer first so we know whether to enable DXVA2 in "Auto" mode.                              if (enableMadvr)                              {                                  try                                  {                                      _madvr = URCOMLoader.Instance.GetObject(typeof(MadVR).GUID' true); // new MadVR();                                      var vmadvr = _madvr as DirectShowLib.IBaseFilter;                                      if (vmadvr != null)                                      {                                          hr = m_graph.AddFilter(vmadvr' "MadVR Video Renderer");                                          DsError.ThrowExceptionForHR(hr);                                            try                                          {                                              MadVRSettings msett = new MadVRSettings(_madvr);                                                MFNominalRange levels = (MFNominalRange)_config.VideoConfig.NominalRange;                                              string madVrLevelInitial = msett.GetString("levels");                                              switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }                                              string madVrLevel = msett.GetString("levels");                                                if (string.Compare(madVrLevel' madVrLevelInitial' false) != 0)                                                  _logger.Debug("Changed madVR levels from {0} to {1}"' madVrLevelInitial' madVrLevel);                                          }                                          catch (Exception ex)                                          {                                              _logger.ErrorException("Error configuring madVR"' ex);                                          }                                        }                                  }                                  catch (Exception ex)                                  {                                      _logger.ErrorException("Error adding MadVR filter"' ex);                                  }                              }                              else // Add default video renderer                              {                                  _mPEvr = (DirectShowLib.IBaseFilter)new EnhancedVideoRenderer();                                  hr = m_graph.AddFilter(_mPEvr' "EVR");                                  DsError.ThrowExceptionForHR(hr);                                    //we only need 2 input pins on the EVR if LAV Video isn't used for DVDs' but it doesn't hurt to have them                                  InitializeEvr(_mPEvr' _isDvd ? 2 : 1' videoRenderer);                              }                                try                              {                                  _lavvideo = URCOMLoader.Instance.GetObject(typeof(LAVVideo).GUID' true); //new LAVVideo();                                  var vlavvideo = _lavvideo as DirectShowLib.IBaseFilter;                                  if (vlavvideo != null)                                  {                                      hr = m_graph.AddFilter(vlavvideo' "LAV Video Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVVideoSettings vsett = vlavvideo as ILAVVideoSettings;                                      if (vsett != null)                                      {                                          //we only want to set it for MB                                          hr = vsett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Info("GPU Model: {0}"' VideoConfiguration.GpuModel);                                            LAVHWAccel configuredMode =                                              VideoConfigurationUtils.GetHwaMode(                                                  _config.VideoConfig'                                                  _customEvrPresenterLoaded);                                            LAVHWAccel testme = vsett.GetHWAccel();                                          _logger.Info("Current HWA Mode: {0} Desired Mode: {1}"' testme' configuredMode);                                          if (testme != configuredMode)                                          {                                              hr = vsett.SetHWAccel(configuredMode);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVVideoCodecs())                                          //{                                          //    LAVVideoCodec codec = (LAVVideoCodec)Enum.Parse(typeof(LAVVideoCodec)' c);                                            //    bool isEnabled = vsett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.VideoConfig.EnabledCodecs                                          //            .Contains(c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = vsett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = vsett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            foreach (string hwaCodec in DirectShowPlayer.GetLAVVideoHwaCodecs())                                          {                                              LAVVideoHWCodec codec = (LAVVideoHWCodec)Enum.Parse(typeof(LAVVideoHWCodec)' hwaCodec);                                              bool hwaIsEnabled = vsett.GetHWAccelCodec(codec);                                                if (                                                  _config.VideoConfig.HwEnabledCodecs                                                      .Contains(hwaCodec))                                              {                                                  if (!hwaIsEnabled)                                                  {                                                      _logger.Debug("Enable HWA support for: {0}"' hwaCodec);                                                      hr = vsett.SetHWAccelCodec(codec' true);                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                              }                                              else if (hwaIsEnabled)                                              {                                                  _logger.Debug("Disable HWA support for: {0}"' hwaCodec);                                                  hr = vsett.SetHWAccelCodec(codec' false);                                                  DsError.ThrowExceptionForHR(hr);                                              }                                          }                                            if (!vsett.GetDVDVideoSupport())                                          {                                              _logger.Debug("Enable DVD support.");                                              hr = vsett.SetDVDVideoSupport(true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            int hwaRes = vsett.GetHWAccelResolutionFlags();                                          if (hwaRes != _config.VideoConfig.HwaResolution                                              && _config.VideoConfig.HwaResolution > 0)                                          {                                              _logger.Debug("Change HWA resolution support from {0} to {1}."' hwaRes'                                                  _config.VideoConfig.HwaResolution);                                              hr =                                                  vsett.SetHWAccelResolutionFlags(                                                      VideoConfigurationUtils.GetHwaResolutions(                                                          _config.VideoConfig));                                              DsError.ThrowExceptionForHR(hr);                                          }                                            hr =                                              vsett.SetTrayIcon(                                                  _config.VideoConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            LAVSWDeintModes swDi = (LAVSWDeintModes)_config.VideoConfig.SW_DeintModes;                                            if (!isInterlaced)                                          {                                              swDi = LAVSWDeintModes.None;                                          }                                            LAVSWDeintModes testdi = vsett.GetSWDeintMode();                                          _logger.Info("Current SW DI Mode: {0} Desired Mode: {1}"' testdi' swDi);                                          if (testdi != swDi)                                          {                                              hr = vsett.SetSWDeintMode(swDi);                                              DsError.ThrowExceptionForHR(hr);                                          }                                      }                                  }                                    decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo' PinDirection.Input' 0);                                  if (decIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                      DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo'                                          PinDirection.Output' 0);                                        if (enableXySubFilter) //this flag indicates whether we should handle subtitle rendering                                      {                                          _logger.Debug("Enable XySubFilter.");                                          var xySubFilterSucceeded = false;                                            // Load xySubFilter if configured and if madvr succeeded                                          if (_madvr != null || _customEvrPresenterLoaded)                                          {                                              try                                              {                                                  _xySubFilter = URCOMLoader.Instance.GetObject(typeof(XySubFilter).GUID' true); //new XySubFilter();                                                  var vxySubFilter = _xySubFilter as DirectShowLib.IBaseFilter;                                                  if (vxySubFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxySubFilter' "xy-SubFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                                    xySubFilterSucceeded = true;                                                    _logger.Debug("Enable XySubFilter : {0}."' xySubFilterSucceeded);                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-SubFilter filter"' ex);                                              }                                          }                                            // Fallback to xyVsFilter                                          if (!xySubFilterSucceeded)                                          {                                              _logger.Debug("Fallback xyVsFilter.");                                              try                                              {                                                  _xyVsFilter = URCOMLoader.Instance.GetObject(typeof(XYVSFilter).GUID' true); //new XYVSFilter();                                                  var vxyVsFilter = _xyVsFilter as DirectShowLib.IBaseFilter;                                                  if (vxyVsFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxyVsFilter' "xy-VSFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                        _logger.Debug("Added xy-VSFilter");                                                  }                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-VSFilter filter"' ex);                                              }                                          }                                            if (_xyVsFilter != null) //If using VSFilter                                          {                                              _logger.Debug("insert xyVsFilter b/w LAV Video and the renderer");                                              //insert xyVsFilter b/w LAV Video and the renderer                                              rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Video");                                                //connect it to VSFilter                                              if (decOut != null && rendIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                                  DsError.ThrowExceptionForHR(hr);                                                    CleanUpInterface(rendIn);                                                  CleanUpInterface(decOut);                                                  rendIn = null;                                                  decOut = null;                                              }                                                //grab xyVsFilter's output pin so it can be connected to the renderer                                              decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xyVsFilter'                                                      PinDirection.Output' 0);                                          }                                      }                                        if (_madvr != null)                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_madvr'                                              PinDirection.Input' 0);                                      }                                      else                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_mPEvr'                                              PinDirection.Input' 0);                                      }                                        if (decOut != null && rendIn != null)                                      {                                          hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                            needsRender = false;                                          break;                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Video filter"' ex);                              }                                #endregion                          }                          else if (mediaTypes[m] == DirectShowLib.MediaType.Audio)                          {                              #region Audio                              //we have an audio pin so add a renderer and decoder                              switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }                                if (useDefaultAudioRenderer)                              {                                  AddDefaultAudioRenderer();                              }                                try                              {                                  _lavaudio = URCOMLoader.Instance.GetObject(typeof(LAVAudio).GUID' true); // new LAVAudio();                                  var vlavaudio = _lavaudio as DirectShowLib.IBaseFilter;                                  if (vlavaudio != null)                                  {                                      _logger.Debug("Add LAVAudio to the graph.");                                        hr = m_graph.AddFilter(vlavaudio' "LAV Audio Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioSettings asett = vlavaudio as ILAVAudioSettings;                                      if (asett != null)                                      {                                          _logger.Debug("Enable LAVAudio Runtime Config");                                            //we only want to set it for MB                                          hr = asett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVAudioCodecs())                                          //{                                          //    LAVAudioCodec codec = (LAVAudioCodec)Enum.Parse(typeof(LAVAudioCodec)' c);                                            //    bool isEnabled = asett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.AudioConfig.EnabledCodecs.Contains(                                          //            c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = asett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = asett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            //enable/disable bitstreaming                                          _logger.Debug("Enable LAVAudio S/PDIF bitstreaming");                                            if (_config.AudioConfig.BitstreamCodecs.Contains("AC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.AC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTS' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.BitstreamCodecs.Contains("EAC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.EAC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("TRUEHD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.TRUEHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS-HD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTSHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.Delay > 0)                                          {                                              _logger.Debug("Set LAVAudio audio delay: {0}"'                                                  _config.AudioConfig.Delay);                                                hr = asett.SetAudioDelay(true'                                                  _config.AudioConfig.Delay);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            _logger.Debug("Set LAVAudio auto AV Sync: {0}"'                                              _config.AudioConfig.EnableAutoSync);                                          hr =                                              asett.SetAutoAVSync(                                                  _config.AudioConfig.EnableAutoSync);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio Expand61: {0}"'                                              _config.AudioConfig.Expand61);                                          hr = asett.SetExpand61(_config.AudioConfig.Expand61);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ExpandMono: {0}"'                                              _config.AudioConfig.ExpandMono);                                          hr =                                              asett.SetExpandMono(                                                  _config.AudioConfig.ExpandMono);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ConvertToStandardLayout: {0}"'                                              _config.AudioConfig.ConvertToStandardLayout);                                          hr =                                              asett.SetOutputStandardLayout(                                                  _config.AudioConfig.ConvertToStandardLayout);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio EnableDRC: {0}"'                                              _config.AudioConfig.EnableDRC);                                          hr = asett.SetDRC(_config.AudioConfig.EnableDRC'                                              _config.AudioConfig.DRCLevel);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio ShowTrayIcon: {0}"'                                              _config.AudioConfig.ShowTrayIcon);                                          hr =                                              asett.SetTrayIcon(                                                  _config.AudioConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            bool mixingEnabled = asett.GetMixingEnabled();                                          if (mixingEnabled !=                                              _config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio EnablePCMMixing: {0}"'                                                  _config.AudioConfig.EnablePCMMixing);                                              hr = asett.SetMixingEnabled(!mixingEnabled);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio MixingSetting: {0}"'                                                  _config.AudioConfig.MixingSetting);                                              LAVAudioMixingFlag amf =                                                  (LAVAudioMixingFlag)                                                      _config.AudioConfig.MixingSetting;                                              hr = asett.SetMixingFlags(amf);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingEncoding: {0}"'                                                  _config.AudioConfig.MixingEncoding);                                              LAVAudioMixingMode amm =                                                  (LAVAudioMixingMode)                                                      Enum.Parse(typeof(LAVAudioMixingMode)'                                                          _config.AudioConfig.MixingEncoding);                                              hr = asett.SetMixingMode(amm);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingLayout: {0}"'                                                  _config.AudioConfig.MixingLayout);                                              LAVAudioMixingLayout aml =                                                  (LAVAudioMixingLayout)                                                      Enum.Parse(typeof(LAVAudioMixingLayout)'                                                          _config.AudioConfig.MixingLayout);                                              hr = asett.SetMixingLayout(aml);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug(                                                  "Set LAVAudio LfeMixingLevel: {0} CenterMixingLevel: {1} SurroundMixingLevel: {2}"'                                                  _config.AudioConfig.LfeMixingLevel'                                                  _config.AudioConfig.CenterMixingLevel'                                                  _config.AudioConfig.SurroundMixingLevel);                                              int lfe' center' surround;                                              //convert to the # that LAV Audio expects                                              lfe =                                                  (int)                                                      (_config.AudioConfig.LfeMixingLevel *                                                       10000.01);                                              center =                                                  (int)                                                      (_config.AudioConfig.CenterMixingLevel *                                                       10000.01);                                              surround =                                                  (int)                                                      (_config.AudioConfig                                                          .SurroundMixingLevel * 10000.01);                                                hr = asett.SetMixingLevels(center' surround' lfe);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                          {                                              LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                              bool isEnabled = asett.GetBitstreamConfig(codec);                                              _logger.Log(LogSeverity.Debug' "{0} bitstreaming: {1}"' codec' isEnabled);                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Audio filter"' ex);                              }                                _logger.Log(LogSeverity.Debug' "Connect Audio decoder to renderer");                              decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio' PinDirection.Input' 0);                              if (decIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Got Audio decoder input pin");                                  hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                  if (hr < 0) //LAV cannot handle this audio type                                  {                                      _logger.Warn("LAV Audio could not decode audio media type.");                                  }                                  else                                  {                                      //DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio'                                          PinDirection.Output' 0);                                  }                                    if (!string.IsNullOrWhiteSpace(_config.AudioConfig.AudioProcessor))                                  {                                      bool addProcessor = true;                                        if (_config.AudioConfig.BitstreamCodecs.Count > 0)                                      {                                          _logger.Log(LogSeverity.Debug' "Bit streaming is enabled' we need to decide whether to add processor");                                            ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                          if (audioStatus != null)                                          {                                              IntPtr codec = IntPtr.Zero;// Marshal.AllocCoTaskMem(100);                                              IntPtr format = IntPtr.Zero;                                              IntPtr outFormat = IntPtr.Zero;                                                int nChannels' sRate;                                              uint cMask;                                                hr = audioStatus.GetDecodeDetails(out codec' out format' out nChannels' out sRate' out cMask);                                              DsError.ThrowExceptionForHR(hr);                                                string sCodec' sFormat;//' sOutFormat;                                                sCodec = Marshal.PtrToStringAnsi(codec);                                              sFormat = Marshal.PtrToStringAnsi(format);                                                _logger.Log(LogSeverity.Debug' "input format: {0} - {1} - {2} - {3} - {4}"' sCodec' sFormat' nChannels' sRate' cMask);                                                //hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                              //DsError.ThrowExceptionForHR(hr);                                                //sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                //_logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                                if (_config.AudioConfig.BitstreamCodecs.Contains(sCodec.ToUpper()))                                              {                                                  _logger.Log(LogSeverity.Debug' "Bit streaming format found' do not add processor");                                                  addProcessor = false;                                              }                                          }                                      }                                        if (addProcessor)                                      {                                          _logger.Log(LogSeverity.Debug' "Add audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                          IBaseFilter audioProcessor = null;                                            if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?"))                                              audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor);                                          else                                              audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor);                                            if (audioProcessor != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Connect audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                CleanUpInterface(decIn);                                              decIn = DsFindPin.ByDirection(audioProcessor' PinDirection.Input' 0);                                              if (decIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' decIn' null);                                                  if (hr < 0)                                                  {                                                      _logger.Warn("couldn't connect to audio processor");                                                      hr = _filterGraph.RemoveFilter(audioProcessor);                                                      DsError.ThrowExceptionForHR(hr);                                                      CleanUpInterface(audioProcessor);                                                  }                                                  else                                                  {                                                      _logger.Log(LogSeverity.Debug' "Connected audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                      CleanUpInterface(decOut);                                                      decOut = DsFindPin.ByDirection(audioProcessor' PinDirection.Output' 0);                                                      CleanUpInterface(audioProcessor);                                                  }                                                }                                          }                                      }                                  }                                    rendIn = DsFindPin.ByDirection(AudioRenderer' PinDirection.Input' 0);                                    if (decOut != null && rendIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                      if (hr == -2004287474 && _wasapiAR != null) //AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED                                      {                                          IMPAudioRendererConfig arSett = _wasapiAR as IMPAudioRendererConfig;                                          if (arSett != null)                                          {                                              arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.SHARED);                                              _logger.Warn("WASAPI AR failed to connected in exclusive mode' check device properties");                                              hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          }                                      }                                      else if (hr == -2147220900) //audio format not supported                                      {                                          _logger.Warn("Couldn't connect to Audio Renderer' disable bit streaming and try again");                                          ILAVAudioSettings asett = _lavaudio as ILAVAudioSettings;                                          if (asett != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Disconnect Audio decoder from splitter");                                              hr = pins[0].Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                              hr = decIn.Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                                for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                              {                                                  LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                                  asett.SetBitstreamConfig(codec' false);                                                  _logger.Log(LogSeverity.Warn' "Disable {0} bitstreaming."' codec);                                                  bool isEnabled = asett.GetBitstreamConfig(codec);                                                  _logger.Log(LogSeverity.Warn' "{0} bitstreaming: {1}"' codec' isEnabled);                                              }                                                _logger.Log(LogSeverity.Debug' "Reconnect Audio decoder to splitter");                                              hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                              DsError.ThrowExceptionForHR(hr);                                                hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                              _logger.Log(LogSeverity.Warn' "Renderer reconnect result:{0}"' hr);                                          }                                      }                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                      if (audioStatus != null)                                      {                                          IntPtr outFormat = IntPtr.Zero;                                            int nChannels' sRate;                                          uint cMask;                                            hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                          //DsError.ThrowExceptionForHR(hr);                                          if (hr >= 0)                                          {                                              string sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                _logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                          }                                      }                                        needsRender = false;                                      break;                                  }                              }                              #endregion                          }                          else if (mediaTypes[m] == SubtitleMediaType                              /*DirectShowLib.MediaType.Subtitle*/)                          {                              #region subtitles                              _logger.Log(LogSeverity.Debug' "Connect subtitle filter");                                if (_xySubFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xySubFilter");                                  rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xySubFilter'                                      PinDirection.Input' 0);                              }                              else if (_xyVsFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xyVsFilter");                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Input");                              }                                if (rendIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Connect subtitle pin to subtitle renderer");                                    try                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                      DsError.ThrowExceptionForHR(hr);                                  }                                  catch (Exception ex)                                  {                                      _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                  }                                  needsRender = false;                                  break;                              }                              #endregion                          }                          else if (mediaTypes[m] == DvdSubpictureMediaType)                          {                              #region DVD Subpicture                              _logger.Log(LogSeverity.Debug' "Connect DVD Subpicture");                              if (_lavvideo != null)                              {                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_lavvideo' "Subtitle Input");                                  if (rendIn != null)                                  {                                      _logger.Log(LogSeverity.Debug' "Connect dvd subtitle pin to subtitle renderer");                                        try                                      {                                          hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                      }                                      catch (Exception ex)                                      {                                          _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                      }                                      needsRender = false;                                      break;                                  }                              }                              #endregion                          }                      }                      finally                      {                          CleanUpInterface(decIn);                          CleanUpInterface(decOut);                          CleanUpInterface(rendIn);                      }                  }                    if (needsRender)                  {                      if (_filterGraph.RenderEx(pins[0]' AMRenderExFlags.RenderToExistingRenderers' IntPtr.Zero) >= 0)                          pinsRendered++;                  }                  else                      pinsRendered++;                    Marshal.ReleaseComObject(pins[0]);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following statement contains a magic number: while (pEnum.Next(1' pins' IntPtr.Zero) == 0)              {                  //explicitly build graph to avoid unwanted filters worming their way in                  List<Guid> mediaTypes = GetPinMediaTypes(pins[0]);                  bool needsRender = true;                    for (int m = 0; m < mediaTypes.Count; m++)                  {                      DirectShowLib.IPin decIn = null;                      DirectShowLib.IPin decOut = null;                      DirectShowLib.IPin rendIn = null;                        _currentVideoRenderer = videoRenderer;                      var enableMadvr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                        try                      {                          if (mediaTypes[m] == DirectShowLib.MediaType.Video)                          {                              #region Video                                //add the video renderer first so we know whether to enable DXVA2 in "Auto" mode.                              if (enableMadvr)                              {                                  try                                  {                                      _madvr = URCOMLoader.Instance.GetObject(typeof(MadVR).GUID' true); // new MadVR();                                      var vmadvr = _madvr as DirectShowLib.IBaseFilter;                                      if (vmadvr != null)                                      {                                          hr = m_graph.AddFilter(vmadvr' "MadVR Video Renderer");                                          DsError.ThrowExceptionForHR(hr);                                            try                                          {                                              MadVRSettings msett = new MadVRSettings(_madvr);                                                MFNominalRange levels = (MFNominalRange)_config.VideoConfig.NominalRange;                                              string madVrLevelInitial = msett.GetString("levels");                                              switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }                                              string madVrLevel = msett.GetString("levels");                                                if (string.Compare(madVrLevel' madVrLevelInitial' false) != 0)                                                  _logger.Debug("Changed madVR levels from {0} to {1}"' madVrLevelInitial' madVrLevel);                                          }                                          catch (Exception ex)                                          {                                              _logger.ErrorException("Error configuring madVR"' ex);                                          }                                        }                                  }                                  catch (Exception ex)                                  {                                      _logger.ErrorException("Error adding MadVR filter"' ex);                                  }                              }                              else // Add default video renderer                              {                                  _mPEvr = (DirectShowLib.IBaseFilter)new EnhancedVideoRenderer();                                  hr = m_graph.AddFilter(_mPEvr' "EVR");                                  DsError.ThrowExceptionForHR(hr);                                    //we only need 2 input pins on the EVR if LAV Video isn't used for DVDs' but it doesn't hurt to have them                                  InitializeEvr(_mPEvr' _isDvd ? 2 : 1' videoRenderer);                              }                                try                              {                                  _lavvideo = URCOMLoader.Instance.GetObject(typeof(LAVVideo).GUID' true); //new LAVVideo();                                  var vlavvideo = _lavvideo as DirectShowLib.IBaseFilter;                                  if (vlavvideo != null)                                  {                                      hr = m_graph.AddFilter(vlavvideo' "LAV Video Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVVideoSettings vsett = vlavvideo as ILAVVideoSettings;                                      if (vsett != null)                                      {                                          //we only want to set it for MB                                          hr = vsett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Info("GPU Model: {0}"' VideoConfiguration.GpuModel);                                            LAVHWAccel configuredMode =                                              VideoConfigurationUtils.GetHwaMode(                                                  _config.VideoConfig'                                                  _customEvrPresenterLoaded);                                            LAVHWAccel testme = vsett.GetHWAccel();                                          _logger.Info("Current HWA Mode: {0} Desired Mode: {1}"' testme' configuredMode);                                          if (testme != configuredMode)                                          {                                              hr = vsett.SetHWAccel(configuredMode);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVVideoCodecs())                                          //{                                          //    LAVVideoCodec codec = (LAVVideoCodec)Enum.Parse(typeof(LAVVideoCodec)' c);                                            //    bool isEnabled = vsett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.VideoConfig.EnabledCodecs                                          //            .Contains(c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = vsett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = vsett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            foreach (string hwaCodec in DirectShowPlayer.GetLAVVideoHwaCodecs())                                          {                                              LAVVideoHWCodec codec = (LAVVideoHWCodec)Enum.Parse(typeof(LAVVideoHWCodec)' hwaCodec);                                              bool hwaIsEnabled = vsett.GetHWAccelCodec(codec);                                                if (                                                  _config.VideoConfig.HwEnabledCodecs                                                      .Contains(hwaCodec))                                              {                                                  if (!hwaIsEnabled)                                                  {                                                      _logger.Debug("Enable HWA support for: {0}"' hwaCodec);                                                      hr = vsett.SetHWAccelCodec(codec' true);                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                              }                                              else if (hwaIsEnabled)                                              {                                                  _logger.Debug("Disable HWA support for: {0}"' hwaCodec);                                                  hr = vsett.SetHWAccelCodec(codec' false);                                                  DsError.ThrowExceptionForHR(hr);                                              }                                          }                                            if (!vsett.GetDVDVideoSupport())                                          {                                              _logger.Debug("Enable DVD support.");                                              hr = vsett.SetDVDVideoSupport(true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            int hwaRes = vsett.GetHWAccelResolutionFlags();                                          if (hwaRes != _config.VideoConfig.HwaResolution                                              && _config.VideoConfig.HwaResolution > 0)                                          {                                              _logger.Debug("Change HWA resolution support from {0} to {1}."' hwaRes'                                                  _config.VideoConfig.HwaResolution);                                              hr =                                                  vsett.SetHWAccelResolutionFlags(                                                      VideoConfigurationUtils.GetHwaResolutions(                                                          _config.VideoConfig));                                              DsError.ThrowExceptionForHR(hr);                                          }                                            hr =                                              vsett.SetTrayIcon(                                                  _config.VideoConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            LAVSWDeintModes swDi = (LAVSWDeintModes)_config.VideoConfig.SW_DeintModes;                                            if (!isInterlaced)                                          {                                              swDi = LAVSWDeintModes.None;                                          }                                            LAVSWDeintModes testdi = vsett.GetSWDeintMode();                                          _logger.Info("Current SW DI Mode: {0} Desired Mode: {1}"' testdi' swDi);                                          if (testdi != swDi)                                          {                                              hr = vsett.SetSWDeintMode(swDi);                                              DsError.ThrowExceptionForHR(hr);                                          }                                      }                                  }                                    decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo' PinDirection.Input' 0);                                  if (decIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                      DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo'                                          PinDirection.Output' 0);                                        if (enableXySubFilter) //this flag indicates whether we should handle subtitle rendering                                      {                                          _logger.Debug("Enable XySubFilter.");                                          var xySubFilterSucceeded = false;                                            // Load xySubFilter if configured and if madvr succeeded                                          if (_madvr != null || _customEvrPresenterLoaded)                                          {                                              try                                              {                                                  _xySubFilter = URCOMLoader.Instance.GetObject(typeof(XySubFilter).GUID' true); //new XySubFilter();                                                  var vxySubFilter = _xySubFilter as DirectShowLib.IBaseFilter;                                                  if (vxySubFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxySubFilter' "xy-SubFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                                    xySubFilterSucceeded = true;                                                    _logger.Debug("Enable XySubFilter : {0}."' xySubFilterSucceeded);                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-SubFilter filter"' ex);                                              }                                          }                                            // Fallback to xyVsFilter                                          if (!xySubFilterSucceeded)                                          {                                              _logger.Debug("Fallback xyVsFilter.");                                              try                                              {                                                  _xyVsFilter = URCOMLoader.Instance.GetObject(typeof(XYVSFilter).GUID' true); //new XYVSFilter();                                                  var vxyVsFilter = _xyVsFilter as DirectShowLib.IBaseFilter;                                                  if (vxyVsFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxyVsFilter' "xy-VSFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                        _logger.Debug("Added xy-VSFilter");                                                  }                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-VSFilter filter"' ex);                                              }                                          }                                            if (_xyVsFilter != null) //If using VSFilter                                          {                                              _logger.Debug("insert xyVsFilter b/w LAV Video and the renderer");                                              //insert xyVsFilter b/w LAV Video and the renderer                                              rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Video");                                                //connect it to VSFilter                                              if (decOut != null && rendIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                                  DsError.ThrowExceptionForHR(hr);                                                    CleanUpInterface(rendIn);                                                  CleanUpInterface(decOut);                                                  rendIn = null;                                                  decOut = null;                                              }                                                //grab xyVsFilter's output pin so it can be connected to the renderer                                              decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xyVsFilter'                                                      PinDirection.Output' 0);                                          }                                      }                                        if (_madvr != null)                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_madvr'                                              PinDirection.Input' 0);                                      }                                      else                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_mPEvr'                                              PinDirection.Input' 0);                                      }                                        if (decOut != null && rendIn != null)                                      {                                          hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                            needsRender = false;                                          break;                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Video filter"' ex);                              }                                #endregion                          }                          else if (mediaTypes[m] == DirectShowLib.MediaType.Audio)                          {                              #region Audio                              //we have an audio pin so add a renderer and decoder                              switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }                                if (useDefaultAudioRenderer)                              {                                  AddDefaultAudioRenderer();                              }                                try                              {                                  _lavaudio = URCOMLoader.Instance.GetObject(typeof(LAVAudio).GUID' true); // new LAVAudio();                                  var vlavaudio = _lavaudio as DirectShowLib.IBaseFilter;                                  if (vlavaudio != null)                                  {                                      _logger.Debug("Add LAVAudio to the graph.");                                        hr = m_graph.AddFilter(vlavaudio' "LAV Audio Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioSettings asett = vlavaudio as ILAVAudioSettings;                                      if (asett != null)                                      {                                          _logger.Debug("Enable LAVAudio Runtime Config");                                            //we only want to set it for MB                                          hr = asett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVAudioCodecs())                                          //{                                          //    LAVAudioCodec codec = (LAVAudioCodec)Enum.Parse(typeof(LAVAudioCodec)' c);                                            //    bool isEnabled = asett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.AudioConfig.EnabledCodecs.Contains(                                          //            c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = asett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = asett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            //enable/disable bitstreaming                                          _logger.Debug("Enable LAVAudio S/PDIF bitstreaming");                                            if (_config.AudioConfig.BitstreamCodecs.Contains("AC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.AC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTS' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.BitstreamCodecs.Contains("EAC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.EAC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("TRUEHD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.TRUEHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS-HD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTSHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.Delay > 0)                                          {                                              _logger.Debug("Set LAVAudio audio delay: {0}"'                                                  _config.AudioConfig.Delay);                                                hr = asett.SetAudioDelay(true'                                                  _config.AudioConfig.Delay);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            _logger.Debug("Set LAVAudio auto AV Sync: {0}"'                                              _config.AudioConfig.EnableAutoSync);                                          hr =                                              asett.SetAutoAVSync(                                                  _config.AudioConfig.EnableAutoSync);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio Expand61: {0}"'                                              _config.AudioConfig.Expand61);                                          hr = asett.SetExpand61(_config.AudioConfig.Expand61);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ExpandMono: {0}"'                                              _config.AudioConfig.ExpandMono);                                          hr =                                              asett.SetExpandMono(                                                  _config.AudioConfig.ExpandMono);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ConvertToStandardLayout: {0}"'                                              _config.AudioConfig.ConvertToStandardLayout);                                          hr =                                              asett.SetOutputStandardLayout(                                                  _config.AudioConfig.ConvertToStandardLayout);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio EnableDRC: {0}"'                                              _config.AudioConfig.EnableDRC);                                          hr = asett.SetDRC(_config.AudioConfig.EnableDRC'                                              _config.AudioConfig.DRCLevel);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio ShowTrayIcon: {0}"'                                              _config.AudioConfig.ShowTrayIcon);                                          hr =                                              asett.SetTrayIcon(                                                  _config.AudioConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            bool mixingEnabled = asett.GetMixingEnabled();                                          if (mixingEnabled !=                                              _config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio EnablePCMMixing: {0}"'                                                  _config.AudioConfig.EnablePCMMixing);                                              hr = asett.SetMixingEnabled(!mixingEnabled);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio MixingSetting: {0}"'                                                  _config.AudioConfig.MixingSetting);                                              LAVAudioMixingFlag amf =                                                  (LAVAudioMixingFlag)                                                      _config.AudioConfig.MixingSetting;                                              hr = asett.SetMixingFlags(amf);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingEncoding: {0}"'                                                  _config.AudioConfig.MixingEncoding);                                              LAVAudioMixingMode amm =                                                  (LAVAudioMixingMode)                                                      Enum.Parse(typeof(LAVAudioMixingMode)'                                                          _config.AudioConfig.MixingEncoding);                                              hr = asett.SetMixingMode(amm);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingLayout: {0}"'                                                  _config.AudioConfig.MixingLayout);                                              LAVAudioMixingLayout aml =                                                  (LAVAudioMixingLayout)                                                      Enum.Parse(typeof(LAVAudioMixingLayout)'                                                          _config.AudioConfig.MixingLayout);                                              hr = asett.SetMixingLayout(aml);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug(                                                  "Set LAVAudio LfeMixingLevel: {0} CenterMixingLevel: {1} SurroundMixingLevel: {2}"'                                                  _config.AudioConfig.LfeMixingLevel'                                                  _config.AudioConfig.CenterMixingLevel'                                                  _config.AudioConfig.SurroundMixingLevel);                                              int lfe' center' surround;                                              //convert to the # that LAV Audio expects                                              lfe =                                                  (int)                                                      (_config.AudioConfig.LfeMixingLevel *                                                       10000.01);                                              center =                                                  (int)                                                      (_config.AudioConfig.CenterMixingLevel *                                                       10000.01);                                              surround =                                                  (int)                                                      (_config.AudioConfig                                                          .SurroundMixingLevel * 10000.01);                                                hr = asett.SetMixingLevels(center' surround' lfe);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                          {                                              LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                              bool isEnabled = asett.GetBitstreamConfig(codec);                                              _logger.Log(LogSeverity.Debug' "{0} bitstreaming: {1}"' codec' isEnabled);                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Audio filter"' ex);                              }                                _logger.Log(LogSeverity.Debug' "Connect Audio decoder to renderer");                              decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio' PinDirection.Input' 0);                              if (decIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Got Audio decoder input pin");                                  hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                  if (hr < 0) //LAV cannot handle this audio type                                  {                                      _logger.Warn("LAV Audio could not decode audio media type.");                                  }                                  else                                  {                                      //DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio'                                          PinDirection.Output' 0);                                  }                                    if (!string.IsNullOrWhiteSpace(_config.AudioConfig.AudioProcessor))                                  {                                      bool addProcessor = true;                                        if (_config.AudioConfig.BitstreamCodecs.Count > 0)                                      {                                          _logger.Log(LogSeverity.Debug' "Bit streaming is enabled' we need to decide whether to add processor");                                            ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                          if (audioStatus != null)                                          {                                              IntPtr codec = IntPtr.Zero;// Marshal.AllocCoTaskMem(100);                                              IntPtr format = IntPtr.Zero;                                              IntPtr outFormat = IntPtr.Zero;                                                int nChannels' sRate;                                              uint cMask;                                                hr = audioStatus.GetDecodeDetails(out codec' out format' out nChannels' out sRate' out cMask);                                              DsError.ThrowExceptionForHR(hr);                                                string sCodec' sFormat;//' sOutFormat;                                                sCodec = Marshal.PtrToStringAnsi(codec);                                              sFormat = Marshal.PtrToStringAnsi(format);                                                _logger.Log(LogSeverity.Debug' "input format: {0} - {1} - {2} - {3} - {4}"' sCodec' sFormat' nChannels' sRate' cMask);                                                //hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                              //DsError.ThrowExceptionForHR(hr);                                                //sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                //_logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                                if (_config.AudioConfig.BitstreamCodecs.Contains(sCodec.ToUpper()))                                              {                                                  _logger.Log(LogSeverity.Debug' "Bit streaming format found' do not add processor");                                                  addProcessor = false;                                              }                                          }                                      }                                        if (addProcessor)                                      {                                          _logger.Log(LogSeverity.Debug' "Add audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                          IBaseFilter audioProcessor = null;                                            if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?"))                                              audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor);                                          else                                              audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor);                                            if (audioProcessor != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Connect audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                CleanUpInterface(decIn);                                              decIn = DsFindPin.ByDirection(audioProcessor' PinDirection.Input' 0);                                              if (decIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' decIn' null);                                                  if (hr < 0)                                                  {                                                      _logger.Warn("couldn't connect to audio processor");                                                      hr = _filterGraph.RemoveFilter(audioProcessor);                                                      DsError.ThrowExceptionForHR(hr);                                                      CleanUpInterface(audioProcessor);                                                  }                                                  else                                                  {                                                      _logger.Log(LogSeverity.Debug' "Connected audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                      CleanUpInterface(decOut);                                                      decOut = DsFindPin.ByDirection(audioProcessor' PinDirection.Output' 0);                                                      CleanUpInterface(audioProcessor);                                                  }                                                }                                          }                                      }                                  }                                    rendIn = DsFindPin.ByDirection(AudioRenderer' PinDirection.Input' 0);                                    if (decOut != null && rendIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                      if (hr == -2004287474 && _wasapiAR != null) //AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED                                      {                                          IMPAudioRendererConfig arSett = _wasapiAR as IMPAudioRendererConfig;                                          if (arSett != null)                                          {                                              arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.SHARED);                                              _logger.Warn("WASAPI AR failed to connected in exclusive mode' check device properties");                                              hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          }                                      }                                      else if (hr == -2147220900) //audio format not supported                                      {                                          _logger.Warn("Couldn't connect to Audio Renderer' disable bit streaming and try again");                                          ILAVAudioSettings asett = _lavaudio as ILAVAudioSettings;                                          if (asett != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Disconnect Audio decoder from splitter");                                              hr = pins[0].Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                              hr = decIn.Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                                for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                              {                                                  LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                                  asett.SetBitstreamConfig(codec' false);                                                  _logger.Log(LogSeverity.Warn' "Disable {0} bitstreaming."' codec);                                                  bool isEnabled = asett.GetBitstreamConfig(codec);                                                  _logger.Log(LogSeverity.Warn' "{0} bitstreaming: {1}"' codec' isEnabled);                                              }                                                _logger.Log(LogSeverity.Debug' "Reconnect Audio decoder to splitter");                                              hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                              DsError.ThrowExceptionForHR(hr);                                                hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                              _logger.Log(LogSeverity.Warn' "Renderer reconnect result:{0}"' hr);                                          }                                      }                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                      if (audioStatus != null)                                      {                                          IntPtr outFormat = IntPtr.Zero;                                            int nChannels' sRate;                                          uint cMask;                                            hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                          //DsError.ThrowExceptionForHR(hr);                                          if (hr >= 0)                                          {                                              string sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                _logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                          }                                      }                                        needsRender = false;                                      break;                                  }                              }                              #endregion                          }                          else if (mediaTypes[m] == SubtitleMediaType                              /*DirectShowLib.MediaType.Subtitle*/)                          {                              #region subtitles                              _logger.Log(LogSeverity.Debug' "Connect subtitle filter");                                if (_xySubFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xySubFilter");                                  rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xySubFilter'                                      PinDirection.Input' 0);                              }                              else if (_xyVsFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xyVsFilter");                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Input");                              }                                if (rendIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Connect subtitle pin to subtitle renderer");                                    try                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                      DsError.ThrowExceptionForHR(hr);                                  }                                  catch (Exception ex)                                  {                                      _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                  }                                  needsRender = false;                                  break;                              }                              #endregion                          }                          else if (mediaTypes[m] == DvdSubpictureMediaType)                          {                              #region DVD Subpicture                              _logger.Log(LogSeverity.Debug' "Connect DVD Subpicture");                              if (_lavvideo != null)                              {                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_lavvideo' "Subtitle Input");                                  if (rendIn != null)                                  {                                      _logger.Log(LogSeverity.Debug' "Connect dvd subtitle pin to subtitle renderer");                                        try                                      {                                          hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                      }                                      catch (Exception ex)                                      {                                          _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                      }                                      needsRender = false;                                      break;                                  }                              }                              #endregion                          }                      }                      finally                      {                          CleanUpInterface(decIn);                          CleanUpInterface(decOut);                          CleanUpInterface(rendIn);                      }                  }                    if (needsRender)                  {                      if (_filterGraph.RenderEx(pins[0]' AMRenderExFlags.RenderToExistingRenderers' IntPtr.Zero) >= 0)                          pinsRendered++;                  }                  else                      pinsRendered++;                    Marshal.ReleaseComObject(pins[0]);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following statement contains a magic number: while (pEnum.Next(1' pins' IntPtr.Zero) == 0)              {                  //explicitly build graph to avoid unwanted filters worming their way in                  List<Guid> mediaTypes = GetPinMediaTypes(pins[0]);                  bool needsRender = true;                    for (int m = 0; m < mediaTypes.Count; m++)                  {                      DirectShowLib.IPin decIn = null;                      DirectShowLib.IPin decOut = null;                      DirectShowLib.IPin rendIn = null;                        _currentVideoRenderer = videoRenderer;                      var enableMadvr = string.Equals(videoRenderer' "madvr"' StringComparison.OrdinalIgnoreCase);                        try                      {                          if (mediaTypes[m] == DirectShowLib.MediaType.Video)                          {                              #region Video                                //add the video renderer first so we know whether to enable DXVA2 in "Auto" mode.                              if (enableMadvr)                              {                                  try                                  {                                      _madvr = URCOMLoader.Instance.GetObject(typeof(MadVR).GUID' true); // new MadVR();                                      var vmadvr = _madvr as DirectShowLib.IBaseFilter;                                      if (vmadvr != null)                                      {                                          hr = m_graph.AddFilter(vmadvr' "MadVR Video Renderer");                                          DsError.ThrowExceptionForHR(hr);                                            try                                          {                                              MadVRSettings msett = new MadVRSettings(_madvr);                                                MFNominalRange levels = (MFNominalRange)_config.VideoConfig.NominalRange;                                              string madVrLevelInitial = msett.GetString("levels");                                              switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }                                              string madVrLevel = msett.GetString("levels");                                                if (string.Compare(madVrLevel' madVrLevelInitial' false) != 0)                                                  _logger.Debug("Changed madVR levels from {0} to {1}"' madVrLevelInitial' madVrLevel);                                          }                                          catch (Exception ex)                                          {                                              _logger.ErrorException("Error configuring madVR"' ex);                                          }                                        }                                  }                                  catch (Exception ex)                                  {                                      _logger.ErrorException("Error adding MadVR filter"' ex);                                  }                              }                              else // Add default video renderer                              {                                  _mPEvr = (DirectShowLib.IBaseFilter)new EnhancedVideoRenderer();                                  hr = m_graph.AddFilter(_mPEvr' "EVR");                                  DsError.ThrowExceptionForHR(hr);                                    //we only need 2 input pins on the EVR if LAV Video isn't used for DVDs' but it doesn't hurt to have them                                  InitializeEvr(_mPEvr' _isDvd ? 2 : 1' videoRenderer);                              }                                try                              {                                  _lavvideo = URCOMLoader.Instance.GetObject(typeof(LAVVideo).GUID' true); //new LAVVideo();                                  var vlavvideo = _lavvideo as DirectShowLib.IBaseFilter;                                  if (vlavvideo != null)                                  {                                      hr = m_graph.AddFilter(vlavvideo' "LAV Video Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVVideoSettings vsett = vlavvideo as ILAVVideoSettings;                                      if (vsett != null)                                      {                                          //we only want to set it for MB                                          hr = vsett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Info("GPU Model: {0}"' VideoConfiguration.GpuModel);                                            LAVHWAccel configuredMode =                                              VideoConfigurationUtils.GetHwaMode(                                                  _config.VideoConfig'                                                  _customEvrPresenterLoaded);                                            LAVHWAccel testme = vsett.GetHWAccel();                                          _logger.Info("Current HWA Mode: {0} Desired Mode: {1}"' testme' configuredMode);                                          if (testme != configuredMode)                                          {                                              hr = vsett.SetHWAccel(configuredMode);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVVideoCodecs())                                          //{                                          //    LAVVideoCodec codec = (LAVVideoCodec)Enum.Parse(typeof(LAVVideoCodec)' c);                                            //    bool isEnabled = vsett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.VideoConfig.EnabledCodecs                                          //            .Contains(c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = vsett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = vsett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            foreach (string hwaCodec in DirectShowPlayer.GetLAVVideoHwaCodecs())                                          {                                              LAVVideoHWCodec codec = (LAVVideoHWCodec)Enum.Parse(typeof(LAVVideoHWCodec)' hwaCodec);                                              bool hwaIsEnabled = vsett.GetHWAccelCodec(codec);                                                if (                                                  _config.VideoConfig.HwEnabledCodecs                                                      .Contains(hwaCodec))                                              {                                                  if (!hwaIsEnabled)                                                  {                                                      _logger.Debug("Enable HWA support for: {0}"' hwaCodec);                                                      hr = vsett.SetHWAccelCodec(codec' true);                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                              }                                              else if (hwaIsEnabled)                                              {                                                  _logger.Debug("Disable HWA support for: {0}"' hwaCodec);                                                  hr = vsett.SetHWAccelCodec(codec' false);                                                  DsError.ThrowExceptionForHR(hr);                                              }                                          }                                            if (!vsett.GetDVDVideoSupport())                                          {                                              _logger.Debug("Enable DVD support.");                                              hr = vsett.SetDVDVideoSupport(true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            int hwaRes = vsett.GetHWAccelResolutionFlags();                                          if (hwaRes != _config.VideoConfig.HwaResolution                                              && _config.VideoConfig.HwaResolution > 0)                                          {                                              _logger.Debug("Change HWA resolution support from {0} to {1}."' hwaRes'                                                  _config.VideoConfig.HwaResolution);                                              hr =                                                  vsett.SetHWAccelResolutionFlags(                                                      VideoConfigurationUtils.GetHwaResolutions(                                                          _config.VideoConfig));                                              DsError.ThrowExceptionForHR(hr);                                          }                                            hr =                                              vsett.SetTrayIcon(                                                  _config.VideoConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            LAVSWDeintModes swDi = (LAVSWDeintModes)_config.VideoConfig.SW_DeintModes;                                            if (!isInterlaced)                                          {                                              swDi = LAVSWDeintModes.None;                                          }                                            LAVSWDeintModes testdi = vsett.GetSWDeintMode();                                          _logger.Info("Current SW DI Mode: {0} Desired Mode: {1}"' testdi' swDi);                                          if (testdi != swDi)                                          {                                              hr = vsett.SetSWDeintMode(swDi);                                              DsError.ThrowExceptionForHR(hr);                                          }                                      }                                  }                                    decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo' PinDirection.Input' 0);                                  if (decIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                      DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavvideo'                                          PinDirection.Output' 0);                                        if (enableXySubFilter) //this flag indicates whether we should handle subtitle rendering                                      {                                          _logger.Debug("Enable XySubFilter.");                                          var xySubFilterSucceeded = false;                                            // Load xySubFilter if configured and if madvr succeeded                                          if (_madvr != null || _customEvrPresenterLoaded)                                          {                                              try                                              {                                                  _xySubFilter = URCOMLoader.Instance.GetObject(typeof(XySubFilter).GUID' true); //new XySubFilter();                                                  var vxySubFilter = _xySubFilter as DirectShowLib.IBaseFilter;                                                  if (vxySubFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxySubFilter' "xy-SubFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                  }                                                    xySubFilterSucceeded = true;                                                    _logger.Debug("Enable XySubFilter : {0}."' xySubFilterSucceeded);                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-SubFilter filter"' ex);                                              }                                          }                                            // Fallback to xyVsFilter                                          if (!xySubFilterSucceeded)                                          {                                              _logger.Debug("Fallback xyVsFilter.");                                              try                                              {                                                  _xyVsFilter = URCOMLoader.Instance.GetObject(typeof(XYVSFilter).GUID' true); //new XYVSFilter();                                                  var vxyVsFilter = _xyVsFilter as DirectShowLib.IBaseFilter;                                                  if (vxyVsFilter != null)                                                  {                                                      hr = m_graph.AddFilter(vxyVsFilter' "xy-VSFilter");                                                      DsError.ThrowExceptionForHR(hr);                                                        _logger.Debug("Added xy-VSFilter");                                                  }                                              }                                              catch (Exception ex)                                              {                                                  _logger.ErrorException("Error adding xy-VSFilter filter"' ex);                                              }                                          }                                            if (_xyVsFilter != null) //If using VSFilter                                          {                                              _logger.Debug("insert xyVsFilter b/w LAV Video and the renderer");                                              //insert xyVsFilter b/w LAV Video and the renderer                                              rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Video");                                                //connect it to VSFilter                                              if (decOut != null && rendIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                                  DsError.ThrowExceptionForHR(hr);                                                    CleanUpInterface(rendIn);                                                  CleanUpInterface(decOut);                                                  rendIn = null;                                                  decOut = null;                                              }                                                //grab xyVsFilter's output pin so it can be connected to the renderer                                              decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xyVsFilter'                                                      PinDirection.Output' 0);                                          }                                      }                                        if (_madvr != null)                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_madvr'                                              PinDirection.Input' 0);                                      }                                      else                                      {                                          rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_mPEvr'                                              PinDirection.Input' 0);                                      }                                        if (decOut != null && rendIn != null)                                      {                                          hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                            needsRender = false;                                          break;                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Video filter"' ex);                              }                                #endregion                          }                          else if (mediaTypes[m] == DirectShowLib.MediaType.Audio)                          {                              #region Audio                              //we have an audio pin so add a renderer and decoder                              switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }                                if (useDefaultAudioRenderer)                              {                                  AddDefaultAudioRenderer();                              }                                try                              {                                  _lavaudio = URCOMLoader.Instance.GetObject(typeof(LAVAudio).GUID' true); // new LAVAudio();                                  var vlavaudio = _lavaudio as DirectShowLib.IBaseFilter;                                  if (vlavaudio != null)                                  {                                      _logger.Debug("Add LAVAudio to the graph.");                                        hr = m_graph.AddFilter(vlavaudio' "LAV Audio Decoder");                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioSettings asett = vlavaudio as ILAVAudioSettings;                                      if (asett != null)                                      {                                          _logger.Debug("Enable LAVAudio Runtime Config");                                            //we only want to set it for MB                                          hr = asett.SetRuntimeConfig(true);                                          DsError.ThrowExceptionForHR(hr);                                            //TODO: add this back when CODECs are surfaced through the config UI                                          //foreach (string c in DirectShowPlayer.GetLAVAudioCodecs())                                          //{                                          //    LAVAudioCodec codec = (LAVAudioCodec)Enum.Parse(typeof(LAVAudioCodec)' c);                                            //    bool isEnabled = asett.GetFormatConfiguration(codec);                                          //    if (                                          //        _config.AudioConfig.EnabledCodecs.Contains(                                          //            c))                                          //    {                                          //        if (!isEnabled)                                          //        {                                          //            _logger.Debug("Enable support for: {0}"' c);                                          //            hr = asett.SetFormatConfiguration(codec' true);                                          //            DsError.ThrowExceptionForHR(hr);                                          //        }                                          //    }                                          //    else if (isEnabled)                                          //    {                                          //        _logger.Debug("Disable support for: {0}"' c);                                          //        hr = asett.SetFormatConfiguration(codec' false);                                          //        DsError.ThrowExceptionForHR(hr);                                          //    }                                          //}                                            //enable/disable bitstreaming                                          _logger.Debug("Enable LAVAudio S/PDIF bitstreaming");                                            if (_config.AudioConfig.BitstreamCodecs.Contains("AC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.AC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTS' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.BitstreamCodecs.Contains("EAC3"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.EAC3' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("TRUEHD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.TRUEHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                          if (_config.AudioConfig.BitstreamCodecs.Contains("DTS-HD"' StringComparer.OrdinalIgnoreCase))                                          {                                              hr = asett.SetBitstreamConfig(LAVBitstreamCodec.DTSHD' true);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.Delay > 0)                                          {                                              _logger.Debug("Set LAVAudio audio delay: {0}"'                                                  _config.AudioConfig.Delay);                                                hr = asett.SetAudioDelay(true'                                                  _config.AudioConfig.Delay);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            _logger.Debug("Set LAVAudio auto AV Sync: {0}"'                                              _config.AudioConfig.EnableAutoSync);                                          hr =                                              asett.SetAutoAVSync(                                                  _config.AudioConfig.EnableAutoSync);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio Expand61: {0}"'                                              _config.AudioConfig.Expand61);                                          hr = asett.SetExpand61(_config.AudioConfig.Expand61);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ExpandMono: {0}"'                                              _config.AudioConfig.ExpandMono);                                          hr =                                              asett.SetExpandMono(                                                  _config.AudioConfig.ExpandMono);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio ConvertToStandardLayout: {0}"'                                              _config.AudioConfig.ConvertToStandardLayout);                                          hr =                                              asett.SetOutputStandardLayout(                                                  _config.AudioConfig.ConvertToStandardLayout);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio EnableDRC: {0}"'                                              _config.AudioConfig.EnableDRC);                                          hr = asett.SetDRC(_config.AudioConfig.EnableDRC'                                              _config.AudioConfig.DRCLevel);                                          DsError.ThrowExceptionForHR(hr);                                            _logger.Debug("Set LAVAudio audio ShowTrayIcon: {0}"'                                              _config.AudioConfig.ShowTrayIcon);                                          hr =                                              asett.SetTrayIcon(                                                  _config.AudioConfig.ShowTrayIcon);                                          DsError.ThrowExceptionForHR(hr);                                            bool mixingEnabled = asett.GetMixingEnabled();                                          if (mixingEnabled !=                                              _config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio EnablePCMMixing: {0}"'                                                  _config.AudioConfig.EnablePCMMixing);                                              hr = asett.SetMixingEnabled(!mixingEnabled);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            if (_config.AudioConfig.EnablePCMMixing)                                          {                                              _logger.Debug("Set LAVAudio MixingSetting: {0}"'                                                  _config.AudioConfig.MixingSetting);                                              LAVAudioMixingFlag amf =                                                  (LAVAudioMixingFlag)                                                      _config.AudioConfig.MixingSetting;                                              hr = asett.SetMixingFlags(amf);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingEncoding: {0}"'                                                  _config.AudioConfig.MixingEncoding);                                              LAVAudioMixingMode amm =                                                  (LAVAudioMixingMode)                                                      Enum.Parse(typeof(LAVAudioMixingMode)'                                                          _config.AudioConfig.MixingEncoding);                                              hr = asett.SetMixingMode(amm);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug("Set LAVAudio MixingLayout: {0}"'                                                  _config.AudioConfig.MixingLayout);                                              LAVAudioMixingLayout aml =                                                  (LAVAudioMixingLayout)                                                      Enum.Parse(typeof(LAVAudioMixingLayout)'                                                          _config.AudioConfig.MixingLayout);                                              hr = asett.SetMixingLayout(aml);                                              DsError.ThrowExceptionForHR(hr);                                                _logger.Debug(                                                  "Set LAVAudio LfeMixingLevel: {0} CenterMixingLevel: {1} SurroundMixingLevel: {2}"'                                                  _config.AudioConfig.LfeMixingLevel'                                                  _config.AudioConfig.CenterMixingLevel'                                                  _config.AudioConfig.SurroundMixingLevel);                                              int lfe' center' surround;                                              //convert to the # that LAV Audio expects                                              lfe =                                                  (int)                                                      (_config.AudioConfig.LfeMixingLevel *                                                       10000.01);                                              center =                                                  (int)                                                      (_config.AudioConfig.CenterMixingLevel *                                                       10000.01);                                              surround =                                                  (int)                                                      (_config.AudioConfig                                                          .SurroundMixingLevel * 10000.01);                                                hr = asett.SetMixingLevels(center' surround' lfe);                                              DsError.ThrowExceptionForHR(hr);                                          }                                            for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                          {                                              LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                              bool isEnabled = asett.GetBitstreamConfig(codec);                                              _logger.Log(LogSeverity.Debug' "{0} bitstreaming: {1}"' codec' isEnabled);                                          }                                      }                                  }                              }                              catch (Exception ex)                              {                                  _logger.ErrorException("Error adding LAV Audio filter"' ex);                              }                                _logger.Log(LogSeverity.Debug' "Connect Audio decoder to renderer");                              decIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio' PinDirection.Input' 0);                              if (decIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Got Audio decoder input pin");                                  hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                  if (hr < 0) //LAV cannot handle this audio type                                  {                                      _logger.Warn("LAV Audio could not decode audio media type.");                                  }                                  else                                  {                                      //DsError.ThrowExceptionForHR(hr);                                      decOut = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_lavaudio'                                          PinDirection.Output' 0);                                  }                                    if (!string.IsNullOrWhiteSpace(_config.AudioConfig.AudioProcessor))                                  {                                      bool addProcessor = true;                                        if (_config.AudioConfig.BitstreamCodecs.Count > 0)                                      {                                          _logger.Log(LogSeverity.Debug' "Bit streaming is enabled' we need to decide whether to add processor");                                            ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                          if (audioStatus != null)                                          {                                              IntPtr codec = IntPtr.Zero;// Marshal.AllocCoTaskMem(100);                                              IntPtr format = IntPtr.Zero;                                              IntPtr outFormat = IntPtr.Zero;                                                int nChannels' sRate;                                              uint cMask;                                                hr = audioStatus.GetDecodeDetails(out codec' out format' out nChannels' out sRate' out cMask);                                              DsError.ThrowExceptionForHR(hr);                                                string sCodec' sFormat;//' sOutFormat;                                                sCodec = Marshal.PtrToStringAnsi(codec);                                              sFormat = Marshal.PtrToStringAnsi(format);                                                _logger.Log(LogSeverity.Debug' "input format: {0} - {1} - {2} - {3} - {4}"' sCodec' sFormat' nChannels' sRate' cMask);                                                //hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                              //DsError.ThrowExceptionForHR(hr);                                                //sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                //_logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                                if (_config.AudioConfig.BitstreamCodecs.Contains(sCodec.ToUpper()))                                              {                                                  _logger.Log(LogSeverity.Debug' "Bit streaming format found' do not add processor");                                                  addProcessor = false;                                              }                                          }                                      }                                        if (addProcessor)                                      {                                          _logger.Log(LogSeverity.Debug' "Add audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                          IBaseFilter audioProcessor = null;                                            if (System.Text.RegularExpressions.Regex.IsMatch(_config.AudioConfig.AudioProcessor' @"{?\w{8}-\w{4}-\w{4}-\w{4}-\w{12}}?"))                                              audioProcessor = FilterGraphTools.AddFilterFromClsid(_filterGraph' new Guid(_config.AudioConfig.AudioProcessor)' _config.AudioConfig.AudioProcessor);                                          else                                              audioProcessor = FilterGraphTools.AddFilterByName(_filterGraph' FilterCategory.LegacyAmFilterCategory' _config.AudioConfig.AudioProcessor);                                            if (audioProcessor != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Connect audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                CleanUpInterface(decIn);                                              decIn = DsFindPin.ByDirection(audioProcessor' PinDirection.Input' 0);                                              if (decIn != null)                                              {                                                  hr = _filterGraph.ConnectDirect(decOut' decIn' null);                                                  if (hr < 0)                                                  {                                                      _logger.Warn("couldn't connect to audio processor");                                                      hr = _filterGraph.RemoveFilter(audioProcessor);                                                      DsError.ThrowExceptionForHR(hr);                                                      CleanUpInterface(audioProcessor);                                                  }                                                  else                                                  {                                                      _logger.Log(LogSeverity.Debug' "Connected audio processor: {0}"' _config.AudioConfig.AudioProcessor);                                                      CleanUpInterface(decOut);                                                      decOut = DsFindPin.ByDirection(audioProcessor' PinDirection.Output' 0);                                                      CleanUpInterface(audioProcessor);                                                  }                                                }                                          }                                      }                                  }                                    rendIn = DsFindPin.ByDirection(AudioRenderer' PinDirection.Input' 0);                                    if (decOut != null && rendIn != null)                                  {                                      hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                      if (hr == -2004287474 && _wasapiAR != null) //AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED                                      {                                          IMPAudioRendererConfig arSett = _wasapiAR as IMPAudioRendererConfig;                                          if (arSett != null)                                          {                                              arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.SHARED);                                              _logger.Warn("WASAPI AR failed to connected in exclusive mode' check device properties");                                              hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                          }                                      }                                      else if (hr == -2147220900) //audio format not supported                                      {                                          _logger.Warn("Couldn't connect to Audio Renderer' disable bit streaming and try again");                                          ILAVAudioSettings asett = _lavaudio as ILAVAudioSettings;                                          if (asett != null)                                          {                                              _logger.Log(LogSeverity.Debug' "Disconnect Audio decoder from splitter");                                              hr = pins[0].Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                              hr = decIn.Disconnect();                                              DsError.ThrowExceptionForHR(hr);                                                for (int i = 0; i < (int)LAVBitstreamCodec.NB; i++)                                              {                                                  LAVBitstreamCodec codec = (LAVBitstreamCodec)i;                                                  asett.SetBitstreamConfig(codec' false);                                                  _logger.Log(LogSeverity.Warn' "Disable {0} bitstreaming."' codec);                                                  bool isEnabled = asett.GetBitstreamConfig(codec);                                                  _logger.Log(LogSeverity.Warn' "{0} bitstreaming: {1}"' codec' isEnabled);                                              }                                                _logger.Log(LogSeverity.Debug' "Reconnect Audio decoder to splitter");                                              hr = _filterGraph.ConnectDirect(pins[0]' decIn' null);                                              DsError.ThrowExceptionForHR(hr);                                                hr = _filterGraph.ConnectDirect(decOut' rendIn' null);                                              _logger.Log(LogSeverity.Warn' "Renderer reconnect result:{0}"' hr);                                          }                                      }                                      DsError.ThrowExceptionForHR(hr);                                        ILAVAudioStatus audioStatus = _lavaudio as ILAVAudioStatus;                                      if (audioStatus != null)                                      {                                          IntPtr outFormat = IntPtr.Zero;                                            int nChannels' sRate;                                          uint cMask;                                            hr = audioStatus.GetOutputDetails(out outFormat' out nChannels' out sRate' out cMask);                                          //DsError.ThrowExceptionForHR(hr);                                          if (hr >= 0)                                          {                                              string sOutFormat = Marshal.PtrToStringAnsi(outFormat);                                                _logger.Log(LogSeverity.Debug' "output format: {0} - {1} - {2} - {3}"' sOutFormat' nChannels' sRate' cMask);                                          }                                      }                                        needsRender = false;                                      break;                                  }                              }                              #endregion                          }                          else if (mediaTypes[m] == SubtitleMediaType                              /*DirectShowLib.MediaType.Subtitle*/)                          {                              #region subtitles                              _logger.Log(LogSeverity.Debug' "Connect subtitle filter");                                if (_xySubFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xySubFilter");                                  rendIn = DsFindPin.ByDirection((DirectShowLib.IBaseFilter)_xySubFilter'                                      PinDirection.Input' 0);                              }                              else if (_xyVsFilter != null)                              {                                  _logger.Log(LogSeverity.Debug' "Using xyVsFilter");                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_xyVsFilter' "Input");                              }                                if (rendIn != null)                              {                                  _logger.Log(LogSeverity.Debug' "Connect subtitle pin to subtitle renderer");                                    try                                  {                                      hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                      DsError.ThrowExceptionForHR(hr);                                  }                                  catch (Exception ex)                                  {                                      _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                  }                                  needsRender = false;                                  break;                              }                              #endregion                          }                          else if (mediaTypes[m] == DvdSubpictureMediaType)                          {                              #region DVD Subpicture                              _logger.Log(LogSeverity.Debug' "Connect DVD Subpicture");                              if (_lavvideo != null)                              {                                  rendIn = DsFindPin.ByName((DirectShowLib.IBaseFilter)_lavvideo' "Subtitle Input");                                  if (rendIn != null)                                  {                                      _logger.Log(LogSeverity.Debug' "Connect dvd subtitle pin to subtitle renderer");                                        try                                      {                                          hr = _filterGraph.ConnectDirect(pins[0]' rendIn' null);                                          DsError.ThrowExceptionForHR(hr);                                      }                                      catch (Exception ex)                                      {                                          _logger.Warn("Error rendering subtites {0} : {1}"' hr' ex.Message);                                      }                                      needsRender = false;                                      break;                                  }                              }                              #endregion                          }                      }                      finally                      {                          CleanUpInterface(decIn);                          CleanUpInterface(decOut);                          CleanUpInterface(rendIn);                      }                  }                    if (needsRender)                  {                      if (_filterGraph.RenderEx(pins[0]' AMRenderExFlags.RenderToExistingRenderers' IntPtr.Zero) >= 0)                          pinsRendered++;                  }                  else                      pinsRendered++;                    Marshal.ReleaseComObject(pins[0]);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetPinMediaTypes,The following statement contains a magic number: while (j != 0)              {                  var amtDvr = new DirectShowLib.AMMediaType[1];                  IntPtr d = Marshal.AllocCoTaskMem(4);                  try                  {                      hr = emtDvr.Next(1' amtDvr' d);                      DsError.ThrowExceptionForHR(hr);                      j = Marshal.ReadInt32(d);                  }                  finally                  {                      Marshal.FreeCoTaskMem(d);                  }                    if (j != 0)                  {                      if (amtDvr[0].majorType == DvdEncryptedMediaType)                      {                          if (amtDvr[0].subType == DirectShowLib.MediaSubType.Mpeg2Video)                          {                              mt.Add(DirectShowLib.MediaType.Video);                          }                          else if (amtDvr[0].subType == DirectShowLib.MediaSubType.DolbyAC3)                          {                              mt.Add(DirectShowLib.MediaType.Audio);                          }                          else                              mt.Add(amtDvr[0].subType);                      }                      else                          mt.Add(amtDvr[0].majorType);                        DsUtils.FreeAMMediaType(amtDvr[0]);                      amtDvr[0] = null;                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatioLegacy,The following statement contains a magic number: if (screenHeight > iAdjustedHeight && iAdjustedHeight > 0)              {                  double totalMargin = (screenHeight - iAdjustedHeight);                  var topMargin = Convert.ToInt32(Math.Round(totalMargin / 2));                    _basicVideo.SetDestinationPosition(0' topMargin' screenWidth' iAdjustedHeight);              }              else if (iAdjustedHeight > 0)              {                  double adjustedWidth = aspectX * screenHeight;                  adjustedWidth /= aspectY;                    var iAdjustedWidth = Convert.ToInt32(Math.Round(adjustedWidth));                    double totalMargin = (screenWidth - iAdjustedWidth);                  var leftMargin = Convert.ToInt32(Math.Round(totalMargin / 2));                    _basicVideo.SetDestinationPosition(leftMargin' 0' iAdjustedWidth' screenHeight);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatioLegacy,The following statement contains a magic number: if (screenHeight > iAdjustedHeight && iAdjustedHeight > 0)              {                  double totalMargin = (screenHeight - iAdjustedHeight);                  var topMargin = Convert.ToInt32(Math.Round(totalMargin / 2));                    _basicVideo.SetDestinationPosition(0' topMargin' screenWidth' iAdjustedHeight);              }              else if (iAdjustedHeight > 0)              {                  double adjustedWidth = aspectX * screenHeight;                  adjustedWidth /= aspectY;                    var iAdjustedWidth = Convert.ToInt32(Math.Round(adjustedWidth));                    double totalMargin = (screenWidth - iAdjustedWidth);                  var leftMargin = Convert.ToInt32(Math.Round(totalMargin / 2));                    _basicVideo.SetDestinationPosition(leftMargin' 0' iAdjustedWidth' screenHeight);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following statement contains a magic number: if (_mPDisplay != null)              {                  MFRect dRect = new MFRect(0' 0' screenWidth' screenHeight);                  MFSize vSize = new MFSize()' vAR = new MFSize();                  double m_ZoomX = 1' m_ZoomY = 1' m_PosX = 0.5' m_PosY = 0.5;                  MFVideoNormalizedRect sRect = new MFVideoNormalizedRect();                  sRect.top = 0;                  sRect.left = 0;                  sRect.right = 1;                  sRect.bottom = 1;                    int hr = _mPDisplay.GetNativeVideoSize(vSize' vAR);                  if (hr > -1)                  {                      double dVideoAR = (double)vSize.Width / vSize.Height;                        double dWRWidth = screenWidth;                      double dWRHeight = screenHeight;                        double dVRWidth = dWRHeight * dVideoAR;                      double dVRHeight;                        _logger.Debug("Scale: {0} Video Width: {1} Video Height: {2} X-AR: {3} Y-AR: {4}"' _iVideoScaling' vSize.Width' vSize.Height' vAR.cx' vAR.cy);                        switch (_iVideoScaling)                      {                          case VideoScalingScheme.HALF:                              dVRWidth = vSize.Width * 0.5;                              dVRHeight = vSize.Height * 0.5;                              break;                          case VideoScalingScheme.NORMAL:                              dVRWidth = vSize.Width;                              dVRHeight = vSize.Height;                              break;                          case VideoScalingScheme.DOUBLE:                              dVRWidth = vSize.Width * 2.0;                              dVRHeight = vSize.Height * 2.0;                              break;                          case VideoScalingScheme.STRETCH:                              dVRWidth = dWRWidth;                              dVRHeight = dWRHeight;                              break;                          case VideoScalingScheme.ZOOM1:                          case VideoScalingScheme.ZOOM2:                              {                                  double minw = dWRWidth < dVRWidth ? dWRWidth : dVRWidth;                                  double maxw = dWRWidth > dVRWidth ? dWRWidth : dVRWidth;                                    double scale = _iVideoScaling == VideoScalingScheme.ZOOM1 ? 1.0 / 3.0 : 2.0 / 3.0;                                  dVRWidth = minw + (maxw - minw) * scale;                                  dVRHeight = dVRWidth / dVideoAR;                                  break;                              }                          default:                          //ASSERT(FALSE);                          // Fallback to "Touch Window From Inside" if settings were corrupted.                          case VideoScalingScheme.FROMINSIDE:                          case VideoScalingScheme.FROMOUTSIDE:                              if ((screenWidth < dVRWidth) != (_iVideoScaling == VideoScalingScheme.FROMOUTSIDE))                              {                                  dVRWidth = dWRWidth;                                  dVRHeight = dVRWidth / dVideoAR;                              }                              else                              {                                  dVRHeight = dWRHeight;                              }                              break;                      }                        // Scale video frame                      double dScaledVRWidth = m_ZoomX * dVRWidth;                      double dScaledVRHeight = m_ZoomY * dVRHeight;                        // Position video frame                      // left and top parts are allowed to be negative                      dRect.left = (int)Math.Round(m_PosX * (dWRWidth * 3.0 - dScaledVRWidth) - dWRWidth);                      dRect.top = (int)Math.Round(m_PosY * (dWRHeight * 3.0 - dScaledVRHeight) - dWRHeight);                      // right and bottom parts are always at picture center or beyond' so never negative                      dRect.right = (int)Math.Round(dRect.left + dScaledVRWidth);                      dRect.bottom = (int)Math.Round(dRect.top + dScaledVRHeight);                        //apply overscan                      //dRect.top = dRect.top - (ps.OverscanHeight / 2);                      //dRect.left = dRect.left - (ps.OverscanWidth / 2);                      //dRect.right = dRect.right + (ps.OverscanWidth / 2);//this.Width;                      //dRect.bottom = dRect.bottom + (ps.OverscanHeight / 2);//this.Height;                  }                    if (string.Equals(_currentVideoRenderer' "evr"' StringComparison.OrdinalIgnoreCase))                  {                      dRect = new MFRect(0' 0' screenWidth' screenHeight);                  }                  _logger.Debug("Source Rect T: {0} L: {1} B: {2} R: {3} Dest Rect T: {4} L: {5} B: {6} R: {7}"' sRect.top' sRect.left' sRect.bottom' sRect.right' dRect.top' dRect.left' dRect.bottom' dRect.right);                    _mPDisplay.SetVideoPosition(sRect' dRect);                  //SetAspectRatioLegacy(screenWidth' screenHeight' ratio);              }              else if (_madvr != null)              {                  //configure madVR to figure out AR & window size                  IMadVRCommand _madCmd = _madvr as IMadVRCommand;                  if (_madCmd != null)                  {                      int hr = 0;                      string zoomMode = "autoDetect";                      switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }                        hr = _madCmd.SendCommandString("setZoomMode"' zoomMode);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetupGraphForRateChange,The following statement contains a magic number: if (_wasapiAR != null)              {                  IBasicAudio ba = _filterGraph as IBasicAudio;                  if (ba != null)                  {                      int orgVol = 0;                      hr = ba.get_Volume(out orgVol);                      DsError.ThrowExceptionForHR(hr);                        _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                        if (Math.Abs(rate) > 1.5)                      {                          hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: mute");                      }                      else if (Math.Abs(rate) <= 1.5)                      {                          hr = ba.put_Volume(0); //set the volume back to full                          DsError.ThrowExceptionForHR(hr);                          _logger.Debug("SetupGraphForRateChange: enable volume");                      }                  }              }              else              {                  IPin arIn = null;                    try                  {                      if (audioRenderer != null)                      {                          if (Math.Abs(rate) > 4 && m_adecOut == null)                          {                              _logger.Debug("SetupGraphForRateChange: remove audio renderer");                                //grab the audio decoder's output pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = arIn.ConnectedTo(out m_adecOut);                              DsError.ThrowExceptionForHR(hr);                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //remove it                              hr = _filterGraph.RemoveFilter(audioRenderer);                              DsError.ThrowExceptionForHR(hr);                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                          else if (Math.Abs(rate) <= 4 && m_adecOut != null)                          {                              _logger.Debug("SetupGraphForRateChange: add the audio renderer back");                                //stop the graph                              hr = _mediaControl.Stop();                              DsError.ThrowExceptionForHR(hr);                                //add the audio renderer back into the graph                              hr = _filterGraph.AddFilter(audioRenderer' "Audio Renderer");                              DsError.ThrowExceptionForHR(hr);                                //connect it to the decoder pin                              arIn = DsFindPin.ByDirection(audioRenderer' PinDirection.Input' 0);                              hr = _filterGraph.ConnectDirect(m_adecOut' arIn' null);                              DsError.ThrowExceptionForHR(hr);                                Marshal.ReleaseComObject(m_adecOut);                              m_adecOut = null;                                //start the graph again                              hr = _mediaControl.Run();                              DsError.ThrowExceptionForHR(hr);                          }                      }                        if (Math.Abs(rate) <= 4)                      {                          IBasicAudio ba = _filterGraph as IBasicAudio;                          if (ba != null)                          {                              int orgVol = 0;                              hr = ba.get_Volume(out orgVol);                              DsError.ThrowExceptionForHR(hr);                              _logger.Debug("SetupGraphForRateChange: Current Volume: {0}"' orgVol);                                if (Math.Abs(rate) > 1.5)                              {                                  hr = ba.put_Volume(-10000); //turn off the volume so we can ffwd                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: mute");                              }                              else if (Math.Abs(rate) <= 1.5)                              {                                  hr = ba.put_Volume(0); //set the volume back to full                                  DsError.ThrowExceptionForHR(hr);                                  _logger.Debug("SetupGraphForRateChange: enable volume");                              }                          }                      }                  }                  finally                  {                      if (arIn != null)                          Marshal.ReleaseComObject(arIn);                  }              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleDvdEvent,The following statement contains a magic number: try              {                  EventCode evCode;                  IntPtr evParam1' evParam2;                    // Process all queued events                  while (_mediaEventEx.GetEvent(out evCode' out evParam1' out evParam2' 0) == 0)                  {                      _logger.Debug("Received media event code {0}"' evCode);                        switch (evCode)                      {                          case EventCode.DvdCurrentHmsfTime:                              byte[] ati = BitConverter.GetBytes(evParam1.ToInt32());                              var currnTime = new DvdHMSFTimeCode();                              currnTime.bHours = ati[0];                              currnTime.bMinutes = ati[1];                              currnTime.bSeconds = ati[2];                              currnTime.bFrames = ati[3];                              //UpdateMainTitle();                              break;                          case EventCode.DvdChapterStart:                              //currnChapter = evParam1.ToInt32();                              //UpdateMainTitle();                              break;                          case EventCode.DvdTitleChange:                              //currnTitle = evParam1.ToInt32();                              //UpdateMainTitle();                              break;                          case EventCode.DvdDomainChange:                              //currnDomain = (DvdDomain)evParam1;                              //UpdateMainTitle();                              break;                          case EventCode.DvdCmdStart:                              break;                          case EventCode.DvdCmdEnd:                              OnDvdCmdComplete(evParam1' evParam2);                              break;                          case EventCode.DvdStillOn:                              if (evParam1 == IntPtr.Zero)                                  _dvdMenuMode = DvdMenuMode.Buttons;                              else                                  _dvdMenuMode = DvdMenuMode.Still;                              break;                          case EventCode.DvdStillOff:                              if (_dvdMenuMode == DvdMenuMode.Still)                                  _dvdMenuMode = DvdMenuMode.No;                              break;                          case EventCode.DvdButtonChange:                              if (evParam1.ToInt32() <= 0)                                  _dvdMenuMode = DvdMenuMode.No;                              else                                  _dvdMenuMode = DvdMenuMode.Buttons;                              break;                          case EventCode.DvdNoFpPgc:                              IDvdCmd icmd;                                if (_mDvdControl != null)                                  hr = _mDvdControl.PlayTitle(1' DvdCmdFlags.None' out icmd);                              break;                      }                        // Free memory associated with callback' since we're not using it                      hr = _mediaEventEx.FreeEventParams(evCode' evParam1' evParam2);                    }              }              catch              {                }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleDvdEvent,The following statement contains a magic number: try              {                  EventCode evCode;                  IntPtr evParam1' evParam2;                    // Process all queued events                  while (_mediaEventEx.GetEvent(out evCode' out evParam1' out evParam2' 0) == 0)                  {                      _logger.Debug("Received media event code {0}"' evCode);                        switch (evCode)                      {                          case EventCode.DvdCurrentHmsfTime:                              byte[] ati = BitConverter.GetBytes(evParam1.ToInt32());                              var currnTime = new DvdHMSFTimeCode();                              currnTime.bHours = ati[0];                              currnTime.bMinutes = ati[1];                              currnTime.bSeconds = ati[2];                              currnTime.bFrames = ati[3];                              //UpdateMainTitle();                              break;                          case EventCode.DvdChapterStart:                              //currnChapter = evParam1.ToInt32();                              //UpdateMainTitle();                              break;                          case EventCode.DvdTitleChange:                              //currnTitle = evParam1.ToInt32();                              //UpdateMainTitle();                              break;                          case EventCode.DvdDomainChange:                              //currnDomain = (DvdDomain)evParam1;                              //UpdateMainTitle();                              break;                          case EventCode.DvdCmdStart:                              break;                          case EventCode.DvdCmdEnd:                              OnDvdCmdComplete(evParam1' evParam2);                              break;                          case EventCode.DvdStillOn:                              if (evParam1 == IntPtr.Zero)                                  _dvdMenuMode = DvdMenuMode.Buttons;                              else                                  _dvdMenuMode = DvdMenuMode.Still;                              break;                          case EventCode.DvdStillOff:                              if (_dvdMenuMode == DvdMenuMode.Still)                                  _dvdMenuMode = DvdMenuMode.No;                              break;                          case EventCode.DvdButtonChange:                              if (evParam1.ToInt32() <= 0)                                  _dvdMenuMode = DvdMenuMode.No;                              else                                  _dvdMenuMode = DvdMenuMode.Buttons;                              break;                          case EventCode.DvdNoFpPgc:                              IDvdCmd icmd;                                if (_mDvdControl != null)                                  hr = _mDvdControl.PlayTitle(1' DvdCmdFlags.None' out icmd);                              break;                      }                        // Free memory associated with callback' since we're not using it                      hr = _mediaEventEx.FreeEventParams(evCode' evParam1' evParam2);                    }              }              catch              {                }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleGraphEvent,The following statement contains a magic number: try              {                  EventCode evCode;                  IntPtr evParam1' evParam2;                    // Process all queued events                  while (_mediaEventEx.GetEvent(out evCode' out evParam1' out evParam2' 0) == 0)                  {                      // Free memory associated with callback' since we're not using it                      var hr = _mediaEventEx.FreeEventParams(evCode' evParam1' evParam2);                        _logger.Debug("Received media event code {0}"' evCode);                        // If this is the end of the clip' close                      if (evCode == EventCode.Complete)                      {                          Stop(TrackCompletionReason.Ended' null);                      }                      else if (evCode == EventCode.ErrorAbort ||                          evCode == EventCode.ErrorStPlaying ||                          evCode == EventCode.StErrStopped ||                          evCode == EventCode.ErrorStPlaying)                      {                          Stop(TrackCompletionReason.Failure' null);                      }                      else if (evCode == EventCode.VideoSizeChanged)                      {                          var param1Val = evParam1.ToInt32();                          var x = param1Val & 0xffff;                          var y = param1Val >> 16;                          var ratio = new Size(x' y);                            SetAspectRatio(ratio' false);                      }                  }              }              catch              {                }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetInternalStreams,The following statement contains a magic number: try              {                  var hr = m_graph.EnumFilters(out enumFilters);                    DsError.ThrowExceptionForHR(hr);                    var filters = new DirectShowLib.IBaseFilter[1];                    while (enumFilters.Next(filters.Length' filters' IntPtr.Zero) == 0)                  {                      FilterInfo filterInfo;                        hr = filters[0].QueryFilterInfo(out filterInfo);                      DsError.ThrowExceptionForHR(hr);                        Guid cl;                      filters[0].GetClassID(out cl);                        if (filterInfo.pGraph != null)                      {                          Marshal.ReleaseComObject(filterInfo.pGraph);                      }                        var iss = filters[0] as IAMStreamSelect;                        if (iss != null)                      {                          int count;                            hr = iss.Count(out count);                          DsError.ThrowExceptionForHR(hr);                            for (int i = 0; i < count; i++)                          {                              DirectShowLib.AMMediaType type;                              AMStreamSelectInfoFlags flags;                              int plcid' pwdGrp; // language                              String pzname;                                object ppobject' ppunk;                                hr = iss.Info(i' out type' out flags' out plcid' out pwdGrp' out pzname' out ppobject' out ppunk);                              DsError.ThrowExceptionForHR(hr);                                if (ppobject != null)                              {                                  Marshal.ReleaseComObject(ppobject);                              }                                if (type != null)                              {                                  DsUtils.FreeAMMediaType(type);                              }                                if (ppunk != null)                              {                                  Marshal.ReleaseComObject(ppunk);                              }                                if (pwdGrp == 2)                              {                                  if (_grp2Selector == Guid.Empty)                                  {                                      filters[0].GetClassID(out _grp2Selector);                                  }                                    var stream = new SelectableMediaStream                                  {                                      Index = i'                                      Name = pzname'                                      Type = MediaStreamType.Subtitle                                  };                                    if ((AMStreamSelectInfoFlags.Enabled & flags) == AMStreamSelectInfoFlags.Enabled)                                  {                                      stream.IsActive = true;                                  }                                  streams.Add(stream);                              }                                if (pwdGrp == 1)                              {                                  if (_audioSelector == Guid.Empty)                                  {                                      filters[0].GetClassID(out _audioSelector);                                  }                                  var stream = new SelectableMediaStream                                  {                                      Index = i'                                      Name = pzname'                                      Type = MediaStreamType.Audio                                  };                                  if ((AMStreamSelectInfoFlags.Enabled & flags) == AMStreamSelectInfoFlags.Enabled)                                  {                                      stream.IsActive = true;                                  }                                  streams.Add(stream);                              }                                if (pwdGrp == 6590033)                              {                                  if (_vobsubSelector == Guid.Empty)                                  {                                      filters[0].GetClassID(out _vobsubSelector);                                  }                                    var stream = new SelectableMediaStream                                  {                                      Index = i'                                      Name = pzname'                                      Type = MediaStreamType.Subtitle'                                      Identifier = "Vobsub"                                  };                                    if ((AMStreamSelectInfoFlags.Enabled & flags) == AMStreamSelectInfoFlags.Enabled)                                  {                                      stream.IsActive = true;                                  }                                  streams.Add(stream);                              }                          }                      }                        Marshal.ReleaseComObject(filters[0]);                  }              }              finally              {                  if (enumFilters != null)                      Marshal.ReleaseComObject(enumFilters);              }
Magic Number,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,GetInternalStreams,The following statement contains a magic number: try              {                  var hr = m_graph.EnumFilters(out enumFilters);                    DsError.ThrowExceptionForHR(hr);                    var filters = new DirectShowLib.IBaseFilter[1];                    while (enumFilters.Next(filters.Length' filters' IntPtr.Zero) == 0)                  {                      FilterInfo filterInfo;                        hr = filters[0].QueryFilterInfo(out filterInfo);                      DsError.ThrowExceptionForHR(hr);                        Guid cl;                      filters[0].GetClassID(out cl);                        if (filterInfo.pGraph != null)                      {                          Marshal.ReleaseComObject(filterInfo.pGraph);                      }                        var iss = filters[0] as IAMStreamSelect;                        if (iss != null)                      {                          int count;                            hr = iss.Count(out count);                          DsError.ThrowExceptionForHR(hr);                            for (int i = 0; i < count; i++)                          {                              DirectShowLib.AMMediaType type;                              AMStreamSelectInfoFlags flags;                              int plcid' pwdGrp; // language                              String pzname;                                object ppobject' ppunk;                                hr = iss.Info(i' out type' out flags' out plcid' out pwdGrp' out pzname' out ppobject' out ppunk);                              DsError.ThrowExceptionForHR(hr);                                if (ppobject != null)                              {                                  Marshal.ReleaseComObject(ppobject);                              }                                if (type != null)                              {                                  DsUtils.FreeAMMediaType(type);                              }                                if (ppunk != null)                              {                                  Marshal.ReleaseComObject(ppunk);                              }                                if (pwdGrp == 2)                              {                                  if (_grp2Selector == Guid.Empty)                                  {                                      filters[0].GetClassID(out _grp2Selector);                                  }                                    var stream = new SelectableMediaStream                                  {                                      Index = i'                                      Name = pzname'                                      Type = MediaStreamType.Subtitle                                  };                                    if ((AMStreamSelectInfoFlags.Enabled & flags) == AMStreamSelectInfoFlags.Enabled)                                  {                                      stream.IsActive = true;                                  }                                  streams.Add(stream);                              }                                if (pwdGrp == 1)                              {                                  if (_audioSelector == Guid.Empty)                                  {                                      filters[0].GetClassID(out _audioSelector);                                  }                                  var stream = new SelectableMediaStream                                  {                                      Index = i'                                      Name = pzname'                                      Type = MediaStreamType.Audio                                  };                                  if ((AMStreamSelectInfoFlags.Enabled & flags) == AMStreamSelectInfoFlags.Enabled)                                  {                                      stream.IsActive = true;                                  }                                  streams.Add(stream);                              }                                if (pwdGrp == 6590033)                              {                                  if (_vobsubSelector == Guid.Empty)                                  {                                      filters[0].GetClassID(out _vobsubSelector);                                  }                                    var stream = new SelectableMediaStream                                  {                                      Index = i'                                      Name = pzname'                                      Type = MediaStreamType.Subtitle'                                      Identifier = "Vobsub"                                  };                                    if ((AMStreamSelectInfoFlags.Enabled & flags) == AMStreamSelectInfoFlags.Enabled)                                  {                                      stream.IsActive = true;                                  }                                  streams.Add(stream);                              }                          }                      }                        Marshal.ReleaseComObject(filters[0]);                  }              }              finally              {                  if (enumFilters != null)                      Marshal.ReleaseComObject(enumFilters);              }
Magic Number,Emby.Theater.DirectShow,VideoConfigurationUtils,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Helpers.cs,GetHwaResolutions,The following statement contains a magic number: if (VideoConfiguration.GpuModel.IndexOf("Intel") > -1)                  return 7; // SD + HD + UHD              else                  return 3;
Magic Number,Emby.Theater.DirectShow,VideoConfigurationUtils,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Helpers.cs,GetHwaResolutions,The following statement contains a magic number: if (VideoConfiguration.GpuModel.IndexOf("Intel") > -1)                  return 7; // SD + HD + UHD              else                  return 3;
Magic Number,Emby.Theater.DirectShow,MadVRSettings,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,GetString,The following statement contains a magic number: if (IsValid)              {                  int sbLen = 100;                  StringBuilder smMode = new StringBuilder(sbLen);                    bool success = _madVR.SettingsGetString(setting' smMode' ref sbLen);                  if (sbLen > smMode.Capacity)                  {                      smMode = new StringBuilder(sbLen);                      success = _madVR.SettingsGetString(setting' smMode' ref sbLen);                  }                  if (success)                      retVal = smMode.ToString();              }
Magic Number,Emby.Theater.DirectShow,MadvrInterface,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MadvrInterface.cs,ShowMadVrBitmap,The following statement contains a magic number: if (Posy > (ScreenBottom / 2))              {                  if (name != "transportTime")                  {                      CurrentName = name;                      CurrentLeftEye = leftEye;                      CurrentPosX = Posx;                      CurrentPosY = Posy;                      CurrentDuration = Duration;                      CurrentImagePriority = ImagePriority;                          if (startTransition == false)                      {                          while (Posy < ScreenBottom)                          {                              osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' ScreenBottom' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved);                              if (Posy < ScreenBottom)                              {                                  ScreenBottom--;                              }                              if (Posy < ScreenBottom)                              {                                  ScreenBottom--;                              }                              if (Posy < ScreenBottom)                              {                                  ScreenBottom--;                              }                              if (Posy < ScreenBottom)                              {                                  ScreenBottom--;                              }                              if (name == "iMovieInfoImage")                              {                                  if (Posy < ScreenBottom)                                  {                                      ScreenBottom--;                                  }                                  if (Posy < ScreenBottom)                                  {                                      ScreenBottom--;                                  }                                  if (Posy < ScreenBottom)                                  {                                      ScreenBottom--;                                  }                                  if (Posy < ScreenBottom)                                  {                                      ScreenBottom--;                                  }                              }                                Thread.Sleep(1);                          }                          osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' ScreenBottom' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved);                            startTransition = true;                      }                      else                      {                          osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' Posy' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved);                      }                  }                  else                  {                      osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' Posy' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved);                  }              }              else              {                  osdServices.OsdSetBitmap(name' leftEye' rightEye' colorkey' Posx' Posy' false' ImagePriority' Duration' 0' mouseCallback' callbackContext' reserved);              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetDeviceModes,The following statement contains a magic number: if (_resCombo == null)              {                  _resCombo = new List<DEVMODE>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32)                      {                          _resCombo.Add(dm);                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetDeviceModes,The following statement contains a magic number: if (_resCombo == null)              {                  _resCombo = new List<DEVMODE>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32)                      {                          _resCombo.Add(dm);                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetDeviceModes,The following statement contains a magic number: if (_resCombo == null)              {                  _resCombo = new List<DEVMODE>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32)                      {                          _resCombo.Add(dm);                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetResolutions,The following statement contains a magic number: if (_modes == null)              {                  _modes = new List<Resolution>();                  List<string> addedModes = new List<string>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32 || dm.dmBitsPerPel == 16)                      {                          Resolution r = new Resolution(dm.dmPelsWidth' dm.dmPelsHeight' dm.dmDisplayFrequency' (dm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED' dm.dmDisplayFixedOutput' dm.dmBitsPerPel);                          if (!addedModes.Contains(r.ToString()))                          {                              _modes.Add(r);                              addedModes.Add(r.ToString());                          }                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetResolutions,The following statement contains a magic number: if (_modes == null)              {                  _modes = new List<Resolution>();                  List<string> addedModes = new List<string>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32 || dm.dmBitsPerPel == 16)                      {                          Resolution r = new Resolution(dm.dmPelsWidth' dm.dmPelsHeight' dm.dmDisplayFrequency' (dm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED' dm.dmDisplayFixedOutput' dm.dmBitsPerPel);                          if (!addedModes.Contains(r.ToString()))                          {                              _modes.Add(r);                              addedModes.Add(r.ToString());                          }                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetResolutions,The following statement contains a magic number: if (_modes == null)              {                  _modes = new List<Resolution>();                  List<string> addedModes = new List<string>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32 || dm.dmBitsPerPel == 16)                      {                          Resolution r = new Resolution(dm.dmPelsWidth' dm.dmPelsHeight' dm.dmDisplayFrequency' (dm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED' dm.dmDisplayFixedOutput' dm.dmBitsPerPel);                          if (!addedModes.Contains(r.ToString()))                          {                              _modes.Add(r);                              addedModes.Add(r.ToString());                          }                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,Display,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\ResolutionChanger.cs,GetResolutions,The following statement contains a magic number: if (_modes == null)              {                  _modes = new List<Resolution>();                  List<string> addedModes = new List<string>();                  int i = 0;                    DEVMODE dm = new DEVMODE();                  dm.dmDeviceName = new String(new char[32]);                  dm.dmFormName = new String(new char[32]);                  dm.dmSize = (short)Marshal.SizeOf(dm);                    while (0 != NativeMethods.EnumDisplaySettings(null' i' ref dm))                  {                      if (dm.dmBitsPerPel == 32 || dm.dmBitsPerPel == 16)                      {                          Resolution r = new Resolution(dm.dmPelsWidth' dm.dmPelsHeight' dm.dmDisplayFrequency' (dm.dmDisplayFlags & NativeMethods.DM_INTERLACED) == NativeMethods.DM_INTERLACED' dm.dmDisplayFixedOutput' dm.dmBitsPerPel);                          if (!addedModes.Contains(r.ToString()))                          {                              _modes.Add(r);                              addedModes.Add(r.ToString());                          }                      }                      i++;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,YearToText,The following statement contains a magic number: String fistTwoDigits = Year.Substring(0' 2);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,YearToText,The following statement contains a magic number: String secondTwoDigits = Year.Substring(2' 2);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,YearToText,The following statement contains a magic number: String secondTwoDigits = Year.Substring(2' 2);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"One"' "Two"' "Three"' "Four"' "Five"' "Six"' "Seven"' "Eight"'            "Nine"' "Ten"' "Eleven"' "Twelve"' "Thirteen"' "Fourteen"' "Fifteen"' "Sixteen"'            "Seventeen"' "Eighteen"' "Nineteen"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NumberToText(n % 100);              else if (n <= 999)                  return NumberToText(n / 100) + "Hundred " + NumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NumberToText(n % 1000);              else if (n <= 999999)                  return NumberToText(n / 1000) + "Thousand " + NumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NumberToText(n % 1000000);              else if (n <= 999999999)                  return NumberToText(n / 1000000) + "Million " + NumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NumberToText(n % 1000000000);              else                  return NumberToText(n / 1000000000) + "Billion " + NumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,NthNumberToText,The following statement contains a magic number: if (n < 0)                  return "Minus " + NthNumberToText(-n);              else if (n == 0)                  return "";              else if (n <= 19)                  return new string[] {"First"' "Second"' "Third"' "Fourth"' "Fifth"' "Sixth"' "Seventh"' "Eighth"'            "Nineth"' "Tenth"' "Eleventh"' "Twelfth"' "Thirteenth"' "Fourteenth"' "Fifteenth"' "Sixteenth"'            "Seventeenth"' "Eighteenth"' "Nineteenth"}[n - 1] + " ";              else if (n <= 99)                  return new string[] {"Twenty"' "Thirty"' "Forty"' "Fifty"' "Sixty"' "Seventy"'            "Eighty"' "Ninety"}[n / 10 - 2] + " " + NthNumberToText(n % 10);              else if (n <= 199)                  return "One Hundred " + NthNumberToText(n % 100);              else if (n <= 999)                  return NthNumberToText(n / 100) + "Hundred " + NthNumberToText(n % 100);              else if (n <= 1999)                  return "One Thousand " + NthNumberToText(n % 1000);              else if (n <= 999999)                  return NthNumberToText(n / 1000) + "Thousand " + NthNumberToText(n % 1000);              else if (n <= 1999999)                  return "One Million " + NthNumberToText(n % 1000000);              else if (n <= 999999999)                  return NthNumberToText(n / 1000000) + "Million " + NthNumberToText(n % 1000000);              else if (n <= 1999999999)                  return "One Billion " + NthNumberToText(n % 1000000000);              else                  return NthNumberToText(n / 1000000000) + "Billion " + NthNumberToText(n % 1000000000);
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsNumeric,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  if (!(Convert.ToInt32(input[i]) >= 48 && Convert.ToInt32(input[i]) <= 57))                  {                      //Not integer value                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsNumeric,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  if (!(Convert.ToInt32(input[i]) >= 48 && Convert.ToInt32(input[i]) <= 57))                  {                      //Not integer value                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a number or a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a number or a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a number or a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a number or a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a number or a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsAlphaNumberic,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) &&                      !(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a number or a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,isLetters,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,isLetters,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,isLetters,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,isLetters,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                    if (!(Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 90) &&                      !(Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122))                  {                      //Not a letter                      return false;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,GetNameCasing,The following statement contains a magic number: for (int i = 0; i < words.Length; i++)              {                  if (words[i].Length > 0)                  {                      words[i] = words[i].Substring(0' 1).ToUpper() + words[i].Substring(1);                      if (words[i].StartsWith("Mc") && words[i].Length > 2)                          words[i] = words[i].Substring(0' 2) + words[i].Substring(2' 1).ToUpper() + words[i].Substring(3);                      else if (words[i].StartsWith("Mac") && words[i].Length > 3)                          words[i] = words[i].Substring(0' 3) + words[i].Substring(3' 1).ToUpper() + words[i].Substring(4);                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,IsEmailAddress,The following statement contains a magic number: if (input.IndexOf('@') != -1)              {                  int indexOfDot = input.LastIndexOf('.');                  if (input.Length - indexOfDot > 0 && input.Length - indexOfDot <= 4)                      return true;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: double total = input.Length * 3;
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 92)                      hasUpperCase = true;                    if (Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122)                      hasLowerCase = true;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 92)                      hasUpperCase = true;                    if (Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122)                      hasLowerCase = true;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 92)                      hasUpperCase = true;                    if (Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122)                      hasLowerCase = true;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 65 && Convert.ToInt32(currentLetter) <= 92)                      hasUpperCase = true;                    if (Convert.ToInt32(currentLetter) >= 97 && Convert.ToInt32(currentLetter) <= 122)                      hasLowerCase = true;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: if (hasUpperCase && hasLowerCase) total *= 1.2;
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) //Numbers                      if (hasUpperCase && hasLowerCase) total *= 1.4;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) //Numbers                      if (hasUpperCase && hasLowerCase) total *= 1.4;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if (Convert.ToInt32(currentLetter) >= 48 && Convert.ToInt32(currentLetter) <= 57) //Numbers                      if (hasUpperCase && hasLowerCase) total *= 1.4;              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if ((Convert.ToInt32(currentLetter) <= 47 && Convert.ToInt32(currentLetter) >= 123) ||                      (Convert.ToInt32(currentLetter) >= 58 && Convert.ToInt32(currentLetter) <= 64)) //symbols                  {                      total *= 1.5;                      break;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if ((Convert.ToInt32(currentLetter) <= 47 && Convert.ToInt32(currentLetter) >= 123) ||                      (Convert.ToInt32(currentLetter) >= 58 && Convert.ToInt32(currentLetter) <= 64)) //symbols                  {                      total *= 1.5;                      break;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if ((Convert.ToInt32(currentLetter) <= 47 && Convert.ToInt32(currentLetter) >= 123) ||                      (Convert.ToInt32(currentLetter) >= 58 && Convert.ToInt32(currentLetter) <= 64)) //symbols                  {                      total *= 1.5;                      break;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if ((Convert.ToInt32(currentLetter) <= 47 && Convert.ToInt32(currentLetter) >= 123) ||                      (Convert.ToInt32(currentLetter) >= 58 && Convert.ToInt32(currentLetter) <= 64)) //symbols                  {                      total *= 1.5;                      break;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: for (int i = 0; i < input.Length; i++)              {                  currentLetter = input[i];                  if ((Convert.ToInt32(currentLetter) <= 47 && Convert.ToInt32(currentLetter) >= 123) ||                      (Convert.ToInt32(currentLetter) >= 58 && Convert.ToInt32(currentLetter) <= 64)) //symbols                  {                      total *= 1.5;                      break;                  }              }
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: if (total > 100.0) total = 100.0;
Magic Number,Emby.Theater.DirectShow,StringFunctions,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\StringProcessing.cs,PasswordStrength,The following statement contains a magic number: if (total > 100.0) total = 100.0;
Magic Number,Emby.Theater.DirectShow.Configuration,VideoConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,VideoConfiguration,The following statement contains a magic number: MinRefreshRateMin = 5;
Magic Number,Emby.Theater.DirectShow.Configuration,VideoConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,VideoConfiguration,The following statement contains a magic number: ScalingMode = 4;
Magic Number,Emby.Theater.DirectShow.Configuration,AudioConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,AudioConfiguration,The following statement contains a magic number: MixingSetting = 4;
Magic Number,Emby.Theater.DirectShow.Configuration,AudioConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,AudioConfiguration,The following statement contains a magic number: DRCLevel = 100;
Magic Number,Emby.Theater.DirectShow.Configuration,AudioConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,AudioConfiguration,The following statement contains a magic number: CenterMixingLevel = 0.7071;
Magic Number,Emby.Theater.DirectShow.Configuration,AudioConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,AudioConfiguration,The following statement contains a magic number: SurroundMixingLevel = 0.7071;
Magic Number,Emby.Theater.DirectShow.Configuration,AudioConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,AudioConfiguration,The following statement contains a magic number: WasapiARFilters = 63;
Magic Number,Emby.Theater.DirectShow.Configuration,AudioConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,AudioConfiguration,The following statement contains a magic number: OutputBufferSize = 500;
Magic Number,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SplitterConfiguration,The following statement contains a magic number: MaxQueueMemSize = 256;
Magic Number,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SplitterConfiguration,The following statement contains a magic number: NetworkStreamAnalysisDurationMs = 1800;
Magic Number,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SplitterConfiguration,The following statement contains a magic number: MaxQueueMemSize = 256;
Magic Number,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SplitterConfiguration,The following statement contains a magic number: MaxQueueSize = 350;
Magic Number,Emby.Theater.DirectShow.Configuration,KnownCOMObjectConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,KnownCOMObjectConfiguration,The following statement contains a magic number: LoadWait = 60000;
Magic Number,DirectShowLib.Utils,FilterGraphTools,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\FilterGraphTools.cs,FindFilterByClsid,The following statement contains a magic number: if (hr == 0)              {                  while (true)                  {                      IBaseFilter[] filters = new IBaseFilter[1];                      int fetched;                      // Get the next filter                      IntPtr d = Marshal.AllocCoTaskMem(4);                      try                      {                          //int hr = emtDvr.Next(1' amtDvr' d);                          hr = enumFilters.Next(1' filters' d);                          DsError.ThrowExceptionForHR(hr);                          fetched = Marshal.ReadInt32(d);                      }                      finally                      {                          Marshal.FreeCoTaskMem(d);                      }                        if (fetched > 0)                      {                          Guid clsid;                            hr = filters[0].GetClassID(out clsid);                            if ((hr == 0) && (clsid == gClsid))                          {                              filter = filters[0];                              break;                          }                            Marshal.ReleaseComObject(filters[0]);                      }                      else                          break;                  }                  Marshal.ReleaseComObject(enumFilters);              }
Magic Number,MediaFoundation,MFOffset,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFObjects.cs,MFOffset,The following statement contains a magic number: fract = (short)(65536 * (v - Value));
Magic Number,MediaFoundation,MFOffset,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFObjects.cs,MakeOffset,The following statement contains a magic number: fract = (short)(65536 * (v-Value));
Magic Number,MediaFoundation.Misc,ConstPropVariant,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: switch (type)              {                  case VariantType.None:                      {                          sRet = "<Empty>";                          break;                      }                    case VariantType.Blob:                      {                          const string FormatString = "x2"; // Hex 2 digit format                          const int MaxEntries = 16;                            byte[] blob = GetBlob();                            // Number of bytes we're going to format                          int n = Math.Min(MaxEntries' blob.Length);                            if (n == 0)                          {                              sRet = "<Empty Array>";                          }                          else                          {                              // Only format the first MaxEntries bytes                              sRet = blob[0].ToString(FormatString);                              for (int i = 1; i < n; i++)                              {                                  sRet += ''' + blob[i].ToString(FormatString);                              }                                // If the string is longer' add an indicator                              if (blob.Length > n)                              {                                  sRet += "...";                              }                          }                          break;                      }                    case VariantType.Float:                      {                          sRet = GetFloat().ToString();                          break;                      }                    case VariantType.Double:                      {                          sRet = GetDouble().ToString();                          break;                      }                    case VariantType.Guid:                      {                          sRet = GetGuid().ToString();                          break;                      }                    case VariantType.IUnknown:                      {                          sRet = GetIUnknown().ToString();                          break;                      }                    case VariantType.String:                      {                          sRet = GetString();                          break;                      }                    case VariantType.Short:                      {                          sRet = GetShort().ToString();                          break;                      }                    case VariantType.UByte:                      {                          sRet = GetUByte().ToString();                          break;                      }                    case VariantType.UShort:                      {                          sRet = GetUShort().ToString();                          break;                      }                    case VariantType.Int32:                      {                          sRet = GetInt().ToString();                          break;                      }                    case VariantType.UInt32:                      {                          sRet = GetUInt().ToString();                          break;                      }                    case VariantType.Int64:                      {                          sRet = GetLong().ToString();                          break;                      }                    case VariantType.UInt64:                      {                          sRet = GetULong().ToString();                          break;                      }                    case VariantType.StringArray:                      {                          sRet = "";                          foreach (string entry in GetStringArray())                          {                              sRet += (sRet.Length == 0 ? "\"" : "'\"") + entry + '\"';                          }                          break;                      }                  default:                      {                          sRet = base.ToString();                          break;                      }              }
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,FourCC,The following statement contains a magic number: if (fcc.Length != 4)              {                  throw new ArgumentException(fcc + " is not a valid FourCC");              }
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,FourCC,The following statement contains a magic number: LoadFromBytes(asc[0]' asc[1]' asc[2]' asc[3]);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,FourCC,The following statement contains a magic number: LoadFromBytes(asc[0]' asc[1]' asc[2]' asc[3]);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,FourCC,The following statement contains a magic number: LoadFromBytes(asc[0]' asc[1]' asc[2]' asc[3]);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,FourCC,The following statement contains a magic number: LoadFromBytes(asc[0]' asc[1]' asc[2]' asc[3]);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,LoadFromBytes,The following statement contains a magic number: m_fourCC = a | (b << 8) | (c << 16) | (d << 24);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,LoadFromBytes,The following statement contains a magic number: m_fourCC = a | (b << 8) | (c << 16) | (d << 24);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,LoadFromBytes,The following statement contains a magic number: m_fourCC = a | (b << 8) | (c << 16) | (d << 24);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: char[] ca = new char[4];
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar(m_fourCC & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar((m_fourCC >> 8) & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar((m_fourCC >> 8) & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar((m_fourCC >> 16) & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar((m_fourCC >> 16) & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: ca[2] = c;
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar((m_fourCC >> 24) & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: c = Convert.ToChar((m_fourCC >> 24) & 255);
Magic Number,MediaFoundation.Misc,FourCC,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,ToString,The following statement contains a magic number: ca[3] = c;
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,WaveFormatEx,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToWave,The following statement contains a magic number: if (wFormatTag != -2)              {                  short cbSize;                    // By spec' PCM has no cbSize element                  if (wFormatTag != 1)                  {                      cbSize = Marshal.ReadInt16(pNativeData' 16);                  }                  else                  {                      cbSize = 0;                  }                    // Does the structure contain extra data?                  if (cbSize == 0)                  {                      // Create a simple WaveFormatEx struct                      wfe = new WaveFormatEx();                      Marshal.PtrToStructure(pNativeData' wfe);                        // It probably already has the right value' but there is a special case                      // where it might not' so' just to be safe...                      wfe.cbSize = 0;                  }                  else                  {                      WaveFormatExWithData dat = new WaveFormatExWithData();                        // Manually parse the data into the structure                      dat.wFormatTag = wFormatTag;                      dat.nChannels = Marshal.ReadInt16(pNativeData' 2);                      dat.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      dat.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      dat.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      dat.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      dat.cbSize = cbSize;                        dat.byteData = new byte[dat.cbSize];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + 18);                      Marshal.Copy(ip2' dat.byteData' 0' dat.cbSize);                        wfe = dat as WaveFormatEx;                  }              }              else              {                  short cbSize;                  int extrasize = Marshal.SizeOf(typeof(WaveFormatExtensible)) - Marshal.SizeOf(typeof(WaveFormatEx));                    cbSize = Marshal.ReadInt16(pNativeData' 16);                  if (cbSize == extrasize)                  {                      WaveFormatExtensible ext = new WaveFormatExtensible();                      Marshal.PtrToStructure(pNativeData' ext);                      wfe = ext as WaveFormatEx;                  }                  else                  {                      WaveFormatExtensibleWithData ext = new WaveFormatExtensibleWithData();                      int iExtraBytes = cbSize - extrasize;                        ext.wFormatTag = wFormatTag;                      ext.nChannels = Marshal.ReadInt16(pNativeData' 2);                      ext.nSamplesPerSec = Marshal.ReadInt32(pNativeData' 4);                      ext.nAvgBytesPerSec = Marshal.ReadInt32(pNativeData' 8);                      ext.nBlockAlign = Marshal.ReadInt16(pNativeData' 12);                      ext.wBitsPerSample = Marshal.ReadInt16(pNativeData' 14);                      ext.cbSize = cbSize;                        ext.wValidBitsPerSample = Marshal.ReadInt16(pNativeData' 18);                      ext.dwChannelMask = (WaveMask)Marshal.ReadInt16(pNativeData' 20);                        // Read the Guid                      byte[] byteGuid = new byte[16];                      Marshal.Copy(new IntPtr(pNativeData.ToInt64() + 24)' byteGuid' 0' 16);                      ext.SubFormat = new Guid(byteGuid);                        ext.byteData = new byte[iExtraBytes];                      IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(WaveFormatExtensible)));                      Marshal.Copy(ip2' ext.byteData' 0' iExtraBytes);                        wfe = ext as WaveFormatEx;                  }              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,GetPtr,The following statement contains a magic number: if (this is BitmapInfoHeaderWithData)              {                  int iBitmapInfoHeaderSize = Marshal.SizeOf(typeof(BitmapInfoHeader));                    // BitmapInfoHeaderWithData - Have to copy the array too                  BitmapInfoHeaderWithData pData = this as BitmapInfoHeaderWithData;                    // Account for copying the array.  This may result in us allocating more bytes than we                  // need (if cbSize < IntPtr.Size)' but it prevents us from overrunning the buffer.                  int iUseSize = Math.Max(pData.bmiColors.Length * 4' IntPtr.Size);                    ip = Marshal.AllocCoTaskMem(iBitmapInfoHeaderSize + iUseSize);                    Marshal.StructureToPtr(pData' ip' false);                    IntPtr ip2 = new IntPtr(ip.ToInt64() + iBitmapInfoHeaderSize);                  Marshal.Copy(pData.bmiColors' 0' ip2' pData.bmiColors.Length);              }              else if (this is BitmapInfoHeader)              {                  int iBitmapInfoHeaderSize = Marshal.SizeOf(typeof(BitmapInfoHeader));                    // BitmapInfoHeader - just do a copy                  ip = Marshal.AllocCoTaskMem(iBitmapInfoHeaderSize);                  Marshal.StructureToPtr(this as BitmapInfoHeader' ip' false);              }              else              {                  Debug.Assert(false' "Shouldn't ever get here");                  ip = IntPtr.Zero;              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: biBitCount = Marshal.ReadInt16(pNativeData' 14);
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: biCompression = Marshal.ReadInt32(pNativeData' 16);
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: biClrUsed = Marshal.ReadInt32(pNativeData' 32);
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (biCompression == 3) // BI_BITFIELDS              {                  iEntries = 3;              }              else if (biClrUsed > 0)              {                  iEntries = biClrUsed;              }              else if (biBitCount <= 8)              {                  iEntries = 1 << biBitCount;              }              else              {                  iEntries = 0;              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (biCompression == 3) // BI_BITFIELDS              {                  iEntries = 3;              }              else if (biClrUsed > 0)              {                  iEntries = biClrUsed;              }              else if (biBitCount <= 8)              {                  iEntries = 1 << biBitCount;              }              else              {                  iEntries = 0;              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (biCompression == 3) // BI_BITFIELDS              {                  iEntries = 3;              }              else if (biClrUsed > 0)              {                  iEntries = biClrUsed;              }              else if (biBitCount <= 8)              {                  iEntries = 1 << biBitCount;              }              else              {                  iEntries = 0;              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,BitmapInfoHeader,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,PtrToBMI,The following statement contains a magic number: if (iEntries == 0)              {                  // Create a simple BitmapInfoHeader struct                  bmi = new BitmapInfoHeader();                  Marshal.PtrToStructure(pNativeData' bmi);              }              else              {                  BitmapInfoHeaderWithData ext = new BitmapInfoHeaderWithData();                    ext.Size = Marshal.ReadInt32(pNativeData' 0);                  ext.Width = Marshal.ReadInt32(pNativeData' 4);                  ext.Height = Marshal.ReadInt32(pNativeData' 8);                  ext.Planes = Marshal.ReadInt16(pNativeData' 12);                  ext.BitCount = Marshal.ReadInt16(pNativeData' 14);                  ext.Compression = Marshal.ReadInt32(pNativeData' 16);                  ext.ImageSize = Marshal.ReadInt32(pNativeData' 20);                  ext.XPelsPerMeter = Marshal.ReadInt32(pNativeData' 24);                  ext.YPelsPerMeter = Marshal.ReadInt32(pNativeData' 28);                  ext.ClrUsed = Marshal.ReadInt32(pNativeData' 32);                  ext.ClrImportant = Marshal.ReadInt32(pNativeData' 36);                    bmi = ext as BitmapInfoHeader;                    ext.bmiColors = new int[iEntries];                  IntPtr ip2 = new IntPtr(pNativeData.ToInt64() + Marshal.SizeOf(typeof(BitmapInfoHeader)));                  Marshal.Copy(ip2' ext.bmiColors' 0' iEntries);              }
Magic Number,MediaFoundation.Misc,PVMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalManagedToNative,The following statement contains a magic number: if (m_prop != null)              {                  // Release any memory currently allocated                  m_prop.Clear();                    // Create an appropriately sized buffer' blank it' and send it to                  // the marshaler to make the COM call with.                  int iSize = GetNativeDataSize();                  p = Marshal.AllocCoTaskMem(iSize);                    if (IntPtr.Size == 4)                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                  }                  else                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                      Marshal.WriteInt64(p' 16' 0);                  }              }              else              {                  p = IntPtr.Zero;              }
Magic Number,MediaFoundation.Misc,PVMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalManagedToNative,The following statement contains a magic number: if (m_prop != null)              {                  // Release any memory currently allocated                  m_prop.Clear();                    // Create an appropriately sized buffer' blank it' and send it to                  // the marshaler to make the COM call with.                  int iSize = GetNativeDataSize();                  p = Marshal.AllocCoTaskMem(iSize);                    if (IntPtr.Size == 4)                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                  }                  else                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                      Marshal.WriteInt64(p' 16' 0);                  }              }              else              {                  p = IntPtr.Zero;              }
Magic Number,MediaFoundation.Misc,PVMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalManagedToNative,The following statement contains a magic number: if (m_prop != null)              {                  // Release any memory currently allocated                  m_prop.Clear();                    // Create an appropriately sized buffer' blank it' and send it to                  // the marshaler to make the COM call with.                  int iSize = GetNativeDataSize();                  p = Marshal.AllocCoTaskMem(iSize);                    if (IntPtr.Size == 4)                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                  }                  else                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                      Marshal.WriteInt64(p' 16' 0);                  }              }              else              {                  p = IntPtr.Zero;              }
Magic Number,MediaFoundation.Misc,PVMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalManagedToNative,The following statement contains a magic number: if (m_prop != null)              {                  // Release any memory currently allocated                  m_prop.Clear();                    // Create an appropriately sized buffer' blank it' and send it to                  // the marshaler to make the COM call with.                  int iSize = GetNativeDataSize();                  p = Marshal.AllocCoTaskMem(iSize);                    if (IntPtr.Size == 4)                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                  }                  else                  {                      Marshal.WriteInt64(p' 0);                      Marshal.WriteInt64(p' 8' 0);                      Marshal.WriteInt64(p' 16' 0);                  }              }              else              {                  p = IntPtr.Zero;              }
Magic Number,MediaFoundation.Misc,GMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalManagedToNative,The following statement contains a magic number: if (m_ip == IntPtr.Zero)              {                  // If we are being called first from managed                    m_Obj = (Guid[])managedObj;                  // Freed in CleanUpManagedData                  m_ip = Marshal.AllocCoTaskMem(IntPtr.Size);              }              else              {                  // Return the value to native                  Guid [] mo = (Guid [])managedObj;                    IntPtr ip = Marshal.AllocCoTaskMem(16 * mo.Length);                  Marshal.WriteIntPtr(m_ip' ip);                    for (int x = 0; (mo[x] != Guid.Empty) && (x < mo.Length); x++)                  {                      Marshal.StructureToPtr(mo[x]' ip' false);                      ip = new IntPtr(ip.ToInt64() + 16);                  }              }
Magic Number,MediaFoundation.Misc,GMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalManagedToNative,The following statement contains a magic number: if (m_ip == IntPtr.Zero)              {                  // If we are being called first from managed                    m_Obj = (Guid[])managedObj;                  // Freed in CleanUpManagedData                  m_ip = Marshal.AllocCoTaskMem(IntPtr.Size);              }              else              {                  // Return the value to native                  Guid [] mo = (Guid [])managedObj;                    IntPtr ip = Marshal.AllocCoTaskMem(16 * mo.Length);                  Marshal.WriteIntPtr(m_ip' ip);                    for (int x = 0; (mo[x] != Guid.Empty) && (x < mo.Length); x++)                  {                      Marshal.StructureToPtr(mo[x]' ip' false);                      ip = new IntPtr(ip.ToInt64() + 16);                  }              }
Magic Number,MediaFoundation.Misc,GMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalNativeToManaged,The following statement contains a magic number: if (m_Obj != null)              {                  // Return the value to managed                  byte[] b = new byte[16];                  IntPtr pBuff = Marshal.ReadIntPtr(pNativeData);                  for (int x = 0; x < m_Obj.Length; x++)                  {                      Marshal.Copy(pBuff' b' 0' 16);                      m_Obj[x] = new Guid(b);                        pBuff = new IntPtr(pBuff.ToInt64() + 16);                  }                    Marshal.FreeCoTaskMem(Marshal.ReadIntPtr(pNativeData));              }              else              {                  // If we are being called first from native                  m_ip = pNativeData;                  return new Guid[30];              }
Magic Number,MediaFoundation.Misc,GMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalNativeToManaged,The following statement contains a magic number: if (m_Obj != null)              {                  // Return the value to managed                  byte[] b = new byte[16];                  IntPtr pBuff = Marshal.ReadIntPtr(pNativeData);                  for (int x = 0; x < m_Obj.Length; x++)                  {                      Marshal.Copy(pBuff' b' 0' 16);                      m_Obj[x] = new Guid(b);                        pBuff = new IntPtr(pBuff.ToInt64() + 16);                  }                    Marshal.FreeCoTaskMem(Marshal.ReadIntPtr(pNativeData));              }              else              {                  // If we are being called first from native                  m_ip = pNativeData;                  return new Guid[30];              }
Magic Number,MediaFoundation.Misc,GMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalNativeToManaged,The following statement contains a magic number: if (m_Obj != null)              {                  // Return the value to managed                  byte[] b = new byte[16];                  IntPtr pBuff = Marshal.ReadIntPtr(pNativeData);                  for (int x = 0; x < m_Obj.Length; x++)                  {                      Marshal.Copy(pBuff' b' 0' 16);                      m_Obj[x] = new Guid(b);                        pBuff = new IntPtr(pBuff.ToInt64() + 16);                  }                    Marshal.FreeCoTaskMem(Marshal.ReadIntPtr(pNativeData));              }              else              {                  // If we are being called first from native                  m_ip = pNativeData;                  return new Guid[30];              }
Magic Number,MediaFoundation.Misc,GMarshaler,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\MediaFoundation\MFUtils.cs,MarshalNativeToManaged,The following statement contains a magic number: if (m_Obj != null)              {                  // Return the value to managed                  byte[] b = new byte[16];                  IntPtr pBuff = Marshal.ReadIntPtr(pNativeData);                  for (int x = 0; x < m_Obj.Length; x++)                  {                      Marshal.Copy(pBuff' b' 0' 16);                      m_Obj[x] = new Guid(b);                        pBuff = new IntPtr(pBuff.ToInt64() + 16);                  }                    Marshal.FreeCoTaskMem(Marshal.ReadIntPtr(pNativeData));              }              else              {                  // If we are being called first from native                  m_ip = pNativeData;                  return new Guid[30];              }
Magic Number,Emby.Theater.DirectShow.Window,NativeWindowMethods,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Window\WindowMethods.cs,SetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)              {                  // use SetWindowLong                  Int32 tempResult = IntSetWindowLong(hWnd' nIndex' IntPtrToInt32(dwNewLong));                  error = Marshal.GetLastWin32Error();                  result = new IntPtr(tempResult);              }              else              {                  // use SetWindowLongPtr                  result = IntSetWindowLongPtr(hWnd' nIndex' dwNewLong);                  error = Marshal.GetLastWin32Error();              }
Duplicate Code,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 43)' (25' 44)' (26' 45)' (27' 46)' (28' 47)' (29' 48)' (30' 49)' (31' 50)' (32' 51)' (33' 52)' (34' 53)' (35' 54)' (36' 55)' (37' 56)' (38' 57)' (39' 58)' (40' 59)' (41' 60)' (42' 61)' (43' 62)' (44' 63)' (45' 64)' (46' 65)' (47' 66)' (48' 67)' (49' 68)' (50' 69)' (51' 70)' (52' 71)' (53' 72)' (54' 73)' (55' 74)' (56' 75)' (57' 76)' (58' 77)' (59' 78)' (60' 79)' (61' 80)' (62' 81)' (63' 82)' (64' 83)' (65' 84)' (66' 85)' (67' 86)' (68' 87)' (69' 88)' (70' 89)' (71' 90)' (72' 91)' (73' 92)' (74' 93)' (75' 94)' (76' 95)' (77' 96)' (78' 97)' (79' 98)' (80' 99)' (81' 100)' (82' 101)' (83' 102)' (84' 103)' (85' 104)' (86' 105)' (87' 106)' (88' 107)' (89' 108)' (90' 109)' (91' 110)' (92' 111)' (93' 112)' (94' 113)' (95' 114)' (96' 115)' (97' 116)' (98' 117)' (99' 118)' (100' 119)' (101' 120)' (102' 121)' (103' 122)' (104' 123)' (105' 124)' (106' 125)' (107' 126)' (108' 127)' (109' 128)' (110' 129)' (111' 130)' (112' 131))
Duplicate Code,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 130)' (25' 131))
Duplicate Code,Emby.Theater.DirectShow.Configuration,SplitterConfiguration,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\Configuration\DirectShowPlayerConfiguration.cs,SetDefaults,The method contains a code clone-set at the following line numbers (starting from the method definition): ((24' 43)' (26' 45)' (27' 46)' (28' 47)' (29' 48)' (30' 49)' (31' 50)' (32' 51)' (33' 52)' (34' 53)' (35' 54)' (36' 55)' (37' 56)' (38' 57)' (39' 58)' (40' 59)' (41' 60)' (42' 61)' (43' 62)' (44' 63)' (45' 64)' (46' 65)' (47' 66)' (48' 67)' (49' 68)' (50' 69)' (51' 70)' (52' 71)' (53' 72)' (54' 73)' (55' 74)' (56' 75)' (57' 76)' (58' 77)' (59' 78)' (60' 79)' (61' 80)' (62' 81)' (63' 82)' (64' 83)' (65' 84)' (66' 85)' (67' 86)' (68' 87)' (69' 88)' (70' 89)' (71' 90)' (72' 91)' (73' 92)' (74' 93)' (75' 94)' (76' 95)' (77' 96)' (78' 97)' (79' 98)' (80' 99)' (81' 100)' (82' 101)' (83' 102)' (84' 103)' (85' 104)' (86' 105)' (87' 106)' (88' 107)' (89' 108)' (90' 109)' (91' 110)' (92' 111)' (93' 112)' (94' 113)' (95' 114)' (96' 115)' (97' 116)' (98' 117)' (99' 118)' (100' 119)' (101' 120)' (102' 121)' (103' 122)' (104' 123)' (105' 124)' (106' 125)' (107' 126)' (108' 127)' (109' 128)' (110' 129)' (111' 130)' (112' 131))
Missing Default,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following switch statement is missing a default case: switch (levels)                                              {                                                  case MFNominalRange.MFNominalRange_0_255:                                                      msett.SetString("levels"' "PC Levels");                                                      break;                                                  case MFNominalRange.MFNominalRange_16_235:                                                      msett.SetString("levels"' "TV Levels");                                                      break;                                              }
Missing Default,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,RenderStreams,The following switch statement is missing a default case: switch (_config.AudioConfig.Renderer)                              {                                  case AudioRendererChoice.Reclock:                                      try                                      {                                          _reclockAudioRenderer = new ReclockAudioRenderer();                                          var aRenderer = _reclockAudioRenderer as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "Reclock Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                                _logger.Debug("Added reclock audio renderer");                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding reclock filter"' ex);                                      }                                      break;                                  case AudioRendererChoice.WASAPI:                                      try                                      {                                          _wasapiAR = URCOMLoader.Instance.GetObject(typeof(MPAudioFilter).GUID' true);                                          var aRenderer = _wasapiAR as DirectShowLib.IBaseFilter;                                          if (aRenderer != null)                                          {                                              hr = m_graph.AddFilter(aRenderer' "WASAPI Audio Renderer");                                              DsError.ThrowExceptionForHR(hr);                                              useDefaultAudioRenderer = false;                                              _logger.Debug("Added WASAPI audio renderer");                                                IMPAudioRendererConfig arSett = aRenderer as IMPAudioRendererConfig;                                              if (arSett != null)                                              {                                                  arSett.SetInt(MPARSetting.WASAPI_MODE' (int)AUDCLNT_SHAREMODE.EXCLUSIVE);                                                  arSett.SetBool(MPARSetting.WASAPI_EVENT_DRIVEN' _config.AudioConfig.UseWasapiEventMode);                                                  _logger.Debug("Set WASAPI use event mode: {0}"' _config.AudioConfig.UseWasapiEventMode);                                                  arSett.SetString(MPARSetting.SETTING_AUDIO_DEVICE' _config.AudioConfig.AudioDevice);                                                  _logger.Debug("Set WASAPI audio device: {0}"' _config.AudioConfig.AudioDevice);                                                  SpeakerConfig sc = SpeakerConfig.Stereo; //use stereo for maxium compat                                                  Enum.TryParse<SpeakerConfig>(_config.AudioConfig.SpeakerLayout' out sc);                                                  arSett.SetInt(MPARSetting.SPEAKER_CONFIG' (int)sc);                                                  _logger.Debug("Set WASAPI speaker config: {0}"' sc);                                                  //audSett.SetSpeakerMatchOutput(true);                                                  arSett.SetBool(MPARSetting.ALLOW_BITSTREAMING' true);                                                  arSett.SetInt(MPARSetting.USE_FILTERS' _config.AudioConfig.WasapiARFilters);                                                  _logger.Debug("Set WASAPI filter config: {0}"' _config.AudioConfig.WasapiARFilters);                                                  AC3Encoding a3 = (AC3Encoding)_config.AudioConfig.Ac3EncodingMode;                                                  arSett.SetInt(MPARSetting.AC3_ENCODING' (int)a3);                                                  _logger.Debug("Set WASAPI AC3 encoding: {0}"' a3);                                                  arSett.SetBool(MPARSetting.ENABLE_TIME_STRETCHING' _config.AudioConfig.EnableTimeStretching);                                                  _logger.Debug("Set WASAPI use time stretching: {0}"' _config.AudioConfig.EnableTimeStretching);                                                  arSett.SetInt(MPARSetting.OUTPUT_BUFFER_LENGTH' _config.AudioConfig.OutputBufferSize);                                                  _logger.Debug("Set WASAPI buffer: {0}"' _config.AudioConfig.OutputBufferSize);                                              }                                          }                                      }                                      catch (Exception ex)                                      {                                          _logger.ErrorException("Error adding WASAPI audio filter"' ex);                                      }                                      break;                              }
Missing Default,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,SetAspectRatio,The following switch statement is missing a default case: switch (_iVideoScaling)                      {                          case VideoScalingScheme.FROMINSIDE:                              zoomMode = "touchInside";                              break;                          case VideoScalingScheme.FROMOUTSIDE:                              zoomMode = "touchOutside";                              break;                          case VideoScalingScheme.STRETCH:                              zoomMode = "stretch";                              break;                      }
Missing Default,Emby.Theater.DirectShow,DirectShowPlayer,C:\repos\MediaBrowser_MediaBrowser.Theater\Emby.Theater.DirectShow\DirectShowPlayer.cs,HandleDvdEvent,The following switch statement is missing a default case: switch (evCode)                      {                          case EventCode.DvdCurrentHmsfTime:                              byte[] ati = BitConverter.GetBytes(evParam1.ToInt32());                              var currnTime = new DvdHMSFTimeCode();                              currnTime.bHours = ati[0];                              currnTime.bMinutes = ati[1];                              currnTime.bSeconds = ati[2];                              currnTime.bFrames = ati[3];                              //UpdateMainTitle();                              break;                          case EventCode.DvdChapterStart:                              //currnChapter = evParam1.ToInt32();                              //UpdateMainTitle();                              break;                          case EventCode.DvdTitleChange:                              //currnTitle = evParam1.ToInt32();                              //UpdateMainTitle();                              break;                          case EventCode.DvdDomainChange:                              //currnDomain = (DvdDomain)evParam1;                              //UpdateMainTitle();                              break;                          case EventCode.DvdCmdStart:                              break;                          case EventCode.DvdCmdEnd:                              OnDvdCmdComplete(evParam1' evParam2);                              break;                          case EventCode.DvdStillOn:                              if (evParam1 == IntPtr.Zero)                                  _dvdMenuMode = DvdMenuMode.Buttons;                              else                                  _dvdMenuMode = DvdMenuMode.Still;                              break;                          case EventCode.DvdStillOff:                              if (_dvdMenuMode == DvdMenuMode.Still)                                  _dvdMenuMode = DvdMenuMode.No;                              break;                          case EventCode.DvdButtonChange:                              if (evParam1.ToInt32() <= 0)                                  _dvdMenuMode = DvdMenuMode.No;                              else                                  _dvdMenuMode = DvdMenuMode.Buttons;                              break;                          case EventCode.DvdNoFpPgc:                              IDvdCmd icmd;                                if (_mDvdControl != null)                                  hr = _mDvdControl.PlayTitle(1' DvdCmdFlags.None' out icmd);                              break;                      }
